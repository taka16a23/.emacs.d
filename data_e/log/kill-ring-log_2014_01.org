
* Wed 01 Jan 2014 10:04:09 PM JST
pykeybind
* Wed 01 Jan 2014 10:04:10 PM JST
import pykeybind
* Wed 01 Jan 2014 10:06:57 PM JST
python-keybinder
* Thu 02 Jan 2014 06:21:56 AM JST
http://www-inst.eecs.berkeley.edu/~cs61a/sp12/book/
* Thu 02 Jan 2014 06:24:47 AM JST
interprettre
* Thu 02 Jan 2014 11:08:31 AM JST
hello
* Thu 02 Jan 2014 11:15:19 AM JST
s
* Thu 02 Jan 2014 11:15:19 AM JST
time.s
* Thu 02 Jan 2014 11:18:22 AM JST
20
* Thu 02 Jan 2014 11:18:25 AM JST
20
* Thu 02 Jan 2014 11:18:27 AM JST
20)
* Thu 02 Jan 2014 11:19:25 AM JST
yahoo'
* Thu 02 Jan 2014 11:20:47 AM JST
pri
* Thu 02 Jan 2014 11:20:47 AM JST
text pri
* Thu 02 Jan 2014 11:53:35 AM JST
curses 
* Thu 02 Jan 2014 11:56:26 AM JST
Shell
* Thu 02 Jan 2014 12:02:44 PM JST
write
* Thu 02 Jan 2014 12:02:52 PM JST

* Thu 02 Jan 2014 12:02:54 PM JST
hello
* Thu 02 Jan 2014 12:02:59 PM JST

* Thu 02 Jan 2014 12:03:02 PM JST
write
* Thu 02 Jan 2014 12:09:10 PM JST
pass
* Thu 02 Jan 2014 12:09:25 PM JST
#     sys.stdout.write('\b' + i + '\b' * len(i))
#     sys.stdout.flush()

* Thu 02 Jan 2014 12:10:19 PM JST
def reprint(str_):
    r"""SUMMARY

    reprint(str_)

    @Arguments:
    - `str_`:

    @Return:
    """
    sys.stdout.write(str_ + ('\b' * len(str_)))
    sys.stdout.flush()
* Thu 02 Jan 2014 12:10:49 PM JST

* Thu 02 Jan 2014 12:10:50 PM JST

* Thu 02 Jan 2014 12:10:50 PM JST
from sys import 

* Thu 02 Jan 2014 12:12:06 PM JST
hello
* Thu 02 Jan 2014 12:12:46 PM JST
 + ('\b' * len(str_))
* Thu 02 Jan 2014 12:14:00 PM JST
hello
* Thu 02 Jan 2014 12:14:40 PM JST
yahoo
* Thu 02 Jan 2014 12:15:43 PM JST

* Thu 02 Jan 2014 12:15:45 PM JST
hello
* Thu 02 Jan 2014 12:16:11 PM JST
'\b' * len(str_)
* Thu 02 Jan 2014 12:17:16 PM JST

* Thu 02 Jan 2014 12:17:17 PM JST

* Thu 02 Jan 2014 12:17:17 PM JST
    # _sys.stdout.write('\b' * len(str_))

* Thu 02 Jan 2014 12:23:34 PM JST
Chapter
* Thu 02 Jan 2014 12:27:26 PM JST
svn co http://svn.thepentest.com/fasttrack/
* Thu 02 Jan 2014 12:28:38 PM JST
thepentest.com
* Thu 02 Jan 2014 12:49:39 PM JST
http://inst.eecs.berkeley.edu/~cs61a/fa11/shakespeare.txt
* Thu 02 Jan 2014 12:59:44 PM JST
dir
* Thu 02 Jan 2014 12:59:44 PM JST
path.dir
* Thu 02 Jan 2014 12:59:45 PM JST
os.path.dir
* Thu 02 Jan 2014 01:00:47 PM JST
'shakespeare.txt'
* Thu 02 Jan 2014 01:01:16 PM JST

* Thu 02 Jan 2014 01:01:16 PM JST

* Thu 02 Jan 2014 01:01:16 PM JST
print(__file__)

* Thu 02 Jan 2014 01:18:19 PM JST
pass
* Thu 02 Jan 2014 01:18:44 PM JST

* Thu 02 Jan 2014 01:18:44 PM JST

* Thu 02 Jan 2014 01:18:44 PM JST
sa = MySampleData()

* Thu 02 Jan 2014 01:22:53 PM JST
http://www.stanford.edu/class/cs101/code-introduction.html
* Thu 02 Jan 2014 02:56:23 PM JST
impor
* Thu 02 Jan 2014 03:09:30 PM JST
Search
* Thu 02 Jan 2014 03:10:29 PM JST
over
* Thu 02 Jan 2014 03:46:45 PM JST
2
* Thu 02 Jan 2014 03:46:45 PM JST
2 + 2
* Thu 02 Jan 2014 04:04:43 PM JST
Local assignment
* Thu 02 Jan 2014 04:12:26 PM JST
import 
* Thu 02 Jan 2014 04:12:56 PM JST
hello
* Thu 02 Jan 2014 04:13:17 PM JST
hello
* Thu 02 Jan 2014 04:13:19 PM JST
world
* Thu 02 Jan 2014 04:14:50 PM JST
use 
* Thu 02 Jan 2014 04:14:50 PM JST
expected use 
* Thu 02 Jan 2014 04:15:02 PM JST
>
* Thu 02 Jan 2014 04:19:29 PM JST

* Thu 02 Jan 2014 04:19:29 PM JST

* Thu 02 Jan 2014 04:19:29 PM JST
    assert islist(initval) or initval is None

* Thu 02 Jan 2014 04:19:33 PM JST
None
* Thu 02 Jan 2014 04:19:33 PM JST
initval=None
* Thu 02 Jan 2014 04:19:41 PM JST
>>> 
* Thu 02 Jan 2014 04:20:13 PM JST
wordlist, append = list_append()
* Thu 02 Jan 2014 04:20:56 PM JST
[0, 1, 2, 3, 4]
* Thu 02 Jan 2014 04:21:01 PM JST
>>> 
* Thu 02 Jan 2014 04:21:10 PM JST
[0, 1, 2, 3, 4]
* Thu 02 Jan 2014 04:21:21 PM JST
SUMMARY
* Thu 02 Jan 2014 04:22:01 PM JST
    
* Thu 02 Jan 2014 04:25:35 PM JST
def absolute_value(x):
        """Compute abs(x)."""
        if x > 0:
            return x
        elif x == 0:
            return 0
        else:
            return -x
* Thu 02 Jan 2014 05:14:41 PM JST
XGrabKey
* Thu 02 Jan 2014 06:42:45 PM JST
XGrabKey
* Thu 02 Jan 2014 06:44:25 PM JST
split
* Thu 02 Jan 2014 06:46:09 PM JST
2014-01-02-111440.junk.py
* Thu 02 Jan 2014 07:01:47 PM JST
2014-01-01-220339.junk.py
* Thu 02 Jan 2014 07:03:46 PM JST
2013-12-31-234739.junk.py
* Fri 03 Jan 2014 06:18:58 AM JST
def world(func):
    r"""SUMMARY
    
    world(func)
    
    @Arguments:
    - `func`:
    
    @Return:
    """
    func()
* Fri 03 Jan 2014 07:00:37 AM JST
Chapter
* Fri 03 Jan 2014 07:11:28 AM JST
Compilers: Principles, Techniques, and Tools
* Fri 03 Jan 2014 07:12:09 AM JST
D
* Fri 03 Jan 2014 07:12:09 AM JST
性能差があるのでD
* Fri 03 Jan 2014 07:14:28 AM JST
恐竜本
* Fri 03 Jan 2014 07:27:04 AM JST
Operating System Concepts
* Fri 03 Jan 2014 11:29:54 AM JST
implementspy
* Fri 03 Jan 2014 11:54:07 AM JST
if :
* Fri 03 Jan 2014 12:02:51 PM JST
None
* Fri 03 Jan 2014 12:02:52 PM JST
default=None
* Fri 03 Jan 2014 12:02:59 PM JST
default
* Fri 03 Jan 2014 12:03:09 PM JST
x, y, z, 
* Fri 03 Jan 2014 12:06:18 PM JST
    def __init__(self, value, default=None):
        r"""SUMMARY

        __init__(value, default)

        @Arguments:
        - `value`:
        - `default`:

        @Return:
        """
        list.__init__(self, value)
        self._default = default

* Fri 03 Jan 2014 12:06:25 PM JST
    def __getitem__(self, val):
        r"""
        """

        try:
            return super(TesList, self).__getitem__(val)
        except IndexError:
            return self._default

* Fri 03 Jan 2014 12:07:09 PM JST
TesList
* Fri 03 Jan 2014 12:07:45 PM JST
in 
* Fri 03 Jan 2014 12:07:47 PM JST
exists in 
* Fri 03 Jan 2014 12:07:48 PM JST
not exists in 
* Fri 03 Jan 2014 12:09:30 PM JST
fimport
* Fri 03 Jan 2014 01:27:20 PM JST
PySequence_List
* Fri 03 Jan 2014 01:29:53 PM JST
PyList_Check
* Fri 03 Jan 2014 01:32:09 PM JST
PyList_Type
* Fri 03 Jan 2014 01:45:06 PM JST
INT_MAX
* Fri 03 Jan 2014 01:45:19 PM JST
2147483647
* Fri 03 Jan 2014 01:45:43 PM JST

* Fri 03 Jan 2014 01:45:43 PM JST

* Fri 03 Jan 2014 01:46:39 PM JST
for i in 
* Sat 04 Jan 2014 02:50:39 AM JST
          
* Sat 04 Jan 2014 03:25:03 AM JST
index()
* Sat 04 Jan 2014 04:26:53 AM JST
#!/bin/sh

python_path="/usr/bin/python"
scripts="/root/.zsh/scripts/icedove.py"

[ -x $python_path ] || exit 0
[ -x $scripts ] || exit 0

$python_path $scripts $@

exit 0
QU /root/.zsh/scripts# 
* Sat 04 Jan 2014 04:29:09 AM JST

* Sat 04 Jan 2014 04:29:09 AM JST

* Sat 04 Jan 2014 04:29:09 AM JST
QU /root/.zsh/scripts# 
* Sat 04 Jan 2014 04:29:18 AM JST
forma
* Sat 04 Jan 2014 04:29:18 AM JST
t
* Sat 04 Jan 2014 05:43:13 AM JST
PyList_Size
* Sat 04 Jan 2014 05:51:54 AM JST
listappend
* Sat 04 Jan 2014 12:57:36 PM JST
pcm.my_card {
   type hw
   card 0
   # mmap_emulation true
}

pcm.dmixed {
   type dmix
   ipc_key 1024
   #  ipc_key_add_uid false   # let multiple users share
   #  ipc_perm 0666           # IPC permissions for multi user sharing (octal, default 0600)
   slave {
   pcm "my_card"
   #   rate 48000
   #   period_size 512
   }
}

pcm.dsnooped {
   type dsnoop
   ipc_key 2048
   slave {
   pcm "my_card"
   #   rate 48000
   #   period_size 128
   }
}

pcm.asymed {
   type asym
   playback.pcm "dmixed"
   capture.pcm "dsnooped"
}

pcm.pasymed {
   type plug
   slave.pcm "asymed"
}

pcm.dsp0 {
   type plug
   slave.pcm "asymed"
}

pcm.!default {
   type plug
   slave.pcm "asymed"
}
* Sat 04 Jan 2014 12:59:48 PM JST
pcm.my_card {
   type hw
   card 1
   # mmap_emulation true
}

pcm.dmixed {
   type dmix
   ipc_key 1024
   #  ipc_key_add_uid false   # let multiple users share
   #  ipc_perm 0666           # IPC permissions for multi user sharing (octal, default 0600)
   slave {
   pcm "my_card"
   #   rate 48000
   #   period_size 512
   }
}

pcm.dsnooped {
   type dsnoop
   ipc_key 2048
   slave {
   pcm "my_card"
   #   rate 48000
   #   period_size 128
   }
}

pcm.asymed {
   type asym
   playback.pcm "dmixed"
   capture.pcm "dsnooped"
}

pcm.pasymed {
   type plug
   slave.pcm "asymed"
}

pcm.dsp0 {
   type plug
   slave.pcm "asymed"
}

pcm.!default {
   type plug
   slave.pcm "asymed"
}

* Sat 04 Jan 2014 01:17:54 PM JST

* Sat 04 Jan 2014 01:17:54 PM JST

* Sat 04 Jan 2014 01:17:54 PM JST
    Option         "RANDR" "Enable"

* Sat 04 Jan 2014 01:18:53 PM JST
Option         "RandRRotation" "on"
* Sat 04 Jan 2014 01:25:26 PM JST

* Sat 04 Jan 2014 01:25:26 PM JST

* Sat 04 Jan 2014 01:25:26 PM JST
    Option         "RandRRotation" "on"

* Sat 04 Jan 2014 01:25:27 PM JST

* Sat 04 Jan 2014 01:25:27 PM JST

* Sat 04 Jan 2014 01:25:27 PM JST
    Option         "RandRRotation" "on"

* Sat 04 Jan 2014 01:25:31 PM JST

* Sat 04 Jan 2014 01:25:31 PM JST

* Sat 04 Jan 2014 01:25:31 PM JST
    Option         "RandRRotation" "on"

* Sat 04 Jan 2014 01:32:08 PM JST

* Sat 04 Jan 2014 01:32:08 PM JST

* Sat 04 Jan 2014 01:32:08 PM JST
    Option "RANDR" "Disable"

* Sat 04 Jan 2014 04:04:14 PM JST
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# $Id: thunar.py 88 2013-12-07 10:11:33Z t1 $
# $Revision: 88 $
# $Date: 2013-12-07 19:11:33 +0900 (Sat, 07 Dec 2013) $
# $Author: t1 $
# $LastChangedBy: t1 $
# $LastChangedDate: 2013-12-07 19:11:33 +0900 (Sat, 07 Dec 2013) $
r""" thunar -- thunar info

$Revision: 88 $

"""

from time import sleep
import os
import sys as _sys
import subprocess as sbp

import wm

# for debug
import cgitb as _cgitb
_cgitb.enable(format='text')


__revision__ = '$Revision: 88 $'
__version__ = '0.1.0'


BIN = 'thunar'
BINPATH = '/usr/bin/thunar'
CLASS = 'Thunar'
PSNAME = 'Thunar'

MYENV = os.environ
MYENV['LANG'] = 'en_US.UTF-8'


def openthunar(path):
* Sat 04 Jan 2014 04:09:11 PM JST
['heart', 'diamond', 'spade', 'club']
* Sat 04 Jan 2014 04:09:56 PM JST
nest[0] = suits 
* Sat 04 Jan 2014 04:38:38 PM JST
UnicodeData.txt
* Sat 04 Jan 2014 04:42:04 PM JST
UnicodeData.txt
* Sat 04 Jan 2014 04:42:44 PM JST
http://www.google.com/url?q=ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt&sa=U&ei=UrvHUoL-IYbkkgXx-oCQDQ&ved=0CB0QFjAA&usg=AFQjCNHRBIdTkz7FJcjTiq7tynMHEFkgDQ
* Sat 04 Jan 2014 04:44:33 PM JST
JAPANESE POST OFFICE
* Sat 04 Jan 2014 04:44:59 PM JST
JAPANESE 
* Sat 04 Jan 2014 04:45:13 PM JST
elementsu
* Sat 04 Jan 2014 04:47:01 PM JST
'POSTAL MARK'
* Sat 04 Jan 2014 04:48:39 PM JST
unicodedata.name(u'〒')
Out[14]: 'POSTAL MARK'
* Sat 04 Jan 2014 04:49:09 PM JST
>>> unicodedata.name(u'〒')
* Sat 04 Jan 2014 04:49:28 PM JST
'POSTAL MARK'
* Sat 04 Jan 2014 04:49:40 PM JST
unicodedata.lookup('POSTAL MARK')
* Sat 04 Jan 2014 04:49:55 PM JST
u'\u3012'
* Sat 04 Jan 2014 04:51:29 PM JST
>>> unicodedata.decimal(u'3')  # decimal
3
>>> unicodedata.digit(u'\u2462')  # ③ digit
3
>>> unicodedata.numeric(u'\u215b')  # 1/8 numeric
0.125
>>> unicodedata.numeric(u'Ⅳ')  # これも numeric
4.0
>>> unicodedata.numeric(u'三', False)  # 漢数字はない

* Sat 04 Jan 2014 04:51:32 PM JST
>>> unicodedata.decimal(u'3')  # decimal
3
>>> unicodedata.digit(u'\u2462')  # ③ digit
3
>>> unicodedata.numeric(u'\u215b')  # 1/8 numeric
0.125
>>> unicodedata.numeric(u'Ⅳ')  # これも numeric
4.0
>>> unicodedata.numeric(u'三', False)  # 漢数字はない
False

* Sat 04 Jan 2014 04:51:42 PM JST
>>> unicodedata.lookup('POSTAL MARK')
u'\u3012'
* Sat 04 Jan 2014 04:52:12 PM JST
>>> unicodedata.lookup('POSTAL MARK')
u'\u3012'

>>> unicodedata.decimal(u'3')  # decimal
3
>>> unicodedata.digit(u'\u2462')  # ③ digit
3
>>> unicodedata.numeric(u'\u215b')  # 1/8 numeric
0.125
>>> unicodedata.numeric(u'Ⅳ')  # これも numeric
4.0
>>> unicodedata.numeric(u'三', False)  # 漢数字はない
False

* Sat 04 Jan 2014 04:52:23 PM JST
>>> unicodedata.name(u'〒')
'POSTAL MARK'

* Sat 04 Jan 2014 05:15:48 PM JST
Py_UNICODE_TONUMERIC
* Sat 04 Jan 2014 05:16:41 PM JST
_PyUnicode_ToNumeric
* Sat 04 Jan 2014 05:17:28 PM JST
_PyUnicodeUCS2_ToNumeric
* Sat 04 Jan 2014 05:49:02 PM JST
Inc__ 
* Sat 04 Jan 2014 05:51:26 PM JST
condor
* Sat 04 Jan 2014 10:29:47 PM JST
Realpy
* Sat 04 Jan 2014 10:31:13 PM JST
Single-dispatch
* Sat 04 Jan 2014 10:31:23 PM JST
Single-dispatch
* Sat 04 Jan 2014 10:31:26 PM JST
dispatch
* Sat 04 Jan 2014 11:16:31 PM JST

* Sat 04 Jan 2014 11:16:31 PM JST

* Sat 04 Jan 2014 11:16:31 PM JST


* Sat 04 Jan 2014 11:16:56 PM JST
isCallable,
* Sat 04 Jan 2014 11:29:50 PM JST
key
* Sat 04 Jan 2014 11:32:06 PM JST

* Sat 04 Jan 2014 11:32:06 PM JST

* Sat 04 Jan 2014 11:32:06 PM JST
        if not self._check_values():

* Sat 04 Jan 2014 11:33:29 PM JST
False
* Sat 04 Jan 2014 11:33:29 PM JST
return False
* Sat 04 Jan 2014 11:33:43 PM JST

* Sat 04 Jan 2014 11:33:43 PM JST

* Sat 04 Jan 2014 11:33:43 PM JST
        return True

* Sat 04 Jan 2014 11:34:29 PM JST
Dispatcher
* Sat 04 Jan 2014 11:36:36 PM JST
Dispatcher
* Sat 04 Jan 2014 11:39:17 PM JST
raise NotCallableError(value)
* Sat 04 Jan 2014 11:39:21 PM JST
value
* Sat 04 Jan 2014 11:42:02 PM JST
hello
* Sat 04 Jan 2014 11:55:47 PM JST
dummy
* Sat 04 Jan 2014 11:59:48 PM JST
hello
* Sat 04 Jan 2014 11:59:50 PM JST
list
* Sun 05 Jan 2014 12:00:40 AM JST
hello
* Sun 05 Jan 2014 12:03:34 AM JST
        if not iscallable(func):
            raise NotCallableError(func)

* Sun 05 Jan 2014 12:10:13 AM JST
and
* Sun 05 Jan 2014 12:10:17 AM JST
or
* Sun 05 Jan 2014 12:13:42 AM JST
list
* Sun 05 Jan 2014 06:10:36 AM JST
i
* Sun 05 Jan 2014 06:10:37 AM JST
表示についてi
* Sun 05 Jan 2014 06:13:14 AM JST
表示について
* Sun 05 Jan 2014 01:13:31 PM JST
Old-style class defined
* Sun 05 Jan 2014 01:21:57 PM JST
['__class__',
 '__delattr__',
 '__dict__',
 '__doc__',
 '__format__',
 '__getattribute__',
 '__getitem__',
 '__getslice__',
 '__hash__',
 '__init__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__setstate__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__unicode__',
 'args',
 'message']

* Sun 05 Jan 2014 01:22:10 PM JST
['__class__',
 '__delattr__',
 '__dict__',
 '__doc__',
 '__format__',
 '__getattribute__',
 '__getitem__',
 '__getslice__',
 '__hash__',
 '__init__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__setstate__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__unicode__',
 'args',
 'message']

* Sun 05 Jan 2014 01:37:05 PM JST
Exception
* Sun 05 Jan 2014 01:42:15 PM JST
BaseException
 +-- SystemExit
 +-- KeyboardInterrupt
 +-- GeneratorExit
 +-- Exception
      +-- StopIteration
      +-- StandardError
      |    +-- BufferError
      |    +-- ArithmeticError
      |    |    +-- FloatingPointError
      |    |    +-- OverflowError
      |    |    +-- ZeroDivisionError
      |    +-- AssertionError
      |    +-- AttributeError
      |    +-- EnvironmentError
      |    |    +-- IOError
      |    |    +-- OSError
      |    |         +-- WindowsError (Windows)
      |    |         +-- VMSError (VMS)
      |    +-- EOFError
      |    +-- ImportError
      |    +-- LookupError
      |    |    +-- IndexError
      |    |    +-- KeyError
      |    +-- MemoryError
      |    +-- NameError
      |    |    +-- UnboundLocalError
      |    +-- ReferenceError
      |    +-- RuntimeError
      |    |    +-- NotImplementedError
      |    +-- SyntaxError
      |    |    +-- IndentationError
      |    |         +-- TabError
      |    +-- SystemError
      |    +-- TypeError
      |    +-- ValueError
      |         +-- UnicodeError
      |              +-- UnicodeDecodeError
      |              +-- UnicodeEncodeError
      |              +-- UnicodeTranslateError
      +-- Warning
           +-- DeprecationWarning
           +-- PendingDeprecationWarning
           +-- RuntimeWarning
           +-- SyntaxWarning
           +-- UserWarning
           +-- FutureWarning
       +-- ImportWarning
       +-- UnicodeWarning
       +-- BytesWarning

* Sun 05 Jan 2014 01:43:21 PM JST
BaseException
* Sun 05 Jan 2014 01:43:33 PM JST
BaseException
 +-- SystemExit
 +-- KeyboardInterrupt
 +-- GeneratorExit
 +-- Exception
      +-- StopIteration
      +-- StandardError
      |    +-- BufferError
      |    +-- ArithmeticError
      |    |    +-- FloatingPointError
      |    |    +-- OverflowError
      |    |    +-- ZeroDivisionError
      |    +-- AssertionError
      |    +-- AttributeError
      |    +-- EnvironmentError
      |    |    +-- IOError
      |    |    +-- OSError
      |    |         +-- WindowsError (Windows)
      |    |         +-- VMSError (VMS)
      |    +-- EOFError
      |    +-- ImportError
      |    +-- LookupError
      |    |    +-- IndexError
      |    |    +-- KeyError
      |    +-- MemoryError
      |    +-- NameError
      |    |    +-- UnboundLocalError
      |    +-- ReferenceError
      |    +-- RuntimeError
      |    |    +-- NotImplementedError
      |    +-- SyntaxError
      |    |    +-- IndentationError
      |    |         +-- TabError
      |    +-- SystemError
      |    +-- TypeError
      |    +-- ValueError
      |         +-- UnicodeError
      |              +-- UnicodeDecodeError
      |              +-- UnicodeEncodeError
      |              +-- UnicodeTranslateError
      +-- Warning
           +-- DeprecationWarning
           +-- PendingDeprecationWarning
           +-- RuntimeWarning
           +-- SyntaxWarning
           +-- UserWarning
           +-- FutureWarning
       +-- ImportWarning
       +-- UnicodeWarning
       +-- BytesWarning

* Sun 05 Jan 2014 01:43:40 PM JST
Base
* Sun 05 Jan 2014 01:45:48 PM JST
Exception
* Sun 05 Jan 2014 01:46:14 PM JST
Exception
* Sun 05 Jan 2014 01:46:33 PM JST
Exception
* Sun 05 Jan 2014 01:47:04 PM JST
Exception
* Sun 05 Jan 2014 01:48:26 PM JST
Exception
* Sun 05 Jan 2014 01:48:37 PM JST
Exception
* Sun 05 Jan 2014 01:48:52 PM JST
Exception
* Sun 05 Jan 2014 01:49:27 PM JST
Exception
* Sun 05 Jan 2014 01:49:31 PM JST
StandardError
* Sun 05 Jan 2014 02:37:48 PM JST
archive
* Sun 05 Jan 2014 02:37:48 PM JST
data/archive
* Sun 05 Jan 2014 02:39:56 PM JST
hello
* Sun 05 Jan 2014 02:43:24 PM JST
Standard
* Sun 05 Jan 2014 02:43:33 PM JST
exists
* Sun 05 Jan 2014 02:43:46 PM JST
if not os.path.exists('/data/archive'):
* Sun 05 Jan 2014 02:54:22 PM JST
'/data/archive'
* Sun 05 Jan 2014 03:03:42 PM JST

* Sun 05 Jan 2014 03:03:42 PM JST

* Sun 05 Jan 2014 03:03:42 PM JST
__all__ = [ '' ]

* Sun 05 Jan 2014 03:04:41 PM JST
class Timeout(Exception):
    r"""
    """

    def __init__(self, time):
        r"""
        """
        self._time = time


* Sun 05 Jan 2014 03:05:17 PM JST

* Sun 05 Jan 2014 03:05:17 PM JST

* Sun 05 Jan 2014 03:05:17 PM JST
__all__ = [ '' ]

* Sun 05 Jan 2014 03:06:53 PM JST
excep
* Sun 05 Jan 2014 03:07:38 PM JST

* Sun 05 Jan 2014 03:07:38 PM JST

* Sun 05 Jan 2014 03:07:38 PM JST
__all__ = [ '' ]

* Sun 05 Jan 2014 03:08:56 PM JST
errorlib.baseexceptions.errors
* Sun 05 Jan 2014 03:09:10 PM JST
errors
* Sun 05 Jan 2014 03:09:50 PM JST
errors
* Sun 05 Jan 2014 03:12:08 PM JST
baseexceptions
* Sun 05 Jan 2014 03:13:03 PM JST
exceptions
* Sun 05 Jan 2014 03:13:06 PM JST
exceptions
* Sun 05 Jan 2014 03:13:32 PM JST

* Sun 05 Jan 2014 03:13:33 PM JST

* Sun 05 Jan 2014 03:13:35 PM JST
errors
* Sun 05 Jan 2014 03:18:23 PM JST

* Sun 05 Jan 2014 03:18:23 PM JST

* Sun 05 Jan 2014 03:18:23 PM JST
__all__ = ['Timeout']

* Sun 05 Jan 2014 03:23:42 PM JST

* Sun 05 Jan 2014 03:23:42 PM JST

* Sun 05 Jan 2014 03:23:42 PM JST
from errorlib import *

* Sun 05 Jan 2014 03:24:10 PM JST
from errorlib 
* Sun 05 Jan 2014 03:26:41 PM JST
exceptions
* Sun 05 Jan 2014 03:26:45 PM JST

* Sun 05 Jan 2014 03:26:47 PM JST
import
* Sun 05 Jan 2014 03:28:31 PM JST

* Sun 05 Jan 2014 03:28:35 PM JST
standarderrors
* Sun 05 Jan 2014 03:31:23 PM JST

* Sun 05 Jan 2014 03:31:23 PM JST

* Sun 05 Jan 2014 03:31:23 PM JST
__all__ = [ '' ]

* Sun 05 Jan 2014 03:42:15 PM JST
os.
* Sun 05 Jan 2014 03:44:30 PM JST
_os.execl(_sys.executable, )
* Sun 05 Jan 2014 03:46:58 PM JST
_os.EX_OK
* Sun 05 Jan 2014 03:47:02 PM JST
EX_OK
* Sun 05 Jan 2014 03:47:02 PM JST
_os.EX_OK
* Sun 05 Jan 2014 03:52:36 PM JST
executable
* Sun 05 Jan 2014 03:52:36 PM JST
_sys.executable
* Sun 05 Jan 2014 03:52:37 PM JST
executable=_sys.executable
* Sun 05 Jan 2014 03:55:39 PM JST
cmdlines
* Sun 05 Jan 2014 03:58:34 PM JST
argvar
* Sun 05 Jan 2014 03:58:34 PM JST
sys.argvar
* Sun 05 Jan 2014 03:59:11 PM JST
_sys.executable
* Sun 05 Jan 2014 04:03:38 PM JST

* Sun 05 Jan 2014 04:03:38 PM JST

* Sun 05 Jan 2014 04:03:38 PM JST
    print(_sys.argv)

* Sun 05 Jan 2014 04:03:39 PM JST

* Sun 05 Jan 2014 04:03:39 PM JST

* Sun 05 Jan 2014 04:03:39 PM JST
    print(argv)

* Sun 05 Jan 2014 04:03:40 PM JST
    print(argv)

* Sun 05 Jan 2014 04:03:40 PM JST
    print(argv)
    print(_sys.executable)

* Sun 05 Jan 2014 04:03:41 PM JST

* Sun 05 Jan 2014 04:03:41 PM JST

* Sun 05 Jan 2014 04:03:41 PM JST
    argv = _sys.argv[:]

* Sun 05 Jan 2014 04:03:42 PM JST

* Sun 05 Jan 2014 04:03:42 PM JST

* Sun 05 Jan 2014 04:03:43 PM JST
    print(cmdlines)

* Sun 05 Jan 2014 04:06:30 PM JST
_os.EX_OK
* Sun 05 Jan 2014 04:06:36 PM JST
_sys.exit(_os.EX_OK)
* Sun 05 Jan 2014 04:06:53 PM JST

* Sun 05 Jan 2014 04:06:53 PM JST

* Sun 05 Jan 2014 04:06:53 PM JST
    try:

* Sun 05 Jan 2014 04:06:55 PM JST

* Sun 05 Jan 2014 04:06:55 PM JST

* Sun 05 Jan 2014 04:06:55 PM JST
    except _sbp.CalledProcessError, err:

* Sun 05 Jan 2014 04:15:20 PM JST
Popen
* Sun 05 Jan 2014 04:15:24 PM JST

* Sun 05 Jan 2014 04:15:24 PM JST

* Sun 05 Jan 2014 04:15:24 PM JST
    process.communicate()

* Sun 05 Jan 2014 04:15:26 PM JST
process = 
* Sun 05 Jan 2014 04:15:27 PM JST
_sbp.call(cmdlines)
* Sun 05 Jan 2014 04:17:43 PM JST

* Sun 05 Jan 2014 04:17:43 PM JST

* Sun 05 Jan 2014 04:17:43 PM JST
from time import sleep

* Sun 05 Jan 2014 04:18:08 PM JST
thunar
* Sun 05 Jan 2014 04:18:24 PM JST
Popen
* Sun 05 Jan 2014 04:21:34 PM JST
retcode = 
* Sun 05 Jan 2014 04:22:02 PM JST
retcode
* Sun 05 Jan 2014 04:23:11 PM JST
check_ca
* Sun 05 Jan 2014 04:32:33 PM JST
/dir 
* Sun 05 Jan 2014 06:22:30 PM JST
code
* Sun 05 Jan 2014 06:25:33 PM JST
_sys.version_info.major
* Sun 05 Jan 2014 06:25:39 PM JST
3
* Sun 05 Jan 2014 06:25:53 PM JST
sys.version_info.major 
* Sun 05 Jan 2014 06:28:10 PM JST
print 
* Sun 05 Jan 2014 06:28:22 PM JST
repr(
* Sun 05 Jan 2014 10:34:00 PM JST
NotImplementedError
* Sun 05 Jan 2014 10:36:27 PM JST
'not supported {} environment'.format(os.name)
* Sun 05 Jan 2014 10:36:41 PM JST
'not supported {.name} environment'.format(os)
* Sun 05 Jan 2014 10:37:17 PM JST
'not supported {.name} environment'.format(os)
* Sun 05 Jan 2014 10:45:25 PM JST
raise NotImplementedError('not supported {.name} environment'.format(_os))
* Sun 05 Jan 2014 11:05:44 PM JST
flycheck-isactive-flag
* Sun 05 Jan 2014 11:12:50 PM JST
flycheck-mode
* Sun 05 Jan 2014 11:15:09 PM JST
(assoc-default 'flycheck-mode (buffer-local-variables))
* Sun 05 Jan 2014 11:15:46 PM JST
(flycheck-mode -1)
* Sun 05 Jan 2014 11:20:16 PM JST
(defvar flycheck-isactive-flag nil)
     (defadvice yas/expand-snippet
       (before inhibit-flycheck-syntax-checking-while-expanding-snippet activate)
       (setq flycheck-isactive-flag
             (or flycheck-isactive-flag
                 (assoc-default 'flycheck-mode (buffer-local-variables))))
       (when flycheck-isactive-flag
         (flycheck-mode -1)))
* Sun 05 Jan 2014 11:21:20 PM JST
(when flycheck-isactive-flag
                    (flycheck-mode 1)
                    (setq flycheck-isactive-flag nil))
* Sun 05 Jan 2014 11:21:31 PM JST
recover
* Sun 05 Jan 2014 11:21:32 PM JST
recover-flycheck-after-exit-from-yas
* Sun 05 Jan 2014 11:22:40 PM JST
flycheck-isactive-flag
* Sun 05 Jan 2014 11:22:58 PM JST
recover-flycheck-after-exit-from-yas
* Sun 05 Jan 2014 11:23:04 PM JST
`recover-flycheck-after-exit-from-yas'
* Mon 06 Jan 2014 05:23:30 AM JST
finalize
* Mon 06 Jan 2014 05:40:26 AM JST
2009
* Mon 06 Jan 2014 05:54:32 AM JST
    import easygui
    easygui.msgbox(str(err), title='Error')

* Mon 06 Jan 2014 05:55:17 AM JST
    import easygui
    easygui.msgbox(str(err), title='Error')

* Mon 06 Jan 2014 05:56:01 AM JST
easygui.msgbox(str(err), title='Error')
* Mon 06 Jan 2014 12:04:04 PM JST

* Mon 06 Jan 2014 12:04:04 PM JST

* Mon 06 Jan 2014 12:04:04 PM JST
    if not os.path.exists(path):

* Mon 06 Jan 2014 12:12:35 PM JST
path.
* Mon 06 Jan 2014 12:14:50 PM JST

* Mon 06 Jan 2014 12:14:50 PM JST

* Mon 06 Jan 2014 12:14:50 PM JST
        return os.path.abspath(path)

* Mon 06 Jan 2014 12:17:11 PM JST
safe 
* Mon 06 Jan 2014 12:18:43 PM JST
SUMMARY
* Mon 06 Jan 2014 01:01:49 PM JST
os.strerror(e
* Mon 06 Jan 2014 01:03:45 PM JST
errorcode
* Mon 06 Jan 2014 01:03:55 PM JST
errorcode
* Mon 06 Jan 2014 01:13:17 PM JST
os.mkdir(path, mode)
* Mon 06 Jan 2014 02:01:08 PM JST
def tes(ar='tes'):
   .....:     if False:
   .....:         tes()
   .....:     print locals()
* Mon 06 Jan 2014 02:01:17 PM JST
.....:     
* Mon 06 Jan 2014 02:01:18 PM JST
.....:     
* Mon 06 Jan 2014 02:01:19 PM JST
.....:     
* Mon 06 Jan 2014 02:02:45 PM JST
index
* Mon 06 Jan 2014 02:02:50 PM JST
False
* Mon 06 Jan 2014 02:03:05 PM JST
num !=
* Mon 06 Jan 2014 03:23:37 PM JST
(string-match "^\\(is\\|has\\)" "isdir")
* Mon 06 Jan 2014 03:24:11 PM JST
(string-match "^\\(is\\|has\\)" "diisr")
* Mon 06 Jan 2014 03:24:13 PM JST
    
* Mon 06 Jan 2014 03:24:36 PM JST
  
* Mon 06 Jan 2014 03:24:39 PM JST
    
* Mon 06 Jan 2014 03:24:50 PM JST
"isdir"
* Mon 06 Jan 2014 03:24:52 PM JST
(if (string-match "^\\(is\\|has\\)" text) "(bool)")
* Mon 06 Jan 2014 04:36:50 PM JST
general
* Mon 06 Jan 2014 05:10:25 PM JST
言語仕様の
* Mon 06 Jan 2014 05:16:54 PM JST
Documents
* Mon 06 Jan 2014 05:18:38 PM JST
inclusive
* Mon 06 Jan 2014 05:23:09 PM JST
http://www.google.com/search?q=d+lang+source&hl=en&ie=utf-8&oe=utf-8#li_1
* Mon 06 Jan 2014 05:26:26 PM JST
http://golang.org/src/lib9/#plusone
* Tue 07 Jan 2014 06:04:41 AM JST
>>> class Exp(object):
        """A call expression in Calculator."""
        def __init__(self, operator, operands):
            self.operator = operator
            self.operands = operands
        def __repr__(self):
            return 'Exp({0}, {1})'.format(repr(self.operator), repr(self.operands))
        def __str__(self):
            operand_strs = ', '.join(map(str, self.operands))
            return '{0}({1})'.format(self.operator, operand_strs)

* Tue 07 Jan 2014 06:04:55 AM JST
python
* Tue 07 Jan 2014 06:05:23 AM JST
>>> def calc_eval(exp):
        """Evaluate a Calculator expression."""
        if type(exp) in (int, float):
            return exp
        elif type(exp) == Exp:
            arguments = list(map(calc_eval, exp.operands))
            return calc_apply(exp.operator, arguments)

* Tue 07 Jan 2014 06:05:29 AM JST
>>> 
* Tue 07 Jan 2014 06:05:43 AM JST
>>> from operator import mul
>>> from functools import reduce
>>> def calc_apply(operator, args):
        """Apply the named operator to a list of args."""
        if operator in ('add', '+'):
            return sum(args)
        if operator in ('sub', '-'):
            if len(args) == 0:
                raise TypeError(operator + ' requires at least 1 argument')
            if len(args) == 1:
                return -args[0]
            return sum(args[:1] + [-arg for arg in args[1:]])
        if operator in ('mul', '*'):
            return reduce(mul, args, 1)
        if operator in ('div', '/'):
            if len(args) != 2:
                raise TypeError(operator + ' requires exactly 2 arguments')
            numer, denom = args
            return numer/denom

* Tue 07 Jan 2014 06:05:52 AM JST
>>> 
* Tue 07 Jan 2014 06:05:52 AM JST
>>> 
* Tue 07 Jan 2014 06:05:52 AM JST
>>> 
* Tue 07 Jan 2014 06:06:01 AM JST
from operator import mul
from functools import reduce

* Tue 07 Jan 2014 06:13:43 AM JST
>>> def calc_parse(line):
        """Parse a line of calculator input and return an expression tree."""
        tokens = tokenize(line)
        expression_tree = analyze(tokens)
        if len(tokens) > 0:
            raise SyntaxError('Extra token(s): ' + ' '.join(tokens))
        return expression_tree

* Tue 07 Jan 2014 06:13:50 AM JST
>>> 
* Tue 07 Jan 2014 06:19:01 AM JST
>>> def tokenize(line):
        """Convert a string into a list of tokens."""
        spaced = line.replace('(',' ( ').replace(')',' ) ').replace(',', ' , ')
        return spaced.split()

* Tue 07 Jan 2014 06:19:05 AM JST
>>> 
* Tue 07 Jan 2014 06:25:43 AM JST
>>> def analyze(tokens):
        """Create a tree of nested lists from a sequence of tokens."""
        token = analyze_token(tokens.pop(0))
        if type(token) in (int, float):
            return token
        else:
            tokens.pop(0)  # Remove (
            return Exp(token, analyze_operands(tokens))

>>> def analyze_operands(tokens):
        """Read a list of comma-separated operands."""
        operands = []
        while tokens[0] != ')':
            if operands:
                tokens.pop(0)  # Remove ,
            operands.append(analyze(tokens))
        tokens.pop(0)  # Remove )
        return operands

* Tue 07 Jan 2014 06:25:49 AM JST
>>> 
* Tue 07 Jan 2014 06:25:53 AM JST
>>> 
* Tue 07 Jan 2014 06:27:28 AM JST
>>> def analyze_token(token):
        """Return the value of token if it can be analyzed as a number, or token."""
        try:
            return int(token)
        except (TypeError, ValueError):
            try:
                return float(token)
            except (TypeError, ValueError):
                return token

* Tue 07 Jan 2014 06:27:34 AM JST
>>> 
* Tue 07 Jan 2014 07:47:20 AM JST
                
* Tue 07 Jan 2014 07:50:01 AM JST
        
* Tue 07 Jan 2014 07:50:50 AM JST
                              
* Tue 07 Jan 2014 07:51:11 AM JST
                              
* Tue 07 Jan 2014 07:54:34 AM JST
                
* Tue 07 Jan 2014 07:55:59 AM JST
                
* Tue 07 Jan 2014 07:59:48 AM JST
            
* Tue 07 Jan 2014 07:59:54 AM JST
                
* Tue 07 Jan 2014 08:00:21 AM JST
            
* Tue 07 Jan 2014 08:00:55 AM JST
        
* Tue 07 Jan 2014 08:01:30 AM JST
                
* Tue 07 Jan 2014 08:02:57 AM JST
                
* Tue 07 Jan 2014 08:03:36 AM JST
            
* Tue 07 Jan 2014 08:12:11 AM JST
append = candlist.append
* Tue 07 Jan 2014 08:18:32 AM JST
In [210]: /dis.dis tes2
  2           0 LOAD_GLOBAL              0 (os)
              3 LOAD_ATTR                1 (path)
              6 LOAD_ATTR                2 (join)
              9 LOAD_GLOBAL              0 (os)
             12 LOAD_ATTR                1 (path)
             15 LOAD_ATTR                2 (join)
             18 LOAD_CONST               1 ('/tmp')
             21 LOAD_CONST               2 ('tes')
             24 CALL_FUNCTION            2
             27 LOAD_CONST               3 ('world')
             30 CALL_FUNCTION            2
             33 RETURN_VALUE        

In [211]: /dis.dis tes3
  2           0 LOAD_GLOBAL              0 (os)
              3 LOAD_ATTR                1 (path)
              6 LOAD_ATTR                2 (join)
              9 STORE_FAST               0 (join)

  3          12 LOAD_FAST                0 (join)
             15 LOAD_FAST                0 (join)
             18 LOAD_CONST               1 ('/tmp')
             21 LOAD_CONST               2 ('tes')
             24 CALL_FUNCTION            2
             27 LOAD_CONST               3 ('world')
             30 CALL_FUNCTION            2
             33 RETURN_VALUE        


* Tue 07 Jan 2014 08:23:17 AM JST
return 
* Tue 07 Jan 2014 08:24:45 AM JST
In [213]: /dis.dis test01
 12           0 LOAD_GLOBAL              0 (os)
              3 LOAD_ATTR                1 (path)
              6 LOAD_ATTR                2 (join)

 13           9 LOAD_GLOBAL              0 (os)
             12 LOAD_ATTR                1 (path)
             15 LOAD_ATTR                2 (join)

 14          18 LOAD_GLOBAL              0 (os)
             21 LOAD_ATTR                1 (path)
             24 LOAD_ATTR                2 (join)
             27 LOAD_CONST               1 ('/tmp')
             30 LOAD_CONST               2 ('tes')
             33 CALL_FUNCTION            2

 15          36 LOAD_CONST               3 ('world')
             39 CALL_FUNCTION            2

 16          42 LOAD_CONST               4 ('yahoo')
             45 CALL_FUNCTION            2
             48 RETURN_VALUE        

In [214]: /dis.dis test02
 26           0 LOAD_GLOBAL              0 (os)
              3 LOAD_ATTR                1 (path)
              6 LOAD_ATTR                2 (join)
              9 STORE_FAST               0 (join)

 27          12 LOAD_FAST                0 (join)
             15 LOAD_FAST                0 (join)
             18 LOAD_FAST                0 (join)
             21 LOAD_CONST               1 ('/tmp')
             24 LOAD_CONST               2 ('tes')
             27 CALL_FUNCTION            2
             30 LOAD_CONST               3 ('world')
             33 CALL_FUNCTION            2
             36 LOAD_CONST               4 ('yahoo')
             39 CALL_FUNCTION            2
             42 RETURN_VALUE        

* Tue 07 Jan 2014 08:32:08 AM JST
In [213]: /dis.dis test01
 12           0 LOAD_GLOBAL              0 (os)
              3 LOAD_ATTR                1 (path)
              6 LOAD_ATTR                2 (join)

 13           9 LOAD_GLOBAL              0 (os)
             12 LOAD_ATTR                1 (path)
             15 LOAD_ATTR                2 (join)

 14          18 LOAD_GLOBAL              0 (os)
             21 LOAD_ATTR                1 (path)
             24 LOAD_ATTR                2 (join)
             27 LOAD_CONST               1 ('/tmp')
             30 LOAD_CONST               2 ('tes')
             33 CALL_FUNCTION            2

 15          36 LOAD_CONST               3 ('world')
             39 CALL_FUNCTION            2

 16          42 LOAD_CONST               4 ('yahoo')
             45 CALL_FUNCTION            2
             48 RETURN_VALUE        


* Tue 07 Jan 2014 08:32:38 AM JST
>>> def tes():
...         join = os.path.join
...         return join('/tmp', 'tes')

* Tue 07 Jan 2014 08:32:46 AM JST
>>> 
* Tue 07 Jan 2014 08:32:47 AM JST
...
* Tue 07 Jan 2014 08:32:48 AM JST
...
* Tue 07 Jan 2014 08:33:04 AM JST
>>> def tes3():
...         join = os.path.join
...         return join(join('/tmp', 'tes'), 'world')

* Tue 07 Jan 2014 08:33:08 AM JST
>>> 
* Tue 07 Jan 2014 08:33:10 AM JST
... 
* Tue 07 Jan 2014 08:33:11 AM JST
...
* Tue 07 Jan 2014 08:33:26 AM JST
>>> def tes2():
...         return os.path.join(os.path.join('/tmp', 'tes'), 'world')

* Tue 07 Jan 2014 08:33:31 AM JST
>>> 
* Tue 07 Jan 2014 08:33:32 AM JST
...
* Tue 07 Jan 2014 08:33:43 AM JST
In [210]: /dis.dis tes2
2           0 LOAD_GLOBAL              0 (os)
3 LOAD_ATTR                1 (path)
6 LOAD_ATTR                2 (join)
9 LOAD_GLOBAL              0 (os)
12 LOAD_ATTR                1 (path)
15 LOAD_ATTR                2 (join)
18 LOAD_CONST               1 ('/tmp')
21 LOAD_CONST               2 ('tes')
24 CALL_FUNCTION            2
27 LOAD_CONST               3 ('world')
30 CALL_FUNCTION            2
33 RETURN_VALUE        

* Tue 07 Jan 2014 08:33:54 AM JST
In [211]: /dis.dis tes3
2           0 LOAD_GLOBAL              0 (os)
3 LOAD_ATTR                1 (path)
6 LOAD_ATTR                2 (join)
9 STORE_FAST               0 (join)

3          12 LOAD_FAST                0 (join)
15 LOAD_FAST                0 (join)
18 LOAD_CONST               1 ('/tmp')
21 LOAD_CONST               2 ('tes')
24 CALL_FUNCTION            2
27 LOAD_CONST               3 ('world')
30 CALL_FUNCTION            2
33 RETURN_VALUE        

* Tue 07 Jan 2014 08:43:37 AM JST
    
* Tue 07 Jan 2014 08:43:41 AM JST
next
* Tue 07 Jan 2014 08:44:24 AM JST
    
* Tue 07 Jan 2014 08:44:31 AM JST
    
* Tue 07 Jan 2014 08:46:43 AM JST
path.
* Tue 07 Jan 2014 08:46:46 AM JST
path.
* Tue 07 Jan 2014 08:46:46 AM JST
_os.path.
* Tue 07 Jan 2014 08:46:49 AM JST
_os.
* Tue 07 Jan 2014 08:49:00 AM JST
'result {0}'.format
* Tue 07 Jan 2014 08:51:46 AM JST
path.
* Tue 07 Jan 2014 08:51:46 AM JST
os.path.
* Tue 07 Jan 2014 08:51:48 AM JST
shutil.
* Tue 07 Jan 2014 08:53:25 AM JST
format
* Tue 07 Jan 2014 08:53:26 AM JST
format
* Tue 07 Jan 2014 08:53:26 AM JST
format
* Tue 07 Jan 2014 08:53:26 AM JST
format
* Tue 07 Jan 2014 08:53:26 AM JST
format
* Tue 07 Jan 2014 08:53:26 AM JST
format
* Tue 07 Jan 2014 08:53:26 AM JST
format
* Tue 07 Jan 2014 08:54:38 AM JST
str_.
* Tue 07 Jan 2014 08:54:38 AM JST
str_.
* Tue 07 Jan 2014 08:54:38 AM JST
str_.
* Tue 07 Jan 2014 08:54:38 AM JST
str_.
* Tue 07 Jan 2014 08:54:38 AM JST
str_.
* Tue 07 Jan 2014 08:54:38 AM JST
str_.
* Tue 07 Jan 2014 08:54:38 AM JST
str_.
* Tue 07 Jan 2014 08:57:37 AM JST
path.
* Tue 07 Jan 2014 08:57:37 AM JST
_os.path.
* Tue 07 Jan 2014 09:02:43 AM JST
fmt.
* Tue 07 Jan 2014 09:02:43 AM JST
fmt.
* Tue 07 Jan 2014 09:02:43 AM JST
fmt.
* Tue 07 Jan 2014 09:02:44 AM JST
fmt.
* Tue 07 Jan 2014 09:02:44 AM JST
fmt.
* Tue 07 Jan 2014 09:02:44 AM JST
fmt.
* Tue 07 Jan 2014 09:02:44 AM JST
fmt.
* Tue 07 Jan 2014 09:02:59 AM JST
str_.
* Tue 07 Jan 2014 09:02:59 AM JST
str_.
* Tue 07 Jan 2014 09:02:59 AM JST
str_.
* Tue 07 Jan 2014 09:02:59 AM JST
str_.
* Tue 07 Jan 2014 09:02:59 AM JST
str_.
* Tue 07 Jan 2014 09:02:59 AM JST
str_.
* Tue 07 Jan 2014 09:02:59 AM JST
str_.
* Tue 07 Jan 2014 09:04:54 AM JST
args.
* Tue 07 Jan 2014 09:04:57 AM JST
args.
* Tue 07 Jan 2014 09:04:59 AM JST
args.
* Tue 07 Jan 2014 09:05:01 AM JST
args.
* Tue 07 Jan 2014 09:05:03 AM JST
args.
* Tue 07 Jan 2014 09:05:05 AM JST
args.
* Tue 07 Jan 2014 09:05:07 AM JST
args.
* Tue 07 Jan 2014 09:06:38 AM JST
format
* Tue 07 Jan 2014 09:06:38 AM JST
format
* Tue 07 Jan 2014 09:06:38 AM JST
format
* Tue 07 Jan 2014 09:06:38 AM JST
format
* Tue 07 Jan 2014 09:06:56 AM JST
str_.
* Tue 07 Jan 2014 09:06:57 AM JST
str_.
* Tue 07 Jan 2014 09:06:57 AM JST
str_.
* Tue 07 Jan 2014 09:06:57 AM JST
str_.
* Tue 07 Jan 2014 09:10:01 AM JST
                
* Tue 07 Jan 2014 09:10:04 AM JST
                
* Tue 07 Jan 2014 09:10:06 AM JST
                
* Tue 07 Jan 2014 09:10:08 AM JST
                
* Tue 07 Jan 2014 09:10:10 AM JST
                
* Tue 07 Jan 2014 09:10:11 AM JST
                
* Tue 07 Jan 2014 09:10:14 AM JST
                
* Tue 07 Jan 2014 09:10:15 AM JST
                
* Tue 07 Jan 2014 09:10:17 AM JST
                
* Tue 07 Jan 2014 09:10:19 AM JST
                
* Tue 07 Jan 2014 09:10:21 AM JST
                
* Tue 07 Jan 2014 09:10:22 AM JST
                
* Tue 07 Jan 2014 09:10:24 AM JST
                
* Tue 07 Jan 2014 09:10:25 AM JST
                
* Tue 07 Jan 2014 09:10:27 AM JST
                
* Tue 07 Jan 2014 09:10:29 AM JST
                
* Tue 07 Jan 2014 09:11:35 AM JST
                
* Tue 07 Jan 2014 09:11:36 AM JST
                
* Tue 07 Jan 2014 09:13:28 AM JST
format
* Tue 07 Jan 2014 09:13:33 AM JST
format
* Tue 07 Jan 2014 09:13:35 AM JST
format
* Tue 07 Jan 2014 09:13:37 AM JST
format
* Tue 07 Jan 2014 09:13:40 AM JST
format
* Tue 07 Jan 2014 09:13:42 AM JST
format
* Tue 07 Jan 2014 09:15:09 AM JST
str_.
* Tue 07 Jan 2014 09:15:11 AM JST
str_.
* Tue 07 Jan 2014 09:15:13 AM JST
str_.
* Tue 07 Jan 2014 09:15:21 AM JST
str_.
* Tue 07 Jan 2014 09:21:29 AM JST
'{0: <14}: {1}'.format
* Tue 07 Jan 2014 09:22:19 AM JST

* Tue 07 Jan 2014 09:22:19 AM JST

* Tue 07 Jan 2014 09:22:19 AM JST
        fmt = '{0: <14}: {1}'.format

* Tue 07 Jan 2014 09:37:48 AM JST
[getattr([],
* Tue 07 Jan 2014 09:39:37 AM JST
dummy
* Tue 07 Jan 2014 09:41:29 AM JST
result.insert(0, list_)
* Tue 07 Jan 2014 10:18:43 AM JST
known_operators = ['add', 'sub', 'mul', 'div', '+', '-', '*', '/']
* Tue 07 Jan 2014 10:18:56 AM JST
>>> def analyze(tokens):
        """Create a tree of nested lists from a sequence of tokens."""
        assert_non_empty(tokens)
        token = analyze_token(tokens.pop(0))
        if type(token) in (int, float):
            return token
        if token in known_operators:
            if len(tokens) == 0 or tokens.pop(0) != '(':
                raise SyntaxError('expected ( after ' + token)
            return Exp(token, analyze_operands(tokens))
        else:
            raise SyntaxError('unexpected ' + token)

* Tue 07 Jan 2014 10:19:02 AM JST
>>> 
* Tue 07 Jan 2014 10:19:11 AM JST
>>> def assert_non_empty(tokens):
        """Raise an exception if tokens is empty."""
        if len(tokens) == 0:
            raise SyntaxError('unexpected end of line')

* Tue 07 Jan 2014 10:19:15 AM JST
>>> 
* Tue 07 Jan 2014 10:19:44 AM JST
>>> def analyze_operands(tokens):
        """Analyze a sequence of comma-separated operands."""
        assert_non_empty(tokens)
        operands = []
        while tokens[0] != ')':
            if operands and tokens.pop(0) != ',':
                raise SyntaxError('expected ,')
            operands.append(analyze(tokens))
            assert_non_empty(tokens)
        tokens.pop(0)  # Remove )
        return elements

* Tue 07 Jan 2014 10:19:59 AM JST
>>> 
* Tue 07 Jan 2014 10:21:24 AM JST
>>> def analyze_token(token):
        """Return the value of token if it can be analyzed as a number, or token."""
        try:
            return int(token)
        except (TypeError, ValueError):
            try:
                return float(token)
            except (TypeError, ValueError):
                return token

* Tue 07 Jan 2014 10:21:51 AM JST
operands
* Tue 07 Jan 2014 10:23:54 AM JST
http://www-inst.eecs.berkeley.edu/~cs61a/sp12/book/calc.py
* Tue 07 Jan 2014 10:24:37 AM JST
http://www-inst.eecs.berkeley.edu/~cs61a/su12/lab/lab12/calc.py
* Tue 07 Jan 2014 10:24:50 AM JST
"""Calculator

An interpreter for a calculator language using prefix-order call syntax.
Operator expressions must be simple operator names or symbols.  Operand
expressions are separated by commas.

Examples:
    calc> mul(1, 2, 3)
    6
    calc> add()
    0
    calc> add(2, div(4, 8))
    2.5
    calc> add
    SyntaxError: expected ( after add
    calc> div(5)
    TypeError: div requires exactly 2 arguments
    calc> div(1, 0)
    ZeroDivisionError: division by zero
    calc> ^DCalculation completed.
"""

from ucb import trace, main, interact
from functools import reduce
from operator import mul
try:
    import readline  # Enables access to previous expressions in the REPL
except ImportError:
    pass # Readline is not necessary; it's just a convenience

def read_eval_print_loop():
    """Run a read-eval-print loop for calculator."""
    while True:
        try:
            expression_tree = calc_parse(input('calc> '))
            print(calc_eval(expression_tree))
        except (SyntaxError, TypeError, ZeroDivisionError) as err:
            print(type(err).__name__ + ':', err)
        except (KeyboardInterrupt, EOFError):  # <Control>-D, etc.
            print('Calculation completed.')
            return

# Eval & Apply

class Exp(object):
    """A call expression in Calculator.
    
    >>> Exp('add', [1, 2])
    Exp('add', [1, 2])
    >>> str(Exp('add', [1, Exp('mul', [2, 3])]))
    'add(1, mul(2, 3))'
    """

    def __init__(self, operator, operands):
        self.operator = operator
        self.operands = operands

    def __repr__(self):
        return 'Exp({0}, {1})'.format(repr(self.operator), repr(self.operands))

    def __str__(self):
        operand_strs = ', '.join(map(str, self.operands))
        return '{0}({1})'.format(self.operator, operand_strs)

def calc_eval(exp):
    """Evaluate a Calculator expression.

    >>> calc_eval(Exp('add', [2, Exp('mul', [4, 6])]))
    26
    """
    if type(exp) in (int, float):
        return exp
    if type(exp) == Exp:
        arguments = list(map(calc_eval, exp.operands))
        return calc_apply(exp.operator, arguments)

def calc_apply(operator, args):
    """Apply the named operator to a list of args.
    
    >>> calc_apply('+', [1, 2, 3])
    6
    >>> calc_apply('-', [10, 1, 2, 3])
    4
    >>> calc_apply('*', [])
    1
    >>> calc_apply('/', [40, 5])
    8.0
    """
    if operator in ('add', '+'):
        return sum(args)
    if operator in ('sub', '-'):
        if len(args) == 0:
            raise TypeError(operator + 'requires at least 1 argument')
        if len(args) == 1:
            return -args[0]
        return sum(args[:1] + [-arg for arg in args[1:]])
    if operator in ('mul', '*'):
        return reduce(mul, args, 1)
    if operator in ('div', '/'):
        if len(args) != 2:
            raise TypeError(operator + ' requires exactly 2 arguments')
        numer, denom = args
        return numer/denom

# Parsing

def calc_parse(line):
    """Parse a line of calculator input and return an expression tree."""
    tokens = tokenize(line)
    expression_tree = analyze(tokens)
    if len(tokens) > 0:
        raise SyntaxError('Extra token(s): ' + ' '.join(tokens))
    return expression_tree

def tokenize(line):
    """Convert a string into a list of tokens.
    
    >>> tokenize('add(2, mul(4, 6))')
    ['add', '(', '2', ',', 'mul', '(', '4', ',', '6', ')', ')']
    """
    spaced = line.replace('(',' ( ').replace(')',' ) ').replace(',', ' , ')
    return spaced.split()

known_operators = ['add', 'sub', 'mul', 'div', '+', '-', '*', '/']

def analyze(tokens):
    """Create a tree of nested lists from a sequence of tokens.

    Operand expressions can be separated by commas, spaces, or both.
    
    >>> analyze(tokenize('add(2, mul(4, 6))'))
    Exp('add', [2, Exp('mul', [4, 6])])
    >>> analyze(tokenize('mul(add(2, mul(4, 6)), add(3, 5))'))
    Exp('mul', [Exp('add', [2, Exp('mul', [4, 6])]), Exp('add', [3, 5])])
    """
    assert_non_empty(tokens)
    token = analyze_token(tokens.pop(0))
    if type(token) in (int, float):
        return token
    if token in known_operators:
        if len(tokens) == 0 or tokens.pop(0) != '(':
            raise SyntaxError('expected ( after ' + token)
        return Exp(token, analyze_operands(tokens))
    else:
        raise SyntaxError('unexpected ' + token)

def analyze_operands(tokens):
    """Analyze a sequence of comma-separated operands."""
    assert_non_empty(tokens)
    operands = []
    while tokens[0] != ')':
        if operands and tokens.pop(0) != ',':
            raise SyntaxError('expected ,')
        operands.append(analyze(tokens))
        assert_non_empty(tokens)
    tokens.pop(0)  # Remove )
    return operands

def assert_non_empty(tokens):
    """Raise an exception if tokens is empty."""
    if len(tokens) == 0:
        raise SyntaxError('unexpected end of line')

def analyze_token(token):
    """Return the value of token if it can be analyzed as a number, or token.
    
    >>> analyze_token('12')
    12
    >>> analyze_token('7.5')
    7.5
    >>> analyze_token('add')
    'add'
    """
    try:
        return int(token)
    except (TypeError, ValueError):
        try:
            return float(token)
        except (TypeError, ValueError):
            return token

@main
def run():
    read_eval_print_loop()

* Tue 07 Jan 2014 10:37:07 AM JST
"""Calculator

An interpreter for a calculator language using prefix-order call syntax.
Operator expressions must be simple operator names or symbols.  Operand
expressions are separated by commas.

Examples:
    calc> mul(1, 2, 3)
    6
    calc> add()
    0
    calc> add(2, div(4, 8))
    2.5
    calc> add
    SyntaxError: expected ( after add
    calc> div(5)
    TypeError: div requires exactly 2 arguments
    calc> div(1, 0)
    ZeroDivisionError: division by zero
    calc> ^DCalculation completed.
"""

from ucb import trace, main, interact
from functools import reduce
from operator import mul
try:
    import readline  # Enables access to previous expressions in the REPL
except ImportError:
    pass # Readline is not necessary; it's just a convenience

def read_eval_print_loop():
    """Run a read-eval-print loop for calculator."""
    while True:
        try:
            expression_tree = calc_parse(input('calc> '))
            print(calc_eval(expression_tree))
        except (SyntaxError, TypeError, ZeroDivisionError) as err:
            print(type(err).__name__ + ':', err)
        except (KeyboardInterrupt, EOFError):  # <Control>-D, etc.
            print('Calculation completed.')
            return

# Eval & Apply

class Exp(object):
    """A call expression in Calculator.
    
    >>> Exp('add', [1, 2])
    Exp('add', [1, 2])
    >>> str(Exp('add', [1, Exp('mul', [2, 3])]))
    'add(1, mul(2, 3))'
    """

    def __init__(self, operator, operands):
        self.operator = operator
        self.operands = operands

    def __repr__(self):
        return 'Exp({0}, {1})'.format(repr(self.operator), repr(self.operands))

    def __str__(self):
        operand_strs = ', '.join(map(str, self.operands))
        return '{0}({1})'.format(self.operator, operand_strs)

def calc_eval(exp):
    """Evaluate a Calculator expression.

    >>> calc_eval(Exp('add', [2, Exp('mul', [4, 6])]))
    26
    """
    if type(exp) in (int, float):
        return exp
    if type(exp) == Exp:
        arguments = list(map(calc_eval, exp.operands))
        return calc_apply(exp.operator, arguments)

def calc_apply(operator, args):
    """Apply the named operator to a list of args.
    
    >>> calc_apply('+', [1, 2, 3])
    6
    >>> calc_apply('-', [10, 1, 2, 3])
    4
    >>> calc_apply('*', [])
    1
    >>> calc_apply('/', [40, 5])
    8.0
    """
    if operator in ('add', '+'):
        return sum(args)
    if operator in ('sub', '-'):
        if len(args) == 0:
            raise TypeError(operator + 'requires at least 1 argument')
        if len(args) == 1:
            return -args[0]
        return sum(args[:1] + [-arg for arg in args[1:]])
    if operator in ('mul', '*'):
        return reduce(mul, args, 1)
    if operator in ('div', '/'):
        if len(args) != 2:
            raise TypeError(operator + ' requires exactly 2 arguments')
        numer, denom = args
        return numer/denom

# Parsing

def calc_parse(line):
    """Parse a line of calculator input and return an expression tree."""
    tokens = tokenize(line)
    expression_tree = analyze(tokens)
    if len(tokens) > 0:
        raise SyntaxError('Extra token(s): ' + ' '.join(tokens))
    return expression_tree

def tokenize(line):
    """Convert a string into a list of tokens.
    
    >>> tokenize('add(2, mul(4, 6))')
    ['add', '(', '2', ',', 'mul', '(', '4', ',', '6', ')', ')']
    """
    spaced = line.replace('(',' ( ').replace(')',' ) ').replace(',', ' , ')
    return spaced.split()

known_operators = ['add', 'sub', 'mul', 'div', '+', '-', '*', '/']

def analyze(tokens):
    """Create a tree of nested lists from a sequence of tokens.

    Operand expressions can be separated by commas, spaces, or both.
    
    >>> analyze(tokenize('add(2, mul(4, 6))'))
    Exp('add', [2, Exp('mul', [4, 6])])
    >>> analyze(tokenize('mul(add(2, mul(4, 6)), add(3, 5))'))
    Exp('mul', [Exp('add', [2, Exp('mul', [4, 6])]), Exp('add', [3, 5])])
    """
    assert_non_empty(tokens)
    token = analyze_token(tokens.pop(0))
    if type(token) in (int, float):
        return token
    if token in known_operators:
        if len(tokens) == 0 or tokens.pop(0) != '(':
            raise SyntaxError('expected ( after ' + token)
        return Exp(token, analyze_operands(tokens))
    else:
        raise SyntaxError('unexpected ' + token)

def analyze_operands(tokens):
    """Analyze a sequence of comma-separated operands."""
    assert_non_empty(tokens)
    operands = []
    while tokens[0] != ')':
        if operands and tokens.pop(0) != ',':
            raise SyntaxError('expected ,')
        operands.append(analyze(tokens))
        assert_non_empty(tokens)
    tokens.pop(0)  # Remove )
    return operands

def assert_non_empty(tokens):
    """Raise an exception if tokens is empty."""
    if len(tokens) == 0:
        raise SyntaxError('unexpected end of line')

def analyze_token(token):
    """Return the value of token if it can be analyzed as a number, or token.
    
    >>> analyze_token('12')
    12
    >>> analyze_token('7.5')
    7.5
    >>> analyze_token('add')
    'add'
    """
    try:
        return int(token)
    except (TypeError, ValueError):
        try:
            return float(token)
        except (TypeError, ValueError):
            return token

@main
def run():
    read_eval_print_loop()

* Tue 07 Jan 2014 10:37:21 AM JST

* Tue 07 Jan 2014 10:37:21 AM JST

* Tue 07 Jan 2014 10:37:21 AM JST
@main

* Tue 07 Jan 2014 10:37:34 AM JST

* Tue 07 Jan 2014 10:37:34 AM JST

* Tue 07 Jan 2014 10:37:34 AM JST
from ucb import trace, main, interact

* Tue 07 Jan 2014 10:41:17 AM JST
QU /tmp/junk# input(
* Wed 08 Jan 2014 08:46:55 AM JST
UnicodeError
* Wed 08 Jan 2014 10:27:14 AM JST
raise NotCallableError(value)
* Wed 08 Jan 2014 10:31:31 AM JST
hello=
* Wed 08 Jan 2014 10:33:43 AM JST
Exception
* Wed 08 Jan 2014 10:34:52 AM JST
TypeError
* Wed 08 Jan 2014 10:44:38 AM JST
google
* Wed 08 Jan 2014 10:48:38 AM JST
        if not iscallable(val):
            raise NotCallableError(val)

* Wed 08 Jan 2014 10:59:04 AM JST
hello
* Thu 09 Jan 2014 12:03:58 AM JST
import
* Thu 09 Jan 2014 12:10:08 AM JST
False
* Thu 09 Jan 2014 12:10:08 AM JST
verbose=False
* Thu 09 Jan 2014 12:13:30 AM JST
t singledispatch
* Thu 09 Jan 2014 12:13:31 AM JST

* Thu 09 Jan 2014 12:13:31 AM JST

* Thu 09 Jan 2014 12:13:31 AM JST
import singledispatch

* Thu 09 Jan 2014 12:27:04 AM JST
    if _types.ListType != type(options):
        raise ValueError('Must be list {}'.format(options))

* Thu 09 Jan 2014 12:29:37 AM JST
@run.register(str)
def run_string(url, options=[]):
    r"""SUMMARY

    @Arguments:
    - `url`:
    - `options`:

    @Return: retruncode
    """
    if _types.ListType != type(options):
        raise ValueError('Must be list {}'.format(options))
    if _types.StringType == type(url):
        url = [url]
    return _sbp.Popen([CMD.get('google-chrome')] + options + url)

* Thu 09 Jan 2014 12:30:09 AM JST
    if _types.StringType == type(url):
        url = [url]

* Thu 09 Jan 2014 12:30:18 AM JST
@run.register(str)
def run_string(url, options=[]):
    r"""SUMMARY

    @Arguments:
    - `url`:
    - `options`:

    @Return: retruncode
    """
    if _types.ListType != type(options):
        raise ValueError('Must be list {}'.format(options))
    return _sbp.Popen([CMD.get('google-chrome')] + options + [url])

* Thu 09 Jan 2014 12:32:56 AM JST

* Thu 09 Jan 2014 12:32:56 AM JST

* Thu 09 Jan 2014 12:32:56 AM JST
# @run.register(str)

* Thu 09 Jan 2014 12:33:28 AM JST
options
* Thu 09 Jan 2014 12:39:08 AM JST
options=[]
* Thu 09 Jan 2014 12:39:37 AM JST
options = options or []
* Thu 09 Jan 2014 07:57:47 AM JST
WeakKeyDictionary?
* Thu 09 Jan 2014 07:58:12 AM JST
WeakValueDictionary?
* Thu 09 Jan 2014 07:58:16 AM JST
http://www.python.org/dev/peps/pep-0205/
* Thu 09 Jan 2014 08:11:02 AM JST
言ってみれば
* Thu 09 Jan 2014 08:29:35 AM JST
remove
* Thu 09 Jan 2014 08:49:46 AM JST
Dispatch
* Thu 09 Jan 2014 08:55:13 AM JST

* Thu 09 Jan 2014 08:55:13 AM JST

* Thu 09 Jan 2014 08:55:13 AM JST
            # 

* Thu 09 Jan 2014 09:13:24 AM JST
            for key, value in dict_.items():
                if iscallable(value):
                    self[key] = value
                else:
                    warnings.warn('Warning Skiped: {} not callable.'
                                  .format(value))

* Thu 09 Jan 2014 09:13:37 AM JST
dict_
* Thu 09 Jan 2014 09:22:26 AM JST
__missing__
* Thu 09 Jan 2014 09:34:12 AM JST

* Thu 09 Jan 2014 09:34:12 AM JST

* Thu 09 Jan 2014 09:34:12 AM JST
        if hasattr(self.__class__, '__missing__'):

* Thu 09 Jan 2014 09:34:16 AM JST

* Thu 09 Jan 2014 09:34:16 AM JST

* Thu 09 Jan 2014 09:34:16 AM JST
        raise KeyError(key)

* Thu 09 Jan 2014 09:34:18 AM JST
__class__
* Thu 09 Jan 2014 09:34:23 AM JST
self, 
* Thu 09 Jan 2014 09:35:56 AM JST
    def __getitem__(self, key):
        if key in self._data:
            return self._data[key]
        return self.__missing__(key)

    def __missing__(self, key):
        raise KeyError(key)


* Thu 09 Jan 2014 09:38:12 AM JST
    def __delitem__(self, key): del self.data[key]
* Thu 09 Jan 2014 09:39:06 AM JST
def __repr__(self): return repr(self.data)
* Thu 09 Jan 2014 09:39:40 AM JST
def __len__(self): return len(self.data)
* Thu 09 Jan 2014 09:40:03 AM JST

        self.data = {}
        if dict is not None:
            self.update(dict)
        if len(kwargs):
            self.update(kwargs)
    def __repr__(self): return repr(self.data)
    def __cmp__(self, dict):
        if isinstance(dict, UserDict):
            return cmp(self.data, dict.data)
        else:
            return cmp(self.data, dict)
    
* Thu 09 Jan 2014 09:40:08 AM JST
__hash__ = None # Avoid Py3k warning
* Thu 09 Jan 2014 09:41:27 AM JST
    def __cmp__(self, dict):
        if isinstance(dict, UserDict):
            return cmp(self.data, dict.data)
        else:
            return cmp(self.data, dict)

* Thu 09 Jan 2014 09:45:05 AM JST
        if isinstance(dict_, Dispatch):
            return cmp(self._data, dict_._data)

* Thu 09 Jan 2014 09:45:54 AM JST
def clear(self): self.data.clear()
* Thu 09 Jan 2014 09:48:22 AM JST
    def __contains__(self, key):
        return key in self.data

* Thu 09 Jan 2014 10:16:21 AM JST
return self.get(key, self._default_call)(*args, **kwargs)
* Thu 09 Jan 2014 10:23:00 AM JST
    def keys(self): return self.data.keys()
    def items(self): return self.data.items()
    def iteritems(self): return self.data.iteritems()
    def iterkeys(self): return self.data.iterkeys()
    def itervalues(self): return self.data.itervalues()
    def values(self): return self.data.values()
    def has_key(self, key): return key in self.data

* Thu 09 Jan 2014 10:35:08 AM JST
    def setdefault(self, key, failobj=None):
        if key not in self:
            self[key] = failobj
        return self[key]

* Thu 09 Jan 2014 10:56:56 AM JST
        if not iscallable(item):
            raise NotCallableError(item)
        self._data[key] = item

* Thu 09 Jan 2014 10:56:59 AM JST
item
* Thu 09 Jan 2014 10:57:02 AM JST
item
* Thu 09 Jan 2014 10:57:06 AM JST
key]
* Thu 09 Jan 2014 10:57:07 AM JST
_data[key]
* Thu 09 Jan 2014 10:57:12 AM JST
item
* Thu 09 Jan 2014 11:26:04 AM JST

* Thu 09 Jan 2014 11:26:04 AM JST

* Thu 09 Jan 2014 11:26:04 AM JST
        # raise KeyError(key)

* Fri 10 Jan 2014 03:06:12 PM JST
MONDAY = MON = 0
TUESDAY = TUE = 1
WEDNESDAY = WED = 2
THURSDAY = THU = 3
FRIDAY = FRI = 4
SATURDAY = SAT = 5
SUNDAY = SUN = 6

* Fri 10 Jan 2014 03:06:43 PM JST
WEEKDAY_JDIC = {MONDAY: u'月',
               TUESDAY: u'火',
               WEDNESDAY: u'水',
               THURSDAY: u'木',
               FRIDAY: u'金',
               SATURDAY: u'土',
               SUNDAY: u'日'}


* Fri 10 Jan 2014 03:06:57 PM JST
MONDAY = MON = 0
TUESDAY = TUE = 1
WEDNESDAY = WED = 2
THURSDAY = THU = 3
FRIDAY = FRI = 4
SATURDAY = SAT = 5
SUNDAY = SUN = 6

* Fri 10 Jan 2014 03:07:13 PM JST
SUNDAY    = 
* Fri 10 Jan 2014 03:07:14 PM JST
SATURDAY  = 
* Fri 10 Jan 2014 03:07:14 PM JST
FRIDAY    = 
* Fri 10 Jan 2014 03:07:14 PM JST
THURSDAY  = 
* Fri 10 Jan 2014 03:07:14 PM JST
WEDNESDAY = 
* Fri 10 Jan 2014 03:07:14 PM JST
TUESDAY   = 
* Fri 10 Jan 2014 03:07:14 PM JST
MONDAY    = 
* Fri 10 Jan 2014 03:08:01 PM JST
MONDAY
* Fri 10 Jan 2014 03:08:15 PM JST
= 
* Fri 10 Jan 2014 03:08:19 PM JST
    = 
* Fri 10 Jan 2014 03:08:23 PM JST
TUESDAY
* Fri 10 Jan 2014 03:08:23 PM JST
= 
* Fri 10 Jan 2014 03:08:23 PM JST
   = 
* Fri 10 Jan 2014 03:08:25 PM JST
WEDNESDAY
* Fri 10 Jan 2014 03:08:25 PM JST
= 
* Fri 10 Jan 2014 03:08:25 PM JST
 = 
* Fri 10 Jan 2014 03:08:26 PM JST
THURSDAY
* Fri 10 Jan 2014 03:08:26 PM JST
= 
* Fri 10 Jan 2014 03:08:26 PM JST
  = 
* Fri 10 Jan 2014 03:08:27 PM JST
FRIDAY
* Fri 10 Jan 2014 03:08:27 PM JST
= 
* Fri 10 Jan 2014 03:08:28 PM JST
    = 
* Fri 10 Jan 2014 03:08:29 PM JST
SATURDAY
* Fri 10 Jan 2014 03:08:29 PM JST
= 
* Fri 10 Jan 2014 03:08:29 PM JST
  = 
* Fri 10 Jan 2014 03:08:30 PM JST
SUNDAY
* Fri 10 Jan 2014 03:08:30 PM JST
= 
* Fri 10 Jan 2014 03:08:30 PM JST
    = 
* Fri 10 Jan 2014 03:11:49 PM JST
           
* Fri 10 Jan 2014 03:13:38 PM JST
calendar
* Fri 10 Jan 2014 03:14:40 PM JST
calendar
* Fri 10 Jan 2014 03:14:56 PM JST
from t1.dateutil import (MONDAY, TUESDAY, WEDNESDAY, THURSDAY,
                         FRIDAY, SATURDAY, SUNDAY)


* Fri 10 Jan 2014 03:22:16 PM JST
99]: 
* Fri 10 Jan 2014 04:03:25 PM JST
datetime.now().weekday
* Fri 10 Jan 2014 04:33:21 PM JST
class IterABC(object):
    r"""Abstract Base Classes for Iterator."""

    __metaclass__ = ABCMeta

    @abstractmethod
    def __iter__(self, ):
        raise NotImplementedError

    @abstractmethod
    def next(self, ):
        raise NotImplementedError


class BoolABC(object):
    r"""Abstract Base Classes for Boolean."""

    __metaclass__ = ABCMeta

    @abstractmethod
    def __nonzero__(self, ):
        raise NotImplementedError


class WithABC(object):
    r"""Abstract Base Classes for With Statements."""
    __metaclass__ = ABCMeta

    @abstractmethod
    def __enter__(self, ):
        raise NotImplementedError

    @abstractmethod
    def __exit__(self, ):
        raise NotImplementedError


class FileAdaptorABC(object):
    r"""Abstract Base Classes for File Adaptor."""
    __metaclass__ = ABCMeta

    @abstractmethod
    def close(self, ):
        raise NotImplementedError

    @abstractmethod
    def __del__(self, ):
        raise NotImplementedError

    @abstractmethod
    def flush(self, ):
        raise NotImplementedError

    @abstractmethod
    def fileno(self, ):
        raise NotImplementedError

    @abstractmethod
    def write(self, ):
        raise NotImplementedError

    @abstractmethod
    def writelines(self, ):
        raise NotImplementedError

    @abstractmethod
    def read(self, ):
        raise NotImplementedError

    @abstractmethod
    def readline(self, ):
        raise NotImplementedError

    @abstractmethod
    def __iter__(self, ):
        raise NotImplementedError

    @abstractmethod
    def next(self, ):
        raise NotImplementedError


* Fri 10 Jan 2014 04:33:41 PM JST

* Fri 10 Jan 2014 04:33:41 PM JST

* Fri 10 Jan 2014 04:33:41 PM JST
from abc import ABCMeta, abstractmethod

* Fri 10 Jan 2014 04:34:50 PM JST
class SelectABC(object):
    r"""
    """

    __metaclass__ = ABCMeta

    def __init__(self, rlist, wlist, xlist, timeout=0):
        r"""

        @Arguments:
        - `rlist`:
        - `wlist`:
        - `xlist`:
        - `timeout`:
        """
        self.rlist = rlist
        self.wlist = wlist
        self.xlist = xlist
        self.timeout = timeout

    def wait_io(self, ):
        r"""SUMMARY

        wait_io()

        @Return:
        """
        return select.select(self.rlist, self.wlist, self.xlist, self.timeout)

    def handle_io(self, ):
        r"""SUMMARY

        handle_io()

        @Return:
        """
        while 1:
            sleep(0.015) # for prevent exhaust cpu
            try:
                rlist, wlist, xlist = self.wait_io()
            except select.error, err:
                print(err)
                break
            except IOError, err:
                print(err)
                break
            # rlist
            if rlist: # for fast
                for obj in rlist:
                    self.handle_read(obj)
            # wlist
            if wlist: # for fast
                for obj in wlist:
                    self.handle_write(obj)
            # xlist
            if xlist: # for fast
                for obj in xlist:
                    self.handle_except(obj)

    @abstractmethod
    def handle_read(self, obj):
        r"""SUMMARY

        handle_read(io_obj)

        @Arguments:
        - `io_obj`:

        @Return:
        """
        raise NotImplementedError

    @abstractmethod
    def handle_write(self, obj):
        r"""SUMMARY

        handle_write(io_obj)

        @Arguments:
        - `io_obj`:

        @Return:
        """
        raise NotImplementedError

    @abstractmethod
    def handle_except(self, obj):
        r"""SUMMARY

        handle_except(io_obj)

        @Arguments:
        - `io_obj`:

        @Return:
        """
        raise NotImplementedError



* Fri 10 Jan 2014 04:35:10 PM JST
import select
* Fri 10 Jan 2014 04:35:20 PM JST

* Fri 10 Jan 2014 04:35:20 PM JST

* Fri 10 Jan 2014 04:35:21 PM JST
import select

* Fri 10 Jan 2014 04:36:50 PM JST
class Singleton(object):
    """Singleton.

    like use.
    class MyClass(Singleton, BaseClass):
    pass
    """
    _instance = None
    def __new__(class_, *args, **kwargs):
        if not isinstance(class_._instance, class_):
            class_._instance = object.__new__(class_, *args, **kwargs)
        return class_._instance


class SingletonMeta(type):
    """MetaSingleton

    like use.
    class MyClass(BaseClass):
        __metaclass__ = SingletonMeta
    """
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = (super(SingletonMeta, cls)
                                   .__call__(*args, **kwargs))
        return cls._instances[cls]


* Fri 10 Jan 2014 04:38:51 PM JST

* Fri 10 Jan 2014 04:38:51 PM JST

* Fri 10 Jan 2014 04:38:51 PM JST
from time import sleep

* Fri 10 Jan 2014 04:44:04 PM JST
singleton
* Fri 10 Jan 2014 04:44:43 PM JST
abcs
* Fri 10 Jan 2014 04:45:05 PM JST

* Fri 10 Jan 2014 04:45:05 PM JST
abcs
* Fri 10 Jan 2014 04:49:33 PM JST
are
* Fri 10 Jan 2014 04:51:41 PM JST
from __future__ import print_function
* Fri 10 Jan 2014 05:02:53 PM JST
arepy
* Fri 10 Jan 2014 05:14:59 PM JST
                    
* Fri 10 Jan 2014 05:15:01 PM JST
     
* Fri 10 Jan 2014 05:15:56 PM JST
                          
* Fri 10 Jan 2014 05:15:58 PM JST
                               
* Fri 10 Jan 2014 05:16:01 PM JST
                               
* Fri 10 Jan 2014 05:17:35 PM JST
object
* Fri 10 Jan 2014 05:39:44 PM JST
__setslice__
* Fri 10 Jan 2014 05:57:47 PM JST

* Fri 10 Jan 2014 05:57:47 PM JST

* Fri 10 Jan 2014 05:57:47 PM JST
    YES

* Fri 10 Jan 2014 05:59:07 PM JST

* Fri 10 Jan 2014 05:59:07 PM JST

* Fri 10 Jan 2014 05:59:07 PM JST
    NOP

* Fri 10 Jan 2014 06:16:07 PM JST
longlong
* Fri 10 Jan 2014 06:19:25 PM JST
hello = h = he = str = s
* Fri 10 Jan 2014 06:19:44 PM JST
hello = h = he = str,'s'
* Fri 10 Jan 2014 06:20:21 PM JST
world = w = wo = str2 = s2
* Fri 10 Jan 2014 06:20:29 PM JST
null = null_string = nstring = nullstring = n_string = ns 
* Fri 10 Jan 2014 06:20:38 PM JST
text = t = txt
* Fri 10 Jan 2014 06:21:41 PM JST
''
* Fri 10 Jan 2014 06:21:51 PM JST
'hello', 'h', 'he', 'str','s', 'world','w','wo','str2','s2','null','null_string','nstring','nullstring','n_string','ns','text','t','txt'
* Fri 10 Jan 2014 06:34:07 PM JST
__slots__ = ('jname', 'ename', '_start_y', '_month', '_day')
* Fri 10 Jan 2014 10:56:06 PM JST
0x10c
* Fri 10 Jan 2014 11:04:35 PM JST
'hello', 'h', 'he', 'str','s', 'world','w','wo','str2','s2','null','null_string','nstring','nullstring','n_string','ns','text','t','txt'
* Sat 11 Jan 2014 12:27:17 AM JST
http://stackoverflow.com/questions/5333128/yapsy-minimal-example
* Sat 11 Jan 2014 12:28:03 AM JST
from yapsy.IPlugin import IPlugin
* Sat 11 Jan 2014 12:28:11 AM JST
class PluginOne(IPlugin):                                          
                def print_name(self):                                          
                    print "This is plugin 1"
* Sat 11 Jan 2014 12:28:54 AM JST
from yapsy.PluginManager import PluginManager
* Sat 11 Jan 2014 12:29:04 AM JST
manager = PluginManager()
* Sat 11 Jan 2014 12:29:08 AM JST
manager.setPluginPlaces(["plugins"])
* Sat 11 Jan 2014 12:29:19 AM JST
manager.collectPlugins()
* Sat 11 Jan 2014 12:30:24 AM JST
manager.collectPlugins()
* Sat 11 Jan 2014 12:31:41 AM JST
            [Core]                                                             
            Name = Plugin 1                                                    
            Module = plugin1                                                   
                                                                               
            [Documentation]                                                    
            Author = John Smith                                                
            Version = 0.1                                                      
            Website = http://lotsofplugins.com                                 
            Description = My first plugin                                      

* Sat 11 Jan 2014 12:57:51 AM JST
http://onehourhacks.blogspot.jp/2013/04/a-simple-python-plugin-framework.html
* Sat 11 Jan 2014 01:05:20 AM JST
import 
* Sat 11 Jan 2014 01:10:35 AM JST
def iter_pyfiles(dir_):
    r"""SUMMARY

    iter_pyfiles(dir_)

    @Arguments:
    - `dir_`:

    @Return:
    """
    for file_ in _os.listdir(dir_):
        if file_.endswith(('.py', '.pyc')):
            yield file_


* Sat 11 Jan 2014 01:21:22 AM JST
@iter_pyfiles.register(list)
def iter_pyfiles_list(dirs):
    r"""SUMMARY
    
    iter_pyfiles_list(dir_)
    
    @Arguments:
    - `dir_`:
    
    @Return:
    """
    for dir_ in dirs:
        iter_pyfiles_str(dir_)

* Sat 11 Jan 2014 01:21:26 AM JST
list
* Sat 11 Jan 2014 01:23:16 AM JST
yield 
* Sat 11 Jan 2014 01:23:26 AM JST
return
* Sat 11 Jan 2014 01:24:52 AM JST
iter_pyfiles_str(dir_)
* Sat 11 Jan 2014 01:25:02 AM JST
        for file_ in iter_pyfiles_str(dir_):
            yield file_

* Sat 11 Jan 2014 01:27:19 AM JST

* Sat 11 Jan 2014 01:27:19 AM JST

* Sat 11 Jan 2014 01:27:19 AM JST
    print('in str')

* Sat 11 Jan 2014 01:27:21 AM JST

* Sat 11 Jan 2014 01:27:21 AM JST

* Sat 11 Jan 2014 01:27:21 AM JST
    print('in list')

* Sat 11 Jan 2014 01:27:23 AM JST

* Sat 11 Jan 2014 01:27:23 AM JST

* Sat 11 Jan 2014 01:27:23 AM JST
    print('in tuple')

* Sat 11 Jan 2014 01:29:01 AM JST
iter_pyfiles
* Sat 11 Jan 2014 01:29:40 AM JST
(('/root/.pylib', '/root/.pylib/mygoogle'))
* Sat 11 Jan 2014 01:29:59 AM JST
list_pyfiles
* Sat 11 Jan 2014 01:50:11 AM JST
os.path.normpath(path)
* Sat 11 Jan 2014 01:50:27 AM JST
path.
* Sat 11 Jan 2014 01:51:09 AM JST
    
* Sat 11 Jan 2014 01:54:02 AM JST
path.
* Sat 11 Jan 2014 01:54:03 AM JST
os.path.
* Sat 11 Jan 2014 01:59:41 AM JST
path_expand(path)
* Sat 11 Jan 2014 01:59:50 AM JST
os.path.normpath(path)
* Sat 11 Jan 2014 01:59:54 AM JST

* Sat 11 Jan 2014 01:59:54 AM JST

* Sat 11 Jan 2014 01:59:54 AM JST
    path = 

* Sat 11 Jan 2014 01:59:54 AM JST
    path = 

* Sat 11 Jan 2014 01:59:54 AM JST
    path = 
    path = 

* Sat 11 Jan 2014 02:02:53 AM JST
osutil.safe_path(dir_)
* Sat 11 Jan 2014 02:24:16 AM JST
osutil.safe_path(dir_)
* Sat 11 Jan 2014 08:49:30 AM JST
update
* Sat 11 Jan 2014 08:55:35 AM JST
os.path.basename
* Sat 11 Jan 2014 08:55:39 AM JST
os.path.basename(l[1])
* Sat 11 Jan 2014 08:55:44 AM JST
os.path.basename
* Sat 11 Jan 2014 08:56:17 AM JST
return os.path
* Sat 11 Jan 2014 08:56:19 AM JST
path
* Sat 11 Jan 2014 08:56:19 AM JST
os.path
* Sat 11 Jan 2014 08:56:44 AM JST
basename = 
* Sat 11 Jan 2014 08:57:02 AM JST
return basename
* Sat 11 Jan 2014 08:57:13 AM JST
os.path.splitext(os.path.basename(path))[0]
* Sat 11 Jan 2014 09:00:29 AM JST
add = set()
* Sat 11 Jan 2014 09:00:31 AM JST
set()
* Sat 11 Jan 2014 09:09:10 AM JST
pass
* Sat 11 Jan 2014 09:09:36 AM JST
PluginAbstract
* Sat 11 Jan 2014 09:11:54 AM JST
tes1.Tesclass01
* Sat 11 Jan 2014 09:15:34 AM JST
tes1.Tesclass01
* Sat 11 Jan 2014 09:16:31 AM JST
PluginAbstract
* Sat 11 Jan 2014 09:19:29 AM JST
dummy.
* Sat 11 Jan 2014 09:22:57 AM JST
PluginAbstract
* Sat 11 Jan 2014 09:23:23 AM JST
Tesclass01
* Sat 11 Jan 2014 09:24:31 AM JST
from dummy import PluginAbstract
* Sat 11 Jan 2014 09:24:39 AM JST
object
* Sat 11 Jan 2014 09:28:27 AM JST
from abc import ABCMeta, abstractmethod
* Sat 11 Jan 2014 09:28:34 AM JST
class PluginAbstract(object):
    r"""
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def __call__(self, *args, **kwargs):
        raise NotImplementedError()

* Sat 11 Jan 2014 09:28:43 AM JST
PluginAbstract
* Sat 11 Jan 2014 09:47:56 AM JST
        
* Sat 11 Jan 2014 09:55:38 AM JST

* Sat 11 Jan 2014 09:55:38 AM JST

* Sat 11 Jan 2014 09:55:38 AM JST
        ):

* Sat 11 Jan 2014 09:59:56 AM JST

* Sat 11 Jan 2014 09:59:56 AM JST

* Sat 11 Jan 2014 09:59:56 AM JST
        return True

* Sat 11 Jan 2014 09:59:56 AM JST
        return True

* Sat 11 Jan 2014 09:59:57 AM JST
        return True
    return False

* Sat 11 Jan 2014 10:07:32 AM JST
_inspect.isclass(obj)
* Sat 11 Jan 2014 10:33:13 AM JST
def predicate(obj):
    r"""SUMMARY

    predicate(obj)

    @Arguments:
    - `obj`:

    @Return:
    """
    if _inspect.isclass(obj):
        print(obj)
    return _inspect.isclass(obj) and issubclass(obj.__class__, PluginAbstract)


def list_extclass(module):
    r"""SUMMARY

    list_extclass(module)

    @Arguments:
    - `module`:

    @Return:
    """
    return _inspect.getmembers(module, predicate=predicate)


* Sat 11 Jan 2014 10:33:21 AM JST
import inspect as _inspect
* Sat 11 Jan 2014 10:33:23 AM JST
import inspect as _inspect
* Sat 11 Jan 2014 10:34:07 AM JST
import 
* Sat 11 Jan 2014 10:35:08 AM JST
__class__
* Sat 11 Jan 2014 10:37:23 AM JST
issubclass(obj, PluginAbstract)
* Sat 11 Jan 2014 10:39:52 AM JST
tes.Tesclass01.__class__
* Sat 11 Jan 2014 10:43:51 AM JST
functions.list_extclass()
* Sat 11 Jan 2014 10:49:28 AM JST
dummy
* Sat 11 Jan 2014 10:50:55 AM JST
import 
* Sat 11 Jan 2014 10:52:34 AM JST

* Sat 11 Jan 2014 10:52:34 AM JST

* Sat 11 Jan 2014 10:52:34 AM JST
    pass

* Sat 11 Jan 2014 10:52:48 AM JST

* Sat 11 Jan 2014 10:52:48 AM JST

* Sat 11 Jan 2014 10:52:48 AM JST
from abc import ABCMeta, abstractmethod

* Sat 11 Jan 2014 10:52:56 AM JST
dummy
* Sat 11 Jan 2014 10:53:23 AM JST
list
* Sat 11 Jan 2014 10:55:55 AM JST
return 
* Sat 11 Jan 2014 10:56:17 AM JST
_inspect.getmembers(module, predicate=predicate)
* Sat 11 Jan 2014 11:07:02 AM JST
pyutil
* Sat 11 Jan 2014 11:09:01 AM JST

* Sat 11 Jan 2014 11:09:02 AM JST
pyutil
* Sat 11 Jan 2014 11:17:21 AM JST
/root/.pylib/plugin/dummy
* Sat 11 Jan 2014 11:21:42 AM JST
pass
* Sat 11 Jan 2014 11:22:06 AM JST
'Tesclass02'
* Sat 11 Jan 2014 11:25:32 AM JST
war
* Sat 11 Jan 2014 11:33:59 AM JST
startswitch
* Sat 11 Jan 2014 11:41:02 AM JST
plugin 
* Sat 11 Jan 2014 11:42:07 AM JST
        if file_.endswith(('.pyc')) or file_ == '__init__.py':
            continue

* Sat 11 Jan 2014 11:42:18 AM JST
mod = _imp.load_source(osutil.without_ext_basename(file_), file_)
* Sat 11 Jan 2014 11:42:38 AM JST

* Sat 11 Jan 2014 11:42:39 AM JST
pyutil
* Sat 11 Jan 2014 11:42:56 AM JST
        for name, obj in parse_plugins(mod):
            if name in dic:
                import warnings
                warnings.warn('Plugin Warning already exists {}'.format(name))
            dic[name] = obj()

* Sat 11 Jan 2014 11:45:47 AM JST
import
* Sat 11 Jan 2014 11:49:52 AM JST
'/root/.pylib/plugin/dummy'
* Sat 11 Jan 2014 11:56:09 AM JST
    def __call__(self, key, *args, **kwargs):
        return self[key](*args, **kwargs)

* Sat 11 Jan 2014 12:01:03 PM JST
this, 
* Sat 11 Jan 2014 12:01:06 PM JST
this
* Sat 11 Jan 2014 12:02:05 PM JST
self, 
* Sat 11 Jan 2014 12:10:27 PM JST
path
* Sat 11 Jan 2014 12:11:21 PM JST

* Sat 11 Jan 2014 12:11:25 PM JST

* Sat 11 Jan 2014 12:11:25 PM JST

* Sat 11 Jan 2014 12:11:25 PM JST
import predicate as _predicate

* Sat 11 Jan 2014 12:17:47 PM JST
        if not path:
            pass
        elif _predicate.isstring(path):
            self.load(path)
        elif _predicate.islist(path) or _predicate.istuple(path):
            for pth in path:
                self.load(pth)

* Sat 11 Jan 2014 12:20:23 PM JST
if sys.version_info < (2, 4):
    from sets import Set as set


* Sat 11 Jan 2014 12:20:31 PM JST
if _sys.version_info < (2, 4):
    from sets import Set as set


* Sat 11 Jan 2014 12:23:47 PM JST
'/root/.pylib/plugin/dummy'
* Sat 11 Jan 2014 12:25:53 PM JST
obj
* Sat 11 Jan 2014 12:26:12 PM JST

* Sat 11 Jan 2014 12:26:12 PM JST

* Sat 11 Jan 2014 12:26:12 PM JST
                print(name)

* Sat 11 Jan 2014 12:27:12 PM JST

* Sat 11 Jan 2014 12:27:13 PM JST

* Sat 11 Jan 2014 12:27:13 PM JST
        print(name)

* Sat 11 Jan 2014 12:27:31 PM JST

* Sat 11 Jan 2014 12:27:31 PM JST

* Sat 11 Jan 2014 12:27:32 PM JST
            print(mod)

* Sat 11 Jan 2014 12:30:47 PM JST
class PluginAbstract(object):
    r"""
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def __call__(self, *args, **kwargs):
        raise NotImplementedError()


* Sat 11 Jan 2014 12:30:57 PM JST

* Sat 11 Jan 2014 12:30:57 PM JST

* Sat 11 Jan 2014 12:30:57 PM JST
from abc import ABCMeta, abstractmethod

* Sat 11 Jan 2014 12:32:25 PM JST
PluginAbstract
* Sat 11 Jan 2014 12:33:52 PM JST
def predicate(obj):
    r"""SUMMARY

    predicate(obj)

    @Arguments:
    - `obj`:

    @Return:
    """
    return (_inspect.isclass(obj) and
            issubclass(obj, PluginAbstract) and
            obj != PluginAbstract)


def parse_plugins(module):
    r"""SUMMARY

    list_extclass(module)

    @Arguments:
    - `module`:

    @Return:
    """
    for name, obj in _inspect.getmembers(module, predicate=predicate):
        yield name, obj


def load_plugins(path, dic=None):
    r"""SUMMARY

    load_plugins(path)

    @Arguments:
    - `path`:

    @Return:
    """
    dic = dic or {}
    for file_ in pyutil.iter_pyfiles(path):
        if file_.endswith(('.pyc')) or file_ == '__init__.py':
            continue
        mod = _imp.load_source(osutil.without_ext_basename(file_), file_)
        for name, obj in parse_plugins(mod):
            if name in dic:
                import warnings
                warnings.warn('Plugin Warning already exists {}'.format(name))
            dic[name] = obj()
    return dic


* Sat 11 Jan 2014 12:34:11 PM JST
import inspect as _inspect
import imp as _imp

* Sat 11 Jan 2014 12:34:19 PM JST

* Sat 11 Jan 2014 12:34:19 PM JST

* Sat 11 Jan 2014 12:34:20 PM JST
import imp as _imp

* Sat 11 Jan 2014 12:34:56 PM JST

* Sat 11 Jan 2014 12:34:57 PM JST

* Sat 11 Jan 2014 12:34:57 PM JST
from plugin.functions import parse_plugins

* Sat 11 Jan 2014 12:57:48 PM JST
        if not path:
            pass
        elif _predicate.isstring(path):
            self._load(path)
        elif _predicate.islist(path) or _predicate.istuple(path):
            for pth in path:
                self._load(pth)

* Sat 11 Jan 2014 12:58:00 PM JST
path
* Sat 11 Jan 2014 12:58:05 PM JST
path
* Sat 11 Jan 2014 12:58:08 PM JST
path
* Sat 11 Jan 2014 12:58:25 PM JST
path
* Sat 11 Jan 2014 12:58:28 PM JST
path
* Sat 11 Jan 2014 12:58:31 PM JST
path
* Sat 11 Jan 2014 12:59:14 PM JST
_load
* Sat 11 Jan 2014 12:59:28 PM JST
d
* Sat 11 Jan 2014 01:00:31 PM JST

* Sat 11 Jan 2014 01:00:31 PM JST

* Sat 11 Jan 2014 01:00:31 PM JST
        self.path.add(path)

* Sat 11 Jan 2014 01:01:42 PM JST
path
* Sat 11 Jan 2014 01:02:16 PM JST

* Sat 11 Jan 2014 01:02:16 PM JST

* Sat 11 Jan 2014 01:02:16 PM JST
        for path in self.path:

* Sat 11 Jan 2014 01:02:19 PM JST
path
* Sat 11 Jan 2014 01:02:44 PM JST
path
* Sat 11 Jan 2014 01:03:05 PM JST
_imp
* Sat 11 Jan 2014 01:03:06 PM JST
as _imp
* Sat 11 Jan 2014 01:07:34 PM JST

* Sat 11 Jan 2014 01:07:34 PM JST

* Sat 11 Jan 2014 01:07:34 PM JST
        self.load()

* Sat 11 Jan 2014 01:11:55 PM JST
p = plugin.Plugin('/root/.pylib/plugin/dummy')
* Sat 11 Jan 2014 01:14:51 PM JST
junk
* Sat 11 Jan 2014 01:14:52 PM JST
131448.junk
* Sat 11 Jan 2014 01:14:52 PM JST
11-131448.junk
* Sat 11 Jan 2014 01:14:53 PM JST
01-11-131448.junk
* Sat 11 Jan 2014 01:14:53 PM JST
2014-01-11-131448.junk
* Sat 11 Jan 2014 01:17:58 PM JST

* Sat 11 Jan 2014 01:17:58 PM JST

* Sat 11 Jan 2014 01:17:58 PM JST
    self.plugin = Plugin('/tmp/junk/ext')

* Sat 11 Jan 2014 02:01:35 PM JST
import imp

In [6]: t = imp.load_source('tes', 'plugintes.py')
* Sat 11 Jan 2014 02:02:13 PM JST
In [6]: 
* Sat 11 Jan 2014 02:02:18 PM JST
t = imp.load_source('tes', 'plugintes.py')
* Sat 11 Jan 2014 02:03:40 PM JST
import imp
* Sat 11 Jan 2014 02:03:45 PM JST
t = imp.load_source('tes', 'plugintes.py')
* Sat 11 Jan 2014 02:03:50 PM JST
cd /tmp/junk
* Sat 11 Jan 2014 02:03:56 PM JST
he =t.Tes()
* Sat 11 Jan 2014 02:05:05 PM JST
cd /tmp/junk
import imp
t = imp.load_source('tes', 'plugintes.py')

* Sat 11 Jan 2014 02:05:12 PM JST
he =t.Tes()
* Sat 11 Jan 2014 02:07:22 PM JST
cd /tmp/junk
import imp
t = imp.load_source('tes', 'plugintes.py')
he =t.Tes()
* Sat 11 Jan 2014 04:06:42 PM JST
cd /tmp/junk
import imp
t = imp.load_source('tes', 'plugintes.py')
he =t.Tes()
* Sat 11 Jan 2014 04:09:39 PM JST
cd /tmp/junk
import imp
t = imp.load_source('tes', 'plugintes.py')
he =t.Tes()
* Sat 11 Jan 2014 04:22:49 PM JST
print 
* Sat 11 Jan 2014 04:28:06 PM JST
list
* Sat 11 Jan 2014 04:28:07 PM JST
import list
* Sat 11 Jan 2014 04:30:46 PM JST
value_
* Sat 11 Jan 2014 04:30:49 PM JST
value_
* Sat 11 Jan 2014 04:32:24 PM JST
cd /tmp/junk
import imp
t = imp.load_source('tes', 'plugintes.py')
he =t.Tes()
* Sat 11 Jan 2014 04:36:09 PM JST
cd /tmp/junk
import imp
t = imp.load_source('tes', 'plugintes.py')
he =t.Tes()
* Sat 11 Jan 2014 04:36:56 PM JST
cd /tmp/junk
import imp
t = imp.load_source('tes', 'plugintes.py')
he =t.Tes()
* Sat 11 Jan 2014 04:38:07 PM JST
hello 
* Sat 11 Jan 2014 04:38:07 PM JST
Tes hello 
* Sat 11 Jan 2014 04:38:25 PM JST
    
* Sat 11 Jan 2014 04:38:51 PM JST
cd /tmp/junk
import imp
t = imp.load_source('tes', 'plugintes.py')
he =t.Tes()
* Sat 11 Jan 2014 04:44:14 PM JST
cd /tmp/junk
import imp
t = imp.load_source('tes', 'plugintes.py')
he =t.Tes()
* Sat 11 Jan 2014 04:50:46 PM JST
    
* Sat 11 Jan 2014 04:53:36 PM JST
inspect
* Sat 11 Jan 2014 04:53:38 PM JST
inspect
* Sat 11 Jan 2014 05:11:51 PM JST
'ping -w 1 -c 1 {0} | grep "bytes from"'.format
* Sat 11 Jan 2014 05:12:25 PM JST
con_
* Sat 11 Jan 2014 05:12:40 PM JST
obj = kwargs
* Sat 11 Jan 2014 05:21:16 PM JST
stdin
* Sat 11 Jan 2014 05:48:29 PM JST
listutil
* Sat 11 Jan 2014 05:48:34 PM JST

* Sat 11 Jan 2014 05:48:34 PM JST

* Sat 11 Jan 2014 05:48:35 PM JST
import listutil

* Sat 11 Jan 2014 05:54:50 PM JST
__slots__
* Sat 11 Jan 2014 05:55:21 PM JST
(not (py:at-string|comment-p))
* Sat 11 Jan 2014 05:55:32 PM JST
# condition:
* Sat 11 Jan 2014 05:56:27 PM JST
${2:'${3:start}'}
* Sat 11 Jan 2014 05:57:22 PM JST

* Sat 11 Jan 2014 05:57:22 PM JST

* Sat 11 Jan 2014 05:57:22 PM JST
    __slots__ = ('hello', )

* Sat 11 Jan 2014 06:09:28 PM JST
start
* Sat 11 Jan 2014 06:14:04 PM JST
Rook
* Sat 11 Jan 2014 06:19:40 PM JST
    def isopen(self):
        """Check open or close port on rook."""
        return tcpscan(self.host, self.listen_port)

* Sat 11 Jan 2014 06:20:23 PM JST
    def isopen(self):
        """Check open or close port on rook."""
        return tcpscan(self._host, self.ports.listen_port)


* Sat 11 Jan 2014 06:22:17 PM JST

* Sat 11 Jan 2014 06:22:17 PM JST

* Sat 11 Jan 2014 06:22:17 PM JST
        self._listen_port = listen_port

* Sat 11 Jan 2014 06:32:01 PM JST
from plugin import PluginAbstract
* Sat 11 Jan 2014 06:33:34 PM JST
if not 'main' in kwargs
* Sat 11 Jan 2014 06:34:14 PM JST
_, stdout, _ = parent.cmd(self.cmdline_fmt(ipaddr))
* Sat 11 Jan 2014 06:34:26 PM JST
return 0 == stdout.channel.recv_exit_status()
* Sat 11 Jan 2014 07:01:48 PM JST
from socket import gethostbyname
* Sat 11 Jan 2014 07:02:27 PM JST
from plugin import PluginAbstract
* Sat 11 Jan 2014 07:04:48 PM JST
        if not 'main' in kwargs:
            return False
        parent = kwargs['main']

* Sat 11 Jan 2014 07:09:24 PM JST
d
* Sat 11 Jan 2014 07:09:24 PM JST
emacs.d
* Sat 11 Jan 2014 10:06:18 PM JST
times
* Sat 11 Jan 2014 10:06:22 PM JST
times
* Sat 11 Jan 2014 10:07:05 PM JST
times
* Sat 11 Jan 2014 10:11:10 PM JST
TimeCache
* Sat 11 Jan 2014 10:20:49 PM JST
inter
* Sat 11 Jan 2014 10:22:00 PM JST
object
* Sat 11 Jan 2014 10:22:23 PM JST
self.
* Sat 11 Jan 2014 10:22:28 PM JST

* Sat 11 Jan 2014 10:22:28 PM JST

* Sat 11 Jan 2014 10:22:29 PM JST
        self.interval = interval

* Sat 11 Jan 2014 10:22:32 PM JST
        self.interval = interval

* Sat 11 Jan 2014 10:22:33 PM JST
        self.interval = interval
        self.elapse = CheckElapse(self.interval)

* Sat 11 Jan 2014 10:27:11 PM JST
AgentUtils
* Sat 11 Jan 2014 10:32:36 PM JST
host, listen_port, opens, closes
* Sat 11 Jan 2014 10:53:42 PM JST
from ref.myinfo import rook, KAGI, KAGIMD5
* Sat 11 Jan 2014 11:00:26 PM JST
return tcpscan(self.host, self.ports.listen_port)
* Sat 11 Jan 2014 11:00:50 PM JST
return tcpscan(self.host, self.ports.listen_port)
* Sat 11 Jan 2014 11:01:06 PM JST
listen_
* Sat 11 Jan 2014 11:01:07 PM JST
ports.listen_
* Sat 11 Jan 2014 11:01:56 PM JST
PortKnocker
* Sat 11 Jan 2014 11:03:22 PM JST
RookKnocker
* Sat 11 Jan 2014 11:09:23 PM JST

* Sat 11 Jan 2014 11:09:23 PM JST

* Sat 11 Jan 2014 11:09:23 PM JST
        self.knocker = PortKnocker(host, lport, opens, closes)

* Sat 11 Jan 2014 11:09:27 PM JST
host, lport, opens, closes,
* Sat 11 Jan 2014 11:09:28 PM JST
                 
* Sat 11 Jan 2014 11:25:14 PM JST
rook.
* Sat 11 Jan 2014 11:25:59 PM JST

* Sat 11 Jan 2014 11:25:59 PM JST

* Sat 11 Jan 2014 11:26:00 PM JST
        AgentUtils.__init__(self, kagi, kagiMD5)

* Sat 11 Jan 2014 11:26:02 PM JST
kagiMD5, 
* Sat 11 Jan 2014 11:26:03 PM JST
kagi, kagiMD5, 
* Sat 11 Jan 2014 11:31:15 PM JST
if self.keyring.haskeyring():
* Sat 11 Jan 2014 11:44:30 PM JST

* Sat 11 Jan 2014 11:44:30 PM JST

* Sat 11 Jan 2014 11:44:30 PM JST
        CheckElapse.__init__(self, interval)

* Sat 11 Jan 2014 11:45:52 PM JST
if self.keyring.haskeyring():
* Sun 12 Jan 2014 12:06:52 AM JST
args
* Sun 12 Jan 2014 12:06:58 AM JST
args
* Sun 12 Jan 2014 12:11:15 AM JST
RookPlugin
* Sun 12 Jan 2014 12:13:25 AM JST
/dir 
* Sun 12 Jan 2014 12:19:20 AM JST
from plugin import PluginAbstract
* Sun 12 Jan 2014 12:22:05 AM JST
from sleep_progress import sleep_progress
* Sun 12 Jan 2014 12:22:51 AM JST
'/usr/sbin/wol -i 192.168.1.255 {0}'.format
* Sun 12 Jan 2014 12:24:03 AM JST
sleep_progress(
                self._wait, PRINTFORMAT.format('Waiting Wakeup', '%-2d seconds'))
* Sun 12 Jan 2014 12:24:26 AM JST
PRINTFORMAT
* Sun 12 Jan 2014 12:25:12 AM JST
PRINTFORMAT
* Sun 12 Jan 2014 12:25:28 AM JST
                
* Sun 12 Jan 2014 12:28:44 AM JST
_sys.stdout.write('\r' + PRINTFORMAT.format(ip, still_down))
* Sun 12 Jan 2014 12:28:58 AM JST
still_down = 'Still DOWN ping {0}/{1}'.format(i, pingmax)
* Sun 12 Jan 2014 12:29:22 AM JST
_sys.stdout.flush()
* Sun 12 Jan 2014 12:31:24 AM JST
print('\n' + PRINTFORMAT.format(ip, 'UP!!\n'))
* Sun 12 Jan 2014 12:31:30 AM JST
format
* Sun 12 Jan 2014 12:31:37 AM JST
_sleep(10)
* Sun 12 Jan 2014 12:31:42 AM JST

# -*- coding: utf-8 -*-
#
# $Id$
# $Revision$
# $Date$
# $Author$
# $LastChangedBy$
# $LastChangedDate$
r""" rook -- rook(router) handler

$Revision$

"""


import os
from socket import gethostbyname
import sys as _sys
import time
from time import sleep as _sleep

import paramiko

from agent import AgentUtils, add_keys
from ref.myinfo import rook, KAGI, KAGIMD5
from mytemp.abstract import Verbose
from knock import knock, tcpscan
from t1 import listutil
from plugin import Plugin

from rook import extensions # for directory


__revision__ = "$Revision$"
__version__ = "0.2.0"

__all__ = ['Rook']

CHAPTERFORMAT = '\n{0:*^30}'
PRINTFORMAT = '[ {0:<16} ]  {1}'


class SSHKeyError(StandardError):
    pass


class PingMax(Exception):
    pass


class PortError(StandardError):
    pass


class KnockPortsInfo(object):
    r"""
    """
    __slots__ = ('opens', 'closes')

    def __init__(self, opens, closes):
        r"""

        @Arguments:
        - `opens`:
        - `closes`:
        """
        self.opens = opens
        self.closes = closes


class PortsInfo(object):
    r"""
    """
    __slots__ = ('listen_port', 'knock')

    def __init__(self, port, opens, closes):
        r"""

        @Arguments:
        - `port`:
        - `opens`:
        - `closes`:
        """
        self.listen_port = port
        self.knock = KnockPortsInfo(opens, closes)


class PortsKnocker(object):
    r"""
    """

    def __init__(self, host, ports):
        r"""

        @Arguments:
        - `host`:
        - `ports`:
        """
        self.host = host
        self.ports = ports

    def knock(self, verbose=False):
        r"""SUMMARY

        knock()

        @Return:
        """
        knock(self.host, self.ports, verbose=verbose)

    def __call__(self, verbose=False):
        r"""SUMMARY

        __call__()

        @Return:
        """
        self.knock(verbose=verbose)


class CheckPort(object):
    r"""
    """

    def __init__(self, host, port):
        r"""

        @Arguments:
        - `host`:
        - `port`:
        """
        self.host = host
        self.port = port

    def isopen(self, ):
        r"""SUMMARY

        isopen()

        @Return:
        """
        return tcpscan(self.host, self.port)

    def __call__(self, ):
        return self.isopen()


class RookKnocker(object):
    r"""
    """
    open = PortsKnocker(rook.HOST, rook.OPEN_PORT)
    close = PortsKnocker(rook.HOST, rook.CLOSE_PORT)
    isopen = CheckPort(rook.HOST, rook.PORT)


class PortKnocker(object):
    r"""
    """

    def __init__(self, host, listen_port, opens, closes):
        r"""

        @Arguments:
        - `host`:
        - `listen_port`:
        - `opens`:
        - `close`:
        """
        self.host = host
        self.ports = PortsInfo(listen_port, opens, closes)

    def isopen(self):
        """Check open or close port on rook."""
        return tcpscan(self.host, self.ports.listen_port)

    def open(self, verbose=True):
        r"""SUMMARY

        open(verbose=True)

        @Arguments:
        - `verbose`:

        @Return:
        """
        knock(self.host, self.ports.knock.opens)

    def close(self, verbose=True):
        r"""SUMMARY

        close(verbose=True)

        @Arguments:
        - `verbose`:

        @Return:
        """
        knock(self.host, self.ports.knock.closes)


class CheckElapse(object):
    r"""
    """

    def __init__(self, interval=None):
        r"""

        @Arguments:
        - `times`:
        """
        self.maxelapse = interval or 60 # default 1 min
        self.lasttime = None

    def update_lasttime(self, ):
        r"""SUMMARY

        update_lasttime()

        @Return:
        """
        self.lasttime = time.time()

    def iselapsed(self, ):
        r"""SUMMARY

        iselapsed()

        @Return:
        """
        if self.lasttime is None:
            return True
        return (self.lasttime - time.time()) >= self.maxelapse

    def __nonzero__(self, ):
        return self.iselapsed()


class RookPlugin(Plugin):
    r"""
    """
    def __call__(self, *args, **kwargs):
        r"""SUMMARY

        __call__()

        @Return:
        """
        super(RookPlugin, self).__call__(self, *args, **kwargs)


class PaveRook(CheckElapse, AgentUtils):
    r"""
    """
    knocker = RookKnocker()
    keyring = AgentUtils(rook.KAGI, rook.KAGIMD5)

    def __init__(self, interval=None):
        r"""
        """
        self.elapse = CheckElapse(interval or 300)

    def __call__(self, ):
        r"""SUMMARY

        __call__()

        @Return:
        """
        self.pave()


    def pave(self, ):
        r"""SUMMARY

        pave()

        @Return:
        """
        self.pave_port()
        self.pave_key()

    def pave_port(self, ):
        r"""SUMMARY

        pave_port()

        @Return:
        """
        if not self.elapse:
            return None
        self.knocker.open()
        if not self.knocker.isopen():
            raise PortError('Could not open {} port.'
                            .format(self.knocker.isopen.port))
        self.elapse.update_lasttime()

    def pave_key(self, kagi=None):
        r"""SUMMARY

        pave_key(kagi=None)

        @Arguments:
        - `kagi`:

        @Return:
        """
        if self.keyring.haskeyring():
            return None
        kagi = kagi or self.keyring._kagi
        for _ in range(3):
            if self.keyring.haskeyring():
                break
            else:
                try:
                    add_keys(kagi)
                except:
                    raise SSHKeyError()
        if not self.keyring.haskeyring():
            raise StandardError()


class _RookPort(Verbose):
    """Handling rooks ssh port by knocking packet."""

    def __init__(self, host, port, opens, closes, verbose=False):
        super(_RookPort, self).__init__(verbose=verbose)
        self.host = host
        self.listen_port = port
        self.open_ports = opens
        self.close_ports = closes

    def open(self):
        """Send knocking packet for open port on rook."""
        self._ifverbose(CHAPTERFORMAT.format(' Knocking '),
                        PRINTFORMAT.format('Open port',
                               ''.join([self.host, ':', str(self.listen_port)])))
        knock(self.host, self.open_ports, verbose=self._verbose)

    def close(self):
        """Send knocking packet for close port on rook."""
        self._ifverbose(CHAPTERFORMAT.format(' Knocking '),
                        PRINTFORMAT.format('Close port',
                               ''.join([self.host, ':', str(self.listen_port)])))
        knock(self.host, self.close_ports, verbose=self._verbose)

    def isopen(self):
        """Check open or close port on rook."""
        return tcpscan(self.host, self.listen_port)


class _RookPave(AgentUtils):
    """Pave rook ssh environment.
    """
    _isopen_port_flag = False
    _haskeyring_flag = False

    def pave(self, force=False):
        """Pave ssh environment.

        [1] open port rook.
        [2] add ssh key ageant.

        Arguments:

        - `verbose`:
        """
        self._pave_port(force=force)
        self._pave_keyring(force=force)

    def _pave_port(self, force=False):
        """Open rooks port for ssh.

        @Arguments:

        - `force`:

        @Return:
        """
        if not self._isopen_port_flag or force:
            self.port.open()
            if self.port.isopen():
                self._isopen_port_flag = True
                # if self._verbose:
                    # print(PRINTFORMAT.format('Port: ' + str(self._listen_port),
                                             # 'OPENED!!'))
                self._ifverbose(PRINTFORMAT.format(
                    'Port: ' + str(self._listen_port), 'OPENED!!'))
            else:
                raise PortError('Could not open port.')

    def _pave_keyring(self, kagi=None, force=False):
        """Ssh key add to sshkeyring.

        @Arguments:

        - `kagi`: ssh key
        - `force`: force add key

        @Return:
        """
        if not self._haskeyring_flag or force:
            if not kagi:
                kagi = self._kagi
            # try input key password for 3 times.
            for i in range(3):
                if self.haskeyring():
                    self._haskeyring_flag = True
                    # if self._verbose:
                        # print(PRINTFORMAT.format('Check has keys', 'Has keys.'))
                    self._ifverbose(PRINTFORMAT.format('Check has keys',
                                                       'Has keys.'))
                    break
                else:
                    if 0 == i:
                        self._ifverbose(PRINTFORMAT.format('Check has keys',
                                                           'Not has keys!!'))
                    # if self._verbose and 0 == i:
                        # print(PRINTFORMAT.format('Check has keys',
                                                 # 'Not has keys!!'))
                    try:
                        add_keys(kagi)
                    except:
                        raise SSHKeyError


class Rook2(object):
    r"""
    """
    plugins = RookPlugin(os.path.dirname(extensions.__file__))
    pave = PaveRook()

    def __init__(self, ):
        r"""
        """
        pass




class _RookScript(object):
    """
    """
    _ssh = None
    _wait = 60 # for wake on lan

    def cmd(self, cmd):
        """Send command to rook(router).

        Arguments:

        - `cmd`: command line strings.
        """
        self.pave()
        if not self._ssh:
            self._connect()
        return self._ssh.exec_command(cmd)

    def _connect(self, force=False):
        """SSH connect with rook.

        Arguments:

        - `force`: force reconnection if already handshaked with rook.
        """
        if not self._isopen_port_flag or not self._haskeyring_flag:
            self.pave(force=force)
        if force and self._ssh:
            self.close()
            self._ssh = None
        if not self._ssh:
            self._ssh = paramiko.SSHClient()
            self._ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            if self._verbose:
                host = '{0} ({1}) [rook]'.format(
                    self._host, gethostbyname(self._host))
                print(PRINTFORMAT.format('SSH login', host))
            self._ssh.connect(self._host, self._listen_port, self._user)

    def isactive_machine(self, ip):
        """Check active internal rook network machines.

        Arguments:

        - `ip`: internal ip address

        @Return: bool
        """
        self.pave()
        cmd = 'ping -w 1 -c 1 {0} | grep "bytes from"'.format(ip)
        stdin, stdout, stderr = self.cmd(cmd)
        return 0 == stdout.channel.recv_exit_status()

    def wol(self, mac, ip, pingmax=30):
        """Send Wake on Lan packet to internal network machines.

        Arguments:

        - `mac`: Mac address of target machines.
        """
        self.pave()
        from sleep_progress import sleep_progress
        self.cmd('/usr/sbin/wol -i 192.168.1.255 {0}'.format(mac))
        if self._verbose:
            sleep_progress(
                self._wait, PRINTFORMAT.format('Waiting Wakeup', '%-2d seconds'))
        else:
            _sleep(self._wait)
        # confirm wake up
        for i in range(1, pingmax + 1):
            if self._verbose:
                still_down = 'Still DOWN ping {0}/{1}'.format(i, pingmax)
                _sys.stdout.write('\r' + PRINTFORMAT.format(ip, still_down))
                _sys.stdout.flush()
            if self.isactive_machine(ip):
                if self._verbose:
                    print('\n' + PRINTFORMAT.format(ip, 'UP!!\n'))
                
* Sun 12 Jan 2014 12:31:55 AM JST
_sleep(10) # wait until launch sshd
* Sun 12 Jan 2014 12:34:50 AM JST
        if pingmax <= i:
            print('\n\n') # flush stdout
            raise PingMax("Reached pinging max %d count." % i)

* Sun 12 Jan 2014 12:40:49 AM JST
pass
* Sun 12 Jan 2014 12:41:32 AM JST
self._ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
* Sun 12 Jan 2014 12:44:10 AM JST
self.
* Sun 12 Jan 2014 12:45:44 AM JST

* Sun 12 Jan 2014 12:45:44 AM JST

* Sun 12 Jan 2014 12:45:44 AM JST
    c

* Sun 12 Jan 2014 12:45:45 AM JST

* Sun 12 Jan 2014 12:45:45 AM JST

* Sun 12 Jan 2014 12:45:45 AM JST
    open_ports = ''

* Sun 12 Jan 2014 12:49:04 AM JST
rook.HOST,
* Sun 12 Jan 2014 12:49:14 AM JST
rook.USER
* Sun 12 Jan 2014 12:49:26 AM JST
KAGI
* Sun 12 Jan 2014 12:49:33 AM JST
KAGIMD5
* Sun 12 Jan 2014 12:49:42 AM JST
rook.PORT
* Sun 12 Jan 2014 12:49:52 AM JST
object
* Sun 12 Jan 2014 01:17:37 AM JST
plugins = RookPlugin(os.path.dirname(extensions.__file__))
* Sun 12 Jan 2014 01:20:32 AM JST
r.plugins('isactive_machine', '192.168.1.129')
* Sun 12 Jan 2014 01:20:43 AM JST
r.plugins.load()
* Sun 12 Jan 2014 01:20:46 AM JST
r = rook.Rook2()
* Sun 12 Jan 2014 01:20:52 AM JST
import rook
* Sun 12 Jan 2014 01:21:08 AM JST
import rook
r = rook.Rook2()
r.plugins.load()

* Sun 12 Jan 2014 01:21:11 AM JST
r.plugins('isactive_machine', '192.168.1.129')
* Sun 12 Jan 2014 01:22:20 AM JST
import rook
r = rook.Rook2()
r.plugins.load()

* Sun 12 Jan 2014 01:22:29 AM JST
r.plugins('isactive_machine', '192.168.1.129')
* Sun 12 Jan 2014 01:24:55 AM JST
/dir 
* Sun 12 Jan 2014 01:25:55 AM JST
import rook
r = rook.Rook2()
r.plugins.load()

* Sun 12 Jan 2014 01:26:06 AM JST
r.plugins('isactive_machine', '192.168.1.129')
* Sun 12 Jan 2014 01:26:37 AM JST

* Sun 12 Jan 2014 01:26:37 AM JST

* Sun 12 Jan 2014 01:26:37 AM JST
        print(parent)

* Sun 12 Jan 2014 01:26:37 AM JST
        print(parent)

* Sun 12 Jan 2014 01:26:37 AM JST
        print(parent)
        print(ipaddr)

* Sun 12 Jan 2014 01:26:54 AM JST
import rook
r = rook.Rook2()
r.plugins.load()

* Sun 12 Jan 2014 01:26:57 AM JST
r.plugins('isactive_machine', '192.168.1.129')
* Sun 12 Jan 2014 01:28:26 AM JST
import rook
r = rook.Rook2()
r.plugins.load()

* Sun 12 Jan 2014 01:28:29 AM JST
r.plugins('isactive_machine', '192.168.1.129')
* Sun 12 Jan 2014 01:29:48 AM JST
super(RookPlugin, self).__call__(key, self.parent, *args, **kwargs)
* Sun 12 Jan 2014 01:30:26 AM JST
r.plugins('isactive_machine', '192.168.1.129')
* Sun 12 Jan 2014 01:30:29 AM JST
import rook
r = rook.Rook2()
r.plugins.load()
r.plugins('isactive_machine', '192.168.1.129')

* Sun 12 Jan 2014 01:31:02 AM JST
import rook
r = rook.Rook2()
r.plugins.load()
r.plugins('isactive_machine', '192.168.1.129')

* Sun 12 Jan 2014 01:31:57 AM JST

* Sun 12 Jan 2014 01:31:57 AM JST

* Sun 12 Jan 2014 01:31:57 AM JST
        print(parent)

* Sun 12 Jan 2014 01:31:57 AM JST
        print(parent)

* Sun 12 Jan 2014 01:31:57 AM JST
        print(parent)
        print(ipaddr)

* Sun 12 Jan 2014 01:32:55 AM JST
'isactive_machine'
* Sun 12 Jan 2014 01:33:02 AM JST
    
* Sun 12 Jan 2014 01:35:39 AM JST
r.plugins('isactive_machine', '192.168.1.129')
* Sun 12 Jan 2014 01:38:10 AM JST
paramiko.SSHClient()
* Sun 12 Jan 2014 01:39:43 AM JST
invoke_shell               
* Sun 12 Jan 2014 01:41:22 AM JST
r._ssh.invoke_shell()
* Sun 12 Jan 2014 02:08:03 AM JST
class PingMax(Exception):
    pass
* Sun 12 Jan 2014 02:08:25 AM JST
PingMax
* Sun 12 Jan 2014 02:17:58 AM JST
pass
* Sun 12 Jan 2014 02:25:56 AM JST
SUMMARY
* Sun 12 Jan 2014 02:25:58 AM JST
SUMMARY
* Sun 12 Jan 2014 11:25:36 AM JST
00:16:01:f9:d9:d7
* Sun 12 Jan 2014 12:10:27 PM JST
from sleep_progress import sleep_progress
* Sun 12 Jan 2014 12:10:34 PM JST
parent.pave()
* Sun 12 Jan 2014 12:10:42 PM JST
sleep_progress(self.wait, PRINTFORMAT('Waiting Wakeup', '%-2d seconds'))
* Sun 12 Jan 2014 12:11:18 PM JST
        for i in xrange(1, pingmax + 1):
            still_down = 'Still DOWN ping {0}/{1}'.format(i, pingmax)
            _sys.stdout.write('\r' + PRINTFORMAT(ip, still_down))
            _sys.stdout.flush()
            if parent.plugins('isactive_machine', ip):
                print('\n' + PRINTFORMAT(ip, 'UP!!\n'))
                sleep(10) # wait until launch sshd
                break
            if pingmax <= i:
                print('\n\n') # flush stdout
                raise PingMax(i, ip, mac)

* Sun 12 Jan 2014 12:11:27 PM JST

* Sun 12 Jan 2014 12:11:27 PM JST

* Sun 12 Jan 2014 12:11:27 PM JST
        from sleep_progress import sleep_progress

* Sun 12 Jan 2014 12:12:04 PM JST

* Sun 12 Jan 2014 12:12:04 PM JST

* Sun 12 Jan 2014 12:12:04 PM JST
        sleep_progress(self.wait, PRINTFORMAT('Waiting Wakeup', '%-2d seconds'))

* Sun 12 Jan 2014 12:12:19 PM JST

* Sun 12 Jan 2014 12:12:19 PM JST

* Sun 12 Jan 2014 12:12:19 PM JST
    wait = 60

* Sun 12 Jan 2014 12:13:06 PM JST

* Sun 12 Jan 2014 12:13:06 PM JST

* Sun 12 Jan 2014 12:13:07 PM JST
        self.mac = mac

* Sun 12 Jan 2014 12:13:28 PM JST
                
* Sun 12 Jan 2014 12:17:13 PM JST
00:16:01:f9:d9:d7
* Sun 12 Jan 2014 12:20:35 PM JST
parent.plugins('isactive_machine', ip):
* Sun 12 Jan 2014 12:20:38 PM JST
if parent.plugins('isactive_machine', ip):
* Sun 12 Jan 2014 12:22:40 PM JST
            still_down = 'Still DOWN ping {0}/{1}'.format(i, pingmax)
            _sys.stdout.write('\r' + PRINTFORMAT(ip, still_down))
            _sys.stdout.flush()

* Sun 12 Jan 2014 12:25:54 PM JST
print('\n' + PRINTFORMAT(ip, 'UP!!\n'))
* Sun 12 Jan 2014 12:33:49 PM JST

* Sun 12 Jan 2014 12:33:49 PM JST

* Sun 12 Jan 2014 12:33:49 PM JST
        # TODO: (Atami) [2014/01/11]

* Sun 12 Jan 2014 12:33:49 PM JST
        # TODO: (Atami) [2014/01/11]

* Sun 12 Jan 2014 12:33:50 PM JST
        # TODO: (Atami) [2014/01/11]
        # sleep while reactive

* Sun 12 Jan 2014 12:33:50 PM JST
        # TODO: (Atami) [2014/01/11]
        # sleep while reactive

* Sun 12 Jan 2014 12:33:50 PM JST
        # TODO: (Atami) [2014/01/11]
        # sleep while reactive
        # reconnect

* Sun 12 Jan 2014 12:34:18 PM JST
0 == stdout.channel.recv_exit_status()
* Sun 12 Jan 2014 12:35:47 PM JST

* Sun 12 Jan 2014 12:35:47 PM JST

* Sun 12 Jan 2014 12:35:47 PM JST
        parent = kwargs['main']

* Sun 12 Jan 2014 12:50:06 PM JST

* Sun 12 Jan 2014 12:50:06 PM JST

* Sun 12 Jan 2014 12:50:06 PM JST
                        continue

* Sun 12 Jan 2014 12:55:14 PM JST
osutil.without_ext_basename(file_)
* Sun 12 Jan 2014 12:56:49 PM JST

* Sun 12 Jan 2014 12:56:49 PM JST

* Sun 12 Jan 2014 12:56:49 PM JST
                    print('')

* Sun 12 Jan 2014 12:56:53 PM JST
                        import warnings
                        warnings.warn('Plugin Warning already exists {}'
                                      .format(name))

* Sun 12 Jan 2014 12:58:36 PM JST
False
* Sun 12 Jan 2014 12:58:38 PM JST
False
* Sun 12 Jan 2014 01:00:40 PM JST
from plugin import PluginAbstract
* Sun 12 Jan 2014 01:01:30 PM JST
parent.pave()
* Sun 12 Jan 2014 01:21:35 PM JST
class RookInfo(object):
    r"""
    """
    host = rook.HOST
    username = rook.USER
    listen_port = rook.PORT
    kagi = KAGI
    kagiMD5 = KAGIMD5


class Rook2(RookInfo):
    r"""
    """

    pave = PaveRook()

    def __init__(self, ):
        r"""
        """
        self._ssh = None
        self.plugins = RookPlugin(self, os.path.dirname(extensions.__file__))

    def connect(self, ):
        r"""SUMMARY

        connect()

        @Return:
        """
        self.pave()
        if not self._ssh:
            self._ssh = paramiko.SSHClient()
            self._ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self._ssh.connect(self.host, self.listen_port, self.username)

    def reconnect(self, ):
        r"""SUMMARY

        reconnect()

        @Return:
        """
        self.close()
        self._ssh = None
        self.connect()

    def sendcmd(self, cmdline):
        r"""SUMMARY

        sendcmd(cmdline)

        @Arguments:
        - `cmdline`:

        @Return:
        """
        if not self._ssh:
            self.connect()
        return self._ssh.exec_command(cmdline)

    def close(self, ):
        r"""SUMMARY

        close()

        @Return:
        """
        if self._ssh:
            self._ssh.close()

    def __del__(self, ):
        self.close()

    def __enter__(self, ):
        return self

    def __exit__(self, ):
        self.close()

* Sun 12 Jan 2014 01:21:59 PM JST
import paramiko
* Sun 12 Jan 2014 01:22:11 PM JST
from ref.myinfo import rook, KAGI, KAGIMD5
* Sun 12 Jan 2014 01:22:54 PM JST
class RookPlugin(Plugin):
    r"""
    """
    def __init__(self, parent, path=None):
        r"""SUMMARY

        __init__(parent, path=None)

        @Arguments:
        - `parent`:
        - `path`:

        @Return:
        """
        Plugin.__init__(self, path=path)
        self.parent = parent

    def __call__(self, key, *args, **kwargs):
        return (super(RookPlugin, self)
                .__call__(key, self.parent, *args, **kwargs))


* Sun 12 Jan 2014 01:24:15 PM JST
from plugin import Plugin
* Sun 12 Jan 2014 01:24:25 PM JST

* Sun 12 Jan 2014 01:24:25 PM JST

* Sun 12 Jan 2014 01:24:25 PM JST
from plugin import Plugin

* Sun 12 Jan 2014 01:25:09 PM JST
class PortKnocker(object):
    r"""
    """

    def __init__(self, host, listen_port, opens, closes):
        r"""

        @Arguments:
        - `host`:
        - `listen_port`:
        - `opens`:
        - `close`:
        """
        self.host = host
        self.ports = PortsInfo(listen_port, opens, closes)

    def isopen(self):
        """Check open or close port on rook."""
        return tcpscan(self.host, self.ports.listen_port)

    def open(self, verbose=True):
        r"""SUMMARY

        open(verbose=True)

        @Arguments:
        - `verbose`:

        @Return:
        """
        knock(self.host, self.ports.knock.opens)

    def close(self, verbose=True):
        r"""SUMMARY

        close(verbose=True)

        @Arguments:
        - `verbose`:

        @Return:
        """
        knock(self.host, self.ports.knock.closes)


class CheckElapse(object):
    r"""
    """

    def __init__(self, interval=None):
        r"""

        @Arguments:
        - `times`:
        """
        self.maxelapse = interval or 60 # default 1 min
        self.lasttime = None

    def update_lasttime(self, ):
        r"""SUMMARY

        update_lasttime()

        @Return:
        """
        self.lasttime = time.time()

    def iselapsed(self, ):
        r"""SUMMARY

        iselapsed()

        @Return:
        """
        if self.lasttime is None:
            return True
        return (self.lasttime - time.time()) >= self.maxelapse

    def __nonzero__(self, ):
        return self.iselapsed()


class PaveRook(CheckElapse, AgentUtils):
    r"""
    """
    knocker = RookKnocker()
    keyring = AgentUtils(rook.KAGI, rook.KAGIMD5)

    def __init__(self, interval=None):
        r"""
        """
        self.elapse = CheckElapse(interval or 300)

    def __call__(self, ):
        self.pave()

    def pave(self, ):
        r"""SUMMARY

        pave()

        @Return:
        """
        self.pave_port()
        self.pave_key()

    def pave_port(self, ):
        r"""SUMMARY

        pave_port()

        @Return:
        """
        if not self.elapse:
            return None
        self.knocker.open()
        if not self.knocker.isopen():
            raise PortError('Could not open {} port.'
                            .format(self.knocker.isopen.port))
        self.elapse.update_lasttime()

    def pave_key(self, kagi=None):
        r"""SUMMARY

        pave_key(kagi=None)

        @Arguments:
        - `kagi`:

        @Return:
        """
        if self.keyring.haskeyring():
            return None
        kagi = kagi or self.keyring._kagi
        for _ in range(3):
            if self.keyring.haskeyring():
                break
            else:
                try:
                    add_keys(kagi)
                except:
                    raise SSHKeyError()
        if not self.keyring.haskeyring():
            raise StandardError()

* Sun 12 Jan 2014 01:25:32 PM JST
from knock import knock, tcpscan
* Sun 12 Jan 2014 01:26:01 PM JST
class KnockPortsInfo(object):
    r"""
    """
    __slots__ = ('opens', 'closes')

    def __init__(self, opens, closes):
        r"""

        @Arguments:
        - `opens`:
        - `closes`:
        """
        self.opens = opens
        self.closes = closes


class PortsInfo(object):
    r"""
    """
    __slots__ = ('listen_port', 'knock')

    def __init__(self, port, opens, closes):
        r"""

        @Arguments:
        - `port`:
        - `opens`:
        - `closes`:
        """
        self.listen_port = port
        self.knock = KnockPortsInfo(opens, closes)


* Sun 12 Jan 2014 01:26:40 PM JST
import time
* Sun 12 Jan 2014 01:27:07 PM JST
class RookKnocker(object):
    r"""
    """
    open = PortsKnocker(rook.HOST, rook.OPEN_PORT)
    close = PortsKnocker(rook.HOST, rook.CLOSE_PORT)
    isopen = CheckPort(rook.HOST, rook.PORT)


* Sun 12 Jan 2014 01:27:22 PM JST
class PortsKnocker(object):
    r"""
    """

    def __init__(self, host, ports):
        r"""

        @Arguments:
        - `host`:
        - `ports`:
        """
        self.host = host
        self.ports = ports

    def knock(self, verbose=False):
        r"""SUMMARY

        knock()

        @Return:
        """
        knock(self.host, self.ports, verbose=verbose)

    def __call__(self, verbose=False):
        r"""SUMMARY

        __call__()

        @Return:
        """
        self.knock(verbose=verbose)

* Sun 12 Jan 2014 01:27:34 PM JST
class CheckPort(object):
    r"""
    """

    def __init__(self, host, port):
        r"""

        @Arguments:
        - `host`:
        - `port`:
        """
        self.host = host
        self.port = port

    def isopen(self, ):
        r"""SUMMARY

        isopen()

        @Return:
        """
        return tcpscan(self.host, self.port)

    def __call__(self, ):
        return self.isopen()

* Sun 12 Jan 2014 01:28:06 PM JST
 as _os
* Sun 12 Jan 2014 01:28:35 PM JST
from rook import extensions # for directory
* Sun 12 Jan 2014 01:28:58 PM JST
from agent import AgentUtils, add_keys
* Sun 12 Jan 2014 01:29:18 PM JST
class PortError(StandardError):
    pass

* Sun 12 Jan 2014 01:29:42 PM JST
class PortError(StandardError):
    pass



* Sun 12 Jan 2014 01:30:50 PM JST
class SSHKeyError(StandardError):
    pass


* Sun 12 Jan 2014 01:31:11 PM JST
SSHKeyError
* Sun 12 Jan 2014 01:59:15 PM JST
class KnockPortsInfo(object):
    r"""
    """
    __slots__ = ('opens', 'closes')

    def __init__(self, opens, closes):
        r"""

        @Arguments:
        - `opens`:
        - `closes`:
        """
        self.opens = opens
        self.closes = closes


class PortsInfo(object):
    r"""
    """
    __slots__ = ('listen_port', 'knock')

    def __init__(self, port, opens, closes):
        r"""

        @Arguments:
        - `port`:
        - `opens`:
        - `closes`:
        """
        self.listen_port = port
        self.knock = KnockPortsInfo(opens, closes)


class PortKnocker(object):
    r"""
    """

    def __init__(self, host, listen_port, opens, closes):
        r"""

        @Arguments:
        - `host`:
        - `listen_port`:
        - `opens`:
        - `close`:
        """
        self.host = host
        self.ports = PortsInfo(listen_port, opens, closes)

    def isopen(self):
        """Check open or close port on rook."""
        return tcpscan(self.host, self.ports.listen_port)

    def open(self, verbose=True):
        r"""SUMMARY

        open(verbose=True)

        @Arguments:
        - `verbose`:

        @Return:
        """
        knock(self.host, self.ports.knock.opens)

    def close(self, verbose=True):
        r"""SUMMARY

        close(verbose=True)

        @Arguments:
        - `verbose`:

        @Return:
        """
        knock(self.host, self.ports.knock.closes)

* Sun 12 Jan 2014 01:59:25 PM JST
PortKnocker
* Sun 12 Jan 2014 02:00:28 PM JST
class PortsKnocker(object):
    r"""
    """

    def __init__(self, host, ports):
        r"""

        @Arguments:
        - `host`:
        - `ports`:
        """
        self.host = host
        self.ports = ports

    def knock(self, verbose=False):
        r"""SUMMARY

        knock()

        @Return:
        """
        knock(self.host, self.ports, verbose=verbose)

    def __call__(self, verbose=False):
        r"""SUMMARY

        __call__()

        @Return:
        """
        self.knock(verbose=verbose)


* Sun 12 Jan 2014 02:00:56 PM JST
PortsKnocker
* Sun 12 Jan 2014 02:01:50 PM JST
knock, 
* Sun 12 Jan 2014 02:03:45 PM JST

* Sun 12 Jan 2014 02:03:45 PM JST

* Sun 12 Jan 2014 02:03:45 PM JST
        @Return:

* Sun 12 Jan 2014 02:09:50 PM JST
class CheckPort(object):
    r"""
    """

    def __init__(self, host, port):
        r"""

        @Arguments:
        - `host`: (str) host address.
        - `port`: (int) port number.
        """
        self.host = host
        self.port = port

    def isopen(self, ):
        r"""SUMMARY

        isopen()

        @Return:
        """
        return tcpscan(self.host, self.port)

    def __call__(self, ):
        return self.isopen()

    def __nonzero__(self, ):
        return self.isopen()


* Sun 12 Jan 2014 02:09:58 PM JST
CheckPort
* Sun 12 Jan 2014 02:10:15 PM JST
CheckPort
* Sun 12 Jan 2014 02:10:39 PM JST

* Sun 12 Jan 2014 02:10:39 PM JST

* Sun 12 Jan 2014 02:10:39 PM JST
from agent import AgentUtils, add_keys

* Sun 12 Jan 2014 02:10:47 PM JST
tcpscan, 
* Sun 12 Jan 2014 02:17:14 PM JST
class CheckElapse(object):
    r"""
    """

    def __init__(self, interval=None):
        r"""

        @Arguments:
        - `interval`: (int) second of interval. If None, default 60.
        """
        self.maxelapse = interval or 60 # default 1 min
        self.lasttime = None

    def update_lasttime(self, ):
        r"""SUMMARY

        update_lasttime()

        @Return:
        """
        self.lasttime = time.time()

    def iselapsed(self, ):
        r"""SUMMARY

        iselapsed()

        @Return:
        """
        if self.lasttime is None:
            return True
        return (self.lasttime - time.time()) >= self.maxelapse

    def __nonzero__(self, ):
        return self.iselapsed()



* Sun 12 Jan 2014 02:17:27 PM JST

* Sun 12 Jan 2014 02:17:27 PM JST

* Sun 12 Jan 2014 02:17:27 PM JST
import time

* Sun 12 Jan 2014 02:17:56 PM JST
CheckElapse
* Sun 12 Jan 2014 02:18:39 PM JST
CheckElapse, 
* Sun 12 Jan 2014 02:20:13 PM JST
SUMMARY
* Sun 12 Jan 2014 02:21:06 PM JST
SUMMARY
* Sun 12 Jan 2014 02:23:35 PM JST
from ref.myinfo import rook
* Sun 12 Jan 2014 02:33:34 PM JST

* Sun 12 Jan 2014 02:33:35 PM JST

* Sun 12 Jan 2014 02:33:35 PM JST
        from socket import gethostbyname

* Sun 12 Jan 2014 02:36:02 PM JST
'taka16.no-ip.info'
* Sun 12 Jan 2014 02:37:07 PM JST
str
* Sun 12 Jan 2014 02:38:01 PM JST
hostname
* Sun 12 Jan 2014 02:44:54 PM JST
getnameinfo
* Sun 12 Jan 2014 02:45:11 PM JST
'taka16.no-ip.info'
* Sun 12 Jan 2014 02:46:01 PM JST
socket.getnameinfo
* Sun 12 Jan 2014 02:50:32 PM JST
getaddrinfo
* Sun 12 Jan 2014 02:50:45 PM JST
gethostname
* Sun 12 Jan 2014 02:50:57 PM JST
'taka16.no-ip.info'
* Sun 12 Jan 2014 02:51:25 PM JST
getaddrinfo
* Sun 12 Jan 2014 02:51:39 PM JST
'taka16.no-ip.info'
* Sun 12 Jan 2014 02:52:08 PM JST
gethostbyname_ex
* Sun 12 Jan 2014 02:52:21 PM JST
'taka16.no-ip.info'
* Sun 12 Jan 2014 02:52:42 PM JST
getfqdn
* Sun 12 Jan 2014 02:52:49 PM JST
'taka16.no-ip.info'
* Sun 12 Jan 2014 02:53:18 PM JST

* Sun 12 Jan 2014 02:53:18 PM JST

* Sun 12 Jan 2014 02:53:18 PM JST
from socket import gethostbyname

* Sun 12 Jan 2014 03:06:25 PM JST
socket.gethostbyname(self.hostname)
* Sun 12 Jan 2014 03:06:48 PM JST
        if not force and self._ipv4:
            return self._ipv4
        self._ipv4 = socket.gethostbyname(self.hostname)

* Sun 12 Jan 2014 03:06:54 PM JST
socket.getfqdn(self.hostname)
* Sun 12 Jan 2014 03:07:34 PM JST
rook
* Sun 12 Jan 2014 03:07:35 PM JST
import rook
* Sun 12 Jan 2014 03:07:54 PM JST
'taka16.no-ip.info'
* Sun 12 Jan 2014 03:11:23 PM JST
import socket

class HostName(object):
    r"""
    """

    def __init__(self, hostname):
        r"""SUMMARY

        __init__(hostname)

        @Arguments:
        - `hostname`:

        @Return:
        """
        self.hostname = hostname
        self._ipv4 = None
        self._fqdn = None

    def __repr__(self, ):
        return repr(self.hostname)

    def __str__(self, ):
        return self.hostname

    @property
    def ipv4(self, ):
        r"""SUMMARY

        ipv4()

        @Return:
        """
        return self.gethostbyname()

    @property
    def fqdn(self, ):
        r"""SUMMARY

        fqdn()

        @Return:
        """
        return self.getfqdn()

    def gethostbyname(self, force=False):
        r"""SUMMARY

        gethostbyname()

        @Return:
        """
        if not force and self._ipv4:
            return self._ipv4
        self._ipv4 = socket.gethostbyname(self.hostname)
        return self._ipv4

    def getfqdn(self, force=False):
        r"""SUMMARY

        getfqdn()

        @Return:
        """
        if not force and self._fqdn:
            return self._fqdn
        self._fqdn = socket.getfqdn(self.hostname)
        return self._fqdn

* Sun 12 Jan 2014 03:11:33 PM JST

* Sun 12 Jan 2014 03:11:33 PM JST

* Sun 12 Jan 2014 03:11:33 PM JST
import socket

* Sun 12 Jan 2014 03:12:44 PM JST
HostName
* Sun 12 Jan 2014 03:16:33 PM JST
SUMMARY
* Sun 12 Jan 2014 03:17:15 PM JST
paramiko.SSHClient()
* Sun 12 Jan 2014 03:18:08 PM JST
the stdin, stdout, and stderr of the executing command
* Sun 12 Jan 2014 03:25:19 PM JST

* Sun 12 Jan 2014 03:25:19 PM JST

* Sun 12 Jan 2014 03:25:19 PM JST
    kagi = KAGI

* Sun 12 Jan 2014 03:25:19 PM JST
    kagi = KAGI

* Sun 12 Jan 2014 03:25:19 PM JST
    kagi = KAGI
    kagiMD5 = KAGIMD5

* Sun 12 Jan 2014 03:56:27 PM JST
    host = HostName(rook.HOST)
    username = rook.USER
    listen_port = rook.PORT

* Sun 12 Jan 2014 04:07:28 PM JST
HOST = 'taka16.no-ip.info'
* Sun 12 Jan 2014 04:07:32 PM JST
USER = 'root'
* Sun 12 Jan 2014 04:07:36 PM JST
PORT = 12316
* Sun 12 Jan 2014 04:07:39 PM JST
MAC = '00:1D:73:1A:C0:9C'
* Sun 12 Jan 2014 04:07:42 PM JST
OPEN_PORT = [12317, 12318, 12319]
* Sun 12 Jan 2014 04:07:46 PM JST
CLOSE_PORT = [12313, 12314, 12315]
* Sun 12 Jan 2014 04:11:24 PM JST
HOST, USER, PORT, MAC, OPEN_PORT, CLOSE_PORT
* Sun 12 Jan 2014 04:11:31 PM JST
KAGI, KAGIMD5
* Sun 12 Jan 2014 04:12:08 PM JST
rook.
* Sun 12 Jan 2014 04:12:09 PM JST
rook.
* Sun 12 Jan 2014 04:12:11 PM JST
rook.
* Sun 12 Jan 2014 04:12:13 PM JST
rook.
* Sun 12 Jan 2014 04:12:15 PM JST
rook.
* Sun 12 Jan 2014 04:12:17 PM JST
rook.
* Sun 12 Jan 2014 04:12:20 PM JST
rook.
* Sun 12 Jan 2014 04:12:22 PM JST
rook.
* Sun 12 Jan 2014 04:12:52 PM JST
rook.
* Sun 12 Jan 2014 04:12:54 PM JST
rook.
* Sun 12 Jan 2014 04:12:56 PM JST
rook.
* Sun 12 Jan 2014 04:13:15 PM JST

* Sun 12 Jan 2014 04:13:15 PM JST

* Sun 12 Jan 2014 04:13:15 PM JST
from ref.myinfo import rook, KAGI, KAGIMD5

* Sun 12 Jan 2014 04:33:32 PM JST
from t1.socketutil import HostName
* Sun 12 Jan 2014 04:40:41 PM JST
search
* Sun 12 Jan 2014 04:42:29 PM JST
MAC = '00:1D:73:1A:C0:9C'
* Sun 12 Jan 2014 04:48:18 PM JST
self
* Sun 12 Jan 2014 04:49:42 PM JST
self.
* Sun 12 Jan 2014 04:51:12 PM JST
'00:1d:73:1a:c0:9c'
* Sun 12 Jan 2014 10:07:31 PM JST
RookPaveKey
* Sun 12 Jan 2014 10:07:46 PM JST
kagiMD5
* Sun 12 Jan 2014 10:07:53 PM JST
RookPaveKey
* Sun 12 Jan 2014 10:08:04 PM JST
kagiMD5
* Sun 12 Jan 2014 10:11:24 PM JST
key
* Sun 12 Jan 2014 10:24:08 PM JST
object
* Sun 12 Jan 2014 11:04:40 PM JST
open_ports = OPEN_PORT
* Sun 12 Jan 2014 11:04:45 PM JST

* Sun 12 Jan 2014 11:04:45 PM JST

* Sun 12 Jan 2014 11:04:45 PM JST
        self._open_ports = open_ports

* Sun 12 Jan 2014 11:08:23 PM JST
Close
* Sun 12 Jan 2014 11:22:41 PM JST

* Sun 12 Jan 2014 11:22:41 PM JST

* Sun 12 Jan 2014 11:22:41 PM JST
        self.host = host

* Sun 12 Jan 2014 11:25:44 PM JST
pass
* Sun 12 Jan 2014 11:36:13 PM JST

* Sun 12 Jan 2014 11:36:13 PM JST

* Sun 12 Jan 2014 11:36:13 PM JST
        self._host = host

* Sun 12 Jan 2014 11:36:16 PM JST

* Sun 12 Jan 2014 11:36:16 PM JST

* Sun 12 Jan 2014 11:36:16 PM JST
        self._interval = interval

* Sun 12 Jan 2014 11:57:51 PM JST
    host = HostName(HOST)
    username = USER
    listen_port = PORT

* Sun 12 Jan 2014 11:57:55 PM JST
listen_
* Sun 12 Jan 2014 11:58:04 PM JST
RookPave
* Sun 12 Jan 2014 11:58:21 PM JST

* Sun 12 Jan 2014 11:58:21 PM JST

* Sun 12 Jan 2014 11:58:21 PM JST
    pave = RookPave()

* Mon 13 Jan 2014 12:00:03 AM JST
listen_
* Mon 13 Jan 2014 12:01:52 AM JST
class RookPlugin(Plugin):
    r"""
    """
    def __init__(self, parent, path=None):
        r"""SUMMARY

        __init__(parent, path=None)

        @Arguments:
        - `parent`:
        - `path`:

        @Return:
        """
        Plugin.__init__(self, path=path)
        self.parent = parent

    def __call__(self, key, *args, **kwargs):
        return (super(RookPlugin, self)
                .__call__(key, self.parent, *args, **kwargs))


* Mon 13 Jan 2014 12:04:16 AM JST
import
* Mon 13 Jan 2014 12:06:52 AM JST
TcpScan
* Mon 13 Jan 2014 12:09:03 AM JST
TcpScan.__init__(self, host, PORT)
* Mon 13 Jan 2014 12:09:45 AM JST

* Mon 13 Jan 2014 12:09:45 AM JST

* Mon 13 Jan 2014 12:09:45 AM JST
        self.host = host

* Mon 13 Jan 2014 12:10:14 AM JST
RookOpenPort
* Mon 13 Jan 2014 12:11:38 AM JST
RookOpenPort
* Mon 13 Jan 2014 12:12:12 AM JST

* Mon 13 Jan 2014 12:12:12 AM JST

* Mon 13 Jan 2014 12:12:12 AM JST
        TcpScan.__init__(self, host, PORT)

* Mon 13 Jan 2014 12:15:52 AM JST

* Mon 13 Jan 2014 12:15:52 AM JST

* Mon 13 Jan 2014 12:15:52 AM JST
    port = PORT

* Mon 13 Jan 2014 12:32:36 AM JST
import 
* Mon 13 Jan 2014 12:36:14 AM JST
repr(
* Mon 13 Jan 2014 12:37:32 AM JST
object
* Mon 13 Jan 2014 12:37:34 AM JST
object
* Mon 13 Jan 2014 12:38:02 AM JST

* Mon 13 Jan 2014 12:38:02 AM JST

* Mon 13 Jan 2014 12:38:02 AM JST
        self.hostname = hostname

* Mon 13 Jan 2014 12:41:30 AM JST
import 
* Mon 13 Jan 2014 12:45:49 AM JST
plugin
* Mon 13 Jan 2014 12:48:45 AM JST
pass
* Mon 13 Jan 2014 12:56:05 AM JST
self.plugins('globalip')
* Mon 13 Jan 2014 12:59:15 AM JST
        
* Mon 13 Jan 2014 01:01:56 AM JST
getaddrinfo
* Mon 13 Jan 2014 01:07:35 AM JST
import
* Mon 13 Jan 2014 01:10:27 AM JST
SUMMARY
* Mon 13 Jan 2014 01:10:34 AM JST
global
* Mon 13 Jan 2014 01:54:45 AM JST
    def setUp(self):
        self.rook = Rook()
        self.plugins = self.rook.plugins
        self.plugins.load()
        self.mocker.replay()
* Mon 13 Jan 2014 01:54:50 AM JST

* Mon 13 Jan 2014 01:54:51 AM JST

* Mon 13 Jan 2014 01:54:51 AM JST
        self.plugins = self.rook.plugins

* Mon 13 Jan 2014 01:54:51 AM JST
        self.plugins = self.rook.plugins

* Mon 13 Jan 2014 01:54:51 AM JST
        self.plugins = self.rook.plugins
        self.plugins.load()

* Mon 13 Jan 2014 01:54:57 AM JST
    def tearDown(self):
        self.rook.close()

* Mon 13 Jan 2014 02:01:23 AM JST
self.
* Mon 13 Jan 2014 02:02:18 AM JST
SUMMARY
* Mon 13 Jan 2014 02:06:23 AM JST
SUMMARY
* Mon 13 Jan 2014 02:07:58 AM JST

* Mon 13 Jan 2014 02:07:58 AM JST

* Mon 13 Jan 2014 02:07:58 AM JST
        @Return:

* Mon 13 Jan 2014 02:08:23 AM JST
    
* Mon 13 Jan 2014 02:09:03 AM JST
    
* Mon 13 Jan 2014 02:09:15 AM JST
SUMMARY
* Mon 13 Jan 2014 02:10:38 AM JST
    
* Mon 13 Jan 2014 02:11:02 AM JST
(int) pave elapse seconds.
* Mon 13 Jan 2014 02:12:08 AM JST
RookPaveKey
* Mon 13 Jan 2014 02:12:29 AM JST
SUMMARY
* Mon 13 Jan 2014 02:13:47 AM JST

* Mon 13 Jan 2014 02:13:47 AM JST

* Mon 13 Jan 2014 02:13:48 AM JST
        @Return:

* Mon 13 Jan 2014 02:14:30 AM JST
(int) pave elapse seconds.
* Mon 13 Jan 2014 02:14:43 AM JST
(str) host name.
* Mon 13 Jan 2014 02:15:04 AM JST
SUMMARY
* Mon 13 Jan 2014 02:15:11 AM JST
Close 
* Mon 13 Jan 2014 02:15:31 AM JST

* Mon 13 Jan 2014 02:15:31 AM JST

* Mon 13 Jan 2014 02:15:31 AM JST
        @Return:

* Mon 13 Jan 2014 02:16:46 AM JST
SUMMARY
* Mon 13 Jan 2014 02:17:19 AM JST
    
* Mon 13 Jan 2014 02:20:22 AM JST
    
* Mon 13 Jan 2014 02:20:55 AM JST

* Mon 13 Jan 2014 02:20:55 AM JST

* Mon 13 Jan 2014 02:20:55 AM JST
        - `open_ports`:

* Mon 13 Jan 2014 02:22:42 AM JST
    
* Mon 13 Jan 2014 02:33:59 AM JST
KingError
* Mon 13 Jan 2014 02:34:05 AM JST
KingError
* Mon 13 Jan 2014 02:37:42 AM JST

* Mon 13 Jan 2014 02:37:42 AM JST

* Mon 13 Jan 2014 02:37:42 AM JST
        self._path = path

* Mon 13 Jan 2014 02:37:49 AM JST
    def __call__(self, key, *args, **kwargs):
        return (super(RookPlugin, self)
                .__call__(key, self.parent, *args, **kwargs))

* Mon 13 Jan 2014 02:37:58 AM JST
Rook
* Mon 13 Jan 2014 02:38:07 AM JST
                
* Mon 13 Jan 2014 12:01:51 PM JST
fmt = '{0: <14}: {1}'.format
* Mon 13 Jan 2014 12:01:58 PM JST
strs, append = listutil.list_append()
* Mon 13 Jan 2014 12:02:46 PM JST
append(repr(self))
* Mon 13 Jan 2014 12:03:11 PM JST
append('{0: <14}: {1} ({2})'.format('version', __version__,
                                              __revision__))
* Mon 13 Jan 2014 12:03:18 PM JST
               
* Mon 13 Jan 2014 12:03:27 PM JST
append('{0: <14}: {1}({2})'.format('host', gethostbyname(self._host),
                                             self._host))
* Mon 13 Jan 2014 12:04:35 PM JST
D 
* Mon 13 Jan 2014 12:04:48 PM JST
                                             
* Mon 13 Jan 2014 12:05:10 PM JST
ipv4
* Mon 13 Jan 2014 12:06:26 PM JST
append(fmt('username', self._user))
* Mon 13 Jan 2014 12:06:44 PM JST
append(fmt('SSH key', self._kagi))
* Mon 13 Jan 2014 12:13:31 PM JST
append(fmt('SSH key md5', self._kagiMD5))
* Mon 13 Jan 2014 12:13:41 PM JST
append(fmt('Listen port', self._listen_port))
* Mon 13 Jan 2014 12:13:46 PM JST
Listen
* Mon 13 Jan 2014 12:13:50 PM JST
_listen_
* Mon 13 Jan 2014 12:14:02 PM JST
append(fmt('Opening ports', self._open_ports))
* Mon 13 Jan 2014 12:14:10 PM JST
append(fmt('Closing ports', self._close_ports))
* Mon 13 Jan 2014 12:15:39 PM JST
return '\n'.join(strs)
* Mon 13 Jan 2014 12:29:14 PM JST
class MyList(list): pass
* Mon 13 Jan 2014 12:37:54 PM JST

* Mon 13 Jan 2014 12:37:54 PM JST

* Mon 13 Jan 2014 12:37:54 PM JST
        append('{0: <14}: {1} ({2})'

* Mon 13 Jan 2014 12:37:55 PM JST
        append('{0: <14}: {1} ({2})'

* Mon 13 Jan 2014 12:37:55 PM JST
        append('{0: <14}: {1} ({2})'
               .format('version', __version__, __revision__))

* Mon 13 Jan 2014 12:38:13 PM JST
        append(fmt('version'       , __version__))
        append(fmt('revision'      , __revision__))

* Mon 13 Jan 2014 01:08:57 PM JST
TESTFMT
* Mon 13 Jan 2014 01:19:41 PM JST
self.
* Mon 13 Jan 2014 01:21:50 PM JST
from confirm import yesno
* Mon 13 Jan 2014 01:22:21 PM JST
if yesno('\rRetry it? [y/n]: '):
* Mon 13 Jan 2014 01:24:41 PM JST
parent.plugins('')
* Mon 13 Jan 2014 01:26:33 PM JST
King
* Mon 13 Jan 2014 01:26:39 PM JST
DecryptError
* Mon 13 Jan 2014 01:27:25 PM JST
'/usr/bin/sudo /bin/mount /dev/mapper/data_crypt /data'
* Mon 13 Jan 2014 01:29:02 PM JST
data_crypt
* Mon 13 Jan 2014 01:29:48 PM JST
MAPPERPATH
* Mon 13 Jan 2014 01:40:17 PM JST
import pexpect as _pexpect
* Mon 13 Jan 2014 01:40:24 PM JST
_pexpect
* Mon 13 Jan 2014 01:40:25 PM JST
as _pexpect
* Mon 13 Jan 2014 01:41:26 PM JST
pexpect.spawn('ssh ki', maxread=4000)
* Mon 13 Jan 2014 01:43:04 PM JST
'/usr/bin/sudo /sbin/cryptsetup luksOpen {0} {1}'
* Mon 13 Jan 2014 01:45:13 PM JST
from ref.myinfo import king
* Mon 13 Jan 2014 01:46:01 PM JST
DECRYPTED_DISK_NAME
* Mon 13 Jan 2014 01:46:24 PM JST
MAPPERNAME
* Mon 13 Jan 2014 01:46:29 PM JST
MAPPERNAME
* Mon 13 Jan 2014 01:47:53 PM JST
ex
* Mon 13 Jan 2014 01:47:53 PM JST
self.ex
* Mon 13 Jan 2014 01:48:13 PM JST
['\[sudo\] password', '3 incorrect',
                      'Enter passphrase', '[#\$]']
* Mon 13 Jan 2014 01:48:15 PM JST
                      
* Mon 13 Jan 2014 01:49:22 PM JST
index = self._pexpect.expect(expect_lis)
* Mon 13 Jan 2014 02:00:20 PM JST
'[sudo] password for {0}: '
* Mon 13 Jan 2014 02:04:43 PM JST
incorrect_sudo_password
* Mon 13 Jan 2014 02:05:58 PM JST
pex
* Mon 13 Jan 2014 02:06:00 PM JST
parent
* Mon 13 Jan 2014 02:18:57 PM JST
'Enter passphrase for {0}: '.format(
                        self._crypted_disk)
* Mon 13 Jan 2014 02:19:10 PM JST
                        
* Mon 13 Jan 2014 02:19:45 PM JST
CRYPTDISK
* Mon 13 Jan 2014 02:19:50 PM JST
                             
* Mon 13 Jan 2014 02:20:08 PM JST
print('No key available with this passphrase.')
* Mon 13 Jan 2014 02:22:51 PM JST
IncorrectPassword
* Mon 13 Jan 2014 02:23:13 PM JST
'incorrected sudo password.'
* Mon 13 Jan 2014 02:26:30 PM JST
self
* Mon 13 Jan 2014 02:27:15 PM JST
'incorrected cryptsetup password.'
* Mon 13 Jan 2014 02:29:03 PM JST
index = pex.expect(self.expects)
* Mon 13 Jan 2014 02:30:20 PM JST
index = self._pexpect.expect(expect_lis)
* Mon 13 Jan 2014 02:30:38 PM JST
_
* Mon 13 Jan 2014 02:30:38 PM JST
self._
* Mon 13 Jan 2014 02:30:44 PM JST
self.expects
* Mon 13 Jan 2014 02:30:57 PM JST
        try:
            self.dispatcher[index](pex, parent)
        except IncorrectPassword:
            pass

* Mon 13 Jan 2014 02:32:29 PM JST
crypt_password
* Mon 13 Jan 2014 02:32:43 PM JST
failed_password
* Mon 13 Jan 2014 02:48:39 PM JST
def h
* Mon 13 Jan 2014 02:48:40 PM JST
    def h
* Mon 13 Jan 2014 02:50:56 PM JST
self.
* Mon 13 Jan 2014 02:57:06 PM JST
import 
* Mon 13 Jan 2014 03:03:41 PM JST
from sleep_progress import sleep_progress
* Mon 13 Jan 2014 03:03:47 PM JST

* Mon 13 Jan 2014 03:03:47 PM JST

* Mon 13 Jan 2014 03:03:47 PM JST
from sleep_progress import sleep_progress

* Mon 13 Jan 2014 03:03:59 PM JST

* Mon 13 Jan 2014 03:03:59 PM JST

* Mon 13 Jan 2014 03:03:59 PM JST
from sleep_progress import sleep_progress

* Mon 13 Jan 2014 03:05:48 PM JST
'/usr/bin/sudo /sbin/halt'
* Mon 13 Jan 2014 03:06:05 PM JST
sleep_progress(10, PRINTFORMAT.format('Waiting', '%-2d seconds'))
* Mon 13 Jan 2014 03:06:57 PM JST
from rook import Rook, CHAPTERFORMAT, PRINTFORMAT
* Mon 13 Jan 2014 03:07:05 PM JST
CHAPTERFORMAT, 
* Mon 13 Jan 2014 03:07:05 PM JST
Rook, CHAPTERFORMAT, 
* Mon 13 Jan 2014 03:07:10 PM JST
format
* Mon 13 Jan 2014 03:07:47 PM JST
core
* Mon 13 Jan 2014 03:10:30 PM JST
'Could not shutdown ki server.'
* Mon 13 Jan 2014 03:34:13 PM JST

* Mon 13 Jan 2014 03:34:13 PM JST

* Mon 13 Jan 2014 03:34:13 PM JST
    router = Rook()

* Mon 13 Jan 2014 03:40:43 PM JST
self
* Mon 13 Jan 2014 03:41:43 PM JST
from ref.myinfo import king
* Mon 13 Jan 2014 03:42:01 PM JST
MAC
* Mon 13 Jan 2014 04:33:00 PM JST

* Mon 13 Jan 2014 04:33:00 PM JST

* Mon 13 Jan 2014 04:33:00 PM JST
        self.localip = '192.168.1.123'

* Mon 13 Jan 2014 04:33:00 PM JST
        self.localip = '192.168.1.123'

* Mon 13 Jan 2014 04:33:01 PM JST
        self.localip = '192.168.1.123'
        self.mac = MAC

* Mon 13 Jan 2014 04:34:39 PM JST
    def paverook(self, ):
        r"""SUMMARY

        paverook()

        @Return:
        """
        self.router.pave()


* Mon 13 Jan 2014 04:35:15 PM JST
    def __init__(self, ):
        r"""
        """
        self.router = Rook()


* Mon 13 Jan 2014 04:35:25 PM JST
    def paverook(self, ):
        r"""SUMMARY

        paverook()

        @Return:
        """
        self.router.pave()


* Mon 13 Jan 2014 04:35:40 PM JST
KingRookHandler
* Mon 13 Jan 2014 04:42:48 PM JST
class Tunneling(object):
    """SSH Tunnel Object."""

    _tunneling_flag = False

    def hastunnel(self):
        """Check tunneling now.

        If listen port 12316 then return True.
        Else return False.
        """
        netstat = _subp.Popen(['/bin/netstat', '-ltn'], stdout=_subp.PIPE)
        self.tunneling_flag = ('127.0.0.1:12316' in netstat.stdout.read())
        return self.tunneling_flag

    def gettunnel(self):
        """Create port forwarding ssh."""
        cmd = ('/usr/bin/ssh', '-f', '-N', '-i', KAGI, '-p', str(rook.PORT),
               '-L', '12316:' + king.IP + ':' + str(king.PORT),
               rook.USER + '@' + rook.HOST)
        try:
            _subp.Popen(cmd)
            _sleep(3)
            return self.hastunnel()
        except:
            raise TunnelError()
* Mon 13 Jan 2014 06:27:13 PM JST
KAGI
* Mon 13 Jan 2014 06:29:44 PM JST
'127.0.0.1:12316'
* Mon 13 Jan 2014 06:32:13 PM JST
class TunnelError(StandardError):
    pass
* Mon 13 Jan 2014 06:32:24 PM JST
class Tunneling(object):
    """SSH Tunnel Object."""

    _tunneling_flag = False

    def hastunnel(self):
        """Check tunneling now.

        If listen port 12316 then return True.
        Else return False.
        """
        netstat = _subp.Popen(['/bin/netstat', '-ltn'], stdout=_subp.PIPE)
        self.tunneling_flag = ('127.0.0.1:12316' in netstat.stdout.read())
        return self.tunneling_flag

    def gettunnel(self):
        """Create port forwarding ssh."""
        cmd = ('/usr/bin/ssh', '-f', '-N', '-i', KAGI, '-p', str(rook.PORT),
               '-L', '12316:' + king.IP + ':' + str(king.PORT),
               rook.USER + '@' + rook.HOST)
        try:
            _subp.Popen(cmd)
            _sleep(3)
            return self.hastunnel()
        except:
            raise TunnelError()
* Mon 13 Jan 2014 06:32:35 PM JST
import subprocess as _subp
from time import sleep as _sleep

from ref.myinfo import KAGI, king, rook

* Mon 13 Jan 2014 06:33:07 PM JST
class Tunnel(object):
    """SSH Tunnel Object."""

    _tunneling_flag = False

    def __init__(self, kagi, port, local_door):
        r"""SUMMARY

        __init__(local_door)

        @Arguments:
        - `local_door`:

        @Return:
        """
        self.kagi = kagi
        self.local_door = local_door or '127.0.0.1:12316'
        self.rookport = port

    def hastunnel(self):
        """Check tunneling now.

        If listen port 12316 then return True.
        Else return False.
        """
        netstat = _subp.Popen(('/bin/netstat', '-ltn'), stdout=_subp.PIPE)
        self.tunneling_flag = (self.local_door in netstat.stdout.read())
        return self.tunneling_flag

    def gettunnel(self):
        """Create port forwarding ssh."""
        cmd = ('/usr/bin/ssh', '-f', '-N', '-i', self.kagi, '-p',
               str(self.rookport),
               '-L', '12316:' + king.IP + ':' + str(king.PORT),
               rook.USER + '@' + rook.HOST)
        try:
            _subp.Popen(cmd)
            _sleep(3)
            return self.hastunnel()
        except:
            raise TunnelError()
* Mon 13 Jan 2014 06:36:58 PM JST
self.tunneling_flag = (
* Mon 13 Jan 2014 06:37:02 PM JST
tunneling_flag
* Mon 13 Jan 2014 06:37:06 PM JST
self.local_door in netstat.stdout.read()
* Mon 13 Jan 2014 06:40:04 PM JST

* Mon 13 Jan 2014 06:40:04 PM JST

* Mon 13 Jan 2014 06:40:04 PM JST
        # self.local_door = local_door or '127.0.0.1:12316'

* Mon 13 Jan 2014 06:53:59 PM JST
12316
* Mon 13 Jan 2014 06:54:31 PM JST
local
* Mon 13 Jan 2014 06:54:38 PM JST
                
* Mon 13 Jan 2014 06:54:58 PM JST
format_spec
* Mon 13 Jan 2014 06:55:11 PM JST
              
* Mon 13 Jan 2014 10:35:17 PM JST
rook.USER
* Mon 13 Jan 2014 10:35:21 PM JST
rook.HOST
* Mon 13 Jan 2014 10:46:42 PM JST
self.host
* Mon 13 Jan 2014 10:46:51 PM JST
self.hostport
* Mon 13 Jan 2014 10:55:20 PM JST

* Mon 13 Jan 2014 10:55:20 PM JST

* Mon 13 Jan 2014 10:55:20 PM JST
    _tunneling_flag = False

* Mon 13 Jan 2014 11:23:45 PM JST
                   
* Mon 13 Jan 2014 11:23:49 PM JST
                   
* Mon 13 Jan 2014 11:23:54 PM JST
                   
* Mon 13 Jan 2014 11:26:36 PM JST
                   
* Mon 13 Jan 2014 11:32:08 PM JST

* Mon 13 Jan 2014 11:32:08 PM JST

* Mon 13 Jan 2014 11:32:08 PM JST
        self.host = host

* Mon 13 Jan 2014 11:32:47 PM JST
 -i{.kagi}
* Mon 13 Jan 2014 11:34:28 PM JST
local
* Mon 13 Jan 2014 11:34:35 PM JST
localport
* Mon 13 Jan 2014 11:41:51 PM JST

* Mon 13 Jan 2014 11:41:51 PM JST

* Mon 13 Jan 2014 11:41:51 PM JST
        self.rookport = port

* Mon 13 Jan 2014 11:41:57 PM JST
forwarder_host
* Mon 13 Jan 2014 11:42:39 PM JST
kagi,
* Mon 13 Jan 2014 11:42:47 PM JST
port,
* Mon 13 Jan 2014 11:44:03 PM JST
bindport,
* Mon 13 Jan 2014 11:44:15 PM JST
                    
* Mon 13 Jan 2014 11:46:52 PM JST
cmdline
* Mon 13 Jan 2014 11:51:07 PM JST
.format
* Mon 13 Jan 2014 11:57:39 PM JST

* Mon 13 Jan 2014 11:57:40 PM JST

* Mon 13 Jan 2014 11:57:40 PM JST
'tes'.format

* Tue 14 Jan 2014 12:05:59 AM JST
port=22,
* Tue 14 Jan 2014 12:48:06 AM JST

* Tue 14 Jan 2014 12:48:06 AM JST

* Tue 14 Jan 2014 12:48:06 AM JST
        self.tunnel = 

* Tue 14 Jan 2014 10:53:54 AM JST
from ref.myinfo.king import MAC, IP, PORT
* Tue 14 Jan 2014 10:53:57 AM JST
king.
* Tue 14 Jan 2014 11:21:35 AM JST
self.plugins = RookPlugin(self, os.path.dirname(extensions.__file__))
* Tue 14 Jan 2014 11:36:54 AM JST
self.plugins = RookPlugin(self, os.path.dirname(extensions.__file__))
* Tue 14 Jan 2014 11:37:03 AM JST
Rook
* Tue 14 Jan 2014 11:37:15 AM JST
_os
* Tue 14 Jan 2014 11:43:08 AM JST
if self.plugins('ismount'):
            return True
* Tue 14 Jan 2014 11:43:17 AM JST
True
* Tue 14 Jan 2014 11:43:47 AM JST
if not 
* Tue 14 Jan 2014 11:43:51 AM JST

* Tue 14 Jan 2014 11:43:51 AM JST

* Tue 14 Jan 2014 11:43:51 AM JST
            return False

* Tue 14 Jan 2014 11:43:51 AM JST
            return False

* Tue 14 Jan 2014 11:43:51 AM JST
            return False
        return True

* Tue 14 Jan 2014 11:53:37 AM JST
self._ssh = _paramiko.SSHClient()
* Tue 14 Jan 2014 11:53:42 AM JST
self._ssh.set_missing_host_key_policy(_paramiko.AutoAddPolicy())
* Tue 14 Jan 2014 11:53:47 AM JST
self._ssh.connect(self._host, self._listen_port, self._user)
* Tue 14 Jan 2014 11:54:45 AM JST
listen_
* Tue 14 Jan 2014 11:58:21 AM JST
king
* Tue 14 Jan 2014 11:58:30 AM JST
from ref.myinfo
* Tue 14 Jan 2014 12:10:32 PM JST
    def sendcmd(self, cmdline):
        r"""SUMMARY

        sendcmd(cmdline)

        @Arguments:
        - `cmdline`:

        @Return:
        """
        if not self._ssh:
            self.connect()
        return self._ssh.exec_command(cmdline)

    def connect(self, ):
        r"""SUMMARY

        connect()

        @Return:
        """
        self.pave()
        if not self._ssh:
            self._ssh = paramiko.SSHClient()
            self._ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self._ssh.connect(self.host, self.port, self.username)

    def testcmd(self, cmdline):
        r"""SUMMARY

        testcmd(cmdline)

        @Arguments:
        - `cmdline`:

        @Return:
        """
        _, stdout, _ = self.sendcmd(cmdline)
        return 0 == stdout.channel.recv_exit_status()

    def close(self, ):
        r"""SUMMARY

        close()

        @Return:
        """
        if self._ssh:
            self._ssh.close()
        if self.router:
            self.router.close()

* Tue 14 Jan 2014 12:10:55 PM JST
    def close(self, ):
        r"""SUMMARY

        close()

        @Return:
        """
        if self._ssh:
            self._ssh.close()
        if self.router:
            self.router.close()

* Tue 14 Jan 2014 12:11:39 PM JST

* Tue 14 Jan 2014 12:11:39 PM JST

* Tue 14 Jan 2014 12:11:39 PM JST
        self._ssh = None

* Tue 14 Jan 2014 12:12:01 PM JST
    def close(self, ):
        r"""SUMMARY

        close()

        @Return:
        """
        if self._ssh:
            self._ssh.close()
        if self.router:
            self.router.close()

* Tue 14 Jan 2014 12:13:03 PM JST
        if self._ssh:
            self._ssh.close()


* Tue 14 Jan 2014 12:29:40 PM JST

* Tue 14 Jan 2014 12:29:40 PM JST

* Tue 14 Jan 2014 12:29:41 PM JST
               'ssh'

* Tue 14 Jan 2014 12:29:48 PM JST
               
* Tue 14 Jan 2014 12:30:01 PM JST
wide = len(max(dic.keys(), key=len)) + 1
* Tue 14 Jan 2014 12:30:16 PM JST
formt = '{0:<' + str(wide) + '}: {1}' # will be like this '{0:<10}: {1}'
* Tue 14 Jan 2014 12:30:46 PM JST
# will be like this '{0:<10}: {1}'
* Tue 14 Jan 2014 12:30:53 PM JST
be
* Tue 14 Jan 2014 12:30:54 PM JST
will be
* Tue 14 Jan 2014 12:31:51 PM JST
app
* Tue 14 Jan 2014 12:31:52 PM JST
strs.app
* Tue 14 Jan 2014 12:33:52 PM JST

* Tue 14 Jan 2014 12:33:52 PM JST

* Tue 14 Jan 2014 12:33:53 PM JST
        for key, value in dic.iteritems():

* Tue 14 Jan 2014 12:33:53 PM JST
        for key, value in dic.iteritems():

* Tue 14 Jan 2014 12:33:53 PM JST
        for key, value in dic.iteritems():
            append(fmt(key, value))

* Tue 14 Jan 2014 12:34:02 PM JST
return '\n'.join(s)
* Tue 14 Jan 2014 12:36:21 PM JST
import 
* Tue 14 Jan 2014 12:40:50 PM JST
def magic_dir(self, obj):
    """pprint dir() function"""
    targets = obj.split('.')
    result = globals().get(targets.pop(0))
    if targets:
        for elt in targets:
            result = getattr(result, elt)
    if result:
        dird = dir(result)
        try:
            from columnize import columnize
            print(columnize(dird))
        except ImportError:
            from pprint import pprint
            pprint(dird)
* Tue 14 Jan 2014 12:42:07 PM JST

* Tue 14 Jan 2014 12:42:07 PM JST

* Tue 14 Jan 2014 12:42:07 PM JST
y

* Tue 14 Jan 2014 12:42:22 PM JST
result
* Tue 14 Jan 2014 12:43:23 PM JST
def magic_dir(self, str_):
    """pprint dir() function"""
    dird = dir(eval(str_))
    try:
        from columnize import columnize
            print(columnize(dird))
        except ImportError:
            from pprint import pprint
            pprint(dird)

* Tue 14 Jan 2014 12:43:58 PM JST
def magic_dir(self, str_):
    """pprint dir() function"""
    dird = dir(eval(str_))
    try:
        from columnize import columnize
            print(columnize(dird))
        except ImportError:
            from pprint import pprint
            pprint(dird)
* Tue 14 Jan 2014 12:45:42 PM JST
def magic_ddir(self, str_):
    """pprint dir() function"""
    dird = dir(eval(str_))
    try:
        from columnize import columnize
        print(columnize(dird))
    except ImportError:
        from pprint import pprint
        pprint(dird)
* Tue 14 Jan 2014 12:46:02 PM JST
def magic_type(self, obj):
    r"""type() builtin function."""
    targets = obj.split('.')
    result = globals().get(targets.pop(0))
    if targets:
        for elt in targets:
            result = getattr(result, elt)
    if result:
        print(type(result))
* Tue 14 Jan 2014 12:46:14 PM JST

* Tue 14 Jan 2014 12:46:14 PM JST

* Tue 14 Jan 2014 12:46:14 PM JST
    targets = obj.split('.')

* Tue 14 Jan 2014 12:46:14 PM JST
    targets = obj.split('.')

* Tue 14 Jan 2014 12:46:14 PM JST
    targets = obj.split('.')
    result = globals().get(targets.pop(0))

* Tue 14 Jan 2014 12:46:23 PM JST
import 
* Tue 14 Jan 2014 12:46:46 PM JST
obj
* Tue 14 Jan 2014 12:46:59 PM JST

* Tue 14 Jan 2014 12:46:59 PM JST

* Tue 14 Jan 2014 12:46:59 PM JST
    if result:

* Tue 14 Jan 2014 12:47:04 PM JST
result
* Tue 14 Jan 2014 12:47:13 PM JST
def magic_type(self, str_):
    r"""type() builtin function."""
    print(type(eval(str_)))
* Tue 14 Jan 2014 12:50:22 PM JST
colorama
* Tue 14 Jan 2014 12:54:12 PM JST
separate
* Tue 14 Jan 2014 12:59:48 PM JST
CLASS
* Tue 14 Jan 2014 01:01:14 PM JST

* Tue 14 Jan 2014 01:01:14 PM JST

* Tue 14 Jan 2014 01:01:14 PM JST
VAR_FMT = (Fore.YELLOW + '{}' + Fore.RESET).format

* Tue 14 Jan 2014 01:05:55 PM JST
elem
* Tue 14 Jan 2014 01:07:27 PM JST
from t1 import listutil
from inspect import getmembers
import predicate

lis, append = listutil.list_append()
for name, elem in getmembers(evaled):
    if predicate.iscallable(elem):
        name = FUNC_FMT(name)
    append(name)

* Tue 14 Jan 2014 01:07:45 PM JST

* Tue 14 Jan 2014 01:07:45 PM JST

* Tue 14 Jan 2014 01:07:45 PM JST
        from columnize import columnize

* Tue 14 Jan 2014 01:07:50 PM JST
from colorama import init, Fore
init()

* Tue 14 Jan 2014 01:08:01 PM JST

* Tue 14 Jan 2014 01:08:02 PM JST

* Tue 14 Jan 2014 01:08:02 PM JST
        init()

* Tue 14 Jan 2014 01:08:05 PM JST

* Tue 14 Jan 2014 01:08:05 PM JST

* Tue 14 Jan 2014 01:08:05 PM JST
        from colorama import init, Fore

* Tue 14 Jan 2014 01:08:14 PM JST
dird
* Tue 14 Jan 2014 01:08:41 PM JST
dir(eval(str_))
* Tue 14 Jan 2014 01:08:48 PM JST

* Tue 14 Jan 2014 01:08:48 PM JST

* Tue 14 Jan 2014 01:08:48 PM JST
    dird = dir(eval(str_))

* Tue 14 Jan 2014 01:09:13 PM JST

* Tue 14 Jan 2014 01:09:13 PM JST

* Tue 14 Jan 2014 01:09:13 PM JST
FUNC_FMT = (Fore.CYAN + '{}' + Fore.RESET).format

* Tue 14 Jan 2014 01:10:16 PM JST
colorama
* Tue 14 Jan 2014 01:11:12 PM JST
def magic_dir(self, str_):
    """pprint dir() function"""
    evaled = eval(str_)
    try:
        from t1 import listutil
        from inspect import getmembers
        from columnize import columnize
        import predicate
        import colorama
        from colorama import init, Fore
        colorama.init()
        FUNC_FMT = (colorama.Fore.CYAN + '{}' + colorama.Fore.RESET).format
        lis, append = listutil.list_append()
        for name, elem in getmembers(evaled):
            if predicate.iscallable(elem):
                name = FUNC_FMT(name)
            append(name)

        print(columnize(lis))
    except ImportError:
        from pprint import pprint
        pprint(dir(eval(str_)))
* Tue 14 Jan 2014 01:11:59 PM JST
import 
* Tue 14 Jan 2014 01:13:18 PM JST
WHITE_FMT
* Tue 14 Jan 2014 01:13:38 PM JST
def magic_dir(self, str_):
    """pprint dir() function"""
    evaled = eval(str_)
    try:
        from t1 import listutil
        from inspect import getmembers
        from columnize import columnize
        import predicate
        import colorama
        from colorama import init, Fore
        colorama.init()
        FUNC_FMT = (colorama.Fore.CYAN + '{}' + colorama.Fore.RESET).format
        WHITE_FMT = (colorama.Fore.WHITE + '{}' + colorama.Fore.RESET).format
        lis, append = listutil.list_append()
        for name, elem in getmembers(evaled):
            if predicate.iscallable(elem):
                name = FUNC_FMT(name)
            else:
                name = WHITE_FMT(name)
            append(name)

        print(columnize(lis))
    except ImportError:
        from pprint import pprint
        pprint(dir(eval(str_)))
* Tue 14 Jan 2014 01:14:00 PM JST
import
* Tue 14 Jan 2014 01:14:33 PM JST
CYAN
* Tue 14 Jan 2014 01:15:25 PM JST
Fore
* Tue 14 Jan 2014 01:15:37 PM JST
Style.RESET_ALL
* Tue 14 Jan 2014 01:16:10 PM JST

* Tue 14 Jan 2014 01:16:10 PM JST

* Tue 14 Jan 2014 01:16:10 PM JST
        import colorama

* Tue 14 Jan 2014 01:16:12 PM JST
colorama.
* Tue 14 Jan 2014 01:16:15 PM JST
colorama.
* Tue 14 Jan 2014 01:16:17 PM JST
colorama.
* Tue 14 Jan 2014 01:16:19 PM JST
colorama.
* Tue 14 Jan 2014 01:16:20 PM JST
colorama.
* Tue 14 Jan 2014 01:16:46 PM JST
BRIGHT
* Tue 14 Jan 2014 01:17:15 PM JST
BLUE
* Tue 14 Jan 2014 01:17:54 PM JST
def magic_ddir(self, str_):
    """pprint dir() function"""
    evaled = eval(str_)
    try:
        from t1 import listutil
        from inspect import getmembers
        from columnize import columnize
        import predicate
        from colorama import init, Fore, Style
        init()
        FUNC_FMT = (Fore.CYAN+Style.BRIGHT+'{}' + Style.RESET_ALL).format
        WHITE_FMT = (Fore.WHITE+Style.BRIGHT+'{}' + Style.RESET_ALL).format
        lis, append = listutil.list_append()
        for name, elem in getmembers(evaled):
            if predicate.iscallable(elem):
                name = FUNC_FMT(name)
            else:
                name = WHITE_FMT(name)
            append(name)

        print(columnize(lis))
    except ImportError:
        from pprint import pprint
        pprint(dir(eval(str_)))
* Tue 14 Jan 2014 01:22:35 PM JST
displaywidth=80
* Tue 14 Jan 2014 01:23:31 PM JST
displaywidth=100
* Tue 14 Jan 2014 01:26:02 PM JST
import 
* Tue 14 Jan 2014 01:26:44 PM JST
columnize
* Tue 14 Jan 2014 01:27:35 PM JST

* Tue 14 Jan 2014 01:27:35 PM JST

* Tue 14 Jan 2014 01:27:35 PM JST
        sys.stdout.write('\\r')

* Tue 14 Jan 2014 01:30:47 PM JST
import 
* Tue 14 Jan 2014 02:35:45 PM JST
http://docs.python.org/2/library/
* Tue 14 Jan 2014 02:38:36 PM JST
Optional Operating System Services
* Tue 14 Jan 2014 02:38:44 PM JST
Interprocess Communication and Networking
* Tue 14 Jan 2014 02:38:50 PM JST
Internet Data Handling
* Tue 14 Jan 2014 02:38:58 PM JST
Structured Markup Processing Tools
* Tue 14 Jan 2014 02:39:08 PM JST
Internet Protocols and Support
* Tue 14 Jan 2014 02:39:16 PM JST
Multimedia Services
* Tue 14 Jan 2014 02:39:24 PM JST
Internationalization
* Tue 14 Jan 2014 02:39:31 PM JST
Program Frameworks
* Tue 14 Jan 2014 02:39:53 PM JST
Development Tools
* Tue 14 Jan 2014 02:40:10 PM JST
Debugging and Profiling
* Tue 14 Jan 2014 02:40:17 PM JST
Python Runtime Services
* Tue 14 Jan 2014 02:40:24 PM JST
Custom Python Interpreters
* Tue 14 Jan 2014 02:40:31 PM JST
Restricted Execution
* Tue 14 Jan 2014 02:40:36 PM JST
Importing Modules
* Tue 14 Jan 2014 02:40:43 PM JST
Python Language Services
* Tue 14 Jan 2014 02:42:36 PM JST
Python compiler package
* Tue 14 Jan 2014 02:43:05 PM JST
Miscellaneous Services
* Tue 14 Jan 2014 02:43:11 PM JST
MS Windows Specific Services
* Tue 14 Jan 2014 02:43:17 PM JST
Unix Specific Services
* Tue 14 Jan 2014 02:43:41 PM JST
Mac OS X specific services
* Tue 14 Jan 2014 02:43:48 PM JST
MacPython OSA Modules
* Tue 14 Jan 2014 02:43:55 PM JST
SGI IRIX Specific Services
* Tue 14 Jan 2014 02:44:03 PM JST
SunOS Specific Services
* Tue 14 Jan 2014 02:44:10 PM JST
Undocumented Modules
* Tue 14 Jan 2014 02:49:51 PM JST

* Tue 14 Jan 2014 02:49:51 PM JST
***** Terminal
* Tue 14 Jan 2014 02:49:51 PM JST
***** Terminal

* Tue 14 Jan 2014 02:49:55 PM JST
Terminal
* Tue 14 Jan 2014 03:03:08 PM JST
        from colorama import init, Fore, Style
        init()
        FUNC_FMT = (Fore.CYAN+Style.BRIGHT+'{}' + Style.RESET_ALL).format
        WHITE_FMT = (Fore.WHITE+Style.BRIGHT+'{}' + Style.RESET_ALL).format

* Tue 14 Jan 2014 03:06:17 PM JST
#+BEGIN_SRC emacs-lisp
* Tue 14 Jan 2014 03:06:29 PM JST
lisp
* Tue 14 Jan 2014 03:06:30 PM JST
emacs-lisp
* Tue 14 Jan 2014 03:06:39 PM JST
#+END_SRC
* Tue 14 Jan 2014 03:07:46 PM JST

* Tue 14 Jan 2014 03:07:48 PM JST
cyan
* Tue 14 Jan 2014 03:07:53 PM JST

* Tue 14 Jan 2014 03:07:53 PM JST

* Tue 14 Jan 2014 03:07:53 PM JST


* Tue 14 Jan 2014 03:10:11 PM JST
colora
* Tue 14 Jan 2014 03:13:06 PM JST

* Tue 14 Jan 2014 03:13:19 PM JST
CYAN
* Tue 14 Jan 2014 03:13:22 PM JST

* Tue 14 Jan 2014 03:13:32 PM JST

* Tue 14 Jan 2014 03:14:02 PM JST
RED
* Tue 14 Jan 2014 03:14:10 PM JST

* Tue 14 Jan 2014 03:14:18 PM JST
BLACK
* Tue 14 Jan 2014 03:19:22 PM JST
CYAN
* Tue 14 Jan 2014 03:21:49 PM JST

* Tue 14 Jan 2014 03:21:59 PM JST
WHITE
* Tue 14 Jan 2014 03:22:20 PM JST

* Tue 14 Jan 2014 03:30:56 PM JST
FOREWHITE
* Tue 14 Jan 2014 03:31:05 PM JST
FOREWHITE = (Fore.WHITE + '{}').format
FOREBLACK = (Fore.BLACK + '{}').format
FOREBLUE = (Fore.BLUE + '{}').format
FORECYAN = (Fore.CYAN + '{}').format
FORERED = (Fore.RED + '{}').format
FOREMAGENTA = (Fore.MAGENTA + '{}').format
FOREGREEN = (Fore.GREEN + '{}').format
FOREYELLOW = (Fore.YELLOW + '{}').format

BACKWHITE = (Back.WHITE + '{}').format
BACKBLACK = (Back.BLACK + '{}').format
BACKBLUE = (Back.BLUE + '{}').format
BACKCYAN = (Back.CYAN + '{}').format
BACKRED = (Back.RED + '{}').format
BACKMAGENTA = (Back.MAGENTA + '{}').format
BACKGREEN = (Back.GREEN + '{}').format
BACKYELLOW = (Back.YELLOW + '{}').format

* Tue 14 Jan 2014 03:31:34 PM JST
(Back.YELLOW + '{}').format
* Tue 14 Jan 2014 03:31:34 PM JST
(Back.GREEN + '{}').format
* Tue 14 Jan 2014 03:31:34 PM JST
(Back.MAGENTA + '{}').format
* Tue 14 Jan 2014 03:31:34 PM JST
(Back.RED + '{}').format
* Tue 14 Jan 2014 03:31:34 PM JST
(Back.CYAN + '{}').format
* Tue 14 Jan 2014 03:31:34 PM JST
(Back.BLUE + '{}').format
* Tue 14 Jan 2014 03:31:34 PM JST
(Back.BLACK + '{}').format
* Tue 14 Jan 2014 03:31:34 PM JST
(Back.WHITE + '{}').format
* Tue 14 Jan 2014 03:31:34 PM JST
(Fore.YELLOW + '{}').format
* Tue 14 Jan 2014 03:31:34 PM JST
(Fore.GREEN + '{}').format
* Tue 14 Jan 2014 03:31:34 PM JST
(Fore.MAGENTA + '{}').format
* Tue 14 Jan 2014 03:31:34 PM JST
(Fore.RED + '{}').format
* Tue 14 Jan 2014 03:31:35 PM JST
(Fore.CYAN + '{}').format
* Tue 14 Jan 2014 03:31:35 PM JST
(Fore.BLUE + '{}').format
* Tue 14 Jan 2014 03:31:35 PM JST
(Fore.BLACK + '{}').format
* Tue 14 Jan 2014 03:31:35 PM JST
(Fore.WHITE + '{}').format
* Tue 14 Jan 2014 03:32:59 PM JST
FOREWHITE
* Tue 14 Jan 2014 03:33:07 PM JST
FOREBLACK
* Tue 14 Jan 2014 03:33:10 PM JST
FOREBLUE
* Tue 14 Jan 2014 03:33:11 PM JST
FORECYAN
* Tue 14 Jan 2014 03:33:11 PM JST
FORERED
* Tue 14 Jan 2014 03:33:11 PM JST
FOREMAGENTA
* Tue 14 Jan 2014 03:33:11 PM JST
FOREGREEN
* Tue 14 Jan 2014 03:33:12 PM JST
FOREYELLOW
* Tue 14 Jan 2014 03:33:12 PM JST
BACKWHITE
* Tue 14 Jan 2014 03:33:12 PM JST
BACKBLACK
* Tue 14 Jan 2014 03:33:12 PM JST
BACKBLUE
* Tue 14 Jan 2014 03:33:12 PM JST
BACKCYAN
* Tue 14 Jan 2014 03:33:13 PM JST
BACKRED
* Tue 14 Jan 2014 03:33:13 PM JST
BACKMAGENTA
* Tue 14 Jan 2014 03:33:14 PM JST
BACKGREEN
* Tue 14 Jan 2014 03:33:15 PM JST
BACKYELLOW
* Tue 14 Jan 2014 03:52:12 PM JST

* Tue 14 Jan 2014 03:52:12 PM JST

* Tue 14 Jan 2014 03:52:12 PM JST
import sys as _sys

* Tue 14 Jan 2014 03:52:12 PM JST
import sys as _sys

* Tue 14 Jan 2014 03:52:12 PM JST
import sys as _sys
import os as _os

* Tue 14 Jan 2014 03:52:25 PM JST
__revision__ = '$Revision$'
__version__ = '0.1.0'


* Tue 14 Jan 2014 03:59:47 PM JST
Style.BRIGHT
* Tue 14 Jan 2014 03:59:58 PM JST
+ Style.RESET_ALL
* Tue 14 Jan 2014 04:00:50 PM JST
YELLOW
* Tue 14 Jan 2014 04:03:05 PM JST
coloramautil.formatter
* Tue 14 Jan 2014 04:05:12 PM JST
YELLOW
* Tue 14 Jan 2014 04:05:35 PM JST
name
* Tue 14 Jan 2014 04:05:49 PM JST
RED
* Tue 14 Jan 2014 04:09:04 PM JST
coloramautil.formatter.BRIGHT
* Tue 14 Jan 2014 04:09:06 PM JST
BRIGHT
* Tue 14 Jan 2014 04:10:15 PM JST
FORECYAN
* Tue 14 Jan 2014 04:10:21 PM JST
BRIGHT
* Tue 14 Jan 2014 04:10:53 PM JST
FOREYELLOW
* Tue 14 Jan 2014 04:11:10 PM JST
Style
* Tue 14 Jan 2014 04:11:10 PM JST
Fore, Style
* Tue 14 Jan 2014 04:11:56 PM JST
FOREWHITE
* Tue 14 Jan 2014 04:12:11 PM JST

* Tue 14 Jan 2014 04:12:11 PM JST

* Tue 14 Jan 2014 04:12:11 PM JST
        FUNC_FMT = (Fore.CYAN+Style.BRIGHT+'{}' + Style.RESET_ALL).format

* Tue 14 Jan 2014 04:12:12 PM JST
        FUNC_FMT = (Fore.CYAN+Style.BRIGHT+'{}' + Style.RESET_ALL).format

* Tue 14 Jan 2014 04:12:12 PM JST
        FUNC_FMT = (Fore.CYAN+Style.BRIGHT+'{}' + Style.RESET_ALL).format
        MODULE_FMT = (Fore.YELLOW+Style.BRIGHT+'{}'+Style.RESET_ALL).format

* Tue 14 Jan 2014 04:12:12 PM JST
        FUNC_FMT = (Fore.CYAN+Style.BRIGHT+'{}' + Style.RESET_ALL).format
        MODULE_FMT = (Fore.YELLOW+Style.BRIGHT+'{}'+Style.RESET_ALL).format

* Tue 14 Jan 2014 04:12:12 PM JST
        FUNC_FMT = (Fore.CYAN+Style.BRIGHT+'{}' + Style.RESET_ALL).format
        MODULE_FMT = (Fore.YELLOW+Style.BRIGHT+'{}'+Style.RESET_ALL).format
        WHITE_FMT = (Fore.WHITE+Style.BRIGHT+'{}' + Style.RESET_ALL).format

* Tue 14 Jan 2014 04:12:57 PM JST

* Tue 14 Jan 2014 04:12:57 PM JST

* Tue 14 Jan 2014 04:12:57 PM JST
                name = FUNC_FMT(name)

* Tue 14 Jan 2014 04:13:19 PM JST

* Tue 14 Jan 2014 04:13:19 PM JST

* Tue 14 Jan 2014 04:13:19 PM JST
                name = MODULE_FMT(name)

* Tue 14 Jan 2014 04:13:30 PM JST
WHITE
* Tue 14 Jan 2014 04:13:42 PM JST

* Tue 14 Jan 2014 04:13:42 PM JST

* Tue 14 Jan 2014 04:13:42 PM JST
                name = WHITE_FMT(name)

* Tue 14 Jan 2014 04:15:30 PM JST
FOREWHITE_RESET
* Tue 14 Jan 2014 04:16:09 PM JST
FORECYAN_RESET
* Tue 14 Jan 2014 04:16:34 PM JST
FOREYELLOW_RESET
* Tue 14 Jan 2014 04:17:51 PM JST
'{}' + Style.RESET_ALL
* Tue 14 Jan 2014 04:19:39 PM JST
('{}')
* Tue 14 Jan 2014 04:22:58 PM JST
#name = FOREWHITE_RESET(name)
* Tue 14 Jan 2014 04:23:47 PM JST
BRIGHT
* Tue 14 Jan 2014 04:27:54 PM JST

* Tue 14 Jan 2014 04:27:54 PM JST

* Tue 14 Jan 2014 04:27:54 PM JST


* Tue 14 Jan 2014 04:28:25 PM JST
#+BEGIN_SRC python
from colorama import init, Fore, Style
init()
FUNC_FMT = (Fore.CYAN+Style.BRIGHT+'{}'+Style.RESET_ALL).format
WHITE_FMT = (Fore.WHITE+Style.BRIGHT +'{}'+Style.RESET_ALL).format
print(FUNC_FMT('hello cyan'))
print(FUNC_FMT('hello white'))
#+END_SRC

* Tue 14 Jan 2014 04:28:34 PM JST
        from t1.coloramautil.formatter import (FORECYAN_RESET, BRIGHT,
                      FOREWHITE_RESET, FOREYELLOW_RESET)

* Tue 14 Jan 2014 04:28:52 PM JST
BRIGHT(FORECYAN_RESET(name))
* Tue 14 Jan 2014 04:29:15 PM JST
FOREWHITE_RESET,
* Tue 14 Jan 2014 04:29:16 PM JST
FOREYELLOW_RESET
* Tue 14 Jan 2014 04:29:17 PM JST
                       FOREYELLOW_RESET
* Tue 14 Jan 2014 04:29:19 PM JST
BRIGHT
* Tue 14 Jan 2014 04:29:24 PM JST

* Tue 14 Jan 2014 04:29:24 PM JST

* Tue 14 Jan 2014 04:29:24 PM JST


* Tue 14 Jan 2014 04:29:24 PM JST


* Tue 14 Jan 2014 04:29:25 PM JST



* Tue 14 Jan 2014 05:25:48 PM JST
******* :
* Tue 14 Jan 2014 05:25:54 PM JST
******** :
* Tue 14 Jan 2014 05:25:58 PM JST
********* 
* Tue 14 Jan 2014 05:26:21 PM JST
        
* Tue 14 Jan 2014 05:27:32 PM JST
  
* Tue 14 Jan 2014 05:27:38 PM JST
+ 
* Tue 14 Jan 2014 05:27:43 PM JST
******* :
* Tue 14 Jan 2014 05:27:59 PM JST
********* :
* Tue 14 Jan 2014 05:29:34 PM JST
  
* Tue 14 Jan 2014 05:30:49 PM JST
Python 
* Tue 14 Jan 2014 05:30:50 PM JST
Python 
* Tue 14 Jan 2014 05:30:55 PM JST
Python 
* Tue 14 Jan 2014 05:30:55 PM JST
Custom Python 
* Tue 14 Jan 2014 05:30:56 PM JST
Services
****** Custom Python 
* Tue 14 Jan 2014 05:32:52 PM JST
ographic Services
* Tue 14 Jan 2014 05:32:58 PM JST
 Formats
* Tue 14 Jan 2014 05:33:03 PM JST
Generic 
* Tue 14 Jan 2014 05:33:05 PM JST
 Service
* Tue 14 Jan 2014 05:33:37 PM JST
Services
****** 
* Tue 14 Jan 2014 05:34:01 PM JST

* Tue 14 Jan 2014 05:34:01 PM JST
***** Interproces
* Tue 14 Jan 2014 05:34:01 PM JST
***** Interprocess Communication and Networking

* Tue 14 Jan 2014 05:35:21 PM JST
                                     :std:
* Tue 14 Jan 2014 05:35:26 PM JST
std:
* Tue 14 Jan 2014 05:38:46 PM JST
 Access
* Tue 14 Jan 2014 05:38:47 PM JST

* Tue 14 Jan 2014 05:38:47 PM JST
***** File
* Tue 14 Jan 2014 05:38:48 PM JST
***** File

* Tue 14 Jan 2014 05:40:48 PM JST
Date
* Tue 14 Jan 2014 05:42:06 PM JST
Data 
* Tue 14 Jan 2014 05:42:09 PM JST
and 
* Tue 14 Jan 2014 05:42:10 PM JST
Compression and 
* Tue 14 Jan 2014 05:42:16 PM JST
 Service
* Tue 14 Jan 2014 05:42:20 PM JST
and 
* Tue 14 Jan 2014 05:42:20 PM JST
Numeric and 
* Tue 14 Jan 2014 05:42:29 PM JST
and 
* Tue 14 Jan 2014 05:42:30 PM JST
Internet and 
* Tue 14 Jan 2014 05:42:37 PM JST

* Tue 14 Jan 2014 05:42:37 PM JST
***** S
* Tue 14 Jan 2014 05:42:37 PM JST
***** Structured Markup Processing Tools

* Tue 14 Jan 2014 05:42:57 PM JST
Services
* Tue 14 Jan 2014 05:44:12 PM JST
Data 
* Tue 14 Jan 2014 05:44:23 PM JST
***** Operating System
****** Optional Operating System Services

* Tue 14 Jan 2014 05:44:30 PM JST

* Tue 14 Jan 2014 05:44:30 PM JST

* Tue 14 Jan 2014 05:44:30 PM JST
***** Internationalization

* Tue 14 Jan 2014 05:46:09 PM JST
 Tools
* Tue 14 Jan 2014 05:46:15 PM JST

* Tue 14 Jan 2014 05:46:15 PM JST
***** Structured M
* Tue 14 Jan 2014 05:46:15 PM JST
***** Structured Markup Processing

* Tue 14 Jan 2014 05:46:23 PM JST

* Tue 14 Jan 2014 05:46:23 PM JST

* Tue 14 Jan 2014 05:46:23 PM JST


* Tue 14 Jan 2014 05:48:54 PM JST

* Tue 14 Jan 2014 05:48:54 PM JST

* Tue 14 Jan 2014 05:48:54 PM JST
***** Program Frameworks

* Tue 14 Jan 2014 05:54:08 PM JST
- 
* Tue 14 Jan 2014 05:54:13 PM JST

* Tue 14 Jan 2014 05:54:13 PM JST
****** 
* Tue 14 Jan 2014 05:54:13 PM JST
****** 

* Tue 14 Jan 2014 05:57:37 PM JST

* Tue 14 Jan 2014 05:57:37 PM JST
*
* Tue 14 Jan 2014 05:57:37 PM JST
*

* Tue 14 Jan 2014 06:05:30 PM JST
name
* Tue 14 Jan 2014 06:08:42 PM JST
grep, 
* Tue 14 Jan 2014 06:08:45 PM JST

* Tue 14 Jan 2014 06:08:45 PM JST

* Tue 14 Jan 2014 06:08:45 PM JST
            if grep in name:

* Tue 14 Jan 2014 06:08:45 PM JST
            if grep in name:

* Tue 14 Jan 2014 06:08:45 PM JST
            if grep in name:
                continue

* Tue 14 Jan 2014 06:16:53 PM JST

* Tue 14 Jan 2014 06:16:53 PM JST

* Tue 14 Jan 2014 06:16:53 PM JST
****** Archiving

* Tue 14 Jan 2014 06:20:41 PM JST
xls
******* 
* Tue 14 Jan 2014 06:20:43 PM JST

* Tue 14 Jan 2014 06:20:43 PM JST
******* 
* Tue 14 Jan 2014 06:20:43 PM JST
******* 

* Tue 14 Jan 2014 06:36:47 PM JST
dateutil
* Tue 14 Jan 2014 10:45:31 PM JST

* Tue 14 Jan 2014 10:45:31 PM JST

* Tue 14 Jan 2014 10:45:31 PM JST
  

* Tue 14 Jan 2014 10:46:00 PM JST
xlrd
* Tue 14 Jan 2014 10:48:13 PM JST
virtualenv
* Tue 14 Jan 2014 10:48:51 PM JST
unicodecsv
* Tue 14 Jan 2014 10:50:33 PM JST

* Tue 14 Jan 2014 10:50:33 PM JST
- dateutil
* Tue 14 Jan 2014 10:50:33 PM JST
- dateutil

* Tue 14 Jan 2014 10:51:03 PM JST
pyftpdlib
* Tue 14 Jan 2014 10:51:47 PM JST
pycrypto
* Tue 14 Jan 2014 10:52:02 PM JST
pyPdf
* Tue 14 Jan 2014 10:52:58 PM JST
paramiko
* Tue 14 Jan 2014 10:53:46 PM JST
lxml
* Tue 14 Jan 2014 10:54:17 PM JST
ipython
* Tue 14 Jan 2014 10:54:29 PM JST
ipaddress
* Tue 14 Jan 2014 10:55:02 PM JST
feedparser
* Tue 14 Jan 2014 10:55:23 PM JST
easygui
* Tue 14 Jan 2014 10:55:54 PM JST
coverage
* Tue 14 Jan 2014 10:56:24 PM JST
clonedigger
* Tue 14 Jan 2014 11:01:47 PM JST
as
* Tue 14 Jan 2014 11:10:19 PM JST
http://docs.python.org/2/library/gzip.html#examples-of-usage
* Tue 14 Jan 2014 11:11:40 PM JST
http://docs.python.org/2/library/gzip.html#examples-of-usage
* Tue 14 Jan 2014 11:12:44 PM JST
import gzip
f = gzip.open('file.txt.gz', 'rb')
file_content = f.read()
f.close()

* Tue 14 Jan 2014 11:13:05 PM JST
import gzip
content = "Lots of content here"
f = gzip.open('file.txt.gz', 'wb')
f.write(content)
f.close()

* Tue 14 Jan 2014 11:24:44 PM JST
/usr/local/bin/patool
* Wed 15 Jan 2014 12:01:29 AM JST
import 
* Wed 15 Jan 2014 12:07:44 AM JST
    def pave(self, decrypt=True):
        r"""SUMMARY

        pave(decrypt=True)

        @Arguments:
        - `decrypt`:

        @Return:
        """
        self.wol()
        self.pavetunnel()
        if not decrypt:
            return
        if not self.plugins('isdecrypt'):
            self.pavedisk()


* Wed 15 Jan 2014 12:20:36 AM JST
True
* Wed 15 Jan 2014 12:20:36 AM JST
decrypt=True
* Wed 15 Jan 2014 12:34:06 AM JST
    def testcmd(self, cmdline):
        r"""SUMMARY

        testcmd(cmdline)

        @Arguments:
        - `cmdline`:

        @Return:
        """
        _, stdout, _ = self.sendcmd(cmdline)
        return 0 == stdout.channel.recv_exit_status()


* Wed 15 Jan 2014 12:40:47 AM JST
host
* Wed 15 Jan 2014 12:42:38 AM JST
break
* Wed 15 Jan 2014 12:43:28 AM JST

* Wed 15 Jan 2014 12:43:29 AM JST

* Wed 15 Jan 2014 12:43:29 AM JST
        for i in range(10):

* Wed 15 Jan 2014 12:43:39 AM JST

* Wed 15 Jan 2014 12:43:39 AM JST

* Wed 15 Jan 2014 12:43:39 AM JST
            if 9 <= i:

* Wed 15 Jan 2014 12:43:41 AM JST

* Wed 15 Jan 2014 12:43:41 AM JST

* Wed 15 Jan 2014 12:43:41 AM JST
        return True

* Wed 15 Jan 2014 12:43:47 AM JST
not 
* Wed 15 Jan 2014 12:47:25 AM JST
    
* Wed 15 Jan 2014 12:47:27 AM JST
localip
* Wed 15 Jan 2014 12:47:42 AM JST
localip
* Wed 15 Jan 2014 12:49:03 AM JST
localip
* Wed 15 Jan 2014 12:49:20 AM JST
'127.0.0.1'
* Wed 15 Jan 2014 12:49:22 AM JST
IP
* Wed 15 Jan 2014 01:06:11 PM JST
 as _sys
* Wed 15 Jan 2014 01:06:14 PM JST

* Wed 15 Jan 2014 01:06:14 PM JST

* Wed 15 Jan 2014 01:06:14 PM JST
import os

* Wed 15 Jan 2014 01:06:14 PM JST
import os

* Wed 15 Jan 2014 01:06:14 PM JST
import os
import sys

* Wed 15 Jan 2014 01:06:16 PM JST
import logging
from logging.handlers import RotatingFileHandler

* Wed 15 Jan 2014 01:06:30 PM JST
import logging
from logging.handlers import RotatingFileHandler

* Wed 15 Jan 2014 01:07:06 PM JST
PRINTFORMAT = '[ {0:<16} ]  {1}'
* Wed 15 Jan 2014 01:07:15 PM JST

* Wed 15 Jan 2014 01:07:15 PM JST

* Wed 15 Jan 2014 01:07:15 PM JST
PRINTFORMAT = '[ {0:<16} ]  {1}'.format

* Wed 15 Jan 2014 01:07:36 PM JST
PRINTFORMAT
* Wed 15 Jan 2014 01:09:56 PM JST
        
* Wed 15 Jan 2014 01:10:00 PM JST
info
* Wed 15 Jan 2014 01:15:15 PM JST

* Wed 15 Jan 2014 01:15:15 PM JST

* Wed 15 Jan 2014 01:15:15 PM JST
        LOGGER.warn(PRINTFORMAT('isactive', 'error'))

* Wed 15 Jan 2014 01:15:36 PM JST
self.localip
* Wed 15 Jan 2014 01:15:57 PM JST
        
* Wed 15 Jan 2014 01:16:02 PM JST
ACTIVE
* Wed 15 Jan 2014 01:16:25 PM JST
self.router.plugins('isactive_machine', self.localip)
* Wed 15 Jan 2014 01:16:44 PM JST
self.router.plugins('isactive_machine', self.localip)
* Wed 15 Jan 2014 01:17:46 PM JST
LOGGER.info(PRINTFORMAT(self.localip, 'ACTIVE!!'))
* Wed 15 Jan 2014 01:28:03 PM JST
PRINTFORMAT
* Wed 15 Jan 2014 01:36:44 PM JST
CHAPTERFORMAT = '\n{0:*^30}'
* Wed 15 Jan 2014 01:38:12 PM JST
D 
* Wed 15 Jan 2014 01:40:09 PM JST
format_spec
* Wed 15 Jan 2014 01:40:20 PM JST
                    
* Wed 15 Jan 2014 01:40:34 PM JST
'{}:{}'.format(self.tunnel.host, self.tunnel.bindport)
* Wed 15 Jan 2014 01:42:42 PM JST
                                          
* Wed 15 Jan 2014 01:45:00 PM JST
}}
* Wed 15 Jan 2014 01:45:00 PM JST
                }}
* Wed 15 Jan 2014 01:47:35 PM JST
critical
* Wed 15 Jan 2014 01:48:26 PM JST
                bindaddr = ('{}:{}'
                            .format(self.tunnel.host, self.tunnel.bindport))

* Wed 15 Jan 2014 01:48:31 PM JST
        
* Wed 15 Jan 2014 02:32:43 PM JST
Disk 
* Wed 15 Jan 2014 02:34:30 PM JST
PRINTFORMAT
* Wed 15 Jan 2014 02:35:25 PM JST
self.plugins('ismount')
* Wed 15 Jan 2014 02:55:46 PM JST
'Check Active'
* Wed 15 Jan 2014 03:18:59 PM JST

* Wed 15 Jan 2014 03:18:59 PM JST

* Wed 15 Jan 2014 03:18:59 PM JST
        # TODO: (Atami) [2014/01/15]

* Wed 15 Jan 2014 03:21:36 PM JST
LOGGER = logging.getLogger('king')
* Wed 15 Jan 2014 03:21:40 PM JST
LOGGER
* Wed 15 Jan 2014 03:23:51 PM JST

* Wed 15 Jan 2014 03:23:54 PM JST
INFO
* Wed 15 Jan 2014 03:25:31 PM JST
LOGGER.debug('Called DecryptMount')
* Wed 15 Jan 2014 03:27:01 PM JST
break
* Wed 15 Jan 2014 03:32:57 PM JST
info
* Wed 15 Jan 2014 03:33:02 PM JST
info
* Wed 15 Jan 2014 03:33:07 PM JST

* Wed 15 Jan 2014 03:33:07 PM JST

* Wed 15 Jan 2014 03:33:07 PM JST
        LOGGER.debug(PRINTFORMAT('Test command', cmdline))

* Wed 15 Jan 2014 03:34:19 PM JST
from king.core import King
* Wed 15 Jan 2014 03:34:27 PM JST
ki = King()
* Wed 15 Jan 2014 03:34:31 PM JST
ki.pavedisk()
* Wed 15 Jan 2014 03:37:50 PM JST
not 
* Wed 15 Jan 2014 03:38:51 PM JST
index
* Wed 15 Jan 2014 03:39:56 PM JST

* Wed 15 Jan 2014 03:39:56 PM JST

* Wed 15 Jan 2014 03:39:56 PM JST
        if index != 3:

* Wed 15 Jan 2014 03:39:57 PM JST
        if index != 3:

* Wed 15 Jan 2014 03:39:57 PM JST
        if index != 3:
            raise StandardError()

* Wed 15 Jan 2014 03:40:14 PM JST

* Wed 15 Jan 2014 03:40:14 PM JST

* Wed 15 Jan 2014 03:40:14 PM JST
        print('DEBUG-1-decrypt.py')

* Wed 15 Jan 2014 03:40:15 PM JST

* Wed 15 Jan 2014 03:40:15 PM JST

* Wed 15 Jan 2014 03:40:15 PM JST
            print('DEBUG-6-decrypt.py')

* Wed 15 Jan 2014 03:40:23 PM JST

* Wed 15 Jan 2014 03:40:23 PM JST

* Wed 15 Jan 2014 03:40:23 PM JST
            print('DEBUG-2-decrypt.py')

* Wed 15 Jan 2014 03:40:25 PM JST

* Wed 15 Jan 2014 03:40:25 PM JST

* Wed 15 Jan 2014 03:40:25 PM JST
                print('DEBUG-5-decrypt.py')

* Wed 15 Jan 2014 03:40:26 PM JST

* Wed 15 Jan 2014 03:40:26 PM JST

* Wed 15 Jan 2014 03:40:26 PM JST
                print('DEBUG-4-decrypt.py')

* Wed 15 Jan 2014 03:40:29 PM JST

* Wed 15 Jan 2014 03:40:29 PM JST

* Wed 15 Jan 2014 03:40:29 PM JST
        print('DEBUG-3-decrypt.py')

* Wed 15 Jan 2014 03:41:14 PM JST
ki = King()
* Wed 15 Jan 2014 03:42:06 PM JST
('Last login')
* Wed 15 Jan 2014 03:43:44 PM JST
CRYPTDISK
* Wed 15 Jan 2014 03:51:02 PM JST
'/dev/mapper/data_crypt'
* Wed 15 Jan 2014 03:51:38 PM JST

* Wed 15 Jan 2014 03:51:38 PM JST

* Wed 15 Jan 2014 03:51:38 PM JST
        print(self.cmdline)

* Wed 15 Jan 2014 04:01:46 PM JST

* Wed 15 Jan 2014 04:01:46 PM JST

* Wed 15 Jan 2014 04:01:46 PM JST
        sleep(1)

* Wed 15 Jan 2014 04:02:27 PM JST

* Wed 15 Jan 2014 04:02:27 PM JST

* Wed 15 Jan 2014 04:02:27 PM JST
        LOGGER.debug(self.cmdline)

* Wed 15 Jan 2014 04:02:37 PM JST

* Wed 15 Jan 2014 04:02:37 PM JST

* Wed 15 Jan 2014 04:02:37 PM JST
        LOGGER.debug(self.cmdline)

* Wed 15 Jan 2014 04:02:39 PM JST

* Wed 15 Jan 2014 04:02:39 PM JST

* Wed 15 Jan 2014 04:02:39 PM JST
        print(self.cmdline)

* Wed 15 Jan 2014 04:04:32 PM JST

* Wed 15 Jan 2014 04:04:32 PM JST

* Wed 15 Jan 2014 04:04:32 PM JST
        import pdb; pdb.set_trace()

* Wed 15 Jan 2014 04:31:01 PM JST
'\[sudo\] password'
* Wed 15 Jan 2014 04:33:05 PM JST
'3 incorrect'
* Wed 15 Jan 2014 04:33:46 PM JST
expect
* Wed 15 Jan 2014 04:39:05 PM JST
pexpect.spawn('/usr/bin/ssh ki', maxread=4000)
* Wed 15 Jan 2014 04:39:13 PM JST
        if pex.expect('Last login') == 0:
            LOGGER.debug('Login OK')

* Wed 15 Jan 2014 04:40:11 PM JST
pex, 
* Wed 15 Jan 2014 04:40:19 PM JST
pex, 
* Wed 15 Jan 2014 04:40:29 PM JST
pex, 
* Wed 15 Jan 2014 04:40:37 PM JST
pex, 
* Wed 15 Jan 2014 04:40:54 PM JST
pex, 
* Wed 15 Jan 2014 04:40:55 PM JST
self.pex, 
* Wed 15 Jan 2014 04:41:01 PM JST
pex, 
* Wed 15 Jan 2014 04:41:02 PM JST
self
* Wed 15 Jan 2014 04:44:23 PM JST

* Wed 15 Jan 2014 04:44:23 PM JST

* Wed 15 Jan 2014 04:44:23 PM JST
        index = self.pex.expect(self.expects)

* Wed 15 Jan 2014 04:45:16 PM JST
'\[sudo\] password', '3 incorrect',
               'Enter passphrase', '[#\$]'
* Wed 15 Jan 2014 04:46:57 PM JST
('[sudo] password for {0}: '
                             .format(parent.username)
* Wed 15 Jan 2014 04:51:54 PM JST
self.pex.sendline(getpass('Enter passphrase for {0}: '
                                  .format(CRYPTDISK)))
* Wed 15 Jan 2014 04:52:46 PM JST
already exists
* Wed 15 Jan 2014 04:53:55 PM JST
'Enter passphrase'
* Wed 15 Jan 2014 04:54:21 PM JST
'[#\$]'
* Wed 15 Jan 2014 04:55:09 PM JST
expects
* Wed 15 Jan 2014 04:55:46 PM JST

* Wed 15 Jan 2014 04:55:46 PM JST

* Wed 15 Jan 2014 04:55:46 PM JST
            index = 

* Wed 15 Jan 2014 05:07:26 PM JST
self.pex.sendline(getpass('Enter passphrase for {0}: '
                                      .format(CRYPTDISK)))
* Wed 15 Jan 2014 05:07:34 PM JST
                                
* Wed 15 Jan 2014 05:07:50 PM JST
No key available with this passphrase.
* Wed 15 Jan 2014 05:08:39 PM JST
        self.pex.sendline(getpass('Enter passphrase for {0}: '
                                  .format(CRYPTDISK)))

* Wed 15 Jan 2014 05:08:42 PM JST

* Wed 15 Jan 2014 05:08:42 PM JST

* Wed 15 Jan 2014 05:08:42 PM JST
        err_count = 0

* Wed 15 Jan 2014 05:09:13 PM JST
        self.pex.sendline(getpass('Enter passphrase for {0}: '
                                  .format(CRYPTDISK)))

* Wed 15 Jan 2014 05:31:49 PM JST

* Wed 15 Jan 2014 05:31:49 PM JST

* Wed 15 Jan 2014 05:31:49 PM JST
        try:

* Wed 15 Jan 2014 05:31:51 PM JST

* Wed 15 Jan 2014 05:31:51 PM JST

* Wed 15 Jan 2014 05:31:51 PM JST
        except PasswordError:

* Wed 15 Jan 2014 05:31:51 PM JST
        except PasswordError:

* Wed 15 Jan 2014 05:31:51 PM JST
        except PasswordError:
            return

* Wed 15 Jan 2014 05:37:17 PM JST

* Wed 15 Jan 2014 05:37:17 PM JST

* Wed 15 Jan 2014 05:37:17 PM JST
        self.error_count = 0

* Wed 15 Jan 2014 05:37:32 PM JST
['\[sudo\] password', '3 incorrect',
                                     'Enter passphrase']
* Wed 15 Jan 2014 05:37:35 PM JST
                                     
* Wed 15 Jan 2014 05:39:49 PM JST
parent
* Wed 15 Jan 2014 05:39:51 PM JST
parent
* Wed 15 Jan 2014 05:39:54 PM JST
parent
* Wed 15 Jan 2014 05:40:05 PM JST
parent
* Wed 15 Jan 2014 06:07:42 PM JST

* Wed 15 Jan 2014 06:07:42 PM JST

* Wed 15 Jan 2014 06:07:42 PM JST
        parent.pave()

* Wed 15 Jan 2014 06:07:45 PM JST

* Wed 15 Jan 2014 06:07:45 PM JST

* Wed 15 Jan 2014 06:07:45 PM JST
        parent.pave()

* Wed 15 Jan 2014 06:08:27 PM JST

* Wed 15 Jan 2014 06:08:27 PM JST

* Wed 15 Jan 2014 06:08:27 PM JST
        parent.pave(decrypt=decrypt)

* Wed 15 Jan 2014 06:08:49 PM JST
.put(src, dst)
* Wed 15 Jan 2014 06:08:54 PM JST
sftp = 
* Wed 15 Jan 2014 06:08:55 PM JST
sftp
* Wed 15 Jan 2014 06:24:18 PM JST

* Wed 15 Jan 2014 06:24:18 PM JST

* Wed 15 Jan 2014 06:24:18 PM JST
        # LOGGER.info(PRINTFORMAT('Check Active', self.localip))

* Wed 15 Jan 2014 06:44:31 PM JST

* Wed 15 Jan 2014 06:44:33 PM JST
INFO
* Wed 15 Jan 2014 06:46:19 PM JST
    def isactive(self, ):
        r"""SUMMARY

        isactive()

        @Return:
        """
        LOGGER.info(CHAPTERFORMAT('Check Active'))
        if self.router.plugins('isactive_machine', self.localip):
            LOGGER.info(PRINTFORMAT('Check Active', 'ACTIVE!!'))
            return True
        LOGGER.info(PRINTFORMAT('Check Active', 'DOWN!!'))
        return False

    def wol(self, force=False):
        r"""SUMMARY

        wol(force=False)

        @Arguments:
        - `force`:

        @Return:
        """
        if force or not self.isactive():
            LOGGER.info(PRINTFORMAT('Send WOL', self.mac))
            self.router.plugins('wol', self.mac)
            self.router.plugins('waitactive', self.localip)


* Wed 15 Jan 2014 06:46:32 PM JST

* Wed 15 Jan 2014 06:46:32 PM JST

* Wed 15 Jan 2014 06:46:32 PM JST
    localip = IP

* Wed 15 Jan 2014 06:46:37 PM JST

* Wed 15 Jan 2014 06:46:37 PM JST

* Wed 15 Jan 2014 06:46:38 PM JST
    mac = MAC

* Wed 15 Jan 2014 06:59:04 PM JST
    def close(self, ):
        r"""SUMMARY

        close()

        @Return:
        """
        if self.router:
            self.router.close()

    def __del__(self, ):
        self.close()

    def __enter__(self, ):
        return self

    def __exit__(self, ):
        self.close()

* Wed 15 Jan 2014 10:17:46 PM JST
SUMMARY
* Wed 15 Jan 2014 10:17:48 PM JST
SUMMARY
* Wed 15 Jan 2014 10:20:22 PM JST
SUMMARY
* Wed 15 Jan 2014 10:21:30 PM JST

* Wed 15 Jan 2014 10:21:31 PM JST

* Wed 15 Jan 2014 10:21:31 PM JST
        @Return:

* Wed 15 Jan 2014 10:22:01 PM JST
SUMMARY
* Wed 15 Jan 2014 10:25:54 PM JST
SUMMARY
* Wed 15 Jan 2014 10:26:04 PM JST

* Wed 15 Jan 2014 10:26:04 PM JST

* Wed 15 Jan 2014 10:26:04 PM JST
        @Return:

* Wed 15 Jan 2014 10:26:59 PM JST
if force or 
* Wed 15 Jan 2014 10:27:01 PM JST
or 
* Wed 15 Jan 2014 10:27:01 PM JST
force or 
* Wed 15 Jan 2014 10:28:50 PM JST
not 
* Wed 15 Jan 2014 10:41:51 PM JST
    
* Wed 15 Jan 2014 10:42:02 PM JST
    
* Wed 15 Jan 2014 10:42:37 PM JST
    
* Wed 15 Jan 2014 10:45:52 PM JST
append(fmt('SSH key md5'   , repr(self._
* Wed 15 Jan 2014 10:57:58 PM JST
    def pavedisk(self, ):
        r"""SUMMARY

        pavedisk()

        @Return:
        """
        LOG.info(CHAPTERFORMAT('Mount Disk'))
        if self.plugins('ismount'):
            LOG.info(PRINTFORMAT('Mount Disk', 'Already Mounted.'))
            return True
        self.plugins('mount_data')
        if not self.plugins('ismount'):
            LOG.warning('Failed Mount disk.')
            return False
        LOG.info(PRINTFORMAT('Mount Disk', 'OK!!'))
        return True

* Wed 15 Jan 2014 10:58:26 PM JST
    def close(self, ):
        r"""SUMMARY

        close()

        @Return:
        """
        if self._ssh:
            self._ssh.close()
        super(KingBase, self).close()


* Wed 15 Jan 2014 11:01:28 PM JST
True
* Wed 15 Jan 2014 11:01:30 PM JST
True
* Wed 15 Jan 2014 11:03:11 PM JST
Slee
* Wed 15 Jan 2014 11:04:38 PM JST
from sleep_progress import sleep_progress
* Wed 15 Jan 2014 11:04:47 PM JST

* Wed 15 Jan 2014 11:04:47 PM JST

* Wed 15 Jan 2014 11:04:47 PM JST
        from sleep_progress import sleep_progress

* Wed 15 Jan 2014 11:04:58 PM JST
sleep_progress(self.wait, PRINTFORMAT('Waiting', '%-2d seconds'))
* Wed 15 Jan 2014 11:05:02 PM JST
wait
* Wed 15 Jan 2014 11:05:03 PM JST
self.wait
* Wed 15 Jan 2014 11:08:55 PM JST
self.plugins('halt')
* Wed 15 Jan 2014 11:09:48 PM JST
'Could not shutdown ki server.'
* Wed 15 Jan 2014 11:09:54 PM JST
from king.error import CMDError
* Wed 15 Jan 2014 11:17:55 PM JST

* Wed 15 Jan 2014 11:17:55 PM JST

* Wed 15 Jan 2014 11:17:55 PM JST
        from sleep_progress import sleep_progress

* Wed 15 Jan 2014 11:21:12 PM JST
    def sendcmd(self, cmdline):
        r"""SUMMARY

        sendcmd(cmdline)

        @Arguments:
        - `cmdline`:

        @Return:
        """
        if not self._ssh:
            self.connect()
        LOG.debug(PRINTFORMAT('Send command', cmdline))
        return self._ssh.exec_command(cmdline)

    def testcmd(self, cmdline):
        r"""SUMMARY

        testcmd(cmdline)

        @Arguments:
        - `cmdline`:

        @Return:
        """
        _, stdout, _ = self.sendcmd(cmdline)
        return 0 == stdout.channel.recv_exit_status()

* Wed 15 Jan 2014 11:21:55 PM JST
    def __str__(self, ):
        dic = {'router': repr(self.router),
               'host': self.host,
               'globalip': self.host.ipv4,
               'localip': self.localip,
               'username': self.username,
               'port': self.port,
               'MAC address':  self.mac,
               'SSH key': self.router.kagi,
               'SSH key md5': self.router.kagiMD5,}
        wlen = len(max(dic.keys(), key=len)) + 1
        # make like this '{0:<10}: {1}'
        fmt = ('{0:<' + str(wlen) + '}: {1}').format
        strs, append = listutil.list_append()
        append(repr(self))
        (append(fmt(key, value) for key, value in dic.iteritems()))
        return '\n'.join(strs)

* Wed 15 Jan 2014 11:22:24 PM JST
    
* Wed 15 Jan 2014 11:24:54 PM JST
SUMMARY
* Wed 15 Jan 2014 11:26:12 PM JST
    
* Wed 15 Jan 2014 11:37:45 PM JST

* Wed 15 Jan 2014 11:37:45 PM JST

* Wed 15 Jan 2014 11:37:45 PM JST
        if :

* Wed 15 Jan 2014 11:47:07 PM JST
Count
* Wed 15 Jan 2014 11:48:45 PM JST
count 
* Wed 15 Jan 2014 11:48:50 PM JST

* Wed 15 Jan 2014 11:48:50 PM JST

* Wed 15 Jan 2014 11:48:50 PM JST
        err_count = 0

* Thu 16 Jan 2014 12:05:03 AM JST
PRINTFORMAT = '[ {0:<16} ]  {1}'.format
* Thu 16 Jan 2014 12:05:24 AM JST

* Thu 16 Jan 2014 12:05:24 AM JST

* Thu 16 Jan 2014 12:05:24 AM JST
import os

* Thu 16 Jan 2014 12:05:26 AM JST
import logging
from logging.handlers import RotatingFileHandler

* Thu 16 Jan 2014 12:05:32 AM JST

* Thu 16 Jan 2014 12:05:32 AM JST

* Thu 16 Jan 2014 12:05:32 AM JST
import sys

* Thu 16 Jan 2014 12:05:59 AM JST
PRINTFORMAT = '[ {0:<16} ]  {1}'.format
* Thu 16 Jan 2014 12:06:01 AM JST
CHAPTERFORMAT = '\n{0:*^30}'.format
* Thu 16 Jan 2014 12:06:32 AM JST
LOG.info(CHAPTERFORMAT('Check Active'))
* Thu 16 Jan 2014 12:07:16 AM JST
LOG, 
* Thu 16 Jan 2014 12:07:36 AM JST
LOG.info(CHAPTERFORMAT('Check Active'))
* Thu 16 Jan 2014 12:07:42 AM JST

* Thu 16 Jan 2014 12:07:42 AM JST

* Thu 16 Jan 2014 12:07:42 AM JST
        LOG.info(CHAPTERFORMAT('Check Active'))

* Thu 16 Jan 2014 12:08:07 AM JST
LOG.info(PRINTFORMAT('Check Active', 'ACTIVE!!'))
* Thu 16 Jan 2014 12:09:06 AM JST
return
* Thu 16 Jan 2014 12:09:16 AM JST
LOG.info(PRINTFORMAT('Check Active', 'ACTIVE!!'))
* Thu 16 Jan 2014 12:09:30 AM JST
LOG.info(PRINTFORMAT('Check Active', 'DOWN!!'))
* Thu 16 Jan 2014 01:24:21 AM JST
break
* Thu 16 Jan 2014 01:24:27 AM JST
return
* Thu 16 Jan 2014 01:29:21 AM JST
LOG.debug(PRINTFORMAT('Open port', '{}'.format(self.open_ports)))
* Thu 16 Jan 2014 01:29:36 AM JST
Open
* Thu 16 Jan 2014 01:29:40 AM JST
open
* Thu 16 Jan 2014 01:35:54 AM JST

* Thu 16 Jan 2014 01:35:54 AM JST

* Thu 16 Jan 2014 01:35:54 AM JST
            LOG.info(PRINTFORMAT('WOL'))

* Thu 16 Jan 2014 01:36:49 AM JST
info
* Thu 16 Jan 2014 02:22:36 AM JST

* Thu 16 Jan 2014 02:22:36 AM JST

* Thu 16 Jan 2014 02:22:36 AM JST


* Thu 16 Jan 2014 02:22:52 AM JST

* Thu 16 Jan 2014 02:22:52 AM JST

* Thu 16 Jan 2014 02:22:52 AM JST
CHAPTERFORMAT = '\n{0:*^30}'.format

* Thu 16 Jan 2014 02:22:57 AM JST
PRINTFORMAT = '[ {0:<16} ]  {1}'.format
* Thu 16 Jan 2014 02:24:26 AM JST
extensions # for directory
* Thu 16 Jan 2014 02:24:30 AM JST

* Thu 16 Jan 2014 02:24:30 AM JST

* Thu 16 Jan 2014 02:24:31 AM JST
from rook import 

* Thu 16 Jan 2014 02:24:57 AM JST
MAC,
* Thu 16 Jan 2014 02:25:08 AM JST
from rook import PRINTFORMAT, extensions # for directory
from rook.error import PortError, SSHKeyError
from rook.info import (HOST, USER, PORT, OPEN_PORT, CLOSE_PORT,
                       KAGI, KAGIMD5)


* Thu 16 Jan 2014 02:25:49 AM JST
PortsKnocker,
* Thu 16 Jan 2014 02:26:15 AM JST
from t1.timeutil import CheckElapse
from t1.socketutil import HostName
from t1 import listutil

* Thu 16 Jan 2014 02:27:06 AM JST
core
* Thu 16 Jan 2014 02:27:43 AM JST
, PRINTFORMAT
* Thu 16 Jan 2014 02:28:07 AM JST
path
* Thu 16 Jan 2014 02:28:07 AM JST
file path
* Thu 16 Jan 2014 02:28:43 AM JST
from king import extensions # for directory
from king.error import CMDError

* Thu 16 Jan 2014 02:31:50 AM JST
def kihalt():
    r"""SUMMARY

    @Arguments:
    - `verbose`:

    @Return:
    """
    with King() as king:
        king.halt()


* Thu 16 Jan 2014 02:32:25 AM JST
with
* Thu 16 Jan 2014 02:36:27 AM JST
connect
* Thu 16 Jan 2014 02:36:29 AM JST
decrypt
* Thu 16 Jan 2014 02:39:16 AM JST
pave
* Thu 16 Jan 2014 02:39:16 AM JST
script.pave
* Thu 16 Jan 2014 03:19:20 AM JST
PRINTFORMAT
* Thu 16 Jan 2014 03:19:27 AM JST
CHAPTERFORMAT
* Thu 16 Jan 2014 03:22:42 AM JST
CHAPTERFORMAT = '\n{0:*^30}'.format
PRINTFORMAT = '[ {0:<16} ]  {1}'.format

* Thu 16 Jan 2014 03:24:06 AM JST
extensions # for directory
* Thu 16 Jan 2014 03:26:10 AM JST

* Thu 16 Jan 2014 03:26:10 AM JST

* Thu 16 Jan 2014 03:26:10 AM JST
__all__ = [ '' ]

* Thu 16 Jan 2014 03:27:23 AM JST

* Thu 16 Jan 2014 03:27:23 AM JST

* Thu 16 Jan 2014 03:27:23 AM JST
from rook import extensions

* Thu 16 Jan 2014 03:30:33 AM JST

* Thu 16 Jan 2014 03:30:33 AM JST

* Thu 16 Jan 2014 03:30:33 AM JST
PRINTFORMAT =  PRINTFORMAT.format

* Thu 16 Jan 2014 03:34:19 AM JST

* Thu 16 Jan 2014 03:34:19 AM JST

* Thu 16 Jan 2014 03:34:19 AM JST
PRINTFORMAT = PRINTFORMAT.format

* Thu 16 Jan 2014 03:47:14 AM JST
isactive()
* Thu 16 Jan 2014 03:49:51 AM JST

* Thu 16 Jan 2014 03:49:51 AM JST

* Thu 16 Jan 2014 03:49:51 AM JST
_CH.setLevel(logging.DEBUG)

* Thu 16 Jan 2014 03:49:55 AM JST

* Thu 16 Jan 2014 03:49:55 AM JST

* Thu 16 Jan 2014 03:49:55 AM JST
LOG.setLevel(logging.DEBUG)

* Thu 16 Jan 2014 03:55:15 AM JST
info
* Thu 16 Jan 2014 04:02:59 AM JST
pass
* Thu 16 Jan 2014 04:05:46 AM JST
self.ki.isactive()
* Thu 16 Jan 2014 04:11:14 AM JST
ssh
* Thu 16 Jan 2014 04:26:33 AM JST
sh
* Thu 16 Jan 2014 04:26:33 AM JST
import sh
* Thu 16 Jan 2014 04:26:44 AM JST
sh.
* Thu 16 Jan 2014 12:51:51 PM JST

* Thu 16 Jan 2014 02:21:16 PM JST
(dired-create-directory DIRECTORY)
* Thu 16 Jan 2014 02:27:25 PM JST
(interactive
   (list (read-file-name "Create directory: " (dired-current-directory))))
* Thu 16 Jan 2014 02:28:01 PM JST
(dired-create-directory directory)
* Thu 16 Jan 2014 02:29:12 PM JST
directory
* Thu 16 Jan 2014 02:29:37 PM JST
(dired-create-directory directory)
* Thu 16 Jan 2014 02:29:38 PM JST
directory
* Thu 16 Jan 2014 02:29:50 PM JST
(when (not (dired-create-directory "tes"))
  (message "hello" ))
* Thu 16 Jan 2014 02:30:09 PM JST
dired-create-directory "tes"
* Thu 16 Jan 2014 02:30:14 PM JST
(ignore-errors (dired-create-directory "tes"))
* Thu 16 Jan 2014 02:32:19 PM JST
file 
* Thu 16 Jan 2014 02:35:00 PM JST
Advanced
* Thu 16 Jan 2014 02:38:00 PM JST
(set-buffer-modified-p t)
* Thu 16 Jan 2014 02:41:38 PM JST
(defun dired-create-directory (directory)
  "Create a directory called DIRECTORY.
If DIRECTORY already exists, signal an error."
  (interactive
   (list (read-file-name "Create directory: " (dired-current-directory))))
  (let* ((expanded (directory-file-name (expand-file-name directory)))
	 (try expanded) new)
    (if (file-exists-p expanded)
	(error "Cannot create directory %s: file exists" expanded))
    ;; Find the topmost nonexistent parent dir (variable `new')
    (while (and try (not (file-exists-p try)) (not (equal new try)))
      (setq new try
	    try (directory-file-name (file-name-directory try))))
    (make-directory expanded t)
    (when new
      (dired-add-file new)
      (dired-move-to-filename))))
* Thu 16 Jan 2014 02:41:50 PM JST
(let* ((expanded (directory-file-name (expand-file-name directory)))
	 (try expanded) new)
    (if (file-exists-p expanded)
	(error "Cannot create directory %s: file exists" expanded))
    ;; Find the topmost nonexistent parent dir (variable `new')
    (while (and try (not (file-exists-p try)) (not (equal new try)))
      (setq new try
	    try (directory-file-name (file-name-directory try))))
    (make-directory expanded t)
    (when new
      (dired-add-file new)
      (dired-move-to-filename)))
* Thu 16 Jan 2014 02:43:42 PM JST
concat
* Thu 16 Jan 2014 02:43:55 PM JST
fi
* Thu 16 Jan 2014 02:46:59 PM JST
expand-
* Thu 16 Jan 2014 02:47:08 PM JST
directory
* Thu 16 Jan 2014 02:48:01 PM JST
file-
* Thu 16 Jan 2014 02:48:05 PM JST
set
* Thu 16 Jan 2014 02:50:08 PM JST
set
* Thu 16 Jan 2014 02:51:37 PM JST
py:dired-create-directory
* Thu 16 Jan 2014 02:52:16 PM JST
;; borrow from dired-aux.el
(defun py:dired-create-directory (directory) ;[2014/01/16]
  "DIRECTORY"
  (interactive
   (list (read-file-name "Create directory: " (dired-current-directory))))
  (let* ((expanded (directory-file-name (expand-file-name directory)))
         (try expanded) new)
    (if (file-exists-p expanded)
        (error "Cannot create directory %s: file exists" expanded))
    ;; Find the topmost nonexistent parent dir (variable `new')
    (while (and try (not (file-exists-p try)) (not (equal new try)))
      (setq new try
            try (directory-file-name (file-name-directory try))))
    (make-directory expanded t)
    (find-file (expand-file-name "__init__.py" expanded))
    )
  )
* Thu 16 Jan 2014 02:53:41 PM JST
py:dired-create-directory
* Thu 16 Jan 2014 05:16:46 PM JST
        self._getline_num()
        self._mvblockend()

* Thu 16 Jan 2014 05:25:39 PM JST

* Thu 16 Jan 2014 05:25:39 PM JST

* Thu 16 Jan 2014 05:25:39 PM JST
        from mygoogle.chrome import ChromeBMParse

* Thu 16 Jan 2014 05:28:56 PM JST
assertRaises
* Thu 16 Jan 2014 05:29:15 PM JST
NoExistsNameError
* Thu 16 Jan 2014 05:29:33 PM JST
In
* Thu 16 Jan 2014 05:32:13 PM JST
bm)
* Thu 16 Jan 2014 05:32:14 PM JST
list(bm)
* Thu 16 Jan 2014 05:34:48 PM JST

* Thu 16 Jan 2014 05:34:48 PM JST

* Thu 16 Jan 2014 05:34:48 PM JST
        print(self.line_num)

* Thu 16 Jan 2014 05:50:14 PM JST
2014-01-16-163756.junk.py
* Thu 16 Jan 2014 05:53:01 PM JST
_file
* Thu 16 Jan 2014 06:04:37 PM JST
BOOKMARK_PATH
* Thu 16 Jan 2014 06:04:49 PM JST
    def _mvblockend(self):
        """Move initialize line.

        @Return: Nothing
        """
        while -1 == self._lines[self.line_num].find(']') and self.line_num != 0:
            self.line_num -= 1

* Thu 16 Jan 2014 06:06:51 PM JST

* Thu 16 Jan 2014 06:06:51 PM JST

* Thu 16 Jan 2014 06:06:52 PM JST
        self._line_buffer = open(self._bmpath, 'r').readlines()

* Thu 16 Jan 2014 06:10:48 PM JST
line_nu
* Thu 16 Jan 2014 06:13:25 PM JST
_mv
* Thu 16 Jan 2014 06:14:29 PM JST

* Thu 16 Jan 2014 06:14:29 PM JST

* Thu 16 Jan 2014 06:14:29 PM JST
        self._bmpath = bmpath

* Thu 16 Jan 2014 06:15:13 PM JST
    def _getline_num(self):
        """Determine line number of name.

        @Arguments:

        - `name`: elements name

        @Return: line number
        """
        self._file.seek(0)
        for num, line in enumerate(self._file):
            if '"name":' in line:
                trimed = line.split('"name":')[1].split('"')[1]
                if self._name == trimed.decode('unicode-escape', 'ignore'):
                    self.line_num = num - 1
        if 0 == self.line_num:
            raise NoExistsNameError('Not exists bookmarks folder "{}"'
                                  .format(self._name))

* Thu 16 Jan 2014 06:15:25 PM JST

* Thu 16 Jan 2014 06:15:25 PM JST

* Thu 16 Jan 2014 06:15:25 PM JST
        self._file.seek(0)

* Thu 16 Jan 2014 06:16:06 PM JST
line_num
* Thu 16 Jan 2014 06:16:12 PM JST
line_num
* Thu 16 Jan 2014 06:16:36 PM JST
    def __iter__(self):
        self._getline_num()
        self._mvblockend()
        return self

    def next(self):
        """Parse urls"""
        operand = -1
        while operand < 0:
            self.line_num -= 1
            if self._lines[self.line_num].find('}') != -1:
                operand -= 1
            if self._lines[self.line_num].find('{') != -1:
                operand += 1
            if operand == -1:
                if self._lines[self.line_num].find('"url":') != -1:
                    result = trim_url(self._lines[self.line_num])
                    if result:
                        return result
        raise StopIteration

    def close(self, ):
        r"""SUMMARY

        close()

        @Return:
        """
        self._file.close()

    def __del__(self):
        """Close opened file when deconstract."""
        self.close()

* Thu 16 Jan 2014 06:22:02 PM JST
        with open(self._bmpath, 'r') as bmfile:
            self._line_buffer = bmfile.readlines()

* Thu 16 Jan 2014 06:25:07 PM JST
SUMMARY
* Thu 16 Jan 2014 06:27:20 PM JST
self._lines_buffer[self.current_line_num].find(']'):
* Thu 16 Jan 2014 06:30:42 PM JST

* Thu 16 Jan 2014 06:30:42 PM JST

* Thu 16 Jan 2014 06:30:42 PM JST
            # if self._lines_buffer[self.current_line_num].find('}') != -1:

* Thu 16 Jan 2014 06:30:43 PM JST

* Thu 16 Jan 2014 06:30:43 PM JST

* Thu 16 Jan 2014 06:30:44 PM JST
            # if self._lines_buffer[self.current_line_num].find('{') != -1:

* Thu 16 Jan 2014 06:30:45 PM JST

* Thu 16 Jan 2014 06:30:45 PM JST

* Thu 16 Jan 2014 06:30:45 PM JST
                # if self._lines_buffer[self.current_line_num].find('"url":') != -1:

* Thu 16 Jan 2014 06:34:22 PM JST
 or self._bmpath
* Thu 16 Jan 2014 06:38:22 PM JST
coverage
* Thu 16 Jan 2014 06:41:20 PM JST
form 
* Thu 16 Jan 2014 06:44:55 PM JST
assertListEqual
* Thu 16 Jan 2014 06:45:23 PM JST
['http://www.whitehouse.gov/',
 'http://www.korea-dpr.com/',
 'http://www.bundesregierung.de/Webs/Breg/EN/Homepage/home.html',
 'http://www.pmo.gov.sg/',
 'http://www.kantei.go.jp/foreign/index-e.html',
 'http://www.pm.gov.au/',
 'http://www.number10.gov.uk/',
 'http://www.kcna.co.jp/index-e.htm',
 'http://english.kbs.co.kr/',
 'http://www.itar-tass.com/en/',
 'http://english.cctv.com/index.shtml']
* Thu 16 Jan 2014 06:46:45 PM JST
list(
* Thu 16 Jan 2014 06:48:03 PM JST
coverage
* Thu 16 Jan 2014 06:48:03 PM JST
with-coverage
* Thu 16 Jan 2014 06:48:26 PM JST
coverage
* Thu 16 Jan 2014 06:48:26 PM JST
with-coverage
* Thu 16 Jan 2014 06:51:06 PM JST
in 
* Thu 16 Jan 2014 06:51:06 PM JST
url in 
* Thu 16 Jan 2014 06:51:07 PM JST
for url in 
* Thu 16 Jan 2014 06:51:07 PM JST
url for url in 
* Fri 17 Jan 2014 12:12:37 AM JST
pass
* Fri 17 Jan 2014 12:13:23 AM JST
'Not exists bookmarks folder "{}"'
* Fri 17 Jan 2014 12:14:25 AM JST
    
* Fri 17 Jan 2014 12:15:31 AM JST
StandardError
* Fri 17 Jan 2014 12:20:23 AM JST
ChromeBMParse
* Fri 17 Jan 2014 12:20:27 AM JST
ChromeBMParse
* Fri 17 Jan 2014 12:20:34 AM JST

* Fri 17 Jan 2014 12:20:34 AM JST

* Fri 17 Jan 2014 12:20:34 AM JST
from mygoogle.chrome import ChromeBMParse

* Fri 17 Jan 2014 12:22:34 AM JST
class ChromeError(StandardError):
    r"""For chrome StandardError."""
    pass


class NoExistsFolderError(ChromeError):
    """Not Exist Folder in Bookmarks."""

    def __init__(self, name):
        self._name

    def __str__(self, ):
        return 'Not exists bookmarks folder "{}"'.format(self._name)


* Fri 17 Jan 2014 12:23:09 AM JST
from mygoogle.chrome.utils import trim_url
from mygoogle.chrome.error import NoExistsFolderError

* Fri 17 Jan 2014 12:26:45 AM JST
NoExistsNameError
* Fri 17 Jan 2014 12:29:46 AM JST
ChromeBMParse
* Fri 17 Jan 2014 12:30:02 AM JST
def get_urls(name):
    """SUMMARY

    @Arguments:
    - `name`:

    @Return:
    """
    return list(ChromeBMParse(name))



* Fri 17 Jan 2014 12:30:27 AM JST
from singledispatch import singledispatch
* Fri 17 Jan 2014 12:30:55 AM JST
@singledispatch
def run(url, options=None):
    r"""SUMMARY

    run(url, options=[])

    @Arguments:
    - `url`:
    - `options`:

    @Return:
    """
    raise ValueError('Must be String or List, url {}'.format(type(url)))

@run.register(str)
def run_string(url, options=None):
    r"""SUMMARY

    @Arguments:
    - `url`:
    - `options`:

    @Return: retruncode
    """
    options = options or []
    if _types.ListType != type(options):
        raise ValueError('Must be list {}'.format(options))
    return _sbp.Popen([CMD.get('google-chrome')] + options + [url])

@run.register(list)
def run_list(url, options=None):
    r"""SUMMARY

    @Arguments:
    - `url`:
    - `options`:

    @Return: retruncode
    """
    options = options or []
    if _types.ListType != type(options):
        raise ValueError('Must be list {}'.format(options))
    return _sbp.Popen([CMD.get('google-chrome')] + options + url)

* Fri 17 Jan 2014 12:31:23 AM JST
from p import 
* Fri 17 Jan 2014 12:32:45 AM JST

* Fri 17 Jan 2014 12:32:45 AM JST

* Fri 17 Jan 2014 12:32:45 AM JST
    if _types.ListType != type(options):

* Fri 17 Jan 2014 12:32:51 AM JST

* Fri 17 Jan 2014 12:32:51 AM JST

* Fri 17 Jan 2014 12:32:51 AM JST
    if _types.ListType != type(options):

* Fri 17 Jan 2014 12:33:26 AM JST

* Fri 17 Jan 2014 12:33:26 AM JST

* Fri 17 Jan 2014 12:33:26 AM JST
    if _types.ListType != type(options):

* Fri 17 Jan 2014 12:39:56 AM JST
iswitchb-mode-map-predefine
* Fri 17 Jan 2014 12:40:59 AM JST
iswitchb-define-mode-map-hook
* Fri 17 Jan 2014 12:43:01 AM JST
[(control :)]
* Fri 17 Jan 2014 12:45:57 AM JST
['--disable-geolocation',
                                    '--password-store=basic',
                                    '--disable-logging',
                                    '--disable-java',
                                    '--disable-application-cache',
                                    '--media-cache-size=100000000',
                                    '--disk-cache-size=100000000',
                                    '--disable-ipv6',
                                    '--disk-cache-dir="/tmp/chrome"',
                                    '-omnibox-popup-count=1']
* Fri 17 Jan 2014 12:48:10 AM JST
--incognito
* Fri 17 Jan 2014 12:48:41 AM JST
None
* Fri 17 Jan 2014 12:52:14 AM JST

* Fri 17 Jan 2014 12:52:14 AM JST

* Fri 17 Jan 2014 12:52:14 AM JST
    return _sbp.Popen([CMD.get('google-chrome')] + options + [url])

* Fri 17 Jan 2014 12:53:27 AM JST
return sh.google_chrome(url, options, _bg=True)
* Fri 17 Jan 2014 12:54:13 AM JST
def open_folder(folder_name, options=None):
    r"""SUMMARY

    open_folder(folder_name, options=[])

    @Arguments:
    - `folder_name`:
    - `options`:

    @Return:
    """
    options = options or []
    run(list(ChromeBMParse(folder_name)), options=options)



* Fri 17 Jan 2014 12:55:15 AM JST
def iter_chromewinids():
    r"""SUMMARY

    @Return:
    """
    for win in wm.iter_matchwin(psname='chrome'):
        yield win.id



* Fri 17 Jan 2014 12:55:25 AM JST

* Fri 17 Jan 2014 12:55:25 AM JST

* Fri 17 Jan 2014 12:55:25 AM JST
import types as _types

* Fri 17 Jan 2014 12:55:25 AM JST
import types as _types

* Fri 17 Jan 2014 12:55:25 AM JST
import types as _types
import subprocess as _sbp

* Fri 17 Jan 2014 12:55:28 AM JST

* Fri 17 Jan 2014 12:55:28 AM JST

* Fri 17 Jan 2014 12:55:28 AM JST
from singledispatch import singledispatch

* Fri 17 Jan 2014 12:55:32 AM JST

* Fri 17 Jan 2014 12:55:32 AM JST

* Fri 17 Jan 2014 12:55:32 AM JST
import wm

* Fri 17 Jan 2014 12:55:59 AM JST

* Fri 17 Jan 2014 12:55:59 AM JST

* Fri 17 Jan 2014 12:55:59 AM JST
from ref import CMD

* Fri 17 Jan 2014 12:56:22 AM JST
           
* Fri 17 Jan 2014 12:56:39 AM JST

* Fri 17 Jan 2014 12:56:45 AM JST
ChromeBMParse
* Fri 17 Jan 2014 12:56:54 AM JST
import 
* Fri 17 Jan 2014 01:00:03 AM JST
mport 
* Fri 17 Jan 2014 01:00:47 AM JST
mygoogle
* Fri 17 Jan 2014 01:10:39 AM JST
google_feeling_lucky
* Fri 17 Jan 2014 01:11:32 AM JST
google_feeling_lucky
* Fri 17 Jan 2014 01:12:52 AM JST
search
* Fri 17 Jan 2014 01:12:54 AM JST
chrome
* Fri 17 Jan 2014 01:13:09 AM JST
chrom
* Fri 17 Jan 2014 01:21:51 AM JST
if _os.name in ('posix', 'java'):
    BOOKMARK_BASE_PATH = '~/.config/google-chrome/Default/Bookmarks'
    BOOKMARK_PATH = _os.path.expanduser(BOOKMARK_BASE_PATH)

elif 'nt' == _os.name:
    BOOKMARK_BASE_PATH = ('Local Settings/Application Data/Google'
                          '/Chrome/User Data/Default/Bookmarks')
    BOOKMARK_PATH = _os.path.join(_os.environ['userprofile'],
                                  BOOKMARK_BASE_PATH)

# else:
#     raise NotImplementedError('not supported {.name} environment'.format(_os))

* Fri 17 Jan 2014 01:22:04 AM JST
BOOKMARK_PATH
* Fri 17 Jan 2014 01:22:53 AM JST

* Fri 17 Jan 2014 01:22:53 AM JST

* Fri 17 Jan 2014 01:22:53 AM JST
import os as _os

* Fri 17 Jan 2014 01:22:58 AM JST

* Fri 17 Jan 2014 01:22:58 AM JST

* Fri 17 Jan 2014 01:22:58 AM JST


* Fri 17 Jan 2014 01:23:35 AM JST

* Fri 17 Jan 2014 01:23:35 AM JST

* Fri 17 Jan 2014 01:23:35 AM JST
__revision__ = '$Revision$'

* Fri 17 Jan 2014 01:23:35 AM JST
__revision__ = '$Revision$'

* Fri 17 Jan 2014 01:23:35 AM JST
__revision__ = '$Revision$'
__version__ = '0.3.0'

* Fri 17 Jan 2014 01:23:41 AM JST
__revision__ = '$Revision: 98 $'
__version__ = '0.3.0'

* Fri 17 Jan 2014 01:26:07 AM JST
coverage
* Fri 17 Jan 2014 01:26:07 AM JST
with-coverage
* Fri 17 Jan 2014 01:26:42 AM JST
Error
* Fri 17 Jan 2014 01:29:20 AM JST
google-chrome --disable-geolocation --password-store=basic --disable-logging --disable-java --disable-application-cache --media-cache-size=100000000 --disk-cache-size=100000000 --disable-ipv6 --disk-cache-dir="/tmp/chrome" -omnibox-popup-count=1
* Fri 17 Jan 2014 01:54:43 AM JST
form 
* Fri 17 Jan 2014 01:56:02 AM JST
list_laucher_dir
* Fri 17 Jan 2014 01:56:58 AM JST
_glob(_os.path.join(PANEL_DIR, '*'))
* Fri 17 Jan 2014 01:57:31 AM JST
return 
* Fri 17 Jan 2014 01:57:36 AM JST
list
* Fri 17 Jan 2014 01:58:09 AM JST
list
* Fri 17 Jan 2014 02:02:01 AM JST
iter_laucher_dir
* Fri 17 Jan 2014 02:02:01 AM JST
list(iter_laucher_dir
* Fri 17 Jan 2014 02:05:06 AM JST
PANEL_DIR = _os.path.expanduser('~/.config/xfce4/panel')


def iter_laucher_dir():
    r"""SUMMARY
    
    list_laucher_dir()
    
    @Return:
    """
    for path in _glob(_os.path.join(PANEL_DIR, '*')):
        if _os.path.isdir(path):
            yield path
    

def iter_desktops():
    r"""SUMMARY
    
    iter_desktop_config()
    
    @Return:
    """
    for dir_ in iter_laucher_dir():
        for file_ in _glob(_os.path.join(dir_, '*.desktop')):
            yield file_

* Fri 17 Jan 2014 02:05:15 AM JST
import os as _os
from glob import glob as _glob

* Fri 17 Jan 2014 02:05:27 AM JST

* Fri 17 Jan 2014 02:05:28 AM JST

* Fri 17 Jan 2014 02:05:28 AM JST
import os as _os

* Fri 17 Jan 2014 02:06:15 AM JST
raise NotImplementedError('not supported {.name} environment'.format(_os))
* Fri 17 Jan 2014 02:09:03 AM JST
xfce4
* Fri 17 Jan 2014 02:09:10 AM JST
.iter_desktops
* Fri 17 Jan 2014 02:09:35 AM JST
iter_chrome
* Fri 17 Jan 2014 02:10:09 AM JST
['--disable-geolocation',
                                    '--password-store=basic',
                                    '--disable-logging',
                                    '--disable-java',
                                    '--disable-application-cache',
                                    '--media-cache-size=100000000',
                                    '--disk-cache-size=100000000',
                                    '--disable-ipv6',
                                    '--disk-cache-dir="/tmp/chrome"',
                                    '--omnibox-popup-count=1']
* Fri 17 Jan 2014 02:13:02 AM JST
'/root/.config/xfce4/panel/launcher-11/13642567623.desktop'
* Fri 17 Jan 2014 02:17:46 AM JST
file_
* Fri 17 Jan 2014 02:18:55 AM JST
'Exec=google-chrome --disable-geolocation --password-store=basic --disable-logging --disable-java --disable-application-cache --media-cache-size=100000000 --disk-cache-size=100000000 --disable-ipv6 --disk-cache-dir="/tmp/chrome" --omnibox-popup-count=1\n'
* Fri 17 Jan 2014 02:22:01 AM JST
DE
* Fri 17 Jan 2014 02:23:43 AM JST
'Exec=google-chrome --disable-geolocation --password-store=basic --disable-logging --disable-java --disable-application-cache --media-cache-size=100000000 --disk-cache-size=100
* Fri 17 Jan 2014 02:23:43 AM JST
'Exec=google-chrome --disable-geolocation --password-store=basic --disable-logging --disable-java --disable-application-cache --media-cache-size=100000000 --disk-cache-size=100
* Fri 17 Jan 2014 02:23:43 AM JST
'Exec=google-chrome --disable-geolocation --password-store=basic --disable-logging --disable-java --disable-application-cache --media-cache-size=100000000 --disk-cache-size=100
* Fri 17 Jan 2014 02:23:43 AM JST
'Exec=google-chrome --disable-geolocation --password-store=basic --disable-logging --disable-java --disable-application-cache --media-cache-size=100000000 --disk-cache-size=100
* Fri 17 Jan 2014 02:23:43 AM JST
'Exec=google-chrome --disable-geolocation --password-store=basic --disable-logging --disable-java --disable-application-cache --media-cache-size=100000000 --disk-cache-size=100
* Fri 17 Jan 2014 02:23:43 AM JST
'Exec=google-chrome --disable-geolocation --password-store=basic --disable-logging --disable-java --disable-application-cache --media-cache-size=100000000 --disk-cache-size=100
* Fri 17 Jan 2014 02:23:43 AM JST
'Exec=google-chrome --disable-geolocation --password-store=basic --disable-logging --disable-java --disable-application-cache --media-cache-size=100000000 --disk-cache-size=100
* Fri 17 Jan 2014 02:24:10 AM JST
get_launcher_options
* Fri 17 Jan 2014 02:24:25 AM JST
line
* Fri 17 Jan 2014 02:25:13 AM JST
DEFAULT_OPTS
* Fri 17 Jan 2014 02:26:05 AM JST
variables
* Fri 17 Jan 2014 02:27:50 AM JST
CHROME_OPTS
* Fri 17 Jan 2014 04:06:09 AM JST
        print('Looking for ' + pattern)
        try:
            while True:
                s = (yield)
                if pattern in s:
                    print(s)
        except GeneratorExit:
            print("=== Done ===")

* Fri 17 Jan 2014 04:12:10 AM JST
coroutine
* Fri 17 Jan 2014 04:18:38 AM JST
print
* Fri 17 Jan 2014 04:46:48 AM JST
Versionsau
* Fri 17 Jan 2014 04:53:45 AM JST
http://l.autohotkey.net/v/AutoHotkey_v2.0-a038.zip
* Fri 17 Jan 2014 04:55:57 AM JST
https://github.com/Lexikos/AutoHotkey_L#context-commitish-filter-field
* Fri 17 Jan 2014 05:15:08 AM JST
https://github.com/AutoHotkey/AutoHotkey#js-command-bar-field
* Fri 17 Jan 2014 05:56:04 AM JST
Chris Mallett
* Fri 17 Jan 2014 01:55:38 PM JST
Leukocyte
* Fri 17 Jan 2014 03:04:44 PM JST
NO
* Fri 17 Jan 2014 03:06:27 PM JST
YES
* Fri 17 Jan 2014 03:07:52 PM JST
NO
* Fri 17 Jan 2014 03:07:54 PM JST
NO
* Fri 17 Jan 2014 03:07:58 PM JST
NO
* Fri 17 Jan 2014 03:08:10 PM JST
NO
* Fri 17 Jan 2014 05:39:46 PM JST
pyperclip
* Fri 17 Jan 2014 05:40:44 PM JST
hello')
* Fri 17 Jan 2014 05:42:56 PM JST

* Fri 17 Jan 2014 05:42:56 PM JST
*
* Fri 17 Jan 2014 05:42:56 PM JST
*

* Fri 17 Jan 2014 05:45:54 PM JST
os.system('which xclip') == 0
* Fri 17 Jan 2014 05:46:22 PM JST
os.system('which xsel') == 0
* Fri 17 Jan 2014 05:46:31 PM JST
import gtk
* Fri 17 Jan 2014 05:48:16 PM JST
/usr/lib/python2.7/dist-packages/gtk-2.0/gtk
* Fri 17 Jan 2014 06:33:24 PM JST
/** @file
 *
 * Shared Clipboard:
 * X11 backend code.
 */

/*
 * Copyright (C) 2006-2012 Oracle Corporation
 *
 * This file is part of VirtualBox Open Source Edition (OSE), as
 * available from http://www.virtualbox.org. This file is free software;
 * you can redistribute it and/or modify it under the terms of the GNU
 * General Public License (GPL) as published by the Free Software
 * Foundation, in version 2 as it comes in the "COPYING" file of the
 * VirtualBox OSE distribution. VirtualBox OSE is distributed in the
 * hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
 */

/* Note: to automatically run regression tests on the shared clipboard,
 * execute the tstClipboardX11 testcase.  If you often make changes to the
 * clipboard code, adding the line
 *   OTHERS += $(PATH_tstClipboardX11)/tstClipboardX11.run
 * to LocalConfig.kmk will cause the tests to be run every time the code is
 * changed. */

#define LOG_GROUP LOG_GROUP_SHARED_CLIPBOARD

#include <errno.h>

#include <dlfcn.h>
#include <fcntl.h>
#include <unistd.h>

#ifdef RT_OS_SOLARIS
#include <tsol/label.h>
#endif

#include <X11/Xlib.h>
#include <X11/Xatom.h>
#include <X11/Intrinsic.h>
#include <X11/Shell.h>
#include <X11/Xproto.h>
#include <X11/StringDefs.h>

#include <iprt/types.h>
#include <iprt/mem.h>
#include <iprt/semaphore.h>
#include <iprt/thread.h>

#include <VBox/log.h>

#include <VBox/GuestHost/SharedClipboard.h>
#include <VBox/GuestHost/clipboard-helper.h>
#include <VBox/HostServices/VBoxClipboardSvc.h>

static Atom clipGetAtom(CLIPBACKEND *pCtx, const char *pszName);

/** The different clipboard formats which we support. */
enum CLIPFORMAT
{
    INVALID = 0,
    TARGETS,
    TEXT,  /* Treat this as Utf8, but it may really be ascii */
    UTF8,
    BMP
};

/** The table mapping X11 names to data formats and to the corresponding
 * VBox clipboard formats (currently only Unicode) */
static struct _CLIPFORMATTABLE
{
    /** The X11 atom name of the format (several names can match one format)
     */
    const char *pcszAtom;
    /** The format corresponding to the name */
    CLIPFORMAT  enmFormat;
    /** The corresponding VBox clipboard format */
    uint32_t    u32VBoxFormat;
} g_aFormats[] =
{
    { "INVALID", INVALID, 0 },
    { "UTF8_STRING", UTF8, VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT },
    { "text/plain;charset=UTF-8", UTF8,
      VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT },
    { "text/plain;charset=utf-8", UTF8,
      VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT },
    { "STRING", TEXT, VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT },
    { "TEXT", TEXT, VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT },
    { "text/plain", TEXT, VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT },
    { "image/bmp", BMP, VBOX_SHARED_CLIPBOARD_FMT_BITMAP },
    { "image/x-bmp", BMP, VBOX_SHARED_CLIPBOARD_FMT_BITMAP },
    { "image/x-MS-bmp", BMP, VBOX_SHARED_CLIPBOARD_FMT_BITMAP },
    /* TODO: Inkscape exports image/png but not bmp... */
};

typedef unsigned CLIPX11FORMAT;

enum
{
    NIL_CLIPX11FORMAT = 0,
    MAX_CLIP_X11_FORMATS = RT_ELEMENTS(g_aFormats)
};

/** Return the atom corresponding to a supported X11 format.
 * @param widget a valid Xt widget
 */
static Atom clipAtomForX11Format(CLIPBACKEND *pCtx, CLIPX11FORMAT format)
{
    return clipGetAtom(pCtx, g_aFormats[format].pcszAtom);
}

/** Return the CLIPFORMAT corresponding to a supported X11 format. */
static CLIPFORMAT clipRealFormatForX11Format(CLIPX11FORMAT format)
{
    return g_aFormats[format].enmFormat;
}

/** Return the atom corresponding to a supported X11 format. */
static uint32_t clipVBoxFormatForX11Format(CLIPX11FORMAT format)
{
    return g_aFormats[format].u32VBoxFormat;
}

/** Lookup the X11 format matching a given X11 atom.
 * @returns the format on success, NIL_CLIPX11FORMAT on failure
 * @param   widget a valid Xt widget
 */
static CLIPX11FORMAT clipFindX11FormatByAtom(CLIPBACKEND *pCtx, Atom atomFormat)
{
    for (unsigned i = 0; i < RT_ELEMENTS(g_aFormats); ++i)
        if (clipAtomForX11Format(pCtx, i) == atomFormat)
            return i;
    return NIL_CLIPX11FORMAT;
}

/** Lookup the X11 format matching a given X11 atom text.
 * @returns the format on success, NIL_CLIPX11FORMAT on failure
 * @param   widget a valid Xt widget
 */
static CLIPX11FORMAT clipFindX11FormatByAtomText(const char *pcsz)
{
    for (unsigned i = 0; i < RT_ELEMENTS(g_aFormats); ++i)
        if (!strcmp(g_aFormats[i].pcszAtom, pcsz))
            return i;
    return NIL_CLIPX11FORMAT;
}

/**
 * Enumerates supported X11 clipboard formats corresponding to a given VBox
 * format.
 * @returns the next matching X11 format in the list, or NIL_CLIPX11FORMAT if
 *          there are no more
 * @param lastFormat  The value returned from the last call of this function.
 *                    Use NIL_CLIPX11FORMAT to start the enumeration.
 */
static CLIPX11FORMAT clipEnumX11Formats(uint32_t u32VBoxFormats,
                                        CLIPX11FORMAT lastFormat)
{
    for (unsigned i = lastFormat + 1; i < RT_ELEMENTS(g_aFormats); ++i)
        if (u32VBoxFormats & clipVBoxFormatForX11Format(i))
            return i;
    return NIL_CLIPX11FORMAT;
}

/** Global context information used by the X11 clipboard backend */
struct _CLIPBACKEND
{
    /** Opaque data structure describing the front-end. */
    VBOXCLIPBOARDCONTEXT *pFrontend;
    /** Is an X server actually available? */
    bool fHaveX11;
    /** The X Toolkit application context structure */
    XtAppContext appContext;

    /** We have a separate thread to wait for Window and Clipboard events */
    RTTHREAD thread;
    /** The X Toolkit widget which we use as our clipboard client.  It is never made visible. */
    Widget widget;

    /** Should we try to grab the clipboard on startup? */
    bool fGrabClipboardOnStart;

    /** The best text format X11 has to offer, as an index into the formats
     * table */
    CLIPX11FORMAT X11TextFormat;
    /** The best bitmap format X11 has to offer, as an index into the formats
     * table */
    CLIPX11FORMAT X11BitmapFormat;
    /** What formats does VBox have on offer? */
    uint32_t vboxFormats;
    /** Cache of the last unicode data that we received */
    void *pvUnicodeCache;
    /** Size of the unicode data in the cache */
    uint32_t cbUnicodeCache;
    /** When we wish the clipboard to exit, we have to wake up the event
     * loop.  We do this by writing into a pipe.  This end of the pipe is
     * the end that another thread can write to. */
    int wakeupPipeWrite;
    /** The reader end of the pipe */
    int wakeupPipeRead;
    /** A pointer to the XFixesSelectSelectionInput function */
    void (*fixesSelectInput)(Display *, Window, Atom, unsigned long);
    /** The first XFixes event number */
    int fixesEventBase;
    /** The Xt Intrinsics can only handle one outstanding clipboard operation
     * at a time, so we keep track of whether one is in process. */
    bool fBusy;
    /** We can't handle a clipboard update event while we are busy, so remember
     * it for later. */
    bool fUpdateNeeded;
};

/** The number of simultaneous instances we support.  For all normal purposes
 * we should never need more than one.  For the testcase it is convenient to
 * have a second instance that the first can interact with in order to have
 * a more controlled environment. */
enum { CLIP_MAX_CONTEXTS = 20 };

/** Array of structures for mapping Xt widgets to context pointers.  We
 * need this because the widget clipboard callbacks do not pass user data. */
static struct {
    /** The widget we want to associate the context with */
    Widget widget;
    /** The context associated with the widget */
    CLIPBACKEND *pCtx;
} g_contexts[CLIP_MAX_CONTEXTS];

/** Register a new X11 clipboard context. */
static int clipRegisterContext(CLIPBACKEND *pCtx)
{
    bool found = false;
    AssertReturn(pCtx != NULL, VERR_INVALID_PARAMETER);
    Widget widget = pCtx->widget;
    AssertReturn(widget != NULL, VERR_INVALID_PARAMETER);
    for (unsigned i = 0; i < RT_ELEMENTS(g_contexts); ++i)
    {
        AssertReturn(   (g_contexts[i].widget != widget)
                     && (g_contexts[i].pCtx != pCtx), VERR_WRONG_ORDER);
        if (g_contexts[i].widget == NULL && !found)
        {
            AssertReturn(g_contexts[i].pCtx == NULL, VERR_INTERNAL_ERROR);
            g_contexts[i].widget = widget;
            g_contexts[i].pCtx = pCtx;
            found = true;
        }
    }
    return found ? VINF_SUCCESS : VERR_OUT_OF_RESOURCES;
}

/** Unregister an X11 clipboard context. */
static void clipUnregisterContext(CLIPBACKEND *pCtx)
{
    bool found = false;
    AssertReturnVoid(pCtx != NULL);
    Widget widget = pCtx->widget;
    AssertReturnVoid(widget != NULL);
    for (unsigned i = 0; i < RT_ELEMENTS(g_contexts); ++i)
    {
        Assert(!found || g_contexts[i].widget != widget);
        if (g_contexts[i].widget == widget)
        {
            Assert(g_contexts[i].pCtx != NULL);
            g_contexts[i].widget = NULL;
            g_contexts[i].pCtx = NULL;
            found = true;
        }
    }
}

/** Find an X11 clipboard context. */
static CLIPBACKEND *clipLookupContext(Widget widget)
{
    AssertReturn(widget != NULL, NULL);
    for (unsigned i = 0; i < RT_ELEMENTS(g_contexts); ++i)
    {
        if (g_contexts[i].widget == widget)
        {
            Assert(g_contexts[i].pCtx != NULL);
            return g_contexts[i].pCtx;
        }
    }
    return NULL;
}

/** Convert an atom name string to an X11 atom, looking it up in a cache
 * before asking the server */
static Atom clipGetAtom(CLIPBACKEND *pCtx, const char *pszName)
{
    AssertPtrReturn(pszName, None);
    return XInternAtom(XtDisplay(pCtx->widget), pszName, False);
}

#ifdef TESTCASE
static void testQueueToEventThread(void (*proc)(void *, void *),
                                   void *client_data);
#endif

/** String written to the wakeup pipe. */
#define WAKE_UP_STRING      "WakeUp!"
/** Length of the string written. */
#define WAKE_UP_STRING_LEN  ( sizeof(WAKE_UP_STRING) - 1 )

/** Schedule a function call to run on the Xt event thread by passing it to
 * the application context as a 0ms timeout and waking up the event loop by
 * writing to the wakeup pipe which it monitors. */
void clipQueueToEventThread(CLIPBACKEND *pCtx,
                            void (*proc)(void *, void *),
                            void *client_data)
{
    LogRel2(("clipQueueToEventThread: proc=%p, client_data=%p\n",
             proc, client_data));
#ifndef TESTCASE
    XtAppAddTimeOut(pCtx->appContext, 0, (XtTimerCallbackProc)proc,
                    (XtPointer)client_data);
    ssize_t cbWritten = write(pCtx->wakeupPipeWrite, WAKE_UP_STRING, WAKE_UP_STRING_LEN);
    NOREF(cbWritten);
#else
    testQueueToEventThread(proc, client_data);
#endif
}

/**
 * Report the formats currently supported by the X11 clipboard to VBox.
 */
static void clipReportFormatsToVBox(CLIPBACKEND *pCtx)
{
    uint32_t u32VBoxFormats = clipVBoxFormatForX11Format(pCtx->X11TextFormat);
    u32VBoxFormats |= clipVBoxFormatForX11Format(pCtx->X11BitmapFormat);
    ClipReportX11Formats(pCtx->pFrontend, u32VBoxFormats);
}

/**
 * Forget which formats were previously in the X11 clipboard.  Called when we
 * grab the clipboard. */
static void clipResetX11Formats(CLIPBACKEND *pCtx)
{
    pCtx->X11TextFormat = INVALID;
    pCtx->X11BitmapFormat = INVALID;
}

/** Tell VBox that X11 currently has nothing in its clipboard. */
static void clipReportEmptyX11CB(CLIPBACKEND *pCtx)
{
    clipResetX11Formats(pCtx);
    clipReportFormatsToVBox(pCtx);
}

/**
 * Go through an array of X11 clipboard targets to see if they contain a text
 * format we can support, and if so choose the ones we prefer (e.g. we like
 * Utf8 better than plain text).
 * @param  pCtx      the clipboard backend context structure
 * @param  pTargets  the list of targets
 * @param  cTargets  the size of the list in @a pTargets
 */
static CLIPX11FORMAT clipGetTextFormatFromTargets(CLIPBACKEND *pCtx,
                                                  CLIPX11FORMAT *pTargets,
                                                  size_t cTargets)
{
    CLIPX11FORMAT bestTextFormat = NIL_CLIPX11FORMAT;
    CLIPFORMAT enmBestTextTarget = INVALID;
    AssertPtrReturn(pCtx, NIL_CLIPX11FORMAT);
    AssertReturn(VALID_PTR(pTargets) || cTargets == 0, NIL_CLIPX11FORMAT);
    for (unsigned i = 0; i < cTargets; ++i)
    {
        CLIPX11FORMAT format = pTargets[i];
        if (format != NIL_CLIPX11FORMAT)
        {
            if (   (clipVBoxFormatForX11Format(format)
                            == VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT)
                    && enmBestTextTarget < clipRealFormatForX11Format(format))
            {
                enmBestTextTarget = clipRealFormatForX11Format(format);
                bestTextFormat = format;
            }
        }
    }
    return bestTextFormat;
}

#ifdef TESTCASE
static bool clipTestTextFormatConversion(CLIPBACKEND *pCtx)
{
    bool success = true;
    CLIPX11FORMAT targets[2];
    CLIPX11FORMAT x11Format;
    targets[0] = clipFindX11FormatByAtomText("text/plain");
    targets[1] = clipFindX11FormatByAtomText("image/bmp");
    x11Format = clipGetTextFormatFromTargets(pCtx, targets, 2);
    if (clipRealFormatForX11Format(x11Format) != TEXT)
        success = false;
    targets[0] = clipFindX11FormatByAtomText("UTF8_STRING");
    targets[1] = clipFindX11FormatByAtomText("text/plain");
    x11Format = clipGetTextFormatFromTargets(pCtx, targets, 2);
    if (clipRealFormatForX11Format(x11Format) != UTF8)
        success = false;
    return success;
}
#endif

/**
 * Go through an array of X11 clipboard targets to see if they contain a bitmap
 * format we can support, and if so choose the ones we prefer (e.g. we like
 * BMP better than PNG because we don't have to convert).
 * @param  pCtx      the clipboard backend context structure
 * @param  pTargets  the list of targets
 * @param  cTargets  the size of the list in @a pTargets
 */
static CLIPX11FORMAT clipGetBitmapFormatFromTargets(CLIPBACKEND *pCtx,
                                                    CLIPX11FORMAT *pTargets,
                                                    size_t cTargets)
{
    CLIPX11FORMAT bestBitmapFormat = NIL_CLIPX11FORMAT;
    CLIPFORMAT enmBestBitmapTarget = INVALID;
    AssertPtrReturn(pCtx, NIL_CLIPX11FORMAT);
    AssertReturn(VALID_PTR(pTargets) || cTargets == 0, NIL_CLIPX11FORMAT);
    for (unsigned i = 0; i < cTargets; ++i)
    {
        CLIPX11FORMAT format = pTargets[i];
        if (format != NIL_CLIPX11FORMAT)
        {
            if (   (clipVBoxFormatForX11Format(format)
                            == VBOX_SHARED_CLIPBOARD_FMT_BITMAP)
                    && enmBestBitmapTarget < clipRealFormatForX11Format(format))
            {
                enmBestBitmapTarget = clipRealFormatForX11Format(format);
                bestBitmapFormat = format;
            }
        }
    }
    return bestBitmapFormat;
}

/**
 * Go through an array of X11 clipboard targets to see if we can support any
 * of them and if relevant to choose the ones we prefer (e.g. we like Utf8
 * better than plain text).
 * @param  pCtx      the clipboard backend context structure
 * @param  pTargets  the list of targets
 * @param  cTargets  the size of the list in @a pTargets
 */
static void clipGetFormatsFromTargets(CLIPBACKEND *pCtx,
                                      CLIPX11FORMAT *pTargets, size_t cTargets)
{
    AssertPtrReturnVoid(pCtx);
    AssertPtrReturnVoid(pTargets);
    CLIPX11FORMAT bestTextFormat;
    CLIPX11FORMAT bestBitmapFormat;
    bestTextFormat = clipGetTextFormatFromTargets(pCtx, pTargets, cTargets);
    if (pCtx->X11TextFormat != bestTextFormat)
    {
        pCtx->X11TextFormat = bestTextFormat;
    }
    pCtx->X11BitmapFormat = INVALID;  /* not yet supported */
    bestBitmapFormat = clipGetBitmapFormatFromTargets(pCtx, pTargets, cTargets);
    if (pCtx->X11BitmapFormat != bestBitmapFormat)
    {
        pCtx->X11BitmapFormat = bestBitmapFormat;
    }
}

static void clipQueryX11CBFormats(CLIPBACKEND *pCtx);

/**
 * Update the context's information about targets currently supported by X11,
 * based on an array of X11 atoms.
 * @param  pCtx      the context to be updated
 * @param  pTargets  the array of atoms describing the targets supported
 * @param  cTargets  the size of the array @a pTargets
 */
static void clipUpdateX11Targets(CLIPBACKEND *pCtx, CLIPX11FORMAT *pTargets,
                                 size_t cTargets)
{
    LogRel2 (("%s: called\n", __FUNCTION__));
    pCtx->fBusy = false;
    if (pCtx->fUpdateNeeded)
    {
        /* We may already be out of date. */
        pCtx->fUpdateNeeded = false;
        clipQueryX11CBFormats(pCtx);
        return;
    }
    if (pTargets == NULL) {
        /* No data available */
        clipReportEmptyX11CB(pCtx);
        return;
    }
    clipGetFormatsFromTargets(pCtx, pTargets, cTargets);
    clipReportFormatsToVBox(pCtx);
}

/**
 * Notify the VBox clipboard about available data formats, based on the
 * "targets" information obtained from the X11 clipboard.
 * @note  Callback for XtGetSelectionValue
 * @note  This function is treated as API glue, and as such is not part of any
 *        unit test.  So keep it simple, be paranoid and log everything.
 */
static void clipConvertX11Targets(Widget widget, XtPointer pClientData,
                                  Atom * /* selection */, Atom *atomType,
                                  XtPointer pValue, long unsigned int *pcLen,
                                  int *piFormat)
{
    CLIPBACKEND *pCtx =
            reinterpret_cast<CLIPBACKEND *>(pClientData);
    Atom *pAtoms = (Atom *)pValue;
    unsigned i, j;
    LogRel2(("%s: pValue=%p, *pcLen=%u, *atomType=%d%s\n", __FUNCTION__,
             pValue, *pcLen, *atomType,
             *atomType == XT_CONVERT_FAIL ? " (XT_CONVERT_FAIL)" : ""));
    CLIPX11FORMAT *pFormats = NULL;
    if (*pcLen && pValue && (*atomType != XT_CONVERT_FAIL /* time out */))
        pFormats = (CLIPX11FORMAT *)RTMemAllocZ(*pcLen * sizeof(CLIPX11FORMAT));
#if defined(DEBUG) && !defined(TESTCASE)
    if (pValue)
        for (i = 0; i < *pcLen; ++i)
            if (pAtoms[i])
            {
                char *pszName = XGetAtomName(XtDisplay(widget), pAtoms[i]);
                LogRel2(("%s: found target %s\n", __FUNCTION__,
                         pszName));
                XFree(pszName);
            }
            else
                LogRel2(("%s: found empty target.\n", __FUNCTION__));
#endif
    if (pFormats)
    {
        for (i = 0; i < *pcLen; ++i)
        {
            for (j = 0; j < RT_ELEMENTS(g_aFormats); ++j)
            {
                Atom target = XInternAtom(XtDisplay(widget),
                                          g_aFormats[j].pcszAtom, False);
                if (*(pAtoms + i) == target)
                    pFormats[i] = j;
            }
#if defined(DEBUG) && !defined(TESTCASE)
            LogRel2(("%s: reporting format %d (%s)\n", __FUNCTION__,
                     pFormats[i], g_aFormats[pFormats[i]].pcszAtom));
#endif
        }
    }
    else
        LogRel2(("%s: reporting empty targets (none reported or allocation failure).\n",
                 __FUNCTION__));
    clipUpdateX11Targets(pCtx, pFormats, *pcLen);
    RTMemFree(pFormats);
    XtFree(reinterpret_cast<char *>(pValue));
}

#ifdef TESTCASE
    void testRequestTargets(CLIPBACKEND *pCtx);
#endif

/**
 * Callback to notify us when the contents of the X11 clipboard change.
 */
static void clipQueryX11CBFormats(CLIPBACKEND *pCtx)
{
    LogRel2 (("%s: requesting the targets that the X11 clipboard offers\n",
           __PRETTY_FUNCTION__));
    if (pCtx->fBusy)
    {
        pCtx->fUpdateNeeded = true;
        return;
    }
    pCtx->fBusy = true;
#ifndef TESTCASE
    XtGetSelectionValue(pCtx->widget,
                        clipGetAtom(pCtx, "CLIPBOARD"),
                        clipGetAtom(pCtx, "TARGETS"),
                        clipConvertX11Targets, pCtx,
                        CurrentTime);
#else
    testRequestTargets(pCtx);
#endif
}

#ifndef TESTCASE

typedef struct {
    int type;                   /* event base */
    unsigned long serial;
    Bool send_event;
    Display *display;
    Window window;
    int subtype;
    Window owner;
    Atom selection;
    Time timestamp;
    Time selection_timestamp;
} XFixesSelectionNotifyEvent;

/**
 * Wait until an event arrives and handle it if it is an XFIXES selection
 * event, which Xt doesn't know about.
 */
void clipPeekEventAndDoXFixesHandling(CLIPBACKEND *pCtx)
{
    union
    {
        XEvent event;
        XFixesSelectionNotifyEvent fixes;
    } event = { { 0 } };

    if (XtAppPeekEvent(pCtx->appContext, &event.event))
        if (   (event.event.type == pCtx->fixesEventBase)
            && (event.fixes.owner != XtWindow(pCtx->widget)))
        {
            if (   (event.fixes.subtype == 0  /* XFixesSetSelectionOwnerNotify */)
                && (event.fixes.owner != 0))
                clipQueryX11CBFormats(pCtx);
            else
                clipReportEmptyX11CB(pCtx);
        }
}

/**
 * The main loop of our clipboard reader.
 * @note  X11 backend code.
 */
static int clipEventThread(RTTHREAD self, void *pvUser)
{
    LogRel(("Shared clipboard: starting shared clipboard thread\n"));

    CLIPBACKEND *pCtx = (CLIPBACKEND *)pvUser;

    if (pCtx->fGrabClipboardOnStart)
        clipQueryX11CBFormats(pCtx);
    while (XtAppGetExitFlag(pCtx->appContext) == FALSE)
    {
        clipPeekEventAndDoXFixesHandling(pCtx);
        XtAppProcessEvent(pCtx->appContext, XtIMAll);
    }
    LogRel(("Shared clipboard: shared clipboard thread terminated successfully\n"));
    return VINF_SUCCESS;
}
#endif

/** X11 specific uninitialisation for the shared clipboard.
 * @note  X11 backend code.
 */
static void clipUninit(CLIPBACKEND *pCtx)
{
    AssertPtrReturnVoid(pCtx);
    if (pCtx->widget)
    {
        /* Valid widget + invalid appcontext = bug.  But don't return yet. */
        AssertPtr(pCtx->appContext);
        clipUnregisterContext(pCtx);
        XtDestroyWidget(pCtx->widget);
    }
    pCtx->widget = NULL;
    if (pCtx->appContext)
        XtDestroyApplicationContext(pCtx->appContext);
    pCtx->appContext = NULL;
    if (pCtx->wakeupPipeRead != 0)
        close(pCtx->wakeupPipeRead);
    if (pCtx->wakeupPipeWrite != 0)
        close(pCtx->wakeupPipeWrite);
    pCtx->wakeupPipeRead = 0;
    pCtx->wakeupPipeWrite = 0;
}

/** Worker function for stopping the clipboard which runs on the event
 * thread. */
static void clipStopEventThreadWorker(void *pUserData, void *)
{

    CLIPBACKEND *pCtx = (CLIPBACKEND *)pUserData;

    /* This might mean that we are getting stopped twice. */
    Assert(pCtx->widget != NULL);

    /* Set the termination flag to tell the Xt event loop to exit.  We
     * reiterate that any outstanding requests from the X11 event loop to
     * the VBox part *must* have returned before we do this. */
    XtAppSetExitFlag(pCtx->appContext);
}

#ifndef TESTCASE
/** Setup the XFixes library and load the XFixesSelectSelectionInput symbol */
static int clipLoadXFixes(Display *pDisplay, CLIPBACKEND *pCtx)
{
    int dummy1 = 0, dummy2 = 0, rc = VINF_SUCCESS;
    void *hFixesLib;

    hFixesLib = dlopen("libXfixes.so.1", RTLD_LAZY);
    if (!hFixesLib)
        hFixesLib = dlopen("libXfixes.so.2", RTLD_LAZY);
    if (!hFixesLib)
        hFixesLib = dlopen("libXfixes.so.3", RTLD_LAZY);
    if (hFixesLib)
        pCtx->fixesSelectInput =
            (void (*)(Display *, Window, Atom, long unsigned int))
                (uintptr_t)dlsym(hFixesLib, "XFixesSelectSelectionInput");
    /* For us, a NULL function pointer is a failure */
    if (!hFixesLib || !pCtx->fixesSelectInput)
        rc = VERR_NOT_SUPPORTED;
    if (   RT_SUCCESS(rc)
        && !XQueryExtension(pDisplay, "XFIXES", &dummy1,
                            &pCtx->fixesEventBase, &dummy2))
        rc = VERR_NOT_SUPPORTED;
    if (RT_SUCCESS(rc) && pCtx->fixesEventBase < 0)
        rc = VERR_NOT_SUPPORTED;
    return rc;
}
#endif

/** This is the callback which is scheduled when data is available on the
 * wakeup pipe.  It simply reads all data from the pipe. */
static void clipDrainWakeupPipe(XtPointer pUserData, int *, XtInputId *)
{
    CLIPBACKEND *pCtx = (CLIPBACKEND *)pUserData;
    char acBuf[WAKE_UP_STRING_LEN];

    LogRel2(("clipDrainWakeupPipe: called\n"));
    while (read(pCtx->wakeupPipeRead, acBuf, sizeof(acBuf)) > 0) {}
}

/** X11 specific initialisation for the shared clipboard.
 * @note  X11 backend code.
 */
static int clipInit(CLIPBACKEND *pCtx)
{
    /* Create a window and make it a clipboard viewer. */
    int cArgc = 0;
    char *pcArgv = 0;
    int rc = VINF_SUCCESS;
    Display *pDisplay;

    /* Make sure we are thread safe */
    XtToolkitThreadInitialize();
    /* Set up the Clipboard application context and main window.  We call all
     * these functions directly instead of calling XtOpenApplication() so
     * that we can fail gracefully if we can't get an X11 display. */
    XtToolkitInitialize();
    pCtx->appContext = XtCreateApplicationContext();
    pDisplay = XtOpenDisplay(pCtx->appContext, 0, 0, "VBoxClipboard", 0, 0, &cArgc, &pcArgv);
    if (NULL == pDisplay)
    {
        LogRel(("Shared clipboard: failed to connect to the X11 clipboard - the window system may not be running.\n"));
        rc = VERR_NOT_SUPPORTED;
    }
#ifndef TESTCASE
    if (RT_SUCCESS(rc))
    {
        rc = clipLoadXFixes(pDisplay, pCtx);
        if (RT_FAILURE(rc))
           LogRel(("Shared clipboard: failed to load the XFIXES extension.\n"));
    }
#endif
    if (RT_SUCCESS(rc))
    {
        pCtx->widget = XtVaAppCreateShell(0, "VBoxClipboard",
                                          applicationShellWidgetClass,
                                          pDisplay, XtNwidth, 1, XtNheight,
                                          1, NULL);
        if (NULL == pCtx->widget)
        {
            LogRel(("Shared clipboard: failed to construct the X11 window for the shared clipboard manager.\n"));
            rc = VERR_NO_MEMORY;
        }
        else
            rc = clipRegisterContext(pCtx);
    }
    if (RT_SUCCESS(rc))
    {
        EventMask mask = 0;

        XtSetMappedWhenManaged(pCtx->widget, false);
        XtRealizeWidget(pCtx->widget);
#ifndef TESTCASE
        /* Enable clipboard update notification */
        pCtx->fixesSelectInput(pDisplay, XtWindow(pCtx->widget),
                               clipGetAtom(pCtx, "CLIPBOARD"),
                               7 /* All XFixes*Selection*NotifyMask flags */);
#endif
    }
    /* Create the pipes */
    int pipes[2];
    if (!pipe(pipes))
    {
        pCtx->wakeupPipeRead = pipes[0];
        pCtx->wakeupPipeWrite = pipes[1];
        if (!XtAppAddInput(pCtx->appContext, pCtx->wakeupPipeRead,
                           (XtPointer) XtInputReadMask,
                           clipDrainWakeupPipe, (XtPointer) pCtx))
            rc = VERR_NO_MEMORY;  /* What failure means is not doc'ed. */
        if (   RT_SUCCESS(rc)
            && (fcntl(pCtx->wakeupPipeRead, F_SETFL, O_NONBLOCK) != 0))
            rc = RTErrConvertFromErrno(errno);
        if (RT_FAILURE(rc))
            LogRel(("Shared clipboard: failed to setup the termination mechanism.\n"));
    }
    else
        rc = RTErrConvertFromErrno(errno);
    if (RT_FAILURE(rc))
        clipUninit(pCtx);
    if (RT_FAILURE(rc))
        LogRel(("Shared clipboard: initialisation failed: %Rrc\n", rc));
    return rc;
}

/**
 * Construct the X11 backend of the shared clipboard.
 * @note  X11 backend code
 */
CLIPBACKEND *ClipConstructX11(VBOXCLIPBOARDCONTEXT *pFrontend, bool fHeadless)
{
    int rc;

    CLIPBACKEND *pCtx = (CLIPBACKEND *)
                    RTMemAllocZ(sizeof(CLIPBACKEND));
    if (pCtx && fHeadless)
    {
        /*
         * If we don't find the DISPLAY environment variable we assume that
         * we are not connected to an X11 server. Don't actually try to do
         * this then, just fail silently and report success on every call.
         * This is important for VBoxHeadless.
         */
        LogRelFunc(("X11 DISPLAY variable not set -- disabling shared clipboard\n"));
        pCtx->fHaveX11 = false;
        return pCtx;
    }

    pCtx->fHaveX11 = true;

    LogRel(("Initializing X11 clipboard backend\n"));
    if (pCtx)
        pCtx->pFrontend = pFrontend;
    return pCtx;
}

/**
 * Destruct the shared clipboard X11 backend.
 * @note  X11 backend code
 */
void ClipDestructX11(CLIPBACKEND *pCtx)
{
    /*
     * Immediately return if we are not connected to the X server.
     */
    if (!pCtx->fHaveX11)
        return;

    /* We set this to NULL when the event thread exits.  It really should
     * have exited at this point, when we are about to unload the code from
     * memory. */
    Assert(pCtx->widget == NULL);
}

/**
 * Announce to the X11 backend that we are ready to start.
 * @param  grab  whether we should try to grab the shared clipboard at once
 */
int ClipStartX11(CLIPBACKEND *pCtx, bool grab)
{
    int rc = VINF_SUCCESS;
    LogRelFlowFunc(("\n"));
    /*
     * Immediately return if we are not connected to the X server.
     */
    if (!pCtx->fHaveX11)
        return VINF_SUCCESS;

    rc = clipInit(pCtx);
    if (RT_SUCCESS(rc))
    {
        clipResetX11Formats(pCtx);
        pCtx->fGrabClipboardOnStart = grab;
    }
#ifndef TESTCASE
    if (RT_SUCCESS(rc))
    {
        rc = RTThreadCreate(&pCtx->thread, clipEventThread, pCtx, 0,
                            RTTHREADTYPE_IO, RTTHREADFLAGS_WAITABLE, "SHCLIP");
        if (RT_FAILURE(rc))
        {
            LogRel(("Failed to start the shared clipboard thread.\n"));
            clipUninit(pCtx);
        }
    }
#endif
    return rc;
}

/**
 * Shut down the shared clipboard X11 backend.
 * @note  X11 backend code
 * @note  Any requests from this object to get clipboard data from VBox
 *        *must* have completed or aborted before we are called, as
 *        otherwise the X11 event loop will still be waiting for the request
 *        to return and will not be able to terminate.
 */
int ClipStopX11(CLIPBACKEND *pCtx)
{
    int rc, rcThread;
    unsigned count = 0;
    /*
     * Immediately return if we are not connected to the X server.
     */
    if (!pCtx->fHaveX11)
        return VINF_SUCCESS;

    LogRelFunc(("stopping the shared clipboard X11 backend\n"));
    /* Write to the "stop" pipe */
    clipQueueToEventThread(pCtx, clipStopEventThreadWorker, (XtPointer) pCtx);
#ifndef TESTCASE
    do
    {
        rc = RTThreadWait(pCtx->thread, 1000, &rcThread);
        ++count;
        Assert(RT_SUCCESS(rc) || ((VERR_TIMEOUT == rc) && (count != 5)));
    } while ((VERR_TIMEOUT == rc) && (count < 300));
#else
    rc = VINF_SUCCESS;
    rcThread = VINF_SUCCESS;
#endif
    if (RT_SUCCESS(rc))
        AssertRC(rcThread);
    else
        LogRelFunc(("rc=%Rrc\n", rc));
    clipUninit(pCtx);
    LogRelFlowFunc(("returning %Rrc.\n", rc));
    return rc;
}

/**
 * Satisfy a request from X11 for clipboard targets supported by VBox.
 *
 * @returns iprt status code
 * @param  atomTypeReturn The type of the data we are returning
 * @param  pValReturn     A pointer to the data we are returning.  This
 *                        should be set to memory allocated by XtMalloc,
 *                        which will be freed later by the Xt toolkit.
 * @param  pcLenReturn    The length of the data we are returning
 * @param  piFormatReturn The format (8bit, 16bit, 32bit) of the data we are
 *                        returning
 * @note  X11 backend code, called by the XtOwnSelection callback.
 */
static int clipCreateX11Targets(CLIPBACKEND *pCtx, Atom *atomTypeReturn,
                                XtPointer *pValReturn,
                                unsigned long *pcLenReturn,
                                int *piFormatReturn)
{
    Atom *atomTargets = (Atom *)XtMalloc(  (MAX_CLIP_X11_FORMATS + 3)
                                         * sizeof(Atom));
    unsigned cTargets = 0;
    LogRelFlowFunc (("called\n"));
    CLIPX11FORMAT format = NIL_CLIPX11FORMAT;
    do
    {
        format = clipEnumX11Formats(pCtx->vboxFormats, format);
        if (format != NIL_CLIPX11FORMAT)
        {
            atomTargets[cTargets] = clipAtomForX11Format(pCtx, format);
            ++cTargets;
        }
    } while (format != NIL_CLIPX11FORMAT);
    /* We always offer these */
    atomTargets[cTargets] = clipGetAtom(pCtx, "TARGETS");
    atomTargets[cTargets + 1] = clipGetAtom(pCtx, "MULTIPLE");
    atomTargets[cTargets + 2] = clipGetAtom(pCtx, "TIMESTAMP");
    *atomTypeReturn = XA_ATOM;
    *pValReturn = (XtPointer)atomTargets;
    *pcLenReturn = cTargets + 3;
    *piFormatReturn = 32;
    return VINF_SUCCESS;
}

/** This is a wrapper around ClipRequestDataForX11 that will cache the
 * data returned.
 */
static int clipReadVBoxClipboard(CLIPBACKEND *pCtx, uint32_t u32Format,
                                 void **ppv, uint32_t *pcb)
{
    int rc = VINF_SUCCESS;
    LogRelFlowFunc(("pCtx=%p, u32Format=%02X, ppv=%p, pcb=%p\n", pCtx,
                 u32Format, ppv, pcb));
    if (u32Format == VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT)
    {
        if (pCtx->pvUnicodeCache == NULL)
            rc = ClipRequestDataForX11(pCtx->pFrontend, u32Format,
                                              &pCtx->pvUnicodeCache,
                                              &pCtx->cbUnicodeCache);
        if (RT_SUCCESS(rc))
        {
            *ppv = RTMemDup(pCtx->pvUnicodeCache, pCtx->cbUnicodeCache);
            *pcb = pCtx->cbUnicodeCache;
            if (*ppv == NULL)
                rc = VERR_NO_MEMORY;
        }
    }
    else
        rc = ClipRequestDataForX11(pCtx->pFrontend, u32Format,
                                          ppv, pcb);
    LogRelFlowFunc(("returning %Rrc\n", rc));
    if (RT_SUCCESS(rc))
        LogRelFlowFunc(("*ppv=%.*ls, *pcb=%u\n", *pcb, *ppv, *pcb));
    return rc;
}

/**
 * Calculate a buffer size large enough to hold the source Windows format
 * text converted into Unix Utf8, including the null terminator
 * @returns iprt status code
 * @param  pwsz       the source text in UCS-2 with Windows EOLs
 * @param  cwc        the size in USC-2 elements of the source text, with or
 *                    without the terminator
 * @param  pcbActual  where to store the buffer size needed
 */
static int clipWinTxtBufSizeForUtf8(PRTUTF16 pwsz, size_t cwc,
                                    size_t *pcbActual)
{
    size_t cbRet = 0;
    int rc = RTUtf16CalcUtf8LenEx(pwsz, cwc, &cbRet);
    if (RT_SUCCESS(rc))
        *pcbActual = cbRet + 1;  /* null terminator */
    return rc;
}

/**
 * Convert text from Windows format (UCS-2 with CRLF line endings) to standard
 * Utf-8.
 *
 * @returns iprt status code
 *
 * @param  pwszSrc    the text to be converted
 * @param  cbSrc      the length of @a pwszSrc in bytes
 * @param  pszBuf     where to write the converted string
 * @param  cbBuf      the size of the buffer pointed to by @a pszBuf
 * @param  pcbActual  where to store the size of the converted string.
 *                    optional.
 */
static int clipWinTxtToUtf8(PRTUTF16 pwszSrc, size_t cbSrc, char *pszBuf,
                            size_t cbBuf, size_t *pcbActual)
{
    PRTUTF16 pwszTmp = NULL;
    size_t cwSrc = cbSrc / 2, cwTmp = 0, cbDest = 0;
    int rc = VINF_SUCCESS;

    LogRelFlowFunc (("pwszSrc=%.*ls, cbSrc=%u\n", cbSrc, pwszSrc, cbSrc));
    /* How long will the converted text be? */
    AssertPtr(pwszSrc);
    AssertPtr(pszBuf);
    rc = vboxClipboardUtf16GetLinSize(pwszSrc, cwSrc, &cwTmp);
    if (RT_SUCCESS(rc) && cwTmp == 0)
        rc = VERR_NO_DATA;
    if (RT_SUCCESS(rc))
        pwszTmp = (PRTUTF16)RTMemAlloc(cwTmp * 2);
    if (!pwszTmp)
        rc = VERR_NO_MEMORY;
    /* Convert the text. */
    if (RT_SUCCESS(rc))
        rc = vboxClipboardUtf16WinToLin(pwszSrc, cwSrc, pwszTmp, cwTmp);
    if (RT_SUCCESS(rc))
        /* Convert the Utf16 string to Utf8. */
        rc = RTUtf16ToUtf8Ex(pwszTmp + 1, cwTmp - 1, &pszBuf, cbBuf,
                             &cbDest);
    RTMemFree(reinterpret_cast<void *>(pwszTmp));
    if (pcbActual)
        *pcbActual = cbDest + 1;
    LogRelFlowFunc(("returning %Rrc\n", rc));
    if (RT_SUCCESS(rc))
        LogRelFlowFunc (("converted string is %.*s. Returning.\n", cbDest,
                      pszBuf));
    return rc;
}

/**
 * Satisfy a request from X11 to convert the clipboard text to Utf-8.  We
 * return null-terminated text, but can cope with non-null-terminated input.
 *
 * @returns iprt status code
 * @param  pDisplay        an X11 display structure, needed for conversions
 *                         performed by Xlib
 * @param  pv              the text to be converted (UCS-2 with Windows EOLs)
 * @param  cb              the length of the text in @cb in bytes
 * @param  atomTypeReturn  where to store the atom for the type of the data
 *                         we are returning
 * @param  pValReturn      where to store the pointer to the data we are
 *                         returning.  This should be to memory allocated by
 *                         XtMalloc, which will be freed by the Xt toolkit
 *                         later.
 * @param  pcLenReturn     where to store the length of the data we are
 *                         returning
 * @param  piFormatReturn  where to store the bit width (8, 16, 32) of the
 *                         data we are returning
 */
static int clipWinTxtToUtf8ForX11CB(Display *pDisplay, PRTUTF16 pwszSrc,
                                    size_t cbSrc, Atom *atomTarget,
                                    Atom *atomTypeReturn,
                                    XtPointer *pValReturn,
                                    unsigned long *pcLenReturn,
                                    int *piFormatReturn)
{
    /* This may slightly overestimate the space needed. */
    size_t cbDest = 0;
    int rc = clipWinTxtBufSizeForUtf8(pwszSrc, cbSrc / 2, &cbDest);
    if (RT_SUCCESS(rc))
    {
        char *pszDest = (char *)XtMalloc(cbDest);
        size_t cbActual = 0;
        if (pszDest)
            rc = clipWinTxtToUtf8(pwszSrc, cbSrc, pszDest, cbDest,
                                  &cbActual);
        if (RT_SUCCESS(rc))
        {
            *atomTypeReturn = *atomTarget;
            *pValReturn = (XtPointer)pszDest;
            *pcLenReturn = cbActual;
            *piFormatReturn = 8;
        }
    }
    return rc;
}

/**
 * Does this atom correspond to one of the two selection types we support?
 * @param  widget   a valid Xt widget
 * @param  selType  the atom in question
 */
static bool clipIsSupportedSelectionType(CLIPBACKEND *pCtx, Atom selType)
{
    return(   (selType == clipGetAtom(pCtx, "CLIPBOARD"))
           || (selType == clipGetAtom(pCtx, "PRIMARY")));
}

/**
 * Remove a trailing nul character from a string by adjusting the string
 * length.  Some X11 applications don't like zero-terminated text...
 * @param  pText   the text in question
 * @param  pcText  the length of the text, adjusted on return
 * @param  format  the format of the text
 */
static void clipTrimTrailingNul(XtPointer pText, unsigned long *pcText,
                                CLIPFORMAT format)
{
    AssertPtrReturnVoid(pText);
    AssertPtrReturnVoid(pcText);
    AssertReturnVoid((format == UTF8) || (format == TEXT));
    if (((char *)pText)[*pcText - 1] == '\0')
       --(*pcText);
}

static int clipConvertVBoxCBForX11(CLIPBACKEND *pCtx, Atom *atomTarget,
                                   Atom *atomTypeReturn,
                                   XtPointer *pValReturn,
                                   unsigned long *pcLenReturn,
                                   int *piFormatReturn)
{
    int rc = VINF_SUCCESS;
    CLIPX11FORMAT x11Format = clipFindX11FormatByAtom(pCtx, *atomTarget);
    CLIPFORMAT format = clipRealFormatForX11Format(x11Format);
    if (   ((format == UTF8) || (format == TEXT))
        && (pCtx->vboxFormats & VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT))
    {
        void *pv = NULL;
        uint32_t cb = 0;
        rc = clipReadVBoxClipboard(pCtx,
                                   VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT,
                                   &pv, &cb);
        if (RT_SUCCESS(rc) && (cb == 0))
            rc = VERR_NO_DATA;
        if (RT_SUCCESS(rc) && ((format == UTF8) || (format == TEXT)))
            rc = clipWinTxtToUtf8ForX11CB(XtDisplay(pCtx->widget),
                                          (PRTUTF16)pv, cb, atomTarget,
                                          atomTypeReturn, pValReturn,
                                          pcLenReturn, piFormatReturn);
        if (RT_SUCCESS(rc))
            clipTrimTrailingNul(*(XtPointer *)pValReturn, pcLenReturn, format);
        RTMemFree(pv);
    }
    else if (   (format == BMP)
             && (pCtx->vboxFormats & VBOX_SHARED_CLIPBOARD_FMT_BITMAP))
    {
        void *pv = NULL;
        uint32_t cb = 0;
        rc = clipReadVBoxClipboard(pCtx,
                                   VBOX_SHARED_CLIPBOARD_FMT_BITMAP,
                                   &pv, &cb);
        if (RT_SUCCESS(rc) && (cb == 0))
            rc = VERR_NO_DATA;
        if (RT_SUCCESS(rc) && (format == BMP))
        {
            /* Create a full BMP from it */
            rc = vboxClipboardDibToBmp(pv, cb, (void **)pValReturn,
                                       (size_t *)pcLenReturn);
        }
        else
            rc = VERR_NOT_SUPPORTED;

        if (RT_SUCCESS(rc))
        {
            *atomTypeReturn = *atomTarget;
            *piFormatReturn = 8;
        }
        RTMemFree(pv);
    }
    else
        rc = VERR_NOT_SUPPORTED;
    return rc;
}

/**
 * Return VBox's clipboard data for an X11 client.
 * @note  X11 backend code, callback for XtOwnSelection
 */
static Boolean clipXtConvertSelectionProc(Widget widget, Atom *atomSelection,
                                          Atom *atomTarget,
                                          Atom *atomTypeReturn,
                                          XtPointer *pValReturn,
                                          unsigned long *pcLenReturn,
                                          int *piFormatReturn)
{
    CLIPBACKEND *pCtx = clipLookupContext(widget);
    int rc = VINF_SUCCESS;

    LogRelFlowFunc(("\n"));
    if (!pCtx)
        return false;
    if (!clipIsSupportedSelectionType(pCtx, *atomSelection))
        return false;
    if (*atomTarget == clipGetAtom(pCtx, "TARGETS"))
        rc = clipCreateX11Targets(pCtx, atomTypeReturn, pValReturn,
                                  pcLenReturn, piFormatReturn);
    else
        rc = clipConvertVBoxCBForX11(pCtx, atomTarget, atomTypeReturn,
                                     pValReturn, pcLenReturn, piFormatReturn);
    LogRelFlowFunc(("returning, internal status code %Rrc\n", rc));
    return RT_SUCCESS(rc);
}

/** Structure used to pass information about formats that VBox supports */
typedef struct _CLIPNEWVBOXFORMATS
{
    /** Context information for the X11 clipboard */
    CLIPBACKEND *pCtx;
    /** Formats supported by VBox */
    uint32_t formats;
} CLIPNEWVBOXFORMATS;

/** Invalidates the local cache of the data in the VBox clipboard. */
static void clipInvalidateVBoxCBCache(CLIPBACKEND *pCtx)
{
    if (pCtx->pvUnicodeCache != NULL)
    {
        RTMemFree(pCtx->pvUnicodeCache);
        pCtx->pvUnicodeCache = NULL;
    }
}

/**
 * Take possession of the X11 clipboard (and middle-button selection).
 */
static void clipGrabX11CB(CLIPBACKEND *pCtx, uint32_t u32Formats)
{
    if (XtOwnSelection(pCtx->widget, clipGetAtom(pCtx, "CLIPBOARD"),
                       CurrentTime, clipXtConvertSelectionProc, NULL, 0))
    {
        pCtx->vboxFormats = u32Formats;
        /* Grab the middle-button paste selection too. */
        XtOwnSelection(pCtx->widget, clipGetAtom(pCtx, "PRIMARY"),
                       CurrentTime, clipXtConvertSelectionProc, NULL, 0);
#ifndef TESTCASE
        /* Xt suppresses these if we already own the clipboard, so send them
         * ourselves. */
        XSetSelectionOwner(XtDisplay(pCtx->widget),
                           clipGetAtom(pCtx, "CLIPBOARD"),
                           XtWindow(pCtx->widget), CurrentTime);
        XSetSelectionOwner(XtDisplay(pCtx->widget),
                           clipGetAtom(pCtx, "PRIMARY"),
                           XtWindow(pCtx->widget), CurrentTime);
#endif
    }
}

/**
 * Worker function for ClipAnnounceFormatToX11 which runs on the
 * event thread.
 * @param pUserData  Pointer to a CLIPNEWVBOXFORMATS structure containing
 *                   information about the VBox formats available and the
 *                   clipboard context data.  Must be freed by the worker.
 */
static void clipNewVBoxFormatsWorker(void *pUserData,
                                     void * /* interval */)
{
    CLIPNEWVBOXFORMATS *pFormats = (CLIPNEWVBOXFORMATS *)pUserData;
    CLIPBACKEND *pCtx = pFormats->pCtx;
    uint32_t u32Formats = pFormats->formats;
    RTMemFree(pFormats);
    LogRelFlowFunc (("u32Formats=%d\n", u32Formats));
    clipInvalidateVBoxCBCache(pCtx);
    clipGrabX11CB(pCtx, u32Formats);
    clipResetX11Formats(pCtx);
    LogRelFlowFunc(("returning\n"));
}

/**
 * VBox is taking possession of the shared clipboard.
 *
 * @param u32Formats Clipboard formats that VBox is offering
 * @note  X11 backend code
 */
void ClipAnnounceFormatToX11(CLIPBACKEND *pCtx,
                                        uint32_t u32Formats)
{
    /*
     * Immediately return if we are not connected to the X server.
     */
    if (!pCtx->fHaveX11)
        return;
    /* This must be freed by the worker callback */
    CLIPNEWVBOXFORMATS *pFormats =
        (CLIPNEWVBOXFORMATS *) RTMemAlloc(sizeof(CLIPNEWVBOXFORMATS));
    if (pFormats != NULL)  /* if it is we will soon have other problems */
    {
        pFormats->pCtx = pCtx;
        pFormats->formats = u32Formats;
        clipQueueToEventThread(pCtx, clipNewVBoxFormatsWorker,
                               (XtPointer) pFormats);
    }
}

/**
 * Massage generic Utf16 with CR end-of-lines into the format Windows expects
 * and return the result in a RTMemAlloc allocated buffer.
 * @returns  IPRT status code
 * @param  pwcSrc     The source Utf16
 * @param  cwcSrc     The number of 16bit elements in @a pwcSrc, not counting
 *                    the terminating zero
 * @param  ppwszDest  Where to store the buffer address
 * @param  pcbDest    On success, where to store the number of bytes written.
 *                    Undefined otherwise.  Optional
 */
static int clipUtf16ToWinTxt(RTUTF16 *pwcSrc, size_t cwcSrc,
                             PRTUTF16 *ppwszDest, uint32_t *pcbDest)
{
    LogRelFlowFunc(("pwcSrc=%p, cwcSrc=%u, ppwszDest=%p\n", pwcSrc, cwcSrc,
                 ppwszDest));
    AssertPtrReturn(pwcSrc, VERR_INVALID_POINTER);
    AssertPtrReturn(ppwszDest, VERR_INVALID_POINTER);
    if (pcbDest)
        *pcbDest = 0;
    PRTUTF16 pwszDest = NULL;
    size_t cwcDest;
    int rc = vboxClipboardUtf16GetWinSize(pwcSrc, cwcSrc + 1, &cwcDest);
    if (RT_SUCCESS(rc))
    {
        pwszDest = (PRTUTF16) RTMemAlloc(cwcDest * 2);
        if (!pwszDest)
            rc = VERR_NO_MEMORY;
    }
    if (RT_SUCCESS(rc))
        rc = vboxClipboardUtf16LinToWin(pwcSrc, cwcSrc + 1, pwszDest,
                                        cwcDest);
    if (RT_SUCCESS(rc))
    {
        LogRelFlowFunc (("converted string is %.*ls\n", cwcDest, pwszDest));
        *ppwszDest = pwszDest;
        if (pcbDest)
            *pcbDest = cwcDest * 2;
    }
    else
        RTMemFree(pwszDest);
    LogRelFlowFunc(("returning %Rrc\n", rc));
    if (pcbDest)
        LogRelFlowFunc(("*pcbDest=%u\n", *pcbDest));
    return rc;
}

/**
 * Convert Utf-8 text with CR end-of-lines into Utf-16 as Windows expects it
 * and return the result in a RTMemAlloc allocated buffer.
 * @returns  IPRT status code
 * @param  pcSrc      The source Utf-8
 * @param  cbSrc      The size of the source in bytes, not counting the
 *                    terminating zero
 * @param  ppwszDest  Where to store the buffer address
 * @param  pcbDest    On success, where to store the number of bytes written.
 *                    Undefined otherwise.  Optional
 */
static int clipUtf8ToWinTxt(const char *pcSrc, unsigned cbSrc,
                            PRTUTF16 *ppwszDest, uint32_t *pcbDest)
{
    LogRelFlowFunc(("pcSrc=%p, cbSrc=%u, ppwszDest=%p\n", pcSrc, cbSrc,
                 ppwszDest));
    AssertPtrReturn(pcSrc, VERR_INVALID_POINTER);
    AssertPtrReturn(ppwszDest, VERR_INVALID_POINTER);
    if (pcbDest)
        *pcbDest = 0;
    /* Intermediate conversion to UTF16 */
    size_t cwcTmp;
    PRTUTF16 pwcTmp = NULL;
    int rc = RTStrToUtf16Ex(pcSrc, cbSrc, &pwcTmp, 0, &cwcTmp);
    if (RT_SUCCESS(rc))
        rc = clipUtf16ToWinTxt(pwcTmp, cwcTmp, ppwszDest, pcbDest);
    RTUtf16Free(pwcTmp);
    LogRelFlowFunc(("Returning %Rrc\n", rc));
    if (pcbDest)
        LogRelFlowFunc(("*pcbDest=%u\n", *pcbDest));
    return rc;
}

/**
 * Convert Latin-1 text with CR end-of-lines into Utf-16 as Windows expects
 * it and return the result in a RTMemAlloc allocated buffer.
 * @returns  IPRT status code
 * @param  pcSrc      The source text
 * @param  cbSrc      The size of the source in bytes, not counting the
 *                    terminating zero
 * @param  ppwszDest  Where to store the buffer address
 * @param  pcbDest    On success, where to store the number of bytes written.
 *                    Undefined otherwise.  Optional
 */
static int clipLatin1ToWinTxt(char *pcSrc, unsigned cbSrc,
                              PRTUTF16 *ppwszDest, uint32_t *pcbDest)
{
    LogRelFlowFunc (("pcSrc=%.*s, cbSrc=%u, ppwszDest=%p\n", cbSrc,
                  (char *) pcSrc, cbSrc, ppwszDest));
    AssertPtrReturn(pcSrc, VERR_INVALID_POINTER);
    AssertPtrReturn(ppwszDest, VERR_INVALID_POINTER);
    PRTUTF16 pwszDest = NULL;
    int rc = VINF_SUCCESS;

    /* Calculate the space needed */
    unsigned cwcDest = 0;
    for (unsigned i = 0; i < cbSrc && pcSrc[i] != '\0'; ++i)
        if (pcSrc[i] == LINEFEED)
            cwcDest += 2;
        else
            ++cwcDest;
    ++cwcDest;  /* Leave space for the terminator */
    if (pcbDest)
        *pcbDest = cwcDest * 2;
    pwszDest = (PRTUTF16) RTMemAlloc(cwcDest * 2);
    if (!pwszDest)
        rc = VERR_NO_MEMORY;

    /* And do the conversion, bearing in mind that Latin-1 expands "naturally"
     * to Utf-16. */
    if (RT_SUCCESS(rc))
    {
        for (unsigned i = 0, j = 0; i < cbSrc; ++i, ++j)
            if (pcSrc[i] != LINEFEED)
                pwszDest[j] = pcSrc[i];
            else
            {
                pwszDest[j] = CARRIAGERETURN;
                pwszDest[j + 1] = LINEFEED;
                ++j;
            }
        pwszDest[cwcDest - 1] = '\0';  /* Make sure we are zero-terminated. */
        LogRelFlowFunc (("converted text is %.*ls\n", cwcDest, pwszDest));
    }
    if (RT_SUCCESS(rc))
        *ppwszDest = pwszDest;
    else
        RTMemFree(pwszDest);
    LogRelFlowFunc(("Returning %Rrc\n", rc));
    if (pcbDest)
        LogRelFlowFunc(("*pcbDest=%u\n", *pcbDest));
    return rc;
}

/** A structure containing information about where to store a request
 * for the X11 clipboard contents. */
struct _CLIPREADX11CBREQ
{
    /** The format VBox would like the data in */
    uint32_t mFormat;
    /** The text format we requested from X11 if we requested text */
    CLIPX11FORMAT mTextFormat;
    /** The bitmap format we requested from X11 if we requested bitmap */
    CLIPX11FORMAT mBitmapFormat;
    /** The clipboard context this request is associated with */
    CLIPBACKEND *mCtx;
    /** The request structure passed in from the backend. */
    CLIPREADCBREQ *mReq;
};

typedef struct _CLIPREADX11CBREQ CLIPREADX11CBREQ;

/**
 * Convert the data obtained from the X11 clipboard to the required format,
 * place it in the buffer supplied and signal that data has arrived.
 * Convert the text obtained UTF-16LE with Windows EOLs.
 * Convert full BMP data to DIB format.
 * @note  X11 backend code, callback for XtGetSelectionValue, for use when
 *        the X11 clipboard contains a format we understand.
 */
static void clipConvertX11CB(void *pClientData, void *pvSrc, unsigned cbSrc)
{
    CLIPREADX11CBREQ *pReq = (CLIPREADX11CBREQ *) pClientData;
    LogRelFlowFunc(("pReq->mFormat=%02X, pReq->mTextFormat=%u, "
                "pReq->mBitmapFormat=%u, pReq->mCtx=%p\n",
                 pReq->mFormat, pReq->mTextFormat, pReq->mBitmapFormat,
                 pReq->mCtx));
    AssertPtr(pReq->mCtx);
    Assert(pReq->mFormat != 0);  /* sanity */
    int rc = VINF_SUCCESS;
    CLIPBACKEND *pCtx = pReq->mCtx;
    void *pvDest = NULL;
    uint32_t cbDest = 0;

    pCtx->fBusy = false;
    if (pCtx->fUpdateNeeded)
        clipQueryX11CBFormats(pCtx);
    if (pvSrc == NULL)
        /* The clipboard selection may have changed before we could get it. */
        rc = VERR_NO_DATA;
    else if (pReq->mFormat == VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT)
    {
        /* In which format is the clipboard data? */
        switch (clipRealFormatForX11Format(pReq->mTextFormat))
        {
            case UTF8:
            case TEXT:
            {
                /* If we are given broken Utf-8, we treat it as Latin1.  Is
                 * this acceptable? */
                if (RT_SUCCESS(RTStrValidateEncodingEx((char *)pvSrc, cbSrc,
                                                       0)))
                    rc = clipUtf8ToWinTxt((const char *)pvSrc, cbSrc,
                                          (PRTUTF16 *) &pvDest, &cbDest);
                else
                    rc = clipLatin1ToWinTxt((char *) pvSrc, cbSrc,
                                            (PRTUTF16 *) &pvDest, &cbDest);
                break;
            }
            default:
                rc = VERR_INVALID_PARAMETER;
        }
    }
    else if (pReq->mFormat == VBOX_SHARED_CLIPBOARD_FMT_BITMAP)
    {
        /* In which format is the clipboard data? */
        switch (clipRealFormatForX11Format(pReq->mBitmapFormat))
        {
            case BMP:
            {
                const void *pDib;
                size_t cbDibSize;
                rc = vboxClipboardBmpGetDib((const void *)pvSrc, cbSrc,
                                            &pDib, &cbDibSize);
                if (RT_SUCCESS(rc))
                {
                    pvDest = RTMemAlloc(cbDibSize);
                    if (!pvDest)
                        rc = VERR_NO_MEMORY;
                    else
                    {
                        memcpy(pvDest, pDib, cbDibSize);
                        cbDest = cbDibSize;
                    }
                }
                break;
            }
            default:
                rc = VERR_INVALID_PARAMETER;
        }
    }
    else
        rc = VERR_NOT_IMPLEMENTED;
    ClipCompleteDataRequestFromX11(pReq->mCtx->pFrontend, rc, pReq->mReq,
                                   pvDest, cbDest);
    RTMemFree(pvDest);
    RTMemFree(pReq);
    LogRelFlowFunc(("rc=%Rrc\n", rc));
}

/**
 * Convert the data obtained from the X11 clipboard to the required format,
 * place it in the buffer supplied and signal that data has arrived.
 * Convert the text obtained UTF-16LE with Windows EOLs.
 * Convert full BMP data to DIB format.
 * @note  X11 backend code, callback for XtGetSelectionValue, for use when
 *        the X11 clipboard contains a format we understand.
 */
static void cbConvertX11CB(Widget widget, XtPointer pClientData,
                           Atom * /* selection */, Atom *atomType,
                           XtPointer pvSrc, long unsigned int *pcLen,
                           int *piFormat)
{
    if (*atomType == XT_CONVERT_FAIL) /* Xt timeout */
        clipConvertX11CB(pClientData, NULL, 0);
    else
        clipConvertX11CB(pClientData, pvSrc, (*pcLen) * (*piFormat) / 8);

    XtFree((char *)pvSrc);
}

#ifdef TESTCASE
static void testRequestData(CLIPBACKEND* pCtx, CLIPX11FORMAT target,
                            void *closure);
#endif

static void getSelectionValue(CLIPBACKEND *pCtx, CLIPX11FORMAT format,
                              CLIPREADX11CBREQ *pReq)
{
#ifndef TESTCASE
    XtGetSelectionValue(pCtx->widget, clipGetAtom(pCtx, "CLIPBOARD"),
                        clipAtomForX11Format(pCtx, format),
                        cbConvertX11CB,
                        reinterpret_cast<XtPointer>(pReq),
                        CurrentTime);
#else
    testRequestData(pCtx, format, (void *)pReq);
#endif
}

/** Worker function for ClipRequestDataFromX11 which runs on the event
 * thread. */
static void vboxClipboardReadX11Worker(void *pUserData,
                                       void * /* interval */)
{
    CLIPREADX11CBREQ *pReq = (CLIPREADX11CBREQ *)pUserData;
    CLIPBACKEND *pCtx = pReq->mCtx;
    LogRelFlowFunc (("pReq->mFormat = %02X\n", pReq->mFormat));

    int rc = VINF_SUCCESS;
    bool fBusy = pCtx->fBusy;
    pCtx->fBusy = true;
    if (fBusy)
        /* If the clipboard is busy just fend off the request. */
        rc = VERR_TRY_AGAIN;
    else if (pReq->mFormat == VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT)
    {
        /*
         * VBox wants to read data in the given format.
         */
        pReq->mTextFormat = pCtx->X11TextFormat;
        if (pReq->mTextFormat == INVALID)
            /* VBox thinks we have data and we don't */
            rc = VERR_NO_DATA;
        else
            /* Send out a request for the data to the current clipboard
             * owner */
            getSelectionValue(pCtx, pCtx->X11TextFormat, pReq);
    }
    else if (pReq->mFormat == VBOX_SHARED_CLIPBOARD_FMT_BITMAP)
    {
        pReq->mBitmapFormat = pCtx->X11BitmapFormat;
        if (pReq->mBitmapFormat == INVALID)
            /* VBox thinks we have data and we don't */
            rc = VERR_NO_DATA;
        else
            /* Send out a request for the data to the current clipboard
             * owner */
            getSelectionValue(pCtx, pCtx->X11BitmapFormat, pReq);
    }
    else
        rc = VERR_NOT_IMPLEMENTED;
    if (RT_FAILURE(rc))
    {
        /* The clipboard callback was never scheduled, so we must signal
         * that the request processing is finished and clean up ourselves. */
        ClipCompleteDataRequestFromX11(pReq->mCtx->pFrontend, rc, pReq->mReq,
                                       NULL, 0);
        RTMemFree(pReq);
    }
    LogRelFlowFunc(("status %Rrc\n", rc));
}

/**
 * Called when VBox wants to read the X11 clipboard.
 *
 * @returns iprt status code
 * @param  pCtx      Context data for the clipboard backend
 * @param  u32Format The format that the VBox would like to receive the data
 *                   in
 * @param  pv        Where to write the data to
 * @param  cb        The size of the buffer to write the data to
 * @param  pcbActual Where to write the actual size of the written data
 * @note   We allocate a request structure which must be freed by the worker
 */
int ClipRequestDataFromX11(CLIPBACKEND *pCtx, uint32_t u32Format,
                           CLIPREADCBREQ *pReq)
{
    /*
     * Immediately return if we are not connected to the X server.
     */
    if (!pCtx->fHaveX11)
        return VERR_NO_DATA;
    int rc = VINF_SUCCESS;
    CLIPREADX11CBREQ *pX11Req;
    pX11Req = (CLIPREADX11CBREQ *)RTMemAllocZ(sizeof(*pX11Req));
    if (!pX11Req)
        rc = VERR_NO_MEMORY;
    else
    {
        pX11Req->mFormat = u32Format;
        pX11Req->mCtx = pCtx;
        pX11Req->mReq = pReq;
        /* We use this to schedule a worker function on the event thread. */
        clipQueueToEventThread(pCtx, vboxClipboardReadX11Worker,
                               (XtPointer) pX11Req);
    }
    return rc;
}

#ifdef TESTCASE

/** @todo This unit test currently works by emulating the X11 and X toolkit
 * APIs to exercise the code, since I didn't want to rewrite the code too much
 * when I wrote the tests.  However, this makes it rather ugly and hard to
 * understand.  Anyone doing any work on the code should feel free to
 * rewrite the tests and the code to make them cleaner and more readable. */

#include <iprt/test.h>
#include <poll.h>

#define TEST_WIDGET (Widget)0xffff

/* For the purpose of the test case, we just execute the procedure to be
 * scheduled, as we are running single threaded. */
void testQueueToEventThread(void (*proc)(void *, void *),
                            void *client_data)
{
    proc(client_data, NULL);
}

void XtFree(char *ptr)
{ RTMemFree((void *) ptr); }

/* The data in the simulated VBox clipboard */
static int g_vboxDataRC = VINF_SUCCESS;
static void *g_vboxDatapv = NULL;
static uint32_t g_vboxDatacb = 0;

/* Set empty data in the simulated VBox clipboard. */
static void clipEmptyVBox(CLIPBACKEND *pCtx, int retval)
{
    g_vboxDataRC = retval;
    RTMemFree(g_vboxDatapv);
    g_vboxDatapv = NULL;
    g_vboxDatacb = 0;
    ClipAnnounceFormatToX11(pCtx, 0);
}

/* Set the data in the simulated VBox clipboard. */
static int clipSetVBoxUtf16(CLIPBACKEND *pCtx, int retval,
                            const char *pcszData, size_t cb)
{
    PRTUTF16 pwszData = NULL;
    size_t cwData = 0;
    int rc = RTStrToUtf16Ex(pcszData, RTSTR_MAX, &pwszData, 0, &cwData);
    if (RT_FAILURE(rc))
        return rc;
    AssertReturn(cb <= cwData * 2 + 2, VERR_BUFFER_OVERFLOW);
    void *pv = RTMemDup(pwszData, cb);
    RTUtf16Free(pwszData);
    if (pv == NULL)
        return VERR_NO_MEMORY;
    if (g_vboxDatapv)
        RTMemFree(g_vboxDatapv);
    g_vboxDataRC = retval;
    g_vboxDatapv = pv;
    g_vboxDatacb = cb;
    ClipAnnounceFormatToX11(pCtx,
                                       VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT);
    return VINF_SUCCESS;
}

/* Return the data in the simulated VBox clipboard. */
int ClipRequestDataForX11(VBOXCLIPBOARDCONTEXT *pCtx,
                                 uint32_t u32Format, void **ppv,
                                 uint32_t *pcb)
{
    *pcb = g_vboxDatacb;
    if (g_vboxDatapv != NULL)
    {
        void *pv = RTMemDup(g_vboxDatapv, g_vboxDatacb);
        *ppv = pv;
        return pv != NULL ? g_vboxDataRC : VERR_NO_MEMORY;
    }
    *ppv = NULL;
    return g_vboxDataRC;
}

Display *XtDisplay(Widget w)
{ return (Display *) 0xffff; }

void XtAppSetExitFlag(XtAppContext app_context) {}

void XtDestroyWidget(Widget w) {}

XtAppContext XtCreateApplicationContext(void) { return (XtAppContext)0xffff; }

void XtDestroyApplicationContext(XtAppContext app_context) {}

void XtToolkitInitialize(void) {}

Boolean XtToolkitThreadInitialize(void) { return True; }

Display *XtOpenDisplay(XtAppContext app_context,
                       _Xconst _XtString display_string,
                       _Xconst _XtString application_name,
                       _Xconst _XtString application_class,
                       XrmOptionDescRec *options, Cardinal num_options,
                       int *argc, char **argv)
{ return (Display *)0xffff; }

Widget XtVaAppCreateShell(_Xconst _XtString application_name,
                          _Xconst _XtString application_class,
                          WidgetClass widget_class, Display *display, ...)
{ return TEST_WIDGET; }

void XtSetMappedWhenManaged(Widget widget, _XtBoolean mapped_when_managed) {}

void XtRealizeWidget(Widget widget) {}

XtInputId XtAppAddInput(XtAppContext app_context, int source,
                        XtPointer condition, XtInputCallbackProc proc,
                        XtPointer closure)
{ return 0xffff; }

/* Atoms we need other than the formats we support. */
static const char *g_apszSupAtoms[] =
{
    "PRIMARY", "CLIPBOARD", "TARGETS", "MULTIPLE", "TIMESTAMP"
};

/* This just looks for the atom names in a couple of tables and returns an
 * index with an offset added. */
Atom XInternAtom(Display *, const char *pcsz, int)
{
    Atom atom = 0;
    for (unsigned i = 0; i < RT_ELEMENTS(g_aFormats); ++i)
        if (!strcmp(pcsz, g_aFormats[i].pcszAtom))
            atom = (Atom) (i + 0x1000);
    for (unsigned i = 0; i < RT_ELEMENTS(g_apszSupAtoms); ++i)
        if (!strcmp(pcsz, g_apszSupAtoms[i]))
            atom = (Atom) (i + 0x2000);
    Assert(atom);  /* Have we missed any atoms? */
    return atom;
}

/* Take a request for the targets we are currently offering. */
static CLIPX11FORMAT g_selTargets[10] = { 0 };
static size_t g_cTargets = 0;

void testRequestTargets(CLIPBACKEND* pCtx)
{
    clipUpdateX11Targets(pCtx, g_selTargets, g_cTargets);
}

/* The current values of the X selection, which will be returned to the
 * XtGetSelectionValue callback. */
static Atom g_selType = 0;
static const void *g_pSelData = NULL;
static unsigned long g_cSelData = 0;
static int g_selFormat = 0;

void testRequestData(CLIPBACKEND* pCtx, CLIPX11FORMAT target, void *closure)
{
    unsigned long count = 0;
    int format = 0;
    if (target != g_selTargets[0])
    {
        clipConvertX11CB(closure, NULL, 0); /* Could not convert to target. */
        return;
    }
    void *pValue = NULL;
    pValue = g_pSelData ? RTMemDup(g_pSelData, g_cSelData) : NULL;
    count = g_pSelData ? g_cSelData : 0;
    format = g_selFormat;
    if (!pValue)
    {
        count = 0;
        format = 0;
    }
    clipConvertX11CB(closure, pValue, count * format / 8);
}

/* The formats currently on offer from X11 via the shared clipboard */
static uint32_t g_fX11Formats = 0;

void ClipReportX11Formats(VBOXCLIPBOARDCONTEXT* pCtx,
                                      uint32_t u32Formats)
{
    g_fX11Formats = u32Formats;
}

static uint32_t clipQueryFormats()
{
    return g_fX11Formats;
}

static void clipInvalidateFormats()
{
    g_fX11Formats = ~0;
}

/* Does our clipboard code currently own the selection? */
static bool g_ownsSel = false;
/* The procedure that is called when we should convert the selection to a
 * given format. */
static XtConvertSelectionProc g_pfnSelConvert = NULL;
/* The procedure which is called when we lose the selection. */
static XtLoseSelectionProc g_pfnSelLose = NULL;
/* The procedure which is called when the selection transfer has completed. */
static XtSelectionDoneProc g_pfnSelDone = NULL;

Boolean XtOwnSelection(Widget widget, Atom selection, Time time,
                       XtConvertSelectionProc convert,
                       XtLoseSelectionProc lose,
                       XtSelectionDoneProc done)
{
    if (selection != XInternAtom(NULL, "CLIPBOARD", 0))
        return True;  /* We don't really care about this. */
    g_ownsSel = true;  /* Always succeed. */
    g_pfnSelConvert = convert;
    g_pfnSelLose = lose;
    g_pfnSelDone = done;
    return True;
}

void XtDisownSelection(Widget widget, Atom selection, Time time)
{
    g_ownsSel = false;
    g_pfnSelConvert = NULL;
    g_pfnSelLose = NULL;
    g_pfnSelDone = NULL;
}

/* Request the shared clipboard to convert its data to a given format. */
static bool clipConvertSelection(const char *pcszTarget, Atom *type,
                                 XtPointer *value, unsigned long *length,
                                 int *format)
{
    Atom target = XInternAtom(NULL, pcszTarget, 0);
    if (target == 0)
        return false;
    /* Initialise all return values in case we make a quick exit. */
    *type = XA_STRING;
    *value = NULL;
    *length = 0;
    *format = 0;
    if (!g_ownsSel)
        return false;
    if (!g_pfnSelConvert)
        return false;
    Atom clipAtom = XInternAtom(NULL, "CLIPBOARD", 0);
    if (!g_pfnSelConvert(TEST_WIDGET, &clipAtom, &target, type,
                         value, length, format))
        return false;
    if (g_pfnSelDone)
        g_pfnSelDone(TEST_WIDGET, &clipAtom, &target);
    return true;
}

/* Set the current X selection data */
static void clipSetSelectionValues(const char *pcszTarget, Atom type,
                                   const void *data,
                                   unsigned long count, int format)
{
    Atom clipAtom = XInternAtom(NULL, "CLIPBOARD", 0);
    g_selTargets[0] = clipFindX11FormatByAtomText(pcszTarget);
    g_cTargets = 1;
    g_selType = type;
    g_pSelData = data;
    g_cSelData = count;
    g_selFormat = format;
    if (g_pfnSelLose)
        g_pfnSelLose(TEST_WIDGET, &clipAtom);
    g_ownsSel = false;
}

static void clipSendTargetUpdate(CLIPBACKEND *pCtx)
{
    clipQueryX11CBFormats(pCtx);
}

/* Configure if and how the X11 TARGETS clipboard target will fail */
static void clipSetTargetsFailure(void)
{
    g_cTargets = 0;
}

char *XtMalloc(Cardinal size) { return (char *) RTMemAlloc(size); }

char *XGetAtomName(Display *display, Atom atom)
{
    AssertReturn((unsigned)atom < RT_ELEMENTS(g_aFormats) + 1, NULL);
    const char *pcszName = NULL;
    if (atom < 0x1000)
        return NULL;
    else if (0x1000 <= atom && atom < 0x2000)
    {
        unsigned index = atom - 0x1000;
        AssertReturn(index < RT_ELEMENTS(g_aFormats), NULL);
        pcszName = g_aFormats[index].pcszAtom;
    }
    else
    {
        unsigned index = atom - 0x2000;
        AssertReturn(index < RT_ELEMENTS(g_apszSupAtoms), NULL);
        pcszName = g_apszSupAtoms[index];
    }
    return (char *)RTMemDup(pcszName, sizeof(pcszName) + 1);
}

int XFree(void *data)
{
    RTMemFree(data);
    return 0;
}

void XFreeStringList(char **list)
{
    if (list)
        RTMemFree(*list);
    RTMemFree(list);
}

#define MAX_BUF_SIZE 256

static int g_completedRC = VINF_SUCCESS;
static int g_completedCB = 0;
static CLIPREADCBREQ *g_completedReq = NULL;
static char g_completedBuf[MAX_BUF_SIZE];

void ClipCompleteDataRequestFromX11(VBOXCLIPBOARDCONTEXT *pCtx, int rc,
                                    CLIPREADCBREQ *pReq, void *pv,
                                    uint32_t cb)
{
    if (cb <= MAX_BUF_SIZE)
    {
        g_completedRC = rc;
        memcpy(g_completedBuf, pv, cb);
    }
    else
        g_completedRC = VERR_BUFFER_OVERFLOW;
    g_completedCB = cb;
    g_completedReq = pReq;
}

static void clipGetCompletedRequest(int *prc, char ** ppc, uint32_t *pcb,
                                    CLIPREADCBREQ **ppReq)
{
    *prc = g_completedRC;
    *ppc = g_completedBuf;
    *pcb = g_completedCB;
    *ppReq = g_completedReq;
}
#ifdef RT_OS_SOLARIS_10
char XtStrings [] = "";
_WidgetClassRec* applicationShellWidgetClass;
char XtShellStrings [] = "";
int XmbTextPropertyToTextList(
    Display*            /* display */,
    XTextProperty*      /* text_prop */,
    char***             /* list_return */,
    int*                /* count_return */
)
{
  return 0;
}
#else
const char XtStrings [] = "";
_WidgetClassRec* applicationShellWidgetClass;
const char XtShellStrings [] = "";
#endif

static void testStringFromX11(RTTEST hTest, CLIPBACKEND *pCtx,
                              const char *pcszExp, int rcExp)
{
    bool retval = true;
    clipSendTargetUpdate(pCtx);
    if (clipQueryFormats() != VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT)
        RTTestFailed(hTest, "Wrong targets reported: %02X\n",
                     clipQueryFormats());
    else
    {
        char *pc;
        CLIPREADCBREQ *pReq = (CLIPREADCBREQ *)&pReq, *pReqRet = NULL;
        ClipRequestDataFromX11(pCtx, VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT,
                               pReq);
        int rc = VINF_SUCCESS;
        uint32_t cbActual = 0;
        clipGetCompletedRequest(&rc, &pc, &cbActual, &pReqRet);
        if (rc != rcExp)
            RTTestFailed(hTest, "Wrong return code, expected %Rrc, got %Rrc\n",
                         rcExp, rc);
        else if (pReqRet != pReq)
            RTTestFailed(hTest, "Wrong returned request data, expected %p, got %p\n",
                         pReq, pReqRet);
        else if (RT_FAILURE(rcExp))
            retval = true;
        else
        {
            RTUTF16 wcExp[MAX_BUF_SIZE / 2];
            RTUTF16 *pwcExp = wcExp;
            size_t cwc = 0;
            rc = RTStrToUtf16Ex(pcszExp, RTSTR_MAX, &pwcExp,
                                RT_ELEMENTS(wcExp), &cwc);
            size_t cbExp = cwc * 2 + 2;
            AssertRC(rc);
            if (RT_SUCCESS(rc))
            {
                if (cbActual != cbExp)
                {
                    RTTestFailed(hTest, "Returned string is the wrong size, string \"%.*ls\", size %u, expected \"%s\", size %u\n",
                                 RT_MIN(MAX_BUF_SIZE, cbActual), pc, cbActual,
                                 pcszExp, cbExp);
                }
                else
                {
                    if (memcmp(pc, wcExp, cbExp) == 0)
                        retval = true;
                    else
                        RTTestFailed(hTest, "Returned string \"%.*ls\" does not match expected string \"%s\"\n",
                                     MAX_BUF_SIZE, pc, pcszExp);
                }
            }
        }
    }
    if (!retval)
        RTTestFailureDetails(hTest, "Expected: string \"%s\", rc %Rrc\n",
                             pcszExp, rcExp);
}

static void testLatin1FromX11(RTTEST hTest, CLIPBACKEND *pCtx,
                              const char *pcszExp, int rcExp)
{
    bool retval = false;
    clipSendTargetUpdate(pCtx);
    if (clipQueryFormats() != VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT)
        RTTestFailed(hTest, "Wrong targets reported: %02X\n",
                     clipQueryFormats());
    else
    {
        char *pc;
        CLIPREADCBREQ *pReq = (CLIPREADCBREQ *)&pReq, *pReqRet = NULL;
        ClipRequestDataFromX11(pCtx, VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT,
                               pReq);
        int rc = VINF_SUCCESS;
        uint32_t cbActual = 0;
        clipGetCompletedRequest(&rc, &pc, &cbActual, &pReqRet);
        if (rc != rcExp)
            RTTestFailed(hTest, "Wrong return code, expected %Rrc, got %Rrc\n",
                         rcExp, rc);
        else if (pReqRet != pReq)
            RTTestFailed(hTest, "Wrong returned request data, expected %p, got %p\n",
                         pReq, pReqRet);
        else if (RT_FAILURE(rcExp))
            retval = true;
        else
        {
            RTUTF16 wcExp[MAX_BUF_SIZE / 2];
            RTUTF16 *pwcExp = wcExp;
            size_t cwc;
            for (cwc = 0; cwc == 0 || pcszExp[cwc - 1] != '\0'; ++cwc)
                wcExp[cwc] = pcszExp[cwc];
            size_t cbExp = cwc * 2;
            if (cbActual != cbExp)
            {
                RTTestFailed(hTest, "Returned string is the wrong size, string \"%.*ls\", size %u, expected \"%s\", size %u\n",
                             RT_MIN(MAX_BUF_SIZE, cbActual), pc, cbActual,
                             pcszExp, cbExp);
            }
            else
            {
                if (memcmp(pc, wcExp, cbExp) == 0)
                    retval = true;
                else
                    RTTestFailed(hTest, "Returned string \"%.*ls\" does not match expected string \"%s\"\n",
                                 MAX_BUF_SIZE, pc, pcszExp);
            }
        }
    }
    if (!retval)
        RTTestFailureDetails(hTest, "Expected: string \"%s\", rc %Rrc\n",
                             pcszExp, rcExp);
}

static void testStringFromVBox(RTTEST hTest, CLIPBACKEND *pCtx,
                               const char *pcszTarget, Atom typeExp,
                               const char *valueExp)
{
    bool retval = false;
    Atom type;
    XtPointer value = NULL;
    unsigned long length;
    int format;
    size_t lenExp = strlen(valueExp);
    if (clipConvertSelection(pcszTarget, &type, &value, &length, &format))
    {
        if (   type != typeExp
            || length != lenExp
            || format != 8
            || memcmp((const void *) value, (const void *)valueExp,
                      lenExp))
        {
            RTTestFailed(hTest, "Bad data: type %d, (expected %d), length %u, (%u), format %d (%d), value \"%.*s\" (\"%.*s\")\n",
                     type, typeExp, length, lenExp, format, 8,
                     RT_MIN(length, 20), value, RT_MIN(lenExp, 20), valueExp);
        }
        else
            retval = true;
    }
    else
        RTTestFailed(hTest, "Conversion failed\n");
    XtFree((char *)value);
    if (!retval)
        RTTestFailureDetails(hTest, "Conversion to %s, expected \"%s\"\n",
                             pcszTarget, valueExp);
}

static void testNoX11(CLIPBACKEND *pCtx, const char *pcszTestCtx)
{
    CLIPREADCBREQ *pReq = (CLIPREADCBREQ *)&pReq, *pReqRet = NULL;
    int rc = ClipRequestDataFromX11(pCtx,
                                    VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT,
                                    pReq);
    RTTESTI_CHECK_MSG(rc == VERR_NO_DATA, ("context: %s\n", pcszTestCtx));
}

static void testStringFromVBoxFailed(RTTEST hTest, CLIPBACKEND *pCtx,
                                     const char *pcszTarget)
{
    bool retval = false;
    Atom type;
    XtPointer value = NULL;
    unsigned long length;
    int format;
    RTTEST_CHECK_MSG(hTest, !clipConvertSelection(pcszTarget, &type, &value,
                                                  &length, &format),
                     (hTest, "Conversion to target %s, should have failed but didn't, returned type %d, length %u, format %d, value \"%.*s\"\n",
                      pcszTarget, type, length, format, RT_MIN(length, 20),
                      value));
    XtFree((char *)value);
}

static void testNoSelectionOwnership(CLIPBACKEND *pCtx,
                                     const char *pcszTestCtx)
{
    RTTESTI_CHECK_MSG(!g_ownsSel, ("context: %s\n", pcszTestCtx));
}

int main()
{
    /*
     * Init the runtime, test and say hello.
     */
    RTTEST hTest;
    int rc = RTTestInitAndCreate("tstClipboardX11", &hTest);
    if (rc)
        return rc;
    RTTestBanner(hTest);

    /*
     * Run the test.
     */
    CLIPBACKEND *pCtx = ClipConstructX11(NULL, false);
    char *pc;
    uint32_t cbActual;
    CLIPREADCBREQ *pReq = (CLIPREADCBREQ *)&pReq, *pReqRet = NULL;
    rc = ClipStartX11(pCtx);
    AssertRCReturn(rc, 1);

    /*** Utf-8 from X11 ***/
    RTTestSub(hTest, "reading Utf-8 from X11");
    /* Simple test */
    clipSetSelectionValues("UTF8_STRING", XA_STRING, "hello world",
                           sizeof("hello world"), 8);
    testStringFromX11(hTest, pCtx, "hello world", VINF_SUCCESS);
    /* With an embedded carriage return */
    clipSetSelectionValues("text/plain;charset=UTF-8", XA_STRING,
                           "hello\nworld", sizeof("hello\nworld"), 8);
    testStringFromX11(hTest, pCtx, "hello\r\nworld", VINF_SUCCESS);
    /* With an embedded CRLF */
    clipSetSelectionValues("text/plain;charset=UTF-8", XA_STRING,
                           "hello\r\nworld", sizeof("hello\r\nworld"), 8);
    testStringFromX11(hTest, pCtx, "hello\r\r\nworld", VINF_SUCCESS);
    /* With an embedded LFCR */
    clipSetSelectionValues("text/plain;charset=UTF-8", XA_STRING,
                           "hello\n\rworld", sizeof("hello\n\rworld"), 8);
    testStringFromX11(hTest, pCtx, "hello\r\n\rworld", VINF_SUCCESS);
    /* An empty string */
    clipSetSelectionValues("text/plain;charset=utf-8", XA_STRING, "",
                           sizeof(""), 8);
    testStringFromX11(hTest, pCtx, "", VINF_SUCCESS);
    /* With an embedded Utf-8 character. */
    clipSetSelectionValues("STRING", XA_STRING,
                           "100\xE2\x82\xAC" /* 100 Euro */,
                           sizeof("100\xE2\x82\xAC"), 8);
    testStringFromX11(hTest, pCtx, "100\xE2\x82\xAC", VINF_SUCCESS);
    /* A non-zero-terminated string */
    clipSetSelectionValues("TEXT", XA_STRING,
                           "hello world", sizeof("hello world") - 1, 8);
    testStringFromX11(hTest, pCtx, "hello world", VINF_SUCCESS);

    /*** Latin1 from X11 ***/
    RTTestSub(hTest, "reading Latin1 from X11");
    /* Simple test */
    clipSetSelectionValues("STRING", XA_STRING, "Georges Dupr\xEA",
                           sizeof("Georges Dupr\xEA"), 8);
    testLatin1FromX11(hTest, pCtx, "Georges Dupr\xEA", VINF_SUCCESS);
    /* With an embedded carriage return */
    clipSetSelectionValues("TEXT", XA_STRING, "Georges\nDupr\xEA",
                           sizeof("Georges\nDupr\xEA"), 8);
    testLatin1FromX11(hTest, pCtx, "Georges\r\nDupr\xEA", VINF_SUCCESS);
    /* With an embedded CRLF */
    clipSetSelectionValues("TEXT", XA_STRING, "Georges\r\nDupr\xEA",
                           sizeof("Georges\r\nDupr\xEA"), 8);
    testLatin1FromX11(hTest, pCtx, "Georges\r\r\nDupr\xEA", VINF_SUCCESS);
    /* With an embedded LFCR */
    clipSetSelectionValues("TEXT", XA_STRING, "Georges\n\rDupr\xEA",
                           sizeof("Georges\n\rDupr\xEA"), 8);
    testLatin1FromX11(hTest, pCtx, "Georges\r\n\rDupr\xEA", VINF_SUCCESS);
    /* A non-zero-terminated string */
    clipSetSelectionValues("text/plain", XA_STRING,
                           "Georges Dupr\xEA!",
                           sizeof("Georges Dupr\xEA!") - 1, 8);
    testLatin1FromX11(hTest, pCtx, "Georges Dupr\xEA!", VINF_SUCCESS);

    /*** Unknown X11 format ***/
    RTTestSub(hTest, "handling of an unknown X11 format");
    clipInvalidateFormats();
    clipSetSelectionValues("CLIPBOARD", XA_STRING, "Test",
                           sizeof("Test"), 8);
    clipSendTargetUpdate(pCtx);
    RTTEST_CHECK_MSG(hTest, clipQueryFormats() == 0,
                     (hTest, "Failed to send a format update notification\n"));

    /*** Timeout from X11 ***/
    RTTestSub(hTest, "X11 timeout");
    clipSetSelectionValues("UTF8_STRING", XT_CONVERT_FAIL, NULL,0, 8);
    testStringFromX11(hTest, pCtx, "", VERR_NO_DATA);

    /*** No data in X11 clipboard ***/
    RTTestSub(hTest, "a data request from an empty X11 clipboard");
    clipSetSelectionValues("UTF8_STRING", XA_STRING, NULL,
                           0, 8);
    ClipRequestDataFromX11(pCtx, VBOX_SHARED_CLIPBOARD_FMT_UNICODETEXT,
                           pReq);
    clipGetCompletedRequest(&rc, &pc, &cbActual, &pReqRet);
    RTTEST_CHECK_MSG(hTest, rc == VERR_NO_DATA,
                     (hTest, "Returned %Rrc instead of VERR_NO_DATA\n",
                      rc));
    RTTEST_CHECK_MSG(hTest, pReqRet == pReq,
                     (hTest, "Wrong returned request data, expected %p, got %p\n",
                     pReq, pReqRet));

    /*** Ensure that VBox is notified when we return the CB to X11 ***/
    RTTestSub(hTest, "notification of switch to X11 clipboard");
    clipInvalidateFormats();
    clipReportEmptyX11CB(pCtx);
    RTTEST_CHECK_MSG(hTest, clipQueryFormats() == 0,
                     (hTest, "Failed to send a format update (release) notification\n"));

    /*** request for an invalid VBox format from X11 ***/
    RTTestSub(hTest, "a request for an invalid VBox format from X11");
    ClipRequestDataFromX11(pCtx, 0xffff, pReq);
    clipGetCompletedRequest(&rc, &pc, &cbActual, &pReqRet);
    RTTEST_CHECK_MSG(hTest, rc == VERR_NOT_IMPLEMENTED,
                     (hTest, "Returned %Rrc instead of VERR_NOT_IMPLEMENTED\n",
                      rc));
    RTTEST_CHECK_MSG(hTest, pReqRet == pReq,
                     (hTest, "Wrong returned request data, expected %p, got %p\n",
                     pReq, pReqRet));

    /*** Targets failure from X11 ***/
    RTTestSub(hTest, "X11 targets conversion failure");
    clipSetSelectionValues("UTF8_STRING", XA_STRING, "hello world",
                           sizeof("hello world"), 8);
    clipSetTargetsFailure();
    Atom atom = XA_STRING;
    long unsigned int cLen = 0;
    int format = 8;
    clipConvertX11Targets(NULL, (XtPointer) pCtx, NULL, &atom, NULL, &cLen,
                          &format);
    RTTEST_CHECK_MSG(hTest, clipQueryFormats() == 0,
                     (hTest, "Wrong targets reported: %02X\n",
                      clipQueryFormats()));

    /*** X11 text format conversion ***/
    RTTestSub(hTest, "handling of X11 selection targets");
    RTTEST_CHECK_MSG(hTest, clipTestTextFormatConversion(pCtx),
                     (hTest, "failed to select the right X11 text formats\n"));

    /*** Utf-8 from VBox ***/
    RTTestSub(hTest, "reading Utf-8 from VBox");
    /* Simple test */
    clipSetVBoxUtf16(pCtx, VINF_SUCCESS, "hello world",
                     sizeof("hello world") * 2);
    testStringFromVBox(hTest, pCtx, "UTF8_STRING",
                       clipGetAtom(pCtx, "UTF8_STRING"), "hello world");
    /* With an embedded carriage return */
    clipSetVBoxUtf16(pCtx, VINF_SUCCESS, "hello\r\nworld",
                     sizeof("hello\r\nworld") * 2);
    testStringFromVBox(hTest, pCtx, "text/plain;charset=UTF-8",
                       clipGetAtom(pCtx, "text/plain;charset=UTF-8"),
                       "hello\nworld");
    /* With an embedded CRCRLF */
    clipSetVBoxUtf16(pCtx, VINF_SUCCESS, "hello\r\r\nworld",
                     sizeof("hello\r\r\nworld") * 2);
    testStringFromVBox(hTest, pCtx, "text/plain;charset=UTF-8",
                       clipGetAtom(pCtx, "text/plain;charset=UTF-8"),
                       "hello\r\nworld");
    /* With an embedded CRLFCR */
    clipSetVBoxUtf16(pCtx, VINF_SUCCESS, "hello\r\n\rworld",
                     sizeof("hello\r\n\rworld") * 2);
    testStringFromVBox(hTest, pCtx, "text/plain;charset=UTF-8",
                       clipGetAtom(pCtx, "text/plain;charset=UTF-8"),
                       "hello\n\rworld");
    /* An empty string */
    clipSetVBoxUtf16(pCtx, VINF_SUCCESS, "", 2);
    testStringFromVBox(hTest, pCtx, "text/plain;charset=utf-8",
                       clipGetAtom(pCtx, "text/plain;charset=utf-8"), "");
    /* With an embedded Utf-8 character. */
    clipSetVBoxUtf16(pCtx, VINF_SUCCESS, "100\xE2\x82\xAC" /* 100 Euro */,
                     10);
    testStringFromVBox(hTest, pCtx, "STRING",
                       clipGetAtom(pCtx, "STRING"), "100\xE2\x82\xAC");
    /* A non-zero-terminated string */
    clipSetVBoxUtf16(pCtx, VINF_SUCCESS, "hello world",
                     sizeof("hello world") * 2 - 2);
    testStringFromVBox(hTest, pCtx, "TEXT", clipGetAtom(pCtx, "TEXT"),
                       "hello world");

    /*** Timeout from VBox ***/
    RTTestSub(hTest, "reading from VBox with timeout");
    clipEmptyVBox(pCtx, VERR_TIMEOUT);
    testStringFromVBoxFailed(hTest, pCtx, "UTF8_STRING");

    /*** No data in VBox clipboard ***/
    RTTestSub(hTest, "an empty VBox clipboard");
    clipSetSelectionValues("TEXT", XA_STRING, "", sizeof(""), 8);
    clipEmptyVBox(pCtx, VINF_SUCCESS);
    RTTEST_CHECK_MSG(hTest, g_ownsSel,
                     (hTest, "VBox grabbed the clipboard with no data and we ignored it\n"));
    testStringFromVBoxFailed(hTest, pCtx, "UTF8_STRING");

    /*** An unknown VBox format ***/
    RTTestSub(hTest, "reading an unknown VBox format");
    clipSetSelectionValues("TEXT", XA_STRING, "", sizeof(""), 8);
    clipSetVBoxUtf16(pCtx, VINF_SUCCESS, "", 2);
    ClipAnnounceFormatToX11(pCtx, 0xa0000);
    RTTEST_CHECK_MSG(hTest, g_ownsSel,
                     (hTest, "VBox grabbed the clipboard with unknown data and we ignored it\n"));
    testStringFromVBoxFailed(hTest, pCtx, "UTF8_STRING");
    rc = ClipStopX11(pCtx);
    AssertRCReturn(rc, 1);
    ClipDestructX11(pCtx);

    /*** Headless clipboard tests ***/

    pCtx = ClipConstructX11(NULL, true);
    rc = ClipStartX11(pCtx);
    AssertRCReturn(rc, 1);

    /*** Read from X11 ***/
    RTTestSub(hTest, "reading from X11, headless clipboard");
    /* Simple test */
    clipSetVBoxUtf16(pCtx, VINF_SUCCESS, "",
                     sizeof("") * 2);
    clipSetSelectionValues("UTF8_STRING", XA_STRING, "hello world",
                           sizeof("hello world"), 8);
    testNoX11(pCtx, "reading from X11, headless clipboard");

    /*** Read from VBox ***/
    RTTestSub(hTest, "reading from VBox, headless clipboard");
    /* Simple test */
    clipEmptyVBox(pCtx, VERR_WRONG_ORDER);
    clipSetSelectionValues("TEXT", XA_STRING, "", sizeof(""), 8);
    clipSetVBoxUtf16(pCtx, VINF_SUCCESS, "hello world",
                     sizeof("hello world") * 2);
    testNoSelectionOwnership(pCtx, "reading from VBox, headless clipboard");

    rc = ClipStopX11(pCtx);
    AssertRCReturn(rc, 1);
    ClipDestructX11(pCtx);

    return RTTestSummaryAndDestroy(hTest);
}

#endif

#ifdef SMOKETEST

/* This is a simple test case that just starts a copy of the X11 clipboard
 * backend, checks the X11 clipboard and exits.  If ever needed I will add an
 * interactive mode in which the user can read and copy to the clipboard from
 * the command line. */

#include <iprt/env.h>
#include <iprt/test.h>

int ClipRequestDataForX11(VBOXCLIPBOARDCONTEXT *pCtx,
                                 uint32_t u32Format, void **ppv,
                                 uint32_t *pcb)
{
    return VERR_NO_DATA;
}

void ClipReportX11Formats(VBOXCLIPBOARDCONTEXT *pCtx,
                                      uint32_t u32Formats)
{}

void ClipCompleteDataRequestFromX11(VBOXCLIPBOARDCONTEXT *pCtx, int rc,
                                    CLIPREADCBREQ *pReq, void *pv,
                                    uint32_t cb)
{}

int main()
{
    /*
     * Init the runtime, test and say hello.
     */
    RTTEST hTest;
    int rc = RTTestInitAndCreate("tstClipboardX11Smoke", &hTest);
    if (rc)
        return rc;
    RTTestBanner(hTest);

    /*
     * Run the test.
     */
    rc = VINF_SUCCESS;
    /* We can't test anything without an X session, so just return success
     * in that case. */
    if (!RTEnvExist("DISPLAY"))
    {
        RTTestPrintf(hTest, RTTESTLVL_INFO,
                     "X11 not available, not running test\n");
        return RTTestSummaryAndDestroy(hTest);
    }
    CLIPBACKEND *pCtx = ClipConstructX11(NULL, false);
    AssertReturn(pCtx, 1);
    rc = ClipStartX11(pCtx);
    AssertRCReturn(rc, 1);
    /* Give the clipboard time to synchronise. */
    RTThreadSleep(500);
    rc = ClipStopX11(pCtx);
    AssertRCReturn(rc, 1);
    ClipDestructX11(pCtx);
    return RTTestSummaryAndDestroy(hTest);
}

#endif /* SMOKETEST defined */

* Fri 17 Jan 2014 10:42:25 PM JST
/**
 * clip.c
 * to compile and link (on X11R7): cc -o clip clip.c -lX11
 * to compile and link (on X11R6): cc -o clip clip.c -L/usr/X11R6/lib{libsuffix} -I/usr/X11R6/include -lX11
 * where libsuffix is 32 or 64 or 128 ( I wish I will get a chance to compile on this architecture ) 
 * depending on your machine word size.
 */
#include <stdio.h>
#include <stdlib.h>

#include <X11/Xlib.h>

#define s_PRIMARY   "PRIMARY"
#define s_CLIPBOARD "CLIPBOARD"

static Atom get_atom(Display*, const char*);
static void print_stuff0(Display*, Atom);

int
main()
{
  Atom a_Primary, a_Clipboard;
  Display* display = NULL;
  char* display_name = NULL;
  char* window_name = NULL;
  Window win;

  if(!(display = XOpenDisplay(display_name)))
    {
      fprintf(stderr, "Error opening %s\n", XDisplayName(display_name));
      return 0;
    }

  a_Primary = get_atom(display, s_PRIMARY);
  a_Clipboard = get_atom(display, s_CLIPBOARD);
 

  print_stuff0(display, a_Primary);
  print_stuff0(display, a_Clipboard);

  XCloseDisplay(display);
}

void
print_stuff0(Display* display, Atom atom)
{
  Window win;
  char* window_name;
  char* atom_name;

  atom_name = XGetAtomName(display, atom);

  if((win = XGetSelectionOwner(display, atom)) != None)
    {

      XFetchName(display, win, &window_name);
      printf("\"%s\" (WM_NAME of %ld) owns selection of \"%s\" atom.\n", window_name, win, atom_name);
      XFree(window_name);
    }
  else
      printf("No body owns selection \"%s\"\n", atom_name);

}

Atom 
get_atom(Display* display, const char* atom)
{
  Atom a;
  if((a = XInternAtom(display, atom, True)) == None)
    {
      fprintf(stderr, "Oops, \"%s\" atom doesn't exists.\n", atom);
      XCloseDisplay(display);
      exit(2);
    }

  return a;

}
* Fri 17 Jan 2014 10:45:59 PM JST
#include <qclipboard.h>
* Fri 17 Jan 2014 11:38:17 PM JST
libqt4-dev
* Sat 18 Jan 2014 12:08:17 AM JST
get
* Sat 18 Jan 2014 01:48:26 AM JST
INFO
* Sat 18 Jan 2014 01:49:47 AM JST
NOTSET
* Sat 18 Jan 2014 01:49:58 AM JST
NOTSET
* Sat 18 Jan 2014 01:53:28 AM JST
logging.INFO
* Sat 18 Jan 2014 01:53:34 AM JST
INFO
* Sat 18 Jan 2014 01:55:50 AM JST
LOG.
* Sat 18 Jan 2014 01:57:12 AM JST

* Sat 18 Jan 2014 01:57:12 AM JST

* Sat 18 Jan 2014 01:57:12 AM JST
    LOG

* Sat 18 Jan 2014 01:57:52 AM JST

* Sat 18 Jan 2014 01:57:52 AM JST

* Sat 18 Jan 2014 01:57:52 AM JST
    LOG

* Sat 18 Jan 2014 01:58:48 AM JST
INFO
* Sat 18 Jan 2014 01:58:58 AM JST
WARN
* Sat 18 Jan 2014 01:59:22 AM JST
DEBUG
* Sat 18 Jan 2014 01:59:37 AM JST
CRITICAL
* Sat 18 Jan 2014 01:59:53 AM JST
FATAL
* Sat 18 Jan 2014 02:00:10 AM JST
ERROR
* Sat 18 Jan 2014 02:00:37 AM JST

* Sat 18 Jan 2014 02:00:38 AM JST

* Sat 18 Jan 2014 02:00:38 AM JST
    return 0

* Sat 18 Jan 2014 02:03:09 AM JST

* Sat 18 Jan 2014 02:03:09 AM JST

* Sat 18 Jan 2014 02:03:09 AM JST
        # TODO: (Atami) [2014/01/18]

* Sat 18 Jan 2014 02:03:15 AM JST

* Sat 18 Jan 2014 02:03:15 AM JST

* Sat 18 Jan 2014 02:03:15 AM JST
        print('DEBUG-1-log.py')

* Sat 18 Jan 2014 02:03:32 AM JST
INFO
* Sat 18 Jan 2014 02:05:44 AM JST
"DEBUG"
* Sat 18 Jan 2014 02:06:25 AM JST
"ERROR"
* Sat 18 Jan 2014 02:08:37 AM JST
"INFO" 
* Sat 18 Jan 2014 02:09:47 AM JST
NOTSET
* Sat 18 Jan 2014 02:10:16 AM JST
INFO
* Sat 18 Jan 2014 02:14:16 AM JST
info
* Sat 18 Jan 2014 02:14:40 AM JST
info
* Sat 18 Jan 2014 02:15:23 AM JST

* Sat 18 Jan 2014 02:15:23 AM JST

* Sat 18 Jan 2014 02:15:23 AM JST
    LOG.debug('Run sikuli for sleipnir')

* Sat 18 Jan 2014 02:15:44 AM JST
info
* Sat 18 Jan 2014 02:17:01 AM JST

* Sat 18 Jan 2014 02:17:01 AM JST

* Sat 18 Jan 2014 02:17:01 AM JST
            print('KeyboardInterrupted')

* Sat 18 Jan 2014 02:18:38 AM JST
info
* Sat 18 Jan 2014 02:18:41 AM JST
info
* Sat 18 Jan 2014 02:27:41 AM JST
WARN
* Sat 18 Jan 2014 02:29:56 AM JST
psexists(sleipnir.BIN)
* Sat 18 Jan 2014 02:30:33 AM JST

* Sat 18 Jan 2014 02:30:34 AM JST

* Sat 18 Jan 2014 02:30:34 AM JST
    exist = True

* Sat 18 Jan 2014 02:35:23 AM JST
info
* Sat 18 Jan 2014 01:26:29 PM JST
sys.
* Sat 18 Jan 2014 01:27:35 PM JST

* Sat 18 Jan 2014 01:27:35 PM JST

* Sat 18 Jan 2014 01:27:35 PM JST
        print('DEBUG-1-weekly.py')

* Sat 18 Jan 2014 01:28:03 PM JST
$python_path $weekly
* Sat 18 Jan 2014 01:43:08 PM JST

* Sat 18 Jan 2014 01:43:08 PM JST

* Sat 18 Jan 2014 01:43:08 PM JST
        LOGGER.debug('')

* Sat 18 Jan 2014 01:49:55 PM JST

* Sat 18 Jan 2014 01:49:55 PM JST

* Sat 18 Jan 2014 01:49:55 PM JST
            pass

* Sat 18 Jan 2014 01:52:22 PM JST
close()
* Sat 18 Jan 2014 01:52:23 PM JST
self.close()
* Sat 18 Jan 2014 01:56:05 PM JST
type, value, tb
* Sat 18 Jan 2014 01:59:08 PM JST
e
* Sat 18 Jan 2014 01:59:09 PM JST
raise e
* Sat 18 Jan 2014 01:59:36 PM JST
TypeError: __exit__() takes exactly 1 argument (4 given)
* Sat 18 Jan 2014 01:59:53 PM JST
type, value, tb
* Sat 18 Jan 2014 02:00:50 PM JST

* Sat 18 Jan 2014 02:00:50 PM JST

* Sat 18 Jan 2014 02:00:50 PM JST
        print('DEBUG-1-weekly.py')

* Sat 18 Jan 2014 02:00:50 PM JST

* Sat 18 Jan 2014 02:00:50 PM JST

* Sat 18 Jan 2014 02:00:50 PM JST
        print('DEBUG-2-weekly.py')

* Sat 18 Jan 2014 02:00:53 PM JST

* Sat 18 Jan 2014 02:00:53 PM JST

* Sat 18 Jan 2014 02:00:53 PM JST
        # sys.exit(os.EX_OK)

* Sat 18 Jan 2014 02:00:55 PM JST

* Sat 18 Jan 2014 02:00:55 PM JST

* Sat 18 Jan 2014 02:00:55 PM JST
        sleep(2) # wait mount

* Sat 18 Jan 2014 02:00:55 PM JST
        sleep(2) # wait mount

* Sat 18 Jan 2014 02:00:55 PM JST
        sleep(2) # wait mount
        print('DEBUG-3-weekly.py')

* Sat 18 Jan 2014 02:00:57 PM JST

* Sat 18 Jan 2014 02:00:57 PM JST

* Sat 18 Jan 2014 02:00:57 PM JST
            print('DEBUG-4-weekly.py')

* Sat 18 Jan 2014 02:01:00 PM JST

* Sat 18 Jan 2014 02:01:00 PM JST

* Sat 18 Jan 2014 02:01:00 PM JST
            raise StandardError()

* Sat 18 Jan 2014 04:13:18 PM JST
    LOG.info('* Close all thunar.')
    for win in wm.iter_matchwin(klass=thunar.CLASS):
        LOG.debug('Closing {}'.format(win.title))
        win.close()

* Sat 18 Jan 2014 04:14:55 PM JST
    for win in wm.iter_matchwin(klass=thunar.CLASS):
        LOG.debug('Closing {}'.format(win.title))
        win.close()

* Sat 18 Jan 2014 04:15:25 PM JST
thunar.
* Sat 18 Jan 2014 04:15:43 PM JST

* Sat 18 Jan 2014 04:15:43 PM JST

* Sat 18 Jan 2014 04:15:43 PM JST
        LOG.debug('Closing {}'.format(win.title))

* Sat 18 Jan 2014 04:15:51 PM JST
SUMMARY
* Sat 18 Jan 2014 04:16:56 PM JST

* Sat 18 Jan 2014 04:16:56 PM JST

* Sat 18 Jan 2014 04:16:56 PM JST
    (list) closed window object.

* Sat 18 Jan 2014 04:17:37 PM JST
thunar
* Sat 18 Jan 2014 04:18:01 PM JST

* Sat 18 Jan 2014 04:18:01 PM JST

* Sat 18 Jan 2014 04:18:01 PM JST
    close_all_thunar()

* Sat 18 Jan 2014 04:18:07 PM JST
LOG.info('* Close all thunar.')
* Sat 18 Jan 2014 04:19:23 PM JST
def _sleipnir_confirm(win, **kwargs):
    r"""SUMMARY

    _sleipnir_confirm(win, **args)

    @Arguments:
    - `win`:
    - `**args`:

    @Return:
    """
    if not win:
        return False
    return ((kwargs.get('psname') is not None) and
            (kwargs['psname'] == win.psname))



* Sat 18 Jan 2014 04:21:22 PM JST
None
* Sat 18 Jan 2014 04:26:36 PM JST

* Sat 18 Jan 2014 04:26:36 PM JST

* Sat 18 Jan 2014 04:26:36 PM JST
            sleep(2)

* Sat 18 Jan 2014 04:34:00 PM JST
CHROME_OPTS
* Sat 18 Jan 2014 04:34:28 PM JST
['--new-window']
* Sat 18 Jan 2014 04:37:01 PM JST
url, options=None)
* Sat 18 Jan 2014 04:37:04 PM JST
url, options=None
* Sat 18 Jan 2014 04:37:26 PM JST
    if not predicate.islist(options):
        raise ValueError('Must be list {}'.format(options))

* Sat 18 Jan 2014 04:38:06 PM JST
google
* Sat 18 Jan 2014 04:39:45 PM JST

* Sat 18 Jan 2014 04:39:45 PM JST

* Sat 18 Jan 2014 04:39:45 PM JST
    if no:

* Sat 18 Jan 2014 04:39:48 PM JST
    if not predicate.islist(options):
        raise ValueError('Must be list {}'.format(options))

* Sat 18 Jan 2014 04:39:56 PM JST
    if not predicate.islist(options):
        raise ValueError('Must be list {}'.format(options))

* Sat 18 Jan 2014 04:48:23 PM JST
    if not THURSDAY == WEEKDAY:
        beforeids = list(chrome.iter_chromewinids())
        chrome.open_folder('Foreign News', options=['--new-window'])
        afterids = list(chrome.iter_chromewinids())
        waitids = list(set(afterids) - set(beforeids))
        while waitids:
            if winwait.close(id=waitids[0]):
                waitids.pop(0)

* Sat 18 Jan 2014 04:48:31 PM JST
not 
* Sat 18 Jan 2014 04:48:47 PM JST
winwait = wm.WinWait()
* Sat 18 Jan 2014 04:49:16 PM JST
Foreign_
* Sat 18 Jan 2014 04:49:35 PM JST
    if SATURDAY == WEEKDAY:
        if not yesnodialog('Prompt', 'Please Click OK will next: '):
            sys.exit(1)
        chrome.open_folder('Nation', options=['--new-window'])

* Sat 18 Jan 2014 04:50:24 PM JST
def nation():
    r"""SUMMARY

    nation()

    @Return:
    """
    if SATURDAY != WEEKDAY:
        return
    if not yesnodialog('Prompt', 'Please Click OK will next: '):
        sys.exit(1)
    chrome.open_folder('Nation', options=['--new-window'])



* Sat 18 Jan 2014 04:57:19 PM JST
chrome_opts = CHROME_OPTS + ['--new-window']
* Sat 18 Jan 2014 04:57:31 PM JST
chrome_opts
* Sat 18 Jan 2014 04:57:45 PM JST
chrome_opts = CHROME_OPTS + ['--new-window']
* Sat 18 Jan 2014 04:57:51 PM JST
chrome_opts
* Sat 18 Jan 2014 04:57:59 PM JST
chrome_opts = CHROME_OPTS + ['--new-window']
* Sat 18 Jan 2014 04:58:05 PM JST
chrome_opts
* Sat 18 Jan 2014 04:59:31 PM JST

* Sat 18 Jan 2014 04:59:32 PM JST

* Sat 18 Jan 2014 04:59:32 PM JST
    # parse file name as extracted extension

* Sat 18 Jan 2014 05:01:08 PM JST
fmt
* Sat 18 Jan 2014 05:01:59 PM JST
recipe.get_today_menus()
* Sat 18 Jan 2014 05:02:03 PM JST

* Sat 18 Jan 2014 05:02:03 PM JST

* Sat 18 Jan 2014 05:02:03 PM JST
    menus = 

* Sat 18 Jan 2014 05:03:07 PM JST
info
* Sat 18 Jan 2014 05:03:54 PM JST
        LOG.debug('wait {} sec'.format(300))
        sleep(300) # 5 min
        LOG.debug('wait cpu below 20%.')
        waitbusy(percent=20.0, interval=5)

* Sat 18 Jan 2014 05:04:21 PM JST
0
* Sat 18 Jan 2014 05:04:22 PM JST
20.0
* Sat 18 Jan 2014 05:04:23 PM JST
cpu=20.0
* Sat 18 Jan 2014 05:06:05 PM JST
MANUAL_START, ' '.join(recipe.get_today_menus())
* Sat 18 Jan 2014 05:06:09 PM JST
        
* Sat 18 Jan 2014 05:06:17 PM JST
('Routines started: {0}\nWEATHER: \nRECIPE: {1}\n'.format(
        MANUAL_START, ' '.join(recipe.get_today_menus())))
* Sat 18 Jan 2014 05:06:24 PM JST

* Sat 18 Jan 2014 05:06:24 PM JST

* Sat 18 Jan 2014 05:06:24 PM JST
    body = 

* Sat 18 Jan 2014 05:06:38 PM JST
        
* Sat 18 Jan 2014 05:07:21 PM JST
    if not THURSDAY == WEEKDAY:
        waiter()

* Sat 18 Jan 2014 05:15:37 PM JST
RECIPEDI
* Sat 18 Jan 2014 05:16:57 PM JST
sbp.Popen((xfe.BINPATH, '/tmp'))
* Sat 18 Jan 2014 05:17:52 PM JST
myenv = os.environ
* Sat 18 Jan 2014 05:17:57 PM JST
myenv['LANG'] = 'ja_JP.UTF-8'
* Sat 18 Jan 2014 05:21:01 PM JST
en_US.UTF-8
* Sat 18 Jan 2014 05:27:45 PM JST
'/root/.local/share/Trash'
* Sat 18 Jan 2014 05:31:09 PM JST
os.listdir(get_latest_path())
* Sat 18 Jan 2014 05:31:28 PM JST
os.listdir(recipe.get_latest_path())
* Sat 18 Jan 2014 05:33:59 PM JST
recipe.get_latest_path()
* Sat 18 Jan 2014 05:35:28 PM JST

* Sat 18 Jan 2014 05:35:28 PM JST

* Sat 18 Jan 2014 05:35:29 PM JST

* Sat 18 Jan 2014 05:35:31 PM JST

* Sat 18 Jan 2014 05:35:31 PM JST

* Sat 18 Jan 2014 05:35:31 PM JST
    from  import 

* Sat 18 Jan 2014 05:37:18 PM JST

* Sat 18 Jan 2014 05:37:18 PM JST

* Sat 18 Jan 2014 05:37:18 PM JST
    import shutil

* Sat 18 Jan 2014 05:37:37 PM JST
os.listdir(basepath)
* Sat 18 Jan 2014 05:37:43 PM JST

* Sat 18 Jan 2014 05:37:43 PM JST

* Sat 18 Jan 2014 05:37:43 PM JST
    files = 

* Sat 18 Jan 2014 05:40:04 PM JST
world
* Sat 18 Jan 2014 05:40:51 PM JST
osutil
* Sat 18 Jan 2014 05:40:54 PM JST

* Sat 18 Jan 2014 05:40:54 PM JST

* Sat 18 Jan 2014 05:40:54 PM JST
import osutil

* Sat 18 Jan 2014 05:41:48 PM JST
join(basepath, file_,)
* Sat 18 Jan 2014 05:42:55 PM JST
            target = join(basepath, file_,)
            LOG.debug('move {} => {}'.format(target, trashpath))

* Sat 18 Jan 2014 05:42:57 PM JST
            target = join(basepath, file_,)
            LOG.debug('move {} => {}'.format(target, trashpath))

* Sat 18 Jan 2014 05:43:20 PM JST
clean_today_recipe
* Sat 18 Jan 2014 06:07:42 PM JST
info
* Sat 18 Jan 2014 06:08:46 PM JST
targets = ['
* Sat 18 Jan 2014 06:13:54 PM JST

* Sat 18 Jan 2014 06:13:54 PM JST

* Sat 18 Jan 2014 06:13:54 PM JST
    for _ in xrange(0, 1):

* Sat 18 Jan 2014 06:17:04 PM JST
SUMMARY
* Sat 18 Jan 2014 06:17:10 PM JST

* Sat 18 Jan 2014 06:17:11 PM JST

* Sat 18 Jan 2014 06:17:11 PM JST
    @Return:

* Sat 18 Jan 2014 06:17:21 PM JST
backup Remote
* Sat 18 Jan 2014 06:17:45 PM JST
rsync '/data'
* Sat 18 Jan 2014 06:18:01 PM JST
king pull backup
* Sat 18 Jan 2014 06:19:42 PM JST
kihalt
* Sat 18 Jan 2014 06:32:41 PM JST
OSError
* Sat 18 Jan 2014 10:03:10 PM JST
ARGS
* Sat 18 Jan 2014 10:03:14 PM JST
ARGS
* Sat 18 Jan 2014 10:04:08 PM JST
  
* Sat 18 Jan 2014 10:04:57 PM JST
  
* Sat 18 Jan 2014 10:05:46 PM JST
svn-status-pylib
* Sat 18 Jan 2014 10:09:59 PM JST
frame-title-format
* Sat 18 Jan 2014 10:10:23 PM JST
tmp 
* Sat 18 Jan 2014 10:10:49 PM JST
frame-title-format
* Sat 18 Jan 2014 10:13:54 PM JST
force-mode-line-update
* Sat 18 Jan 2014 10:14:21 PM JST
(setq frame-title-format "svn_pylib")
* Sat 18 Jan 2014 10:14:36 PM JST
(force-mode-line-update)
* Sat 18 Jan 2014 10:15:28 PM JST
  (setq frame-title-format "svn_pylib")
  (force-mode-line-update)

* Sat 18 Jan 2014 10:16:38 PM JST
    
* Sat 18 Jan 2014 10:17:48 PM JST
wm.WinWait().close(klass='Thunar')
* Sat 18 Jan 2014 10:18:09 PM JST
klass
* Sat 18 Jan 2014 10:18:27 PM JST

* Sat 18 Jan 2014 10:18:37 PM JST
waitclosesvn
* Sat 18 Jan 2014 10:20:12 PM JST
$python_path $script $@
* Sat 18 Jan 2014 10:21:13 PM JST
script.
* Sat 18 Jan 2014 10:23:38 PM JST
xfce4-terminal
* Sat 18 Jan 2014 10:29:46 PM JST
ki.pavedisk()
* Sat 18 Jan 2014 10:29:51 PM JST

* Sat 18 Jan 2014 10:29:51 PM JST

* Sat 18 Jan 2014 10:29:51 PM JST
            ki.pavedisk()

* Sat 18 Jan 2014 10:33:34 PM JST

* Sat 18 Jan 2014 10:33:34 PM JST

* Sat 18 Jan 2014 10:33:34 PM JST
    ki = king.King()

* Sat 18 Jan 2014 10:36:44 PM JST

* Sat 18 Jan 2014 10:36:44 PM JST

* Sat 18 Jan 2014 10:36:44 PM JST
            ki.script.pave(decrypt=opts.no_decrypt)

* Sat 18 Jan 2014 10:36:55 PM JST
script.
* Sat 18 Jan 2014 10:37:03 PM JST
script.
* Sat 18 Jan 2014 11:24:20 PM JST

* Sat 18 Jan 2014 11:24:20 PM JST

* Sat 18 Jan 2014 11:24:20 PM JST
# $python_path $weekly

* Sat 18 Jan 2014 11:24:35 PM JST

* Sat 18 Jan 2014 11:24:35 PM JST

* Sat 18 Jan 2014 11:24:35 PM JST
$python_path $script $@

* Sat 18 Jan 2014 11:33:58 PM JST
EX_OK
* Sat 18 Jan 2014 11:36:02 PM JST
        if opts.halt:
            ki.halt()

* Sat 18 Jan 2014 11:38:37 PM JST
else
* Sat 18 Jan 2014 11:38:42 PM JST

* Sat 18 Jan 2014 11:38:42 PM JST

* Sat 18 Jan 2014 11:38:42 PM JST
            else:

* Sat 18 Jan 2014 11:45:40 PM JST

* Sat 18 Jan 2014 11:45:40 PM JST

* Sat 18 Jan 2014 11:45:40 PM JST
            ki.wol()

* Sat 18 Jan 2014 11:45:48 PM JST
reuturn 
* Sat 18 Jan 2014 11:46:01 PM JST

* Sat 18 Jan 2014 11:46:01 PM JST

* Sat 18 Jan 2014 11:46:01 PM JST
            sys.exit(0)

* Sat 18 Jan 2014 11:46:14 PM JST
            sys.exit(0)

* Sat 18 Jan 2014 11:46:14 PM JST
            sys.exit(0)
        elif opts.pave:

* Sat 18 Jan 2014 11:46:15 PM JST
            sys.exit(0)
        elif opts.pave:

* Sat 18 Jan 2014 11:46:15 PM JST
            sys.exit(0)
        elif opts.pave:
            ki.wol()

* Sat 18 Jan 2014 11:46:25 PM JST

* Sat 18 Jan 2014 11:46:26 PM JST

* Sat 18 Jan 2014 11:46:26 PM JST
        elif opts.wol:

* Sat 18 Jan 2014 11:46:26 PM JST
        elif opts.wol:

* Sat 18 Jan 2014 11:46:26 PM JST
        elif opts.wol:
            ki.wol()

* Sat 18 Jan 2014 11:47:56 PM JST
confirm
* Sat 18 Jan 2014 11:49:37 PM JST

* Sat 18 Jan 2014 11:49:37 PM JST

* Sat 18 Jan 2014 11:49:37 PM JST
        from confirm import confirm

* Sat 18 Jan 2014 11:50:03 PM JST
check-
* Sat 18 Jan 2014 11:50:33 PM JST
no_decrypt
* Sat 18 Jan 2014 11:52:14 PM JST
os.EX_OK
* Sun 19 Jan 2014 12:02:38 AM JST
    parser.add_argument('--debug',
                        dest='debug',
                        action='store_true',
                        default=False,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='Debug print and logging.')


* Sun 19 Jan 2014 12:05:51 AM JST
isactive
* Sun 19 Jan 2014 12:09:37 AM JST

* Sun 19 Jan 2014 12:09:37 AM JST

* Sun 19 Jan 2014 12:09:37 AM JST
script_path="${HOME}/.zsh/scripts/kin"

* Sun 19 Jan 2014 12:13:09 AM JST

* Sun 19 Jan 2014 12:13:09 AM JST

* Sun 19 Jan 2014 12:13:09 AM JST
king="/root/.pylib/king.py"

* Sun 19 Jan 2014 12:13:10 AM JST

* Sun 19 Jan 2014 12:13:10 AM JST

* Sun 19 Jan 2014 12:13:10 AM JST
[ -e $king ] || exit 1

* Sun 19 Jan 2014 12:13:13 AM JST
king
* Sun 19 Jan 2014 12:24:00 AM JST

* Sun 19 Jan 2014 12:24:00 AM JST

* Sun 19 Jan 2014 12:24:00 AM JST
                        # (yas/expand-link "argparse_other_options" t)

* Sun 19 Jan 2014 12:24:03 AM JST

* Sun 19 Jan 2014 12:24:03 AM JST

* Sun 19 Jan 2014 12:24:03 AM JST
                        # (yas/expand-link "argparse_other_options" t)

* Sun 19 Jan 2014 12:31:20 AM JST

* Sun 19 Jan 2014 12:31:20 AM JST

* Sun 19 Jan 2014 12:31:20 AM JST
        break

* Sun 19 Jan 2014 12:40:29 AM JST

* Sun 19 Jan 2014 12:40:29 AM JST

* Sun 19 Jan 2014 12:40:29 AM JST
import shutil

* Sun 19 Jan 2014 12:43:27 AM JST
ntpdate
* Sun 19 Jan 2014 12:43:28 AM JST
sh.ntpdate
* Sun 19 Jan 2014 04:55:03 AM JST
/**
 * clip.c
 * to compile and link (on X11R7): cc -o clip clip.c -lX11
 * to compile and link (on X11R6): cc -o clip clip.c -L/usr/X11R6/lib{libsuffix} -I/usr/X11R6/include -lX11
 * where libsuffix is 32 or 64 or 128 ( I wish I will get a chance to compile on this architecture ) 
 * depending on your machine word size.
 */
#include <stdio.h>
#include <stdlib.h>

#include <X11/Xlib.h>

#define s_PRIMARY   "PRIMARY"
#define s_CLIPBOARD "CLIPBOARD"

static Atom get_atom(Display*, const char*);
static void print_stuff0(Display*, Atom);

int
main()
{
  Atom a_Primary, a_Clipboard;
  Display* display = NULL;
  char* display_name = NULL;
  char* window_name = NULL;
  Window win;

  if(!(display = XOpenDisplay(display_name)))
    {
      fprintf(stderr, "Error opening %s\n", XDisplayName(display_name));
      return 0;
    }

  a_Primary = get_atom(display, s_PRIMARY);
  a_Clipboard = get_atom(display, s_CLIPBOARD);

  print_stuff0(display, a_Primary);
  print_stuff0(display, a_Clipboard);

  XCloseDisplay(display);
}

void
print_stuff0(Display* display, Atom atom)
{
  Window win;
  char* window_name;
  char* atom_name;

  atom_name = XGetAtomName(display, atom);

  if((win = XGetSelectionOwner(display, atom)) != None)
    {

      XFetchName(display, win, &window_name);
      printf("\"%s\" (WM_NAME of %ld) owns selection of \"%s\" atom.\n", window_name, win, atom_name);
      XFree(window_name);
    }
  else
      printf("No body owns selection \"%s\"\n", atom_name);

}

Atom 
get_atom(Display* display, const char* atom)
{
  Atom a;
  if((a = XInternAtom(display, atom, True)) == None)
    {
      fprintf(stderr, "Oops, \"%s\" atom doesn't exists.\n", atom);
      XCloseDisplay(display);
      exit(2);
    }

  return a;

}
* Sun 19 Jan 2014 04:56:25 AM JST
#include <X11/StringDefs.h>
#include <X11/Xlib.h>
#include <X11/Intrinsic.h>
#include <X11/Xatom.h>

* Sun 19 Jan 2014 04:56:29 AM JST

* Sun 19 Jan 2014 04:56:29 AM JST

* Sun 19 Jan 2014 04:56:29 AM JST
#include <X11/StringDefs.h>

* Sun 19 Jan 2014 04:56:31 AM JST
#include <X11/StringDefs.h>

* Sun 19 Jan 2014 04:56:31 AM JST
#include <X11/StringDefs.h>
#include <X11/Xlib.h>

* Sun 19 Jan 2014 04:56:33 AM JST
#include <X11/StringDefs.h>
#include <X11/Xlib.h>

* Sun 19 Jan 2014 04:56:33 AM JST
#include <X11/StringDefs.h>
#include <X11/Xlib.h>
#include <X11/Intrinsic.h>

* Sun 19 Jan 2014 04:59:59 AM JST
Window win;
* Sun 19 Jan 2014 02:00:58 PM JST
http://michael.toren.net/mirrors/doc/X-copy+paste.txt
* Sun 19 Jan 2014 02:51:24 PM JST
class
* Sun 19 Jan 2014 02:51:46 PM JST
class
* Sun 19 Jan 2014 02:53:20 PM JST
Hidden
* Sun 19 Jan 2014 02:53:51 PM JST

* Sun 19 Jan 2014 02:53:51 PM JST

* Sun 19 Jan 2014 02:53:51 PM JST
  std::string 

* Sun 19 Jan 2014 02:54:02 PM JST
  
* Sun 19 Jan 2014 02:54:03 PM JST
  
* Sun 19 Jan 2014 02:54:15 PM JST
Hidden
* Sun 19 Jan 2014 02:58:46 PM JST
Exit
* Sun 19 Jan 2014 02:59:06 PM JST

* Sun 19 Jan 2014 02:59:06 PM JST

* Sun 19 Jan 2014 02:59:06 PM JST
        std::exit(int __status)

* Sun 19 Jan 2014 02:59:41 PM JST
exit(EXIT_FAILURE);
* Sun 19 Jan 2014 03:00:57 PM JST
int screen_num = DefaultScreen(display);
* Sun 19 Jan 2014 03:03:25 PM JST
XCreateSimpleWindow
* Sun 19 Jan 2014 03:05:03 PM JST
XCreateSimpleWindow
* Sun 19 Jan 2014 03:06:12 PM JST
#include <X11/Xutil.h>
* Sun 19 Jan 2014 03:10:23 PM JST
no matching function for call to 'XCreateSimpleWindow'
* Sun 19 Jan 2014 03:12:24 PM JST
XCreateSimpleWindow(disp, root, 0, 0, 100, 100, 0, BlackPixel(disp, screen), BlackPixel(disp, screen))
* Sun 19 Jan 2014 03:12:51 PM JST
root
* Sun 19 Jan 2014 03:51:39 PM JST
      
* Sun 19 Jan 2014 03:54:45 PM JST
long *
* Sun 19 Jan 2014 03:54:46 PM JST
unsigned long *
* Sun 19 Jan 2014 04:06:15 PM JST
const std::string
* Sun 19 Jan 2014 04:06:28 PM JST
"CLIPBOARD"
* Sun 19 Jan 2014 04:19:29 PM JST
ClipB
* Sun 19 Jan 2014 04:22:43 PM JST
return 
* Sun 19 Jan 2014 04:26:34 PM JST
cs.getOwner()
* Sun 19 Jan 2014 04:38:14 PM JST

* Sun 19 Jan 2014 04:38:15 PM JST

* Sun 19 Jan 2014 04:38:15 PM JST
  std::string getOwner();

* Sun 19 Jan 2014 04:38:27 PM JST

* Sun 19 Jan 2014 04:38:27 PM JST

* Sun 19 Jan 2014 04:38:27 PM JST
  // std::cout << cs.getOwner() << std::endl;

* Sun 19 Jan 2014 04:40:22 PM JST
X Error of failed request:  BadWindow (invalid Window parameter)
* Sun 19 Jan 2014 04:42:10 PM JST
RootWindow(display, screen_num),//parent
* Sun 19 Jan 2014 04:42:31 PM JST
BEGIN_NAMESPACE();
* Sun 19 Jan 2014 04:57:42 PM JST

* Sun 19 Jan 2014 04:57:42 PM JST

* Sun 19 Jan 2014 04:57:42 PM JST
  std::cout << "DEBUG-2-myclip.cc" << std::endl;

* Sun 19 Jan 2014 04:57:43 PM JST

* Sun 19 Jan 2014 04:57:43 PM JST

* Sun 19 Jan 2014 04:57:44 PM JST
  std::cout << "DEBUG-3-myclip.cc" << std::endl;

* Sun 19 Jan 2014 04:57:45 PM JST

* Sun 19 Jan 2014 04:57:45 PM JST

* Sun 19 Jan 2014 04:57:45 PM JST
      std::cout << "DEBUG-4-myclip.cc" << std::endl;

* Sun 19 Jan 2014 04:57:46 PM JST

* Sun 19 Jan 2014 04:57:46 PM JST

* Sun 19 Jan 2014 04:57:46 PM JST
      std::cout << "DEBUG-5-myclip.cc" << std::endl;

* Sun 19 Jan 2014 04:57:50 PM JST

* Sun 19 Jan 2014 04:57:50 PM JST

* Sun 19 Jan 2014 04:57:50 PM JST
      std::cout << "DEBUG-6-myclip.cc" << std::endl;

* Sun 19 Jan 2014 04:58:03 PM JST
Atom
ClipBoard::getAtom(const std::string &atom)
{
  Atom a;
  if ((a = XInternAtom(display, atom.c_str(), True)) == None) {
    std::cerr << "Can't find atom: " << atom << std::endl;
    exit(EXIT_FAILURE);
  }
  return a;
}


* Sun 19 Jan 2014 04:58:12 PM JST

* Sun 19 Jan 2014 04:58:12 PM JST

* Sun 19 Jan 2014 04:58:12 PM JST
  std::cout << "DEBUG-1-myclip.cc" << std::endl;

* Sun 19 Jan 2014 05:06:35 PM JST
x, y
* Sun 19 Jan 2014 05:06:42 PM JST
                                 
* Sun 19 Jan 2014 05:07:23 PM JST
                                 
* Sun 19 Jan 2014 05:07:28 PM JST
                                 
* Sun 19 Jan 2014 05:07:55 PM JST
0, 0);
* Sun 19 Jan 2014 05:09:08 PM JST
DefaultScreen(display)
* Sun 19 Jan 2014 05:09:17 PM JST
//parent
* Sun 19 Jan 2014 05:09:20 PM JST

* Sun 19 Jan 2014 05:09:20 PM JST

* Sun 19 Jan 2014 05:09:20 PM JST
  int screen_num = DefaultScreen(display);

* Sun 19 Jan 2014 05:09:45 PM JST
DefaultRootWindow
* Sun 19 Jan 2014 05:48:51 PM JST
XA_
* Sun 19 Jan 2014 05:49:52 PM JST
getAtom("CLIPBOARD")
* Sun 19 Jan 2014 05:50:51 PM JST

* Sun 19 Jan 2014 05:50:51 PM JST

* Sun 19 Jan 2014 05:50:51 PM JST
  std::cout << "DEBUG-1-myclip.cc" << getAtom("CLIPBOARD") << std::endl;

* Sun 19 Jan 2014 06:07:46 PM JST
XInternAtom
* Sun 19 Jan 2014 06:10:28 PM JST
XInternAtom
* Sun 19 Jan 2014 06:16:53 PM JST
include <>
* Sun 19 Jan 2014 06:17:24 PM JST
XInternAtom(display, atom.c_str(), True)
* Sun 19 Jan 2014 06:19:44 PM JST
getAtom
* Sun 19 Jan 2014 06:20:13 PM JST
XA_CLIPBOARD
* Sun 19 Jan 2014 06:24:31 PM JST

* Sun 19 Jan 2014 06:24:31 PM JST

* Sun 19 Jan 2014 06:24:31 PM JST
  Atom XA_CLIPBOARD;

* Sun 19 Jan 2014 06:29:31 PM JST
あ
* Sun 19 Jan 2014 06:34:27 PM JST
#define
* Sun 19 Jan 2014 06:35:41 PM JST
"UTF8_STRING"
* Sun 19 Jan 2014 06:35:53 PM JST
                    
* Sun 19 Jan 2014 06:36:17 PM JST
あ
* Sun 19 Jan 2014 06:37:02 PM JST
XConvertSelection(display,
* Sun 19 Jan 2014 06:39:13 PM JST
getAtom("CLIPBOARD")
* Sun 19 Jan 2014 06:40:23 PM JST
"UTF8_STRING"
* Sun 19 Jan 2014 06:40:30 PM JST

* Sun 19 Jan 2014 06:40:30 PM JST

* Sun 19 Jan 2014 06:40:30 PM JST
    // XA_CLIPBOARD = getAtom("CLIPBOARD");

* Sun 19 Jan 2014 06:40:36 PM JST
clipboard_atom
* Sun 19 Jan 2014 06:41:01 PM JST
あ
* Sun 19 Jan 2014 06:41:27 PM JST

* Sun 19 Jan 2014 06:41:27 PM JST

* Sun 19 Jan 2014 06:41:27 PM JST
                    // getAtom("CLIPBOARD"),

* Sun 19 Jan 2014 06:41:28 PM JST

* Sun 19 Jan 2014 06:41:28 PM JST

* Sun 19 Jan 2014 06:41:28 PM JST
                    // getAtom("UTF8_STRING"),

* Sun 19 Jan 2014 06:41:32 PM JST

* Sun 19 Jan 2014 06:41:32 PM JST

* Sun 19 Jan 2014 06:41:32 PM JST
                    // XA_STRING,

* Sun 19 Jan 2014 06:41:36 PM JST
utf8_string_atom
* Sun 19 Jan 2014 06:41:51 PM JST
あ
* Sun 19 Jan 2014 06:42:18 PM JST

* Sun 19 Jan 2014 06:42:18 PM JST

* Sun 19 Jan 2014 06:42:18 PM JST
                    // XA_STRING,

* Sun 19 Jan 2014 06:48:40 PM JST
x_server_clipboard
* Sun 19 Jan 2014 10:08:31 PM JST
sbp.Popen('/opt/v2c/v2c')
* Sun 19 Jan 2014 10:08:56 PM JST

* Sun 19 Jan 2014 10:08:56 PM JST

* Sun 19 Jan 2014 10:08:56 PM JST
    active = wm.active.ActiveWindow()

* Sun 19 Jan 2014 10:08:56 PM JST
    active = wm.active.ActiveWindow()

* Sun 19 Jan 2014 10:08:56 PM JST
    active = wm.active.ActiveWindow()
    sbp.call((os.path.expanduser('~/.zsh/scripts/v2'), ))

* Sun 19 Jan 2014 10:08:57 PM JST
    active = wm.active.ActiveWindow()
    sbp.call((os.path.expanduser('~/.zsh/scripts/v2'), ))

* Sun 19 Jan 2014 10:08:57 PM JST
    active = wm.active.ActiveWindow()
    sbp.call((os.path.expanduser('~/.zsh/scripts/v2'), ))
    sleep(1)

* Sun 19 Jan 2014 10:08:58 PM JST
    active = wm.active.ActiveWindow()
    sbp.call((os.path.expanduser('~/.zsh/scripts/v2'), ))
    sleep(1)

* Sun 19 Jan 2014 10:08:58 PM JST
    active = wm.active.ActiveWindow()
    sbp.call((os.path.expanduser('~/.zsh/scripts/v2'), ))
    sleep(1)
    active.activate()

* Sun 19 Jan 2014 10:09:01 PM JST
filepath = sikuli.SKL_FILE.get('v2c', None)
* Sun 19 Jan 2014 10:09:06 PM JST
    if filepath:
        sikuli.sikulirun(filepath)

* Sun 19 Jan 2014 10:09:12 PM JST
from ref.CMD import sikuli
* Sun 19 Jan 2014 10:09:54 PM JST

* Sun 19 Jan 2014 10:09:54 PM JST

* Sun 19 Jan 2014 10:09:54 PM JST
from ref.CMD import sikuli

* Sun 19 Jan 2014 10:57:58 PM JST

* Sun 19 Jan 2014 10:57:58 PM JST

* Sun 19 Jan 2014 10:57:58 PM JST
  void setText();

* Sun 19 Jan 2014 11:05:42 PM JST
XChangeProperty
* Mon 20 Jan 2014 12:44:44 AM JST
  
* Mon 20 Jan 2014 12:46:17 AM JST
XA_UTF8_STRING
* Mon 20 Jan 2014 12:46:21 AM JST

* Mon 20 Jan 2014 12:46:44 AM JST
XA_CLIPBOARD
* Mon 20 Jan 2014 12:58:59 AM JST
clipboard
* Mon 20 Jan 2014 12:59:00 AM JST
clipboard_atom
* Mon 20 Jan 2014 12:59:18 AM JST
dummy_clipboard_window
* Mon 20 Jan 2014 01:10:34 AM JST
SelectionRequest
* Mon 20 Jan 2014 01:11:14 AM JST
    
* Mon 20 Jan 2014 01:11:25 AM JST
SelectionRequest
* Mon 20 Jan 2014 01:14:18 AM JST
*win = evt.xselectionrequest.requestor;
* Mon 20 Jan 2014 01:15:21 AM JST
evt.xselectionrequest.property
* Mon 20 Jan 2014 01:16:59 AM JST
                      ev.x
* Mon 20 Jan 2014 01:17:00 AM JST
requestor
* Mon 20 Jan 2014 01:17:36 AM JST
ATOM
* Mon 20 Jan 2014 01:17:36 AM JST
XA_ATOM
* Mon 20 Jan 2014 01:19:58 AM JST
(int) 
* Mon 20 Jan 2014 01:20:00 AM JST
                      
* Mon 20 Jan 2014 01:23:20 AM JST
ev.xselectionrequest.requestor
* Mon 20 Jan 2014 01:23:40 AM JST
ev.xselectionrequest.requestor);
* Mon 20 Jan 2014 01:23:52 AM JST
ev.xselectionrequest.requestor
* Mon 20 Jan 2014 01:24:10 AM JST
Atom * pty
* Mon 20 Jan 2014 01:24:20 AM JST
ev.xselectionrequest.property
* Mon 20 Jan 2014 01:31:23 AM JST
reinterpret_cast<unsigned char*>(
                        const_cast<char*>
* Mon 20 Jan 2014 01:31:30 AM JST
                                                       
* Mon 20 Jan 2014 01:31:39 AM JST
                                                       
* Mon 20 Jan 2014 01:32:33 AM JST
length
* Mon 20 Jan 2014 01:32:37 AM JST
size
* Mon 20 Jan 2014 01:38:39 AM JST
setText
* Mon 20 Jan 2014 01:39:34 AM JST

* Mon 20 Jan 2014 01:39:34 AM JST

* Mon 20 Jan 2014 01:39:35 AM JST
      XSendEvent(display, ev.xselectionrequest.requestor, 0, 0, &reply);

* Mon 20 Jan 2014 01:40:42 AM JST
ev.xselectionrequest.requestor
* Mon 20 Jan 2014 01:40:53 AM JST
ev.xselectionrequest.property
* Mon 20 Jan 2014 01:41:05 AM JST
ev.xselectionrequest.requestor
* Mon 20 Jan 2014 01:41:09 AM JST
ev.xselectionrequest.property
* Mon 20 Jan 2014 01:41:18 AM JST
ev.xselectionrequest.requestor
* Mon 20 Jan 2014 01:41:42 AM JST
k length to the maximum size */
	chunk_len = chunk_size;

	/* if a chunk length of maximum size would extend
	 * beyond the end ot txt, set the len
* Mon 20 Jan 2014 01:43:03 AM JST
break;
* Mon 20 Jan 2014 01:55:00 AM JST

* Mon 20 Jan 2014 01:55:00 AM JST

* Mon 20 Jan 2014 01:55:00 AM JST
      Atom * property;

* Mon 20 Jan 2014 01:55:00 AM JST
      Atom * property;

* Mon 20 Jan 2014 01:55:00 AM JST
      Atom * property;
      // *win = ev.xselectionrequest.requestor;

* Mon 20 Jan 2014 01:55:02 AM JST

* Mon 20 Jan 2014 01:55:02 AM JST

* Mon 20 Jan 2014 01:55:02 AM JST
      Window *win;

* Mon 20 Jan 2014 02:14:44 AM JST
hello
* Mon 20 Jan 2014 02:24:10 AM JST
kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk
* Mon 20 Jan 2014 02:31:04 AM JST
a 07 legendado
* Mon 20 Jan 2014 02:31:11 AM JST
hello
* Mon 20 Jan 2014 02:44:46 AM JST

* Mon 20 Jan 2014 02:44:46 AM JST

* Mon 20 Jan 2014 02:44:47 AM JST
      XEvent reply;

* Mon 20 Jan 2014 02:44:58 AM JST
xselectionrequest.
* Mon 20 Jan 2014 02:44:59 AM JST
xselectionrequest.
* Mon 20 Jan 2014 02:44:59 AM JST
xselectionrequest.
* Mon 20 Jan 2014 02:44:59 AM JST
xselectionrequest.
* Mon 20 Jan 2014 02:44:59 AM JST
xselectionrequest.
* Mon 20 Jan 2014 02:44:59 AM JST
xselectionrequest.
* Mon 20 Jan 2014 02:44:59 AM JST
xselectionrequest.
* Mon 20 Jan 2014 02:57:50 AM JST
git clone git://git.gnome.org/gtk+
* Mon 20 Jan 2014 03:04:05 AM JST
gtk_clipboard_set_with_data
* Mon 20 Jan 2014 03:07:39 AM JST
time
* Mon 20 Jan 2014 03:18:14 AM JST
xselectionrequest.
* Mon 20 Jan 2014 03:21:25 AM JST
reinterpret_cast<XEvent*>
* Mon 20 Jan 2014 03:56:14 AM JST

* Mon 20 Jan 2014 03:56:14 AM JST

* Mon 20 Jan 2014 03:56:14 AM JST
  void SendTimestampResponse(Window requestor, Atom property);

* Mon 20 Jan 2014 03:59:55 AM JST

* Mon 20 Jan 2014 03:59:55 AM JST

* Mon 20 Jan 2014 03:59:55 AM JST
  void SendStringResponse(Window)

* Mon 20 Jan 2014 04:00:37 AM JST
Window requestor, Atom property
* Mon 20 Jan 2014 04:03:42 AM JST
"TIMESTAMP"
* Mon 20 Jan 2014 04:09:11 AM JST
<X11/extensions/Xfixes.h>
* Mon 20 Jan 2014 04:09:31 AM JST
void
* Mon 20 Jan 2014 04:10:09 AM JST
selections_owned_
* Mon 20 Jan 2014 04:30:27 AM JST
XChangeProperty
* Mon 20 Jan 2014 04:33:15 AM JST
enchantia.com/graphapp/package/src/x11/
* Mon 20 Jan 2014 04:45:40 AM JST

* Mon 20 Jan 2014 04:45:40 AM JST

* Mon 20 Jan 2014 04:45:40 AM JST
  bool IsSelectionOwner(Atom selection);

* Mon 20 Jan 2014 04:52:45 AM JST
XChangeProperty
* Mon 20 Jan 2014 04:57:41 AM JST
XA_
* Mon 20 Jan 2014 05:10:12 AM JST
SetEventFilter
* Mon 20 Jan 2014 05:10:50 AM JST
closed
* Mon 20 Jan 2014 05:14:57 AM JST
Internet
* Mon 20 Jan 2014 05:23:51 AM JST
include
* Mon 20 Jan 2014 05:31:32 AM JST
QClipboard
* Mon 20 Jan 2014 05:32:36 AM JST
tst
* Mon 20 Jan 2014 03:31:13 PM JST
CMD
* Mon 20 Jan 2014 03:32:43 PM JST
listutil
* Mon 20 Jan 2014 03:32:45 PM JST

* Mon 20 Jan 2014 03:32:45 PM JST

* Mon 20 Jan 2014 03:32:45 PM JST
import 

* Mon 20 Jan 2014 03:33:46 PM JST

* Mon 20 Jan 2014 03:33:46 PM JST

* Mon 20 Jan 2014 03:33:46 PM JST
    return ''

* Mon 20 Jan 2014 03:37:59 PM JST
get_latest_path()
* Mon 20 Jan 2014 03:38:18 PM JST
path
* Mon 20 Jan 2014 03:38:19 PM JST
_os.path
* Mon 20 Jan 2014 03:38:21 PM JST
_os.path
* Mon 20 Jan 2014 03:38:21 PM JST
_os.pathBASEDIR = 

* Mon 20 Jan 2014 03:39:22 PM JST
link
* Mon 20 Jan 2014 03:41:02 PM JST
real
* Mon 20 Jan 2014 03:43:50 PM JST
    realpath = getrealpath()
    if not realpath:
        return ''
    weekday = WEEK.get(datetime.date.today().weekday())
    recipe_latest_path = _os.path.join(realpath, weekday)
    return recipe_latest_path

* Mon 20 Jan 2014 03:44:09 PM JST
realpath
* Mon 20 Jan 2014 03:45:18 PM JST
WEEK
* Mon 20 Jan 2014 03:45:37 PM JST
_os.path.join(self.weekdir, weekday)
* Mon 20 Jan 2014 03:45:40 PM JST

* Mon 20 Jan 2014 03:45:40 PM JST

* Mon 20 Jan 2014 03:45:40 PM JST
        recipe_latest_path = 

* Mon 20 Jan 2014 03:46:24 PM JST
def get_today_menus():
    r"""SUMMARY

    get_today_menus()

    @Return:
    """
    try:
        menulist = _os.listdir(get_latest_path())
    except OSError:
        menulist = ()
    menus, append = listutil.list_append()
    for elem in menulist:
        fname, _ = _os.path.splitext(elem)
        append(fname)
    return menus

* Mon 20 Jan 2014 03:47:11 PM JST

* Mon 20 Jan 2014 03:47:11 PM JST

* Mon 20 Jan 2014 03:47:11 PM JST
import os as _os

* Mon 20 Jan 2014 03:47:18 PM JST
_os.
* Mon 20 Jan 2014 03:47:21 PM JST
_os.
* Mon 20 Jan 2014 03:47:26 PM JST
_os.
* Mon 20 Jan 2014 03:47:28 PM JST
_os.
* Mon 20 Jan 2014 03:47:32 PM JST
_os.
* Mon 20 Jan 2014 03:47:35 PM JST
_os.
* Mon 20 Jan 2014 03:47:37 PM JST
_os.
* Mon 20 Jan 2014 03:50:40 PM JST
    realpath = getrealpath()
    if realpath:
        dirnum = int(path.basename(realpath))
        if dirnum == MAXDIRNUM:
            dirnum = 1
        else:
            dirnum += 1
        unlink(LINKPATH)
        symlink(path.join(BASEDIR, str(dirnum),), LINKPATH)
    else:
        if path.exists(LINKPATH):
            remove(LINKPATH)
        symlink(path.join(BASEDIR, '1'), LINKPATH)

* Mon 20 Jan 2014 03:51:42 PM JST
self.weekdir
* Mon 20 Jan 2014 03:51:45 PM JST

* Mon 20 Jan 2014 03:51:45 PM JST

* Mon 20 Jan 2014 03:51:45 PM JST
        realpath = 

* Mon 20 Jan 2014 03:52:42 PM JST
MAXDIRNUM = 4
* Mon 20 Jan 2014 03:53:19 PM JST
MAXDIRNUM
* Mon 20 Jan 2014 03:54:41 PM JST
LINKPATH
* Mon 20 Jan 2014 04:01:21 PM JST
self._dirlinkname
* Mon 20 Jan 2014 04:08:40 PM JST

* Mon 20 Jan 2014 04:08:40 PM JST

* Mon 20 Jan 2014 04:08:40 PM JST
    @property

* Mon 20 Jan 2014 04:09:46 PM JST
return path.join(self._basedir, self._dirlinkname)
* Mon 20 Jan 2014 04:09:49 PM JST

* Mon 20 Jan 2014 04:09:50 PM JST

* Mon 20 Jan 2014 04:09:50 PM JST
        return path.join(self._basedir, self._dirlinkname)

* Mon 20 Jan 2014 04:09:56 PM JST
_dirlinkname
* Mon 20 Jan 2014 04:12:52 PM JST

* Mon 20 Jan 2014 04:12:52 PM JST

* Mon 20 Jan 2014 04:12:52 PM JST
            print('DEBUG-1-recipe.py')

* Mon 20 Jan 2014 04:12:53 PM JST

* Mon 20 Jan 2014 04:12:53 PM JST

* Mon 20 Jan 2014 04:12:53 PM JST
        print('DEBUG-2-recipe.py')

* Mon 20 Jan 2014 04:13:47 PM JST

* Mon 20 Jan 2014 04:13:47 PM JST

* Mon 20 Jan 2014 04:13:47 PM JST
    @property

* Mon 20 Jan 2014 04:18:05 PM JST
weekdirlink
* Mon 20 Jan 2014 04:18:45 PM JST
LINKPATH
* Mon 20 Jan 2014 04:18:51 PM JST
LINKPATH
* Mon 20 Jan 2014 04:18:58 PM JST
LINKPATH
* Mon 20 Jan 2014 04:19:15 PM JST
BASEDIR
* Mon 20 Jan 2014 04:22:29 PM JST
path.join(self._basedir, str(dirnum),)
* Mon 20 Jan 2014 04:23:01 PM JST

* Mon 20 Jan 2014 04:23:01 PM JST

* Mon 20 Jan 2014 04:23:01 PM JST
            return (dir_, self.weekdirlink)

* Mon 20 Jan 2014 04:24:32 PM JST
latest
* Mon 20 Jan 2014 04:24:45 PM JST
LATEST
* Mon 20 Jan 2014 04:24:52 PM JST
WEEK
* Mon 20 Jan 2014 04:24:57 PM JST
LATEST
* Mon 20 Jan 2014 04:27:35 PM JST

* Mon 20 Jan 2014 04:27:35 PM JST

* Mon 20 Jan 2014 04:27:35 PM JST
        if :

* Mon 20 Jan 2014 04:28:05 PM JST
self._todaylinkname
* Mon 20 Jan 2014 04:28:18 PM JST
self.
* Mon 20 Jan 2014 04:30:18 PM JST
pass
* Mon 20 Jan 2014 04:30:28 PM JST
weekd
* Mon 20 Jan 2014 04:30:51 PM JST

* Mon 20 Jan 2014 04:30:51 PM JST

* Mon 20 Jan 2014 04:30:51 PM JST
        dir_ = path.

* Mon 20 Jan 2014 04:30:59 PM JST
            
* Mon 20 Jan 2014 04:31:40 PM JST
self.todaylink
* Mon 20 Jan 2014 04:31:47 PM JST
(self.todaydir, self.todaylink)
* Mon 20 Jan 2014 04:36:27 PM JST
    recipe
* Mon 20 Jan 2014 04:37:24 PM JST

* Mon 20 Jan 2014 04:37:24 PM JST

* Mon 20 Jan 2014 04:37:24 PM JST
        # os.system('export DISPLAY=:0 && ' + thunar.BINPATH + ' ' + recipe_latest_path)

* Mon 20 Jan 2014 04:37:55 PM JST

* Mon 20 Jan 2014 04:37:55 PM JST

* Mon 20 Jan 2014 04:37:56 PM JST
    # recipe_latest_path = recipe.get_latest_path()

* Mon 20 Jan 2014 04:37:58 PM JST

* Mon 20 Jan 2014 04:37:58 PM JST

* Mon 20 Jan 2014 04:37:58 PM JST
    # parser.print_usage()

* Mon 20 Jan 2014 04:43:53 PM JST

* Mon 20 Jan 2014 04:43:53 PM JST

* Mon 20 Jan 2014 04:43:53 PM JST
        # recipe.rotate_link()

* Mon 20 Jan 2014 04:45:41 PM JST
        weekday = self._subdirname.get(datetime.date.today().weekday())
        return path.join(self.weekdir, weekday)

* Mon 20 Jan 2014 04:48:23 PM JST
datetime.date.today() + 
* Mon 20 Jan 2014 04:49:26 PM JST
        weekday = self._subdirname.get(datetime.date.today().weekday())
        return path.join(self.weekdir, weekday)


* Mon 20 Jan 2014 04:49:43 PM JST
datetime.date.today()
* Mon 20 Jan 2014 04:53:10 PM JST
return 
* Mon 20 Jan 2014 04:53:29 PM JST
todaydir
* Mon 20 Jan 2014 04:53:29 PM JST
self.todaydir
* Mon 20 Jan 2014 04:55:41 PM JST

* Mon 20 Jan 2014 04:55:41 PM JST

* Mon 20 Jan 2014 04:55:42 PM JST
    re

* Mon 20 Jan 2014 04:56:37 PM JST
datetime.
* Mon 20 Jan 2014 05:00:43 PM JST
datetim
* Mon 20 Jan 2014 05:00:49 PM JST
D 
* Mon 20 Jan 2014 05:01:15 PM JST
print 
* Mon 20 Jan 2014 05:02:16 PM JST
time()
* Mon 20 Jan 2014 05:03:33 PM JST
time.strftime('%H')
* Mon 20 Jan 2014 05:05:44 PM JST
36000
* Mon 20 Jan 2014 05:06:43 PM JST
tim
* Mon 20 Jan 2014 05:09:46 PM JST
time 
* Mon 20 Jan 2014 05:09:46 PM JST
current time 
* Mon 20 Jan 2014 05:10:18 PM JST
 # next day
* Mon 20 Jan 2014 05:10:27 PM JST
yesterday if in midnight
* Mon 20 Jan 2014 05:10:33 PM JST

* Mon 20 Jan 2014 05:10:33 PM JST

* Mon 20 Jan 2014 05:10:33 PM JST
    # set yesterday if in midnight

* Mon 20 Jan 2014 05:10:50 PM JST
# yesterday if in midnight
* Mon 20 Jan 2014 05:37:43 PM JST
SimpleHTTPServer
* Mon 20 Jan 2014 05:55:25 PM JST
SimpleHTTPRequestHandler
* Mon 20 Jan 2014 06:00:34 PM JST
path.
* Mon 20 Jan 2014 06:04:11 PM JST

* Mon 20 Jan 2014 06:04:11 PM JST

* Mon 20 Jan 2014 06:04:11 PM JST
import sys

* Mon 20 Jan 2014 06:04:11 PM JST
import sys

* Mon 20 Jan 2014 06:04:11 PM JST
import sys
import re

* Mon 20 Jan 2014 06:04:41 PM JST
from SimpleHTTPServer import SimpleHTTPRequestHandler
import BaseHTTPServer
from ref import recipe

os.chdir(recipe.Recipe()._basedir)
server_class = BaseHTTPServer.HTTPServer
httpd = server_class(('', 8000), SimpleHTTPRequestHandler)
try:
    httpd.serve_forever()
except KeyboardInterrupt:
    pass

* Mon 20 Jan 2014 06:05:11 PM JST
recipe.
* Mon 20 Jan 2014 06:06:31 PM JST
, remove, unlink, symlink
* Mon 20 Jan 2014 06:06:32 PM JST
listdir, 
* Mon 20 Jan 2014 06:07:39 PM JST
_test()
* Mon 20 Jan 2014 06:07:41 PM JST
_test()
* Mon 20 Jan 2014 06:10:20 PM JST

* Mon 20 Jan 2014 06:10:20 PM JST

* Mon 20 Jan 2014 06:10:21 PM JST
[ -x $script_path ] || exit 1

* Mon 20 Jan 2014 06:10:28 PM JST
recipe.
* Mon 20 Jan 2014 06:13:56 PM JST
~/.zsh/scripts/
* Mon 20 Jan 2014 06:14:57 PM JST
#! /bin/sh
### BEGIN INIT INFO
# Provides:          hostname
# Required-Start:
# Required-Stop:
# Should-Start:      glibc
# Default-Start:     S
# Default-Stop:
# Short-Description: Set hostname based on /etc/hostname
# Description:       Read the machines hostname from /etc/hostname, and
#                    update the kernel value with this value.  If
#                    /etc/hostname is empty, the current kernel value
#                    for hostname is used.  If the kernel value is
#                    empty, the value 'localhost' is used.
### END INIT INFO

PATH=/sbin:/bin

. /lib/init/vars.sh
. /lib/lsb/init-functions

do_start () {
	[ -f /etc/hostname ] && HOSTNAME="$(cat /etc/hostname)"

	# Keep current name if /etc/hostname is missing.
	[ -z "$HOSTNAME" ] && HOSTNAME="$(hostname)"

	# And set it to 'localhost' if no setting was found
	[ -z "$HOSTNAME" ] && HOSTNAME=localhost

	[ "$VERBOSE" != no ] && log_action_begin_msg "Setting hostname to '$HOSTNAME'"
	hostname "$HOSTNAME"
	ES=$?
	[ "$VERBOSE" != no ] && log_action_end_msg $ES
	exit $ES
}

do_status () {
	HOSTNAME=$(hostname)
	if [ "$HOSTNAME" ] ; then
		return 0
	else
		return 4
	fi
}

case "$1" in
  start|"")
	do_start
	;;
  restart|reload|force-reload)
	echo "Error: argument '$1' not supported" >&2
	exit 3
	;;
  stop)
	# No-op
	;;
  status)
	do_status
	exit $?
	;;
  *)
	echo "Usage: hostname.sh [start|stop]" >&2
	exit 3
	;;
esac

:

* Mon 20 Jan 2014 06:15:27 PM JST
hostname
* Mon 20 Jan 2014 06:16:39 PM JST

* Mon 20 Jan 2014 06:16:39 PM JST

* Mon 20 Jan 2014 06:16:39 PM JST
    python_path="/usr/bin/python"

* Mon 20 Jan 2014 06:16:41 PM JST

* Mon 20 Jan 2014 06:16:41 PM JST

* Mon 20 Jan 2014 06:16:41 PM JST
    #!/bin/sh

* Mon 20 Jan 2014 06:16:42 PM JST
name
* Mon 20 Jan 2014 06:16:49 PM JST

* Mon 20 Jan 2014 06:16:49 PM JST

* Mon 20 Jan 2014 06:16:50 PM JST
    [ -x $python_path ] || exit 1

* Mon 20 Jan 2014 06:16:57 PM JST

* Mon 20 Jan 2014 06:16:57 PM JST

* Mon 20 Jan 2014 06:16:57 PM JST
    xfce4-terminal --command="$python_path $script_path $@"

* Mon 20 Jan 2014 06:18:59 PM JST

* Mon 20 Jan 2014 06:18:59 PM JST

* Mon 20 Jan 2014 06:18:59 PM JST
. /lib/init/vars.sh

* Mon 20 Jan 2014 06:19:01 PM JST

* Mon 20 Jan 2014 06:19:01 PM JST

* Mon 20 Jan 2014 06:19:01 PM JST
. /lib/init/vars.sh

* Mon 20 Jan 2014 06:19:01 PM JST
. /lib/init/vars.sh

* Mon 20 Jan 2014 06:19:01 PM JST
. /lib/init/vars.sh
. /lib/lsb/init-functions

* Mon 20 Jan 2014 06:24:34 PM JST

* Mon 20 Jan 2014 06:24:34 PM JST

* Mon 20 Jan 2014 06:24:34 PM JST
    echo "hello"

* Mon 20 Jan 2014 06:25:23 PM JST
script_path
* Mon 20 Jan 2014 06:28:57 PM JST
/root/.pylib:/root/.emacs.d/data_e/pylib
* Mon 20 Jan 2014 06:30:39 PM JST
. /lib/init/vars.sh
. /lib/lsb/init-functions

* Mon 20 Jan 2014 06:31:20 PM JST

* Mon 20 Jan 2014 06:31:20 PM JST

* Mon 20 Jan 2014 06:31:20 PM JST
PYTHONPATH="/root/.pylib:/root/.emacs.d/data_e/pylib"

* Mon 20 Jan 2014 06:32:24 PM JST

* Mon 20 Jan 2014 06:32:25 PM JST

* Mon 20 Jan 2014 06:32:25 PM JST
#!/bin/sh

* Mon 20 Jan 2014 06:32:26 PM JST

* Mon 20 Jan 2014 06:32:26 PM JST

* Mon 20 Jan 2014 06:32:26 PM JST
#!/bin/sh

* Mon 20 Jan 2014 06:33:02 PM JST
python_path="/usr/bin/python"

[ -x $python_path ] || exit 1
$python_path -m ref.recipe&

* Mon 20 Jan 2014 06:33:52 PM JST
PYTHONPATH="/root/.pylib:/root/.emacs.d/data_e/pylib"
* Mon 20 Jan 2014 06:34:11 PM JST

* Mon 20 Jan 2014 06:34:11 PM JST

* Mon 20 Jan 2014 06:34:11 PM JST
    PYTHONPATH="/root/.pylib:/root/.emacs.d/data_e/pylib"

* Mon 20 Jan 2014 06:35:34 PM JST
PYTHONPATH="/root/.pylib:/root/.emacs.d/data_e/pylib"
* Mon 20 Jan 2014 06:35:56 PM JST

* Mon 20 Jan 2014 06:35:56 PM JST

* Mon 20 Jan 2014 06:35:56 PM JST
    PYTHONPATH=/root/.pylib:/root/.emacs.d/data_e/pylib

* Mon 20 Jan 2014 06:39:58 PM JST
PYTHONPATH=/root/.pylib:/root/.emacs.d/data_e/pylib
* Mon 20 Jan 2014 06:40:00 PM JST
PYTHONPATH=/root/.pylib:/root/.emacs.d/data_e/pylib
* Mon 20 Jan 2014 09:35:37 PM JST
    from SimpleHTTPServer import SimpleHTTPRequestHandler
    import BaseHTTPServer
    from ref import recipe
    os.chdir(Recipe().basedir)
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class(('', 8000), SimpleHTTPRequestHandler)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass

* Mon 20 Jan 2014 09:39:41 PM JST

* Mon 20 Jan 2014 09:39:42 PM JST

* Mon 20 Jan 2014 09:39:42 PM JST
    cd /root/recipe

* Mon 20 Jan 2014 09:45:12 PM JST
$python_path
* Mon 20 Jan 2014 09:45:53 PM JST
/usr/bin/python
* Mon 20 Jan 2014 09:51:16 PM JST
# python_path="/usr/bin/python"
* Mon 20 Jan 2014 09:51:27 PM JST
$python_path "/root/.zsh/scripts/reciped.py"
* Mon 20 Jan 2014 09:52:12 PM JST
restart|
* Mon 20 Jan 2014 09:53:31 PM JST
do_stop
* Mon 20 Jan 2014 09:54:04 PM JST

* Mon 20 Jan 2014 09:54:04 PM JST

* Mon 20 Jan 2014 09:54:04 PM JST
	# No-op

* Mon 20 Jan 2014 09:54:45 PM JST

* Mon 20 Jan 2014 09:54:45 PM JST

* Mon 20 Jan 2014 09:54:45 PM JST
        exit 0

* Mon 20 Jan 2014 09:54:58 PM JST

* Mon 20 Jan 2014 09:54:58 PM JST

* Mon 20 Jan 2014 09:54:58 PM JST
        do_stop

* Mon 20 Jan 2014 09:56:09 PM JST

* Mon 20 Jan 2014 09:56:10 PM JST

* Mon 20 Jan 2014 09:56:10 PM JST
        exit 0

* Mon 20 Jan 2014 09:56:22 PM JST

* Mon 20 Jan 2014 09:56:22 PM JST

* Mon 20 Jan 2014 09:56:22 PM JST
            print(ps.name + ' killing')

* Mon 20 Jan 2014 10:08:06 PM JST

* Mon 20 Jan 2014 10:08:06 PM JST

* Mon 20 Jan 2014 10:08:06 PM JST
PYTHONPATH=/root/.pylib:/root/.emacs.d/data_e/pylib

* Mon 20 Jan 2014 10:08:33 PM JST
ja_JP.UTF-8
* Mon 20 Jan 2014 10:08:42 PM JST
QU /etc/init.d# 
* Mon 20 Jan 2014 10:30:35 PM JST
clean_today_recipe
* Mon 20 Jan 2014 10:35:48 PM JST
recipe.Recipe().todaydir
* Mon 20 Jan 2014 10:36:50 PM JST
wm.WinWait().close(klass='Thunar')
* Mon 20 Jan 2014 10:37:15 PM JST
def archive_recipe():
    r"""SUMMARY

    archive_recipe()

    @Return:
    """
    thunar.side_by_side('/data/archive/recipe', recipe.Recipe().todaydir)
    wm.WinWait().close(klass='Thunar')



* Mon 20 Jan 2014 10:37:32 PM JST
    ## archive recipe
    archive_recipe()


* Mon 20 Jan 2014 11:17:25 PM JST
    next_recipe = thunar.ThunarWMHandle(recipe.Recipe().todaydir)
    next_recipe.open()
    next_recipe.move(x=145, y=95, height=761, width=945)

* Mon 20 Jan 2014 11:18:20 PM JST
RECIPEDIR
* Mon 20 Jan 2014 11:21:13 PM JST
x=0, y=0, height=1002, width=640
* Mon 20 Jan 2014 11:21:20 PM JST
next_
* Mon 20 Jan 2014 11:21:32 PM JST
next_
* Mon 20 Jan 2014 11:21:35 PM JST
next_
* Mon 20 Jan 2014 11:21:53 PM JST
thunar.ThunarWMHandle(RECIPEDIR)
* Mon 20 Jan 2014 11:22:13 PM JST
'/data/archive/recipe'
* Mon 20 Jan 2014 11:22:27 PM JST
recipedir.open()                                         
* Mon 20 Jan 2014 11:22:39 PM JST
E, ''
* Mon 20 Jan 2014 11:22:51 PM JST
x=0, y=0, height=1002, width=640
* Mon 20 Jan 2014 11:23:59 PM JST
        archivedir = thunar.ThunarWMHandle('/data/archive/recipe')
        archivedir.open()
        archivedir.move(x=0, y=640, height=1002, width=640)

        recipedir = thunar.ThunarWMHandle(RECIPEDIR)
        recipedir.open()
        recipedir.move(x=0, y=0, height=1002, width=640)

* Mon 20 Jan 2014 11:29:15 PM JST
r.weekdir
* Mon 20 Jan 2014 11:29:22 PM JST
recipe.Recipe().todaydir
* Mon 20 Jan 2014 11:29:34 PM JST
todaydir
* Mon 20 Jan 2014 11:30:29 PM JST

* Mon 20 Jan 2014 11:30:29 PM JST

* Mon 20 Jan 2014 11:30:29 PM JST
    sleep(1)

* Mon 20 Jan 2014 11:32:36 PM JST
    archivedir = thunar.ThunarWMHandle('/data/archive/recipe')
    archivedir.open()
    archivedir.move(x=0, y=0, height=1002, width=640)
    recipedir = thunar.ThunarWMHandle(recipe.Recipe().weekdir)
    recipedir.open()
    recipedir.move(x=639, y=0, height=1002, width=633)

* Mon 20 Jan 2014 11:40:55 PM JST

* Mon 20 Jan 2014 11:40:55 PM JST

* Mon 20 Jan 2014 11:40:55 PM JST
from ref.path import RECIPEDIR

* Mon 20 Jan 2014 11:41:06 PM JST
psexists, 
* Mon 20 Jan 2014 11:42:08 PM JST
import logging
from logging.handlers import RotatingFileHandler

* Mon 20 Jan 2014 11:42:22 PM JST
import time
from time import sleep

* Tue 21 Jan 2014 12:16:21 AM JST
GTK_CLIPBOARD_GET_CLASS
* Tue 21 Jan 2014 12:30:35 AM JST
XChangeProperty
* Tue 21 Jan 2014 12:32:34 AM JST
  //     reply.type = SelectionNotify;
  //     reply.display = ev.xselectionrequest.display;
  //     reply.requestor = ev.xselectionrequest.requestor;
  //     reply.selection = ev.xselectionrequest.selection;
  //     reply.time = ev.xselectionrequest.time;
  //     reply.property = ev.xselectionrequest.property;
  //     reply.target = ev.xselectionrequest.target;

* Tue 21 Jan 2014 12:32:57 AM JST
XSelectionEvent reply;
* Tue 21 Jan 2014 12:33:17 AM JST
xselectionrequest.
* Tue 21 Jan 2014 12:33:17 AM JST
ev.xselectionrequest.
* Tue 21 Jan 2014 12:33:20 AM JST
requestor
* Tue 21 Jan 2014 12:33:20 AM JST
xselectionrequest.requestor
* Tue 21 Jan 2014 12:33:20 AM JST
ev.xselectionrequest.requestor
* Tue 21 Jan 2014 12:33:25 AM JST
window
* Tue 21 Jan 2014 12:33:34 AM JST
dummy_clipboard_window
* Tue 21 Jan 2014 12:34:09 AM JST
XSelectionRequestEvent;
* Tue 21 Jan 2014 12:35:09 AM JST
clipboard_atom
* Tue 21 Jan 2014 12:35:29 AM JST
utf8_string_atom
* Tue 21 Jan 2014 12:36:28 AM JST
//                     reinterpret_cast<unsigned char*>(
  //                              const_cast<char*>(tes.data())),
  
* Tue 21 Jan 2014 12:36:40 AM JST
                                                   
* Tue 21 Jan 2014 12:37:39 AM JST
XFlush(dis);
* Tue 21 Jan 2014 12:42:54 AM JST
  XChangeProperty(display, dummy_clipboard_window,
                  clipboard_atom, utf8_string_atom, 32,
                  PropModeReplace,
                  reinterpret_cast<unsigned char*>(
                         const_cast<char*>(tes.data())),
                  tes.size());
  XFlush(display);

* Tue 21 Jan 2014 12:48:39 AM JST

* Tue 21 Jan 2014 12:48:39 AM JST

* Tue 21 Jan 2014 12:48:39 AM JST
  while (1) {

* Tue 21 Jan 2014 12:48:40 AM JST

* Tue 21 Jan 2014 12:48:40 AM JST

* Tue 21 Jan 2014 12:48:40 AM JST
  }

* Tue 21 Jan 2014 12:49:28 AM JST
ev.xselectionrequest.property
* Tue 21 Jan 2014 12:54:41 AM JST
    printf(XGetAtomName(dpy, *pty));
    printf ("\n");

* Tue 21 Jan 2014 01:01:35 AM JST
x
* Tue 21 Jan 2014 01:01:35 AM JST
結果はx
* Tue 21 Jan 2014 01:09:22 AM JST
strlen
* Tue 21 Jan 2014 01:10:27 AM JST
#include <string.h>
* Tue 21 Jan 2014 02:07:20 AM JST

* Tue 21 Jan 2014 02:07:20 AM JST

* Tue 21 Jan 2014 02:07:20 AM JST
      std::cout << "DEBUG-6-myclip.cc" << std::endl;

* Tue 21 Jan 2014 02:07:38 AM JST
Window * win
* Tue 21 Jan 2014 02:08:32 AM JST
      XSelectionEvent reply;
      reply.type = SelectionNotify;
      reply.display = ev.xselectionrequest.display;
      reply.requestor = ev.xselectionrequest.requestor;
      reply.selection = ev.xselectionrequest.selection;
      reply.time = ev.xselectionrequest.time;
      reply.property = ev.xselectionrequest.property;
      reply.target = ev.xselectionrequest.target;

* Tue 21 Jan 2014 02:09:14 AM JST

* Tue 21 Jan 2014 02:09:14 AM JST

* Tue 21 Jan 2014 02:09:14 AM JST
      // *win = ev.xselectionrequest.requestor;

* Tue 21 Jan 2014 02:09:14 AM JST
      // *win = ev.xselectionrequest.requestor;

* Tue 21 Jan 2014 02:09:14 AM JST
      // *win = ev.xselectionrequest.requestor;
      // *property = ev.xselectionrequest.property;

* Tue 21 Jan 2014 02:09:17 AM JST

* Tue 21 Jan 2014 02:09:17 AM JST

* Tue 21 Jan 2014 02:09:17 AM JST
      std::cout << "DEBUG-5-myclip.cc" << std::endl;

* Tue 21 Jan 2014 02:09:56 AM JST
  printf(XGetAtomName(dpy, *pty));
  printf ("\n");

* Tue 21 Jan 2014 02:10:01 AM JST
pty
* Tue 21 Jan 2014 02:12:38 AM JST
  printf(XGetAtomName(dpy, *pty));
  printf ("\n");

* Tue 21 Jan 2014 02:13:04 AM JST
    printf(XGetAtomName(dpy, targets));
    printf ("\n");

* Tue 21 Jan 2014 02:13:31 AM JST
XInternAtom(dpy, "TARGETS", False)
* Tue 21 Jan 2014 02:14:36 AM JST
dpy
* Tue 21 Jan 2014 02:14:46 AM JST
      XChangeProperty(display,
                      ev.xselectionrequest.requestor,
                      ev.xselectionrequest.property,
                      utf8_string_atom,
                      32,
                      PropModeReplace,
                      reinterpret_cast<unsigned char*>(
                               const_cast<char*>(tes.data())),
                      tes.size());

* Tue 21 Jan 2014 02:17:11 AM JST
    printf(XGetAtomName(dpy, targets));
    printf ("\n");

* Tue 21 Jan 2014 02:17:23 AM JST
targets
* Tue 21 Jan 2014 02:18:23 AM JST

* Tue 21 Jan 2014 02:18:23 AM JST

* Tue 21 Jan 2014 02:18:23 AM JST
  std::cout << "DEBUG-2-myclip.cc" << std::endl;

* Tue 21 Jan 2014 02:18:25 AM JST

* Tue 21 Jan 2014 02:18:25 AM JST

* Tue 21 Jan 2014 02:18:26 AM JST
  std::cout << "DEBUG-1-myclip.cc" << std::endl;

* Tue 21 Jan 2014 02:18:28 AM JST

* Tue 21 Jan 2014 02:18:28 AM JST

* Tue 21 Jan 2014 02:18:29 AM JST
  std::cout << "DEBUG-3-myclip.cc" << std::endl;

* Tue 21 Jan 2014 02:18:30 AM JST

* Tue 21 Jan 2014 02:18:30 AM JST

* Tue 21 Jan 2014 02:18:30 AM JST
  std::cout << "DEBUG-4-myclip.cc" << std::endl;

* Tue 21 Jan 2014 02:18:57 AM JST
default
* Tue 21 Jan 2014 02:19:42 AM JST
default
* Tue 21 Jan 2014 02:20:13 AM JST
case 
* Tue 21 Jan 2014 02:20:39 AM JST

* Tue 21 Jan 2014 02:20:39 AM JST

* Tue 21 Jan 2014 02:20:39 AM JST
      std::cout << "DEBUG-7-myclip.cc" << std::endl;

* Tue 21 Jan 2014 02:20:41 AM JST

* Tue 21 Jan 2014 02:20:41 AM JST

* Tue 21 Jan 2014 02:20:41 AM JST
      std::cout << "DEBUG-8-myclip.cc" << std::endl;

* Tue 21 Jan 2014 02:20:42 AM JST
      std::cout << "DEBUG-8-myclip.cc" << std::endl;

* Tue 21 Jan 2014 02:20:42 AM JST
      std::cout << "DEBUG-8-myclip.cc" << std::endl;
      // return;

* Tue 21 Jan 2014 02:20:49 AM JST
break
* Tue 21 Jan 2014 02:22:07 AM JST

* Tue 21 Jan 2014 02:22:07 AM JST

* Tue 21 Jan 2014 02:22:07 AM JST
      std::cout << "DEBUG-6-myclip.cc" << std::endl;

* Tue 21 Jan 2014 02:27:46 AM JST
XCLIB
* Tue 21 Jan 2014 02:27:47 AM JST
XCLIB_XCIN_NONE
* Tue 21 Jan 2014 02:28:10 AM JST
0
* Tue 21 Jan 2014 03:07:31 AM JST
SelectionClear
* Tue 21 Jan 2014 03:38:17 AM JST
std::string str
* Tue 21 Jan 2014 03:38:27 AM JST

* Tue 21 Jan 2014 03:38:27 AM JST

* Tue 21 Jan 2014 03:38:27 AM JST
  std::string tes("hello test");

* Tue 21 Jan 2014 03:38:33 AM JST
tes
* Tue 21 Jan 2014 03:38:36 AM JST
tes
* Tue 21 Jan 2014 03:39:32 AM JST
XInternAtom(display, "TARGETS", False)
* Tue 21 Jan 2014 03:40:12 AM JST

* Tue 21 Jan 2014 03:40:12 AM JST

* Tue 21 Jan 2014 03:40:12 AM JST
  XInternAtom(display, "TARGETS", False)

* Tue 21 Jan 2014 03:42:45 AM JST
ClipBoard::ClipBoard(const std::string &disp)
  :displayName(disp)
{
  const char *display_cstr = NULL;
  if (!displayName.empty()) {
    display_cstr = displayName.c_str();
  }
  
  if (!(display = XOpenDisplay(display_cstr))) {
    std::cerr << "cant open display" << std::endl;
        exit(EXIT_FAILURE);
  }
  
  dummy_clipboard_window = XCreateSimpleWindow(display,
                                               DefaultRootWindow(display),
                                               0, 0, 1, 1, // x, y, width, height
                                               0, // border_width
                                               0, 0);
  
  if (!dummy_clipboard_window) {
    std::cerr << "cant create simple window" << std::endl;
    exit(EXIT_FAILURE);
  }
  clipboard_atom = getAtom("CLIPBOARD");
  timestamp_atom = getAtom("TIMESTAMP");
  targets_atom = getAtom("TARGETS");
  utf8_string_atom = getAtom("UTF8_STRING");
  // clipboard_atom = XA_CLIPBOARD(display);
  // utf8_string_atom = XA_UTF8_STRING(display);
}

* Tue 21 Jan 2014 03:43:15 AM JST
std::string
ClipBoard::getText()
{
  XConvertSelection(display,
                    clipboard_atom,
                    utf8_string_atom,
                    utf8_string_atom,
                    dummy_clipboard_window,
                    CurrentTime);
  
  // wait for the event
  XEvent ev;
  unsigned char *buf = 0;
  Atom type;
  int format;
  unsigned long nitems, bytes;
  for (;;) {
    XNextEvent(display, &ev);
    switch (ev.type) {
    case SelectionNotify:
      if (ev.xselection.property == None) {
        return "";
      }
      XGetWindowProperty(display,
                         dummy_clipboard_window,
                         ev.xselection.property,
                         0,
                         (~0L),
                         False,
                         AnyPropertyType,
                         &type,
                         &format,
                         &nitems,
                         &bytes,
                         &buf);
      return (const char*)buf;
    default:
      ;
    }
  }
}


* Tue 21 Jan 2014 03:45:15 AM JST
static const char* const kAtomNames[] = {
    "CLIPBOARD",
    "INCR",
    "SELECTION_STRING",
    "TARGETS",
    "TIMESTAMP",
    "UTF8_STRING"
  };
* Tue 21 Jan 2014 03:45:38 AM JST
static const int kNumAtomNames = arraysize(kAtomNames);
* Tue 21 Jan 2014 03:45:51 AM JST
arraysize
* Tue 21 Jan 2014 03:50:26 AM JST
ArraySizeHelper
* Tue 21 Jan 2014 03:52:21 AM JST
arraysize
* Tue 21 Jan 2014 03:53:55 AM JST
  static const char* const kAtomNames[] = {
    "CLIPBOARD",
    "INCR",
    "SELECTION_STRING",
    "TARGETS",
    "TIMESTAMP",
    "UTF8_STRING"
  };

* Tue 21 Jan 2014 03:57:08 AM JST
sizeof(kAtomNames)/sizeof(*kAtomNames)
* Tue 21 Jan 2014 03:57:41 AM JST
Atom atoms[kNumAtomNames];
* Tue 21 Jan 2014 03:57:52 AM JST
if (XInternAtoms(display_, const_cast<char**>(kAtomNames), kNumAtomNames,
                   False, atoms)) {
    clipboard_atom_ = atoms[0];
    large_selection_atom_ = atoms[1];
    selection_string_atom_ = atoms[2];
    targets_atom_ = atoms[3];
    timestamp_atom_ = atoms[4];
    utf8_string_atom_ = atoms[5];
    COMPILE_ASSERT(kNumAtomNames >= 6, kAtomNames_too_small);
  } else {
    LOG(ERROR) << "XInternAtoms failed";
  }
* Tue 21 Jan 2014 03:58:09 AM JST
"XInternAtoms failed"
* Tue 21 Jan 2014 03:58:17 AM JST

* Tue 21 Jan 2014 03:58:17 AM JST

* Tue 21 Jan 2014 03:58:17 AM JST
    LOG(ERROR) << "XInternAtoms failed";

* Tue 21 Jan 2014 03:58:43 AM JST
clipboard_atom
* Tue 21 Jan 2014 03:59:16 AM JST
timestamp_atom
* Tue 21 Jan 2014 03:59:32 AM JST
targets_atom
* Tue 21 Jan 2014 03:59:50 AM JST

* Tue 21 Jan 2014 03:59:50 AM JST

* Tue 21 Jan 2014 03:59:50 AM JST
    timestamp_atom = atoms[2];

* Tue 21 Jan 2014 03:59:58 AM JST
utf8_string_atom
* Tue 21 Jan 2014 04:02:11 AM JST
                         
* Tue 21 Jan 2014 04:02:15 AM JST
                         
* Tue 21 Jan 2014 04:02:16 AM JST
                         
* Tue 21 Jan 2014 04:02:18 AM JST
                         
* Tue 21 Jan 2014 04:02:20 AM JST
                         
* Tue 21 Jan 2014 04:02:21 AM JST
                         
* Tue 21 Jan 2014 04:02:22 AM JST
                         
* Tue 21 Jan 2014 04:02:23 AM JST
                         
* Tue 21 Jan 2014 04:02:26 AM JST
                         
* Tue 21 Jan 2014 04:14:27 AM JST
結果は
* Tue 21 Jan 2014 04:21:22 PM JST
http://192.168.1.129:8000/today/
* Tue 21 Jan 2014 04:21:32 PM JST
[InternetShortcut]
* Tue 21 Jan 2014 04:27:33 PM JST
[InternetShortcut]
URL=http://192.168.1.129:8000/today/
* Tue 21 Jan 2014 04:28:00 PM JST
[InternetShortcut]
URL=http://192.168.1.129:8000/thisweek/
* Tue 21 Jan 2014 04:42:41 PM JST
init()
* Tue 21 Jan 2014 04:46:13 PM JST
stackoverflow
* Tue 21 Jan 2014 04:48:36 PM JST
import CDROM
* Tue 21 Jan 2014 05:01:16 PM JST
import pygame.cdrom as cdrom
cdrom.init()
cd = cdrom.CD(0) # 0 = first cdrom device
cd.init()
cd.eject()
cd.quit()
cdrom.quit()

* Tue 21 Jan 2014 06:28:01 PM JST
strdup
* Tue 21 Jan 2014 10:00:00 PM JST
from 
* Tue 21 Jan 2014 10:03:15 PM JST

* Tue 21 Jan 2014 10:04:39 PM JST

* Tue 21 Jan 2014 10:04:39 PM JST

* Tue 21 Jan 2014 10:04:39 PM JST
        from path import path

* Tue 21 Jan 2014 10:04:50 PM JST

* Tue 21 Jan 2014 10:04:50 PM JST

* Tue 21 Jan 2014 10:04:50 PM JST
from os import path

* Tue 21 Jan 2014 10:06:37 PM JST

* Tue 21 Jan 2014 10:06:43 PM JST
menulist
* Tue 21 Jan 2014 10:06:53 PM JST

* Tue 21 Jan 2014 10:06:53 PM JST

* Tue 21 Jan 2014 10:06:53 PM JST
    for elem in path.path():

* Tue 21 Jan 2014 10:07:53 PM JST
menulist
* Tue 21 Jan 2014 10:10:14 PM JST
path
* Tue 21 Jan 2014 10:10:15 PM JST

* Tue 21 Jan 2014 10:10:15 PM JST

* Tue 21 Jan 2014 10:10:16 PM JST
import 

* Tue 21 Jan 2014 10:10:22 PM JST
path.
* Tue 21 Jan 2014 10:11:16 PM JST
import 
* Tue 21 Jan 2014 10:12:10 PM JST
from path 
* Tue 21 Jan 2014 10:16:23 PM JST

* Tue 21 Jan 2014 10:16:23 PM JST

* Tue 21 Jan 2014 10:16:23 PM JST
        for elem in path.path(self.todaydir).files():

* Tue 21 Jan 2014 10:46:00 PM JST
wm.WinWait().close(klass='Thunar')
* Tue 21 Jan 2014 10:47:33 PM JST
TODAY_LINK_NAME
* Tue 21 Jan 2014 10:50:15 PM JST
r.next_recipedir
* Wed 22 Jan 2014 12:52:00 AM JST
printf(_("%s: closing tray\n"), programName);
* Wed 22 Jan 2014 12:53:06 AM JST
programName
* Wed 22 Jan 2014 12:54:31 AM JST
fatal error: scsi/sg_io_linux.h: No such file or directory
* Wed 22 Jan 2014 12:56:04 AM JST
scsi/sg_io_linux.h
* Wed 22 Jan 2014 12:58:41 AM JST
env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure
* Wed 22 Jan 2014 12:59:34 AM JST
scsi/sg_io_linux.h
* Wed 22 Jan 2014 01:00:26 AM JST
packages
* Wed 22 Jan 2014 01:02:01 AM JST
libiscsi-dev
* Wed 22 Jan 2014 01:06:27 AM JST
libiscsi-dev
* Wed 22 Jan 2014 01:09:38 AM JST
display
* Wed 22 Jan 2014 01:12:20 AM JST
sg_io_linux.h
* Wed 22 Jan 2014 01:19:52 AM JST
~/work/xlibcpp/cdrom/eject/
* Wed 22 Jan 2014 01:22:56 AM JST
libsgutils2-dev
* Wed 22 Jan 2014 01:32:00 AM JST
geteuid
* Wed 22 Jan 2014 01:40:23 AM JST
O_RDWR
* Wed 22 Jan 2014 01:47:47 AM JST
O_RDWR
* Wed 22 Jan 2014 01:49:01 AM JST
O_NONBLOCK
* Wed 22 Jan 2014 01:53:32 AM JST
geteuid
* Wed 22 Jan 2014 02:00:07 AM JST
 = "/dev/sr0"
* Wed 22 Jan 2014 02:03:39 AM JST
s
* Wed 22 Jan 2014 02:03:40 AM JST
char *__s
* Wed 22 Jan 2014 02:03:40 AM JST
const char *__s
* Wed 22 Jan 2014 02:08:09 AM JST
fs.is_open()
* Wed 22 Jan 2014 02:09:24 AM JST
SUCCESS
* Wed 22 Jan 2014 02:09:24 AM JST
EXIT_SUCCESS
* Wed 22 Jan 2014 02:09:44 AM JST
ERROR
* Wed 22 Jan 2014 02:09:45 AM JST
EXIT_ERROR
* Wed 22 Jan 2014 02:13:07 AM JST
CDROM::
* Wed 22 Jan 2014 02:28:38 AM JST
std::string 
* Wed 22 Jan 2014 02:32:19 AM JST
leapsterfstre
* Wed 22 Jan 2014 02:35:56 AM JST
usersif
* Wed 22 Jan 2014 02:54:41 AM JST
Close
* Wed 22 Jan 2014 02:55:06 AM JST
http://www.google.com/url?q=http://groups.google.com/d/topic/comp.lang.c%2B%2B/-iVHTNi49BQ&sa=U&ei=VLTeUv7LOcL0lAW3yYC4BQ&ved=0CCIQFjAB&usg=AFQjCNEvaKu_OjhFPz2msxKvMvB8hRcXow
* Wed 22 Jan 2014 02:56:20 AM JST
#include <linux/cdrom.h>
* Wed 22 Jan 2014 02:56:37 AM JST
#include <scsi/scsi_ioctl.h>
* Wed 22 Jan 2014 02:57:51 AM JST
status = ioctl(fd, CDIOCCLOSE);
* Wed 22 Jan 2014 02:59:58 AM JST
http://www.google.com/url?q=https://groups.google.com/d/msg/comp.lang.c%2B%2B/-/nLI1P4iVRC4J&sa=U&ei=VLTeUv7LOcL0lAW3yYC4BQ&ved=0CD8QFjAG&usg=AFQjCNFk1cRqohJ49rSCEtDxHFld5ygDrQ
* Wed 22 Jan 2014 03:04:47 AM JST
std::fstream
* Wed 22 Jan 2014 03:05:12 AM JST
O_RDONLY|O_NONBLOCK
* Wed 22 Jan 2014 03:05:29 AM JST
O
* Wed 22 Jan 2014 03:05:30 AM JST
O_RDONLY
* Wed 22 Jan 2014 03:06:15 AM JST
fcntl.h
* Wed 22 Jan 2014 03:07:56 AM JST

* Wed 22 Jan 2014 03:07:57 AM JST

* Wed 22 Jan 2014 03:07:57 AM JST
  int status = ioctl(fd, CDIOCCLOSE);

* Wed 22 Jan 2014 03:08:51 AM JST
CDROMCLOSETRAY
* Wed 22 Jan 2014 03:09:25 AM JST
#include <sys/ioctl.h>
* Wed 22 Jan 2014 03:09:38 AM JST
int status = 
* Wed 22 Jan 2014 03:11:12 AM JST
#include <unistd.h>
* Wed 22 Jan 2014 03:11:45 AM JST
will
* Wed 22 Jan 2014 03:15:59 AM JST
int
* Wed 22 Jan 2014 03:37:16 AM JST
File descriptor
* Wed 22 Jan 2014 03:48:32 AM JST

* Wed 22 Jan 2014 03:48:32 AM JST

* Wed 22 Jan 2014 03:48:33 AM JST
  fd = open(device.c_str(), O_RDONLY|O_NONBLOCK);

* Wed 22 Jan 2014 03:53:41 AM JST
  fd = open(device.c_str(), O_RDONLY|O_NONBLOCK);
  if (fd == -1) {
    exit(1);
  }

* Wed 22 Jan 2014 04:06:30 AM JST
ioctl(fd, CDROMEJECT)
* Wed 22 Jan 2014 04:07:23 AM JST
void
* Wed 22 Jan 2014 04:07:58 AM JST
void
* Wed 22 Jan 2014 04:08:21 AM JST
void
* Wed 22 Jan 2014 04:09:34 AM JST
close
* Wed 22 Jan 2014 04:13:39 AM JST
int status;
* Wed 22 Jan 2014 04:13:45 AM JST
status = ioctl(fd, CDROM_DRIVE_STATUS);
* Wed 22 Jan 2014 04:14:33 AM JST
TRAY
* Wed 22 Jan 2014 04:14:34 AM JST
CDS_TRAY
* Wed 22 Jan 2014 04:17:20 AM JST
lse if (status == CDS_NO_DISC || status == CDS_DISC_OK){
		if (ioctl(fd, CDROMEJECT, 0) < 0) {
			perror("ioctl");
			exit(1);
		}
		return;
	}
* Wed 22 Jan 2014 04:17:24 AM JST
else if (status == CDS_NO_DISC || status == CDS_DISC_OK){
		if (ioctl(fd, CDROMEJECT, 0) < 0) {
			perror("ioctl");
			exit(1);
		}
		return;
	}
* Wed 22 Jan 2014 04:17:30 AM JST
  
* Wed 22 Jan 2014 04:46:26 AM JST
printf(_("%s: default device: `%s'\n"), programName, defaultDevice);
* Wed 22 Jan 2014 05:44:49 AM JST
(access (name.c_str(), F_OK) == 0)
* Wed 22 Jan 2014 05:45:50 AM JST
virtual 
* Wed 22 Jan 2014 05:47:02 AM JST
COND
* Wed 22 Jan 2014 05:47:04 AM JST
dev.fileExists("/dev/cdrom");
* Wed 22 Jan 2014 05:48:55 AM JST
static
* Wed 22 Jan 2014 05:55:05 AM JST
GetCD
* Wed 22 Jan 2014 06:25:33 AM JST
compare
* Wed 22 Jan 2014 06:26:05 AM JST
no matching member function for call to 'compare'
* Wed 22 Jan 2014 06:31:02 AM JST
tes[0] == 'h'
* Wed 22 Jan 2014 06:36:56 AM JST

* Wed 22 Jan 2014 06:36:56 AM JST

* Wed 22 Jan 2014 06:36:56 AM JST
  std::string buf = name->copy(name, 0, name->size());

* Wed 22 Jan 2014 06:42:42 AM JST
invalid operands to binary expression ('const std::string'
* Wed 22 Jan 2014 06:45:41 AM JST
tes.compare(1,1,"h")
* Wed 22 Jan 2014 06:47:28 AM JST
      
* Wed 22 Jan 2014 06:49:59 AM JST
"/dev" + name
* Wed 22 Jan 2014 06:51:02 AM JST

* Wed 22 Jan 2014 06:51:02 AM JST

* Wed 22 Jan 2014 06:51:02 AM JST
  // name->compare()

* Wed 22 Jan 2014 06:51:26 AM JST

* Wed 22 Jan 2014 06:51:26 AM JST

* Wed 22 Jan 2014 06:51:26 AM JST
  std::string buf;

* Wed 22 Jan 2014 06:58:25 AM JST
default_device = "cdrom"
* Wed 22 Jan 2014 06:59:03 AM JST
const 
* Wed 22 Jan 2014 06:59:20 AM JST
"cdrom"
* Wed 22 Jan 2014 06:59:35 AM JST
default_device("cdrom")
* Wed 22 Jan 2014 07:00:05 AM JST

* Wed 22 Jan 2014 07:00:05 AM JST

* Wed 22 Jan 2014 07:00:05 AM JST
  default_device = "cdrom";

* Wed 22 Jan 2014 02:40:43 PM JST
name
* Wed 22 Jan 2014 02:47:07 PM JST
Hotstring
* Wed 22 Jan 2014 02:54:55 PM JST
def magic_dir(self, str_):
    """pprint dir() function"""
    evaled = eval(str_)
    try:
        from t1 import listutil
        from inspect import getmembers
        from columnize import columnize
        import predicate
        from colorama import init
        from t1.coloramautil.formatter import (FORECYAN_RESET, BRIGHT,
                      FOREWHITE_RESET, FOREYELLOW_RESET)
        init()
        lis, append = listutil.list_append()
        for name, elem in getmembers(evaled):
            if predicate.iscallable(elem):
                name = BRIGHT(FORECYAN_RESET(name))
            elif predicate.ismodule(elem):
                name = BRIGHT(FOREYELLOW_RESET(name))
            else:
                name = BRIGHT(FOREWHITE_RESET(name))
            append(name)
        print(columnize(lis, displaywidth=110))[:-2] # trim '\\n'
    except ImportError:
        from pprint import pprint
        pprint(dir(eval(str_)))
* Wed 22 Jan 2014 02:56:59 PM JST
pass
* Wed 22 Jan 2014 02:58:23 PM JST
FOREYELLOW_RESET
* Wed 22 Jan 2014 02:58:40 PM JST
def magic_dir(self, str_):
    """pprint dir() function"""
    evaled = eval(str_)
    try:
        from t1 import listutil
        from inspect import getmembers
        from columnize import columnize
        import predicate
        from colorama import init
        from t1.coloramautil.formatter import (FORERED_RESET, BRIGHT,
                      FOREWHITE_RESET, FORECYAN_RESET, FOREYELLOW_RESET)
        init()
        lis, append = listutil.list_append()
        for name, elem in getmembers(evaled):
            if predicate.iscallable(elem):
                name = BRIGHT(FORERED_RESET(name))
            elif predicate.ismodule(elem):
                name = BRIGHT(FORECYAN_RESET(name))
            elif not name.startswith(('_')):
                name = BRIGHT(FOREYELLOW_RESET(name))
            else:
                name = BRIGHT(FOREWHITE_RESET(name))
            append(name)
        print(columnize(lis, displaywidth=110))[:-2] # trim '\\n'
    except ImportError:
        from pprint import pprint
        pprint(dir(eval(str_)))
* Wed 22 Jan 2014 03:00:32 PM JST
BRIGHT(
* Wed 22 Jan 2014 03:00:37 PM JST
BRIGHT
* Wed 22 Jan 2014 03:00:41 PM JST
BRIGHT(
* Wed 22 Jan 2014 03:00:45 PM JST
BRIGHT(
* Wed 22 Jan 2014 03:01:17 PM JST
BRIGHT,
* Wed 22 Jan 2014 03:01:19 PM JST
                      
* Wed 22 Jan 2014 03:06:05 PM JST
FOREGREEN_RESET
* Wed 22 Jan 2014 03:07:57 PM JST
BRIGHT,
* Wed 22 Jan 2014 03:08:05 PM JST
                      
* Wed 22 Jan 2014 03:08:15 PM JST
BRIGHT(
* Wed 22 Jan 2014 03:08:18 PM JST
BRIGHT(
* Wed 22 Jan 2014 03:08:21 PM JST
BRIGHT(
* Wed 22 Jan 2014 03:08:24 PM JST
BRIGHT(
* Wed 22 Jan 2014 03:08:41 PM JST
def magic_dir(self, str_):
    """pprint dir() function"""
    evaled = eval(str_)
    try:
        from t1 import listutil
        from inspect import getmembers
        from columnize import columnize
        import predicate
        from colorama import init
        from t1.coloramautil.formatter import (FORERED_RESET, FOREGREEN_RESET,
                         FOREWHITE_RESET, FORECYAN_RESET, FOREYELLOW_RESET)
        init()
        lis, append = listutil.list_append()
        for name, elem in getmembers(evaled):
            if predicate.isclass(elem):
                name = FOREGREEN_RESET(name)
            elif predicate.iscallable(elem):
                name = FORERED_RESET(name)
            elif predicate.ismodule(elem):
                name = FORECYAN_RESET(name)
            elif not name.startswith(('_')):
                name = FOREYELLOW_RESET(name)
            else:
                name = FOREWHITE_RESET(name)
            append(name)
        print(columnize(lis, displaywidth=110))[:-2] # trim '\\n'
    except ImportError:
        from pprint import pprint
        pprint(dir(eval(str_)))
* Wed 22 Jan 2014 03:11:52 PM JST
os
* Wed 22 Jan 2014 04:01:36 PM JST
DoReplace
* Wed 22 Jan 2014 04:20:43 PM JST
GetMessage
* Wed 22 Jan 2014 05:16:10 PM JST
mStringLength
* Wed 22 Jan 2014 06:47:54 PM JST
#include <X11/Xlib.h>
* Wed 22 Jan 2014 06:48:17 PM JST
display = XOpenDisplay(display_cstr)
* Wed 22 Jan 2014 06:48:35 PM JST
cstr
* Wed 22 Jan 2014 06:48:36 PM JST
display_cstr
* Wed 22 Jan 2014 06:48:56 PM JST
DefaultRootWindow(display)
* Wed 22 Jan 2014 06:51:33 PM JST
#include <X11/extensions/XTest.h>
* Wed 22 Jan 2014 06:53:06 PM JST
#include <X11/keysym.h>
* Wed 22 Jan 2014 06:55:44 PM JST
    
* Wed 22 Jan 2014 06:55:46 PM JST
True
* Wed 22 Jan 2014 09:55:25 PM JST

* Wed 22 Jan 2014 09:55:26 PM JST

* Wed 22 Jan 2014 09:55:26 PM JST
  XGetInputFocus(display, &win, &revert);

* Wed 22 Jan 2014 10:00:15 PM JST
os.listdir(self.todaydir)
* Wed 22 Jan 2014 10:13:56 PM JST
    def get_today_menus(self):
        r"""SUMMARY

        get_today_menus()

        @Return:
        """
        try:
            menulist = os.listdir(self.todaydir)
        except OSError:
            menulist = ()
        menus, append = listutil.list_append()
        for elem in menulist:
            fname, _ = path.splitext(elem) # trim extension
            append(fname)
        return menus

* Wed 22 Jan 2014 11:03:56 PM JST
Display *display;
* Wed 22 Jan 2014 11:04:01 PM JST
display = XOpenDisplay(NULL);
* Wed 22 Jan 2014 11:04:08 PM JST
KeyCode code = XKeysymToKeycode(display, XStringToKeysym("a"));
* Wed 22 Jan 2014 11:04:15 PM JST
  XTestFakeKeyEvent(display, code, True, CurrentTime);
  XTestFakeKeyEvent(display, code, False, CurrentTime);
  XCloseDisplay(display);

* Wed 22 Jan 2014 11:18:39 PM JST
  Display *display;
  display = XOpenDisplay(NULL);

* Wed 22 Jan 2014 11:19:00 PM JST
  
* Wed 22 Jan 2014 11:19:11 PM JST
XCloseDisplay(display);
* Wed 22 Jan 2014 11:19:22 PM JST
SimpleButtonEvent
* Wed 22 Jan 2014 11:25:58 PM JST
http://tronche.com/gui/x/xlib/events/keyboard-pointer/keyboard-pointer.html
* Wed 22 Jan 2014 11:52:44 PM JST

* Wed 22 Jan 2014 11:52:44 PM JST

* Wed 22 Jan 2014 11:52:44 PM JST
  KeyCode code = XKeysymToKeycode(display, XStringToKeysym(str.c_str()));

* Wed 22 Jan 2014 11:56:13 PM JST
  Display *display;
  display = XOpenDisplay(NULL);

* Thu 23 Jan 2014 12:02:26 AM JST
XTestFakeButtonEvent
* Thu 23 Jan 2014 12:07:39 AM JST
http://manned.org/XTestFakeButtonEvent/b3920794#nav
* Thu 23 Jan 2014 12:18:05 AM JST
XTestFakeButtonEvent
* Thu 23 Jan 2014 12:28:15 AM JST

* Thu 23 Jan 2014 12:28:15 AM JST

* Thu 23 Jan 2014 12:28:15 AM JST
  // XCloseDisplay(display);

* Thu 23 Jan 2014 12:30:15 AM JST

* Thu 23 Jan 2014 12:30:15 AM JST

* Thu 23 Jan 2014 12:30:15 AM JST
  // Display *display;

* Thu 23 Jan 2014 12:30:15 AM JST
  // Display *display;

* Thu 23 Jan 2014 12:30:15 AM JST
  // Display *display;
  // display = XOpenDisplay(NULL);

* Thu 23 Jan 2014 12:30:25 AM JST

* Thu 23 Jan 2014 12:30:25 AM JST

* Thu 23 Jan 2014 12:30:25 AM JST
  XCloseDisplay(display);

* Thu 23 Jan 2014 12:30:42 AM JST
void
* Thu 23 Jan 2014 12:30:46 AM JST
void
* Thu 23 Jan 2014 12:31:52 AM JST
LockDisplay
* Thu 23 Jan 2014 12:35:40 AM JST
LockDisplay
* Thu 23 Jan 2014 12:40:43 AM JST
unsigned long delay
* Thu 23 Jan 2014 12:41:09 AM JST
int SimpleSendKey (Display *display, unsigned int keycode, unsigned long delay)
{
  XTestFakeKeyEvent(display, keycode, True, delay);
  XTestFakeKeyEvent(display, keycode, False, delay);
  return 1;
}

* Thu 23 Jan 2014 12:41:38 AM JST
display, 
* Thu 23 Jan 2014 12:41:40 AM JST
display, 
* Thu 23 Jan 2014 12:41:58 AM JST
  Display *display;
  display = XOpenDisplay(NULL);

* Thu 23 Jan 2014 12:42:07 AM JST
XCloseDisplay(display);
* Thu 23 Jan 2014 12:42:43 AM JST
display, 
* Thu 23 Jan 2014 12:43:18 AM JST
delay
* Thu 23 Jan 2014 12:46:24 AM JST
display, 
* Thu 23 Jan 2014 12:46:39 AM JST
int SimpleSendKey (Display *display, unsigned int keycode,
                   unsigned long delay = CurrentTime);

* Thu 23 Jan 2014 12:46:44 AM JST
display, 
* Thu 23 Jan 2014 12:46:44 AM JST
Display *display, 
* Thu 23 Jan 2014 12:46:46 AM JST
                   
* Thu 23 Jan 2014 12:47:56 AM JST
int SimpleSendKey (Display *display, unsigned int keycode,
                   unsigned long delay = CurrentTime);

int SimpleSendKey (unsigned int keycode, unsigned long delay = CurrentTime);

* Thu 23 Jan 2014 12:48:20 AM JST
#include <X11/Xlib.h>
#include <X11/keysym.h>
#include <X11/extensions/XTest.h>

* Thu 23 Jan 2014 12:48:57 AM JST

* Thu 23 Jan 2014 12:48:57 AM JST

* Thu 23 Jan 2014 12:48:57 AM JST
int SimpleSendKey (Display *display, unsigned int keycode, unsigned long delay)

* Thu 23 Jan 2014 12:50:46 AM JST
unsigned long delay
* Thu 23 Jan 2014 12:50:51 AM JST
CurrentTime
* Thu 23 Jan 2014 12:50:54 AM JST
CurrentTime
* Thu 23 Jan 2014 12:52:42 AM JST
int SimpleButtonEvent (Display *display, int button_num, unsigned long delay)
{
  XTestFakeButtonEvent(display, button_num, True, delay);
  XTestFakeButtonEvent(display, button_num, False, delay);
  return 1;
}
* Thu 23 Jan 2014 12:52:57 AM JST
int SimpleSendKey (Display *display, unsigned int keycode,
                   unsigned long delay = CurrentTime);
* Thu 23 Jan 2014 12:53:05 AM JST
SimpleButtonEvent
* Thu 23 Jan 2014 12:53:23 AM JST
button_num
* Thu 23 Jan 2014 12:53:29 AM JST
unsigned 
* Thu 23 Jan 2014 12:53:49 AM JST
int SimpleButtonEvent (Display *display, int button_num, unsigned long delay)
{
  XTestFakeButtonEvent(display, button_num, True, delay);
  XTestFakeButtonEvent(display, button_num, False, delay);
  return 1;
}
* Thu 23 Jan 2014 12:53:56 AM JST
display,
* Thu 23 Jan 2014 12:53:57 AM JST
Display *display,
* Thu 23 Jan 2014 12:54:09 AM JST
  Display *display;
  display = XOpenDisplay(NULL);

* Thu 23 Jan 2014 12:54:19 AM JST
XCloseDisplay(display);
* Thu 23 Jan 2014 12:54:33 AM JST
display, 
* Thu 23 Jan 2014 12:54:52 AM JST
int SimpleButtonEvent (Display *display, int button_num,
                       unsigned long delay = CurrentTime);

* Thu 23 Jan 2014 12:55:03 AM JST
display, 
* Thu 23 Jan 2014 12:55:04 AM JST
Display *display, 
* Thu 23 Jan 2014 12:55:06 AM JST
                       
* Thu 23 Jan 2014 12:55:24 AM JST
int SimpleButtonEvent (Display *display, int button_num,
                       unsigned long delay = CurrentTime);

int SimpleButtonEvent (int button_num, unsigned long delay = CurrentTime);


* Thu 23 Jan 2014 01:01:00 AM JST
int SimpleSendKey (Display *display, unsigned int keycode, unsigned long delay)
{
  XTestFakeKeyEvent(display, keycode, True, delay);
  XTestFakeKeyEvent(display, keycode, False, delay);
  return 1;
}
* Thu 23 Jan 2014 01:01:06 AM JST
int
* Thu 23 Jan 2014 01:01:07 AM JST
unsigned int
* Thu 23 Jan 2014 01:01:27 AM JST
keyst
* Thu 23 Jan 2014 01:01:27 AM JST
string keyst
* Thu 23 Jan 2014 01:01:28 AM JST
std::string keyst
* Thu 23 Jan 2014 01:01:52 AM JST
KeyCode code = XKeysymToKeycode(display, XStringToKeysym("a"));
* Thu 23 Jan 2014 01:03:29 AM JST
code
* Thu 23 Jan 2014 01:05:18 AM JST
const 
* Thu 23 Jan 2014 01:25:09 AM JST
str
* Thu 23 Jan 2014 01:25:11 AM JST

* Thu 23 Jan 2014 01:25:11 AM JST

* Thu 23 Jan 2014 01:25:11 AM JST
  char *str;

* Thu 23 Jan 2014 01:25:11 AM JST
  char *str;

* Thu 23 Jan 2014 01:25:11 AM JST
  char *str;
  str = "a";

* Thu 23 Jan 2014 01:31:29 AM JST
XKeyEvent createKeyEvent(Display *display, Window &win,
                           Window &winRoot, bool press,
                           int keycode, int modifiers)
{
   XKeyEvent event;

   event.display     = display;
   event.window      = win;
   event.root        = winRoot;
   event.subwindow   = None;
   event.time        = CurrentTime;
   event.x           = 1;
   event.y           = 1;
   event.x_root      = 1;
   event.y_root      = 1;
   event.same_screen = True;
   event.keycode     = XKeysymToKeycode(display, keycode);
   event.state       = modifiers;

   if(press)
      event.type = KeyPress;
   else
      event.type = KeyRelease;

   return event;
}

* Thu 23 Jan 2014 04:05:40 AM JST
xXTestFakeInputReq
* Thu 23 Jan 2014 04:14:16 AM JST
XKeyEvent event = createKeyEvent(display, winFocus, winRoot, true, KEYCODE, 0);
* Thu 23 Jan 2014 04:14:38 AM JST
display, 
* Thu 23 Jan 2014 04:14:54 AM JST
XKeyEvent event = createKeyEvent(display, winFocus, winRoot, true, KEYCODE, 0);
* Thu 23 Jan 2014 04:17:11 AM JST
winFocus
* Thu 23 Jan 2014 04:19:42 AM JST
true
* Thu 23 Jan 2014 04:35:01 AM JST
int SendKey (Display *display, Window &win, Window &winRoot, bool press,
             int keycode, int modifiers)
{
  XKeyEvent event = createKeyEvent(display, win, winRoot, press,
                                   keycode, modifiers);
  XSendEvent(event.display, event.window, True, KeyPressMask, (XEvent *)&event);
  return 1;
}
* Thu 23 Jan 2014 04:35:10 AM JST
display, 
* Thu 23 Jan 2014 04:35:12 AM JST
Display *display, 
* Thu 23 Jan 2014 04:35:21 AM JST
  Display *display;
  display = XOpenDisplay(NULL);

* Thu 23 Jan 2014 04:35:38 AM JST
int SendKey (Window &win, Window &winRoot, bool press,
             int keycode, int modifiers)
{
  Display *display;
  display = XOpenDisplay(NULL);
  XKeyEvent event = createKeyEvent(display, win, winRoot, press,
                                   keycode, modifiers);
  XSendEvent(event.display, event.window, True, KeyPressMask, (XEvent *)&event);
  return 1;
}

* Thu 23 Jan 2014 04:35:48 AM JST
win,
* Thu 23 Jan 2014 04:35:49 AM JST
Window &win,
* Thu 23 Jan 2014 04:36:01 AM JST
XGetInputFocus(display, &winFocus, &revert);
* Thu 23 Jan 2014 04:36:27 AM JST
Window winFocus;
* Thu 23 Jan 2014 04:36:35 AM JST
winFocus
* Thu 23 Jan 2014 04:36:54 AM JST
  Window win;
  int revert;

* Thu 23 Jan 2014 04:37:13 AM JST
int SendKey (Window &winRoot, bool press,
             int keycode, int modifiers)
{
  Display *display;
  Window win;
  int revert;
  display = XOpenDisplay(NULL);
  XGetInputFocus(display, &win, &revert);
  XKeyEvent event = createKeyEvent(display, win, winRoot, press,
                                   keycode, modifiers);
  XSendEvent(event.display, event.window, True, KeyPressMask, (XEvent *)&event);
  return 1;
}
* Thu 23 Jan 2014 04:37:23 AM JST
             
* Thu 23 Jan 2014 04:37:32 AM JST
Window winRoot = XDefaultRootWindow(display);
* Thu 23 Jan 2014 04:37:45 AM JST
XGetInputFocus(display, &win, &revert);
* Thu 23 Jan 2014 04:37:55 AM JST

* Thu 23 Jan 2014 04:37:55 AM JST

* Thu 23 Jan 2014 04:37:55 AM JST
  Window winRoot = XDefaultRootWindow(display);

* Thu 23 Jan 2014 04:41:05 AM JST
if(display == NULL)
      return -1;
* Thu 23 Jan 2014 04:41:14 AM JST
  if(display == NULL)
    return -1;

* Thu 23 Jan 2014 05:30:48 AM JST
XKeyEvent
* Thu 23 Jan 2014 05:58:03 AM JST
KeyPressMask|KeyReleaseMask
* Thu 23 Jan 2014 06:05:46 AM JST
  XGetInputFocus(display, &win, &revert);
  Window winRoot = XDefaultRootWindow(display);

* Thu 23 Jan 2014 06:08:22 AM JST
XKeysymToKeycode(display, XStringToKeysym("a"));
* Thu 23 Jan 2014 06:09:40 AM JST
acode
* Thu 23 Jan 2014 06:10:11 AM JST
shift
* Thu 23 Jan 2014 06:10:14 AM JST
  
* Thu 23 Jan 2014 06:10:16 AM JST
acode
* Thu 23 Jan 2014 06:10:21 AM JST
  SendKey(display, win, winRoot, True, acode, 0);
  SendKey(display, win, winRoot, True, shift, 0);

* Thu 23 Jan 2014 06:12:45 AM JST
Shift
* Thu 23 Jan 2014 06:14:24 AM JST
modifiers
* Thu 23 Jan 2014 06:17:00 AM JST
ControlMask
* Thu 23 Jan 2014 06:24:04 AM JST
l
* Thu 23 Jan 2014 06:24:05 AM JST
unsigned l
* Thu 23 Jan 2014 06:25:01 AM JST
modifires
* Thu 23 Jan 2014 06:25:18 AM JST
modifires
* Thu 23 Jan 2014 06:26:56 AM JST
ShiftMask
* Thu 23 Jan 2014 06:27:02 AM JST
  
* Thu 23 Jan 2014 06:27:05 AM JST
ControlMask
* Thu 23 Jan 2014 06:27:10 AM JST
  
* Thu 23 Jan 2014 06:27:17 AM JST
ShiftMask
* Thu 23 Jan 2014 06:27:49 AM JST
ShiftMask
* Thu 23 Jan 2014 06:27:54 AM JST
  
* Thu 23 Jan 2014 06:27:57 AM JST
ControlMask
* Thu 23 Jan 2014 06:28:02 AM JST
ControlMask|ShiftMask
* Thu 23 Jan 2014 06:28:04 AM JST
  
* Thu 23 Jan 2014 06:30:05 AM JST
Control
* Thu 23 Jan 2014 06:30:39 AM JST
Mod1Mask
* Thu 23 Jan 2014 06:31:41 AM JST
Mod1Mask
* Thu 23 Jan 2014 06:32:03 AM JST
ShiftMask
* Thu 23 Jan 2014 06:32:10 AM JST
  
* Thu 23 Jan 2014 06:32:14 AM JST
Mod1Mask
* Thu 23 Jan 2014 04:26:56 PM JST
int SendKey (Display *display, Window &win, Window &winRoot, bool press,
             int keycode, int modifiers)
{
  XKeyEvent event = createKeyEvent(display, win, winRoot, press,
                                   keycode, modifiers);
  XSendEvent(event.display, event.window, True,
             KeyPressMask|KeyReleaseMask, (XEvent *)&event);
  return 1;
}

* Thu 23 Jan 2014 04:27:00 PM JST
modifiers
* Thu 23 Jan 2014 04:27:00 PM JST
int modifiers
* Thu 23 Jan 2014 04:27:22 PM JST
             
* Thu 23 Jan 2014 04:29:06 PM JST
ShiftMask
* Thu 23 Jan 2014 04:29:12 PM JST
ControlMask
* Thu 23 Jan 2014 04:29:15 PM JST
Mod1Mask
* Thu 23 Jan 2014 04:29:19 PM JST
meta
* Thu 23 Jan 2014 04:29:20 PM JST
meta_mask
* Thu 23 Jan 2014 04:29:22 PM JST
ShiftMask ControlMask Mod1Mask meta_mask
* Thu 23 Jan 2014 04:34:46 PM JST
Mod1Mask
* Thu 23 Jan 2014 04:35:26 PM JST
include 
* Thu 23 Jan 2014 04:36:11 PM JST
XSendKey 
* Thu 23 Jan 2014 04:44:29 PM JST

* Thu 23 Jan 2014 04:44:30 PM JST

* Thu 23 Jan 2014 04:44:30 PM JST
  modifires |= AltMask;

* Thu 23 Jan 2014 04:47:04 PM JST
Mod1Mask           (1<<3)  
Mod2Mask           (1<<4)  
Mod3Mask           (1<<5)  
Mod4Mask           (1<<6)  
Mod5Mask           (1<<7)  

* Thu 23 Jan 2014 04:47:10 PM JST
3)  
* Thu 23 Jan 2014 04:47:11 PM JST
1<<3)  
* Thu 23 Jan 2014 04:47:18 PM JST
          (1<<4)  
* Thu 23 Jan 2014 04:47:21 PM JST
Mod5Mask
* Thu 23 Jan 2014 04:47:22 PM JST
Mod4Mask
* Thu 23 Jan 2014 04:47:22 PM JST
Mod3Mask
* Thu 23 Jan 2014 04:47:25 PM JST
           (1<<7)  
* Thu 23 Jan 2014 04:47:25 PM JST
           (1<<6)  
* Thu 23 Jan 2014 04:47:25 PM JST
           (1<<5)  
* Thu 23 Jan 2014 04:47:29 PM JST
Mod1Mask Mod2Mask
* Thu 23 Jan 2014 04:48:13 PM JST
http://www.google.com/url?q=ftp://ftp.fvwm.org/pub/fvwm/devel/sources/libs/modifiers.c&sa=U&ei=FMngUpDLI4eOkgXzwICgAQ&ved=0CDkQFjAF&usg=AFQjCNFPsgsJ5AyiM7j0N3Rg7Cz5Agwu3g
* Thu 23 Jan 2014 04:51:46 PM JST
WinMask
* Thu 23 Jan 2014 04:51:59 PM JST
SprM
* Thu 23 Jan 2014 04:52:13 PM JST
include 
* Thu 23 Jan 2014 04:53:29 PM JST
include
* Thu 23 Jan 2014 04:55:43 PM JST
shift
* Thu 23 Jan 2014 04:55:47 PM JST
control
* Thu 23 Jan 2014 04:55:52 PM JST
alt
* Thu 23 Jan 2014 04:56:56 PM JST
modifires
* Thu 23 Jan 2014 05:10:00 PM JST
#define AltMask Mod1Mask
#define NumLockMask Mod2Mask
#define SuperMask Mod3Mask


* Thu 23 Jan 2014 05:13:46 PM JST
bool 
* Thu 23 Jan 2014 05:14:25 PM JST
True
* Thu 23 Jan 2014 05:14:27 PM JST
shift
* Thu 23 Jan 2014 05:46:31 PM JST
int SendKey (Display *display, Window &win, Window &winRoot,
             bool press, int keycode,
             bool shift=False, bool control=False,
             bool alt=False, bool super=False)
* Thu 23 Jan 2014 05:46:53 PM JST
False
* Thu 23 Jan 2014 05:46:56 PM JST
False
* Thu 23 Jan 2014 05:46:59 PM JST
False
* Thu 23 Jan 2014 05:47:00 PM JST
False
* Thu 23 Jan 2014 05:47:11 PM JST
True
* Thu 23 Jan 2014 05:48:45 PM JST
void tes(bool shift=False, bool control=False, bool super=False)
* Thu 23 Jan 2014 05:48:50 PM JST
False
* Thu 23 Jan 2014 05:48:52 PM JST
False
* Thu 23 Jan 2014 05:48:54 PM JST
False
* Thu 23 Jan 2014 06:01:36 PM JST
int SendKey (Display *display, Window &win, Window &winRoot, bool press,
             int keycode, int modifiers)
{
  XKeyEvent event = createKeyEvent(display, win, winRoot, press,
                                   keycode, modifiers);
  XSendEvent(event.display, event.window, True,
             KeyPressMask|KeyReleaseMask, (XEvent *)&event);
  return 1;
}
  

* Thu 23 Jan 2014 06:04:30 PM JST
#include <X11/Xlibint.h>
* Thu 23 Jan 2014 06:05:22 PM JST
UnlockDisplay
* Thu 23 Jan 2014 06:06:24 PM JST

* Thu 23 Jan 2014 06:06:24 PM JST

* Thu 23 Jan 2014 06:06:24 PM JST
  LockDisplay

* Thu 23 Jan 2014 06:06:58 PM JST
display
* Thu 23 Jan 2014 06:07:05 PM JST
LockDisplay(display);
* Thu 23 Jan 2014 06:07:13 PM JST
UnlockDisplay(display);
* Thu 23 Jan 2014 06:07:22 PM JST
LockDisplay(display);
* Thu 23 Jan 2014 06:07:32 PM JST
UnlockDisplay(display);
* Thu 23 Jan 2014 06:07:55 PM JST
LockDisplay(display);
* Thu 23 Jan 2014 06:08:07 PM JST
UnlockDisplay(display);
* Thu 23 Jan 2014 06:08:39 PM JST
True
* Thu 23 Jan 2014 06:08:40 PM JST
shift=True
* Fri 24 Jan 2014 12:02:28 AM JST
  LockDisplay(display);
  XKeyEvent event = createKeyEvent(display, win, winRoot, press,
                                   keycode, modifiers);
  XSendEvent(event.display, event.window, True,
             KeyPressMask|KeyReleaseMask, (XEvent *)&event);
  UnlockDisplay(display);

* Fri 24 Jan 2014 12:03:49 AM JST
                 
* Fri 24 Jan 2014 12:07:52 AM JST

* Fri 24 Jan 2014 12:07:52 AM JST

* Fri 24 Jan 2014 12:07:52 AM JST
  UnlockDisplay(display);

* Fri 24 Jan 2014 12:07:53 AM JST

* Fri 24 Jan 2014 12:07:53 AM JST

* Fri 24 Jan 2014 12:07:53 AM JST
  XSendEvent(Display *, Window, int, long, XEvent *)

* Fri 24 Jan 2014 12:12:21 AM JST
int SendKeyEvent(Display *display, Window &win, Window &winRoot,
                 bool press, int keycode, int modifiers)
{
  LockDisplay(display);
  XKeyEvent event = createKeyEvent(display, win, winRoot, press,
                                   keycode, modifiers);
  XSendEvent(event.display, event.window, True,
             KeyPressMask|KeyReleaseMask, (XEvent *)&event);
  UnlockDisplay(display);
  return 1;
}

* Fri 24 Jan 2014 12:12:38 AM JST

* Fri 24 Jan 2014 12:12:38 AM JST

* Fri 24 Jan 2014 12:12:38 AM JST
  return 1;

* Fri 24 Jan 2014 12:12:44 AM JST
SendKeyEvent(display, win, winRoot, press, keycode, modifiers);
* Fri 24 Jan 2014 12:13:18 AM JST
include <>
* Fri 24 Jan 2014 12:13:38 AM JST

* Fri 24 Jan 2014 12:13:40 AM JST
KeyPress
* Fri 24 Jan 2014 12:13:46 AM JST
True
* Fri 24 Jan 2014 12:14:03 AM JST
Key
* Fri 24 Jan 2014 12:14:05 AM JST
Key
* Fri 24 Jan 2014 12:14:42 AM JST
press, 
* Fri 24 Jan 2014 12:14:42 AM JST
bool press, 
* Fri 24 Jan 2014 12:14:51 AM JST
  
* Fri 24 Jan 2014 12:14:53 AM JST
Press
* Fri 24 Jan 2014 12:15:44 AM JST
  SendKeyEvent(display, win, winRoot, PressKey, keycode, modifiers);
  SendKeyEvent(display, win, winRoot, ReleaseKey, keycode, modifiers);

* Fri 24 Jan 2014 12:15:57 AM JST
press,
* Fri 24 Jan 2014 12:15:58 AM JST
bool press,
* Fri 24 Jan 2014 12:15:59 AM JST
             
* Fri 24 Jan 2014 12:16:07 AM JST
  SendKeyEvent(display, win, winRoot, PressKey, keycode, modifiers);
  SendKeyEvent(display, win, winRoot, ReleaseKey, keycode, modifiers);

* Fri 24 Jan 2014 12:16:44 AM JST
             
* Fri 24 Jan 2014 12:17:03 AM JST
True,
* Fri 24 Jan 2014 12:17:15 AM JST
  
* Fri 24 Jan 2014 12:17:23 AM JST
  
* Fri 24 Jan 2014 12:18:30 AM JST

* Fri 24 Jan 2014 12:18:40 AM JST

* Fri 24 Jan 2014 12:18:42 AM JST
display, 
* Fri 24 Jan 2014 12:18:57 AM JST
  
* Fri 24 Jan 2014 12:18:59 AM JST
win, 
* Fri 24 Jan 2014 12:19:05 AM JST
  
* Fri 24 Jan 2014 12:19:06 AM JST
winRoot, 
* Fri 24 Jan 2014 12:21:20 AM JST
    
* Fri 24 Jan 2014 12:22:39 AM JST

* Fri 24 Jan 2014 12:22:39 AM JST

* Fri 24 Jan 2014 12:22:39 AM JST
  std::cout << "DEBUG-6-sendkey.cc" << std::endl;

* Fri 24 Jan 2014 12:23:06 AM JST
Xsync
* Fri 24 Jan 2014 12:27:38 AM JST

* Fri 24 Jan 2014 12:27:38 AM JST

* Fri 24 Jan 2014 12:27:38 AM JST
  // SendKey(display, win, winRoot, True, shift, 0);

* Fri 24 Jan 2014 12:27:39 AM JST

* Fri 24 Jan 2014 12:27:39 AM JST

* Fri 24 Jan 2014 12:27:39 AM JST
  // std::cout << "DEBUG-6-sendkey.cc" << std::endl;

* Fri 24 Jan 2014 12:27:39 AM JST

* Fri 24 Jan 2014 12:27:40 AM JST

* Fri 24 Jan 2014 12:27:40 AM JST
  // std::cout << "DEBUG-7-sendkey.cc" << std::endl;

* Fri 24 Jan 2014 12:27:40 AM JST

* Fri 24 Jan 2014 12:27:40 AM JST

* Fri 24 Jan 2014 12:27:40 AM JST
  // std::cout << "DEBUG-8-sendkey.cc" << std::endl;

* Fri 24 Jan 2014 12:29:32 AM JST

* Fri 24 Jan 2014 12:29:32 AM JST

* Fri 24 Jan 2014 12:29:33 AM JST
(face-spec-set 'fringe '((t (:foreground "red" :background "gray16"))))

* Fri 24 Jan 2014 12:30:11 AM JST

* Fri 24 Jan 2014 12:30:11 AM JST

* Fri 24 Jan 2014 12:30:11 AM JST
  std::cout << "DEBUG-5-sendkey.cc" << std::endl;

* Fri 24 Jan 2014 12:30:54 AM JST

* Fri 24 Jan 2014 12:30:54 AM JST

* Fri 24 Jan 2014 12:30:54 AM JST
  // modifires |= ShiftMask;

* Fri 24 Jan 2014 12:31:00 AM JST

* Fri 24 Jan 2014 12:31:00 AM JST

* Fri 24 Jan 2014 12:31:00 AM JST
  int modifires = 0;

* Fri 24 Jan 2014 12:57:03 AM JST
KeyCode kcode = XKeysymToKeycode(display, XStringToKeysym("k"));
* Fri 24 Jan 2014 12:58:12 AM JST
int
* Fri 24 Jan 2014 12:58:56 AM JST
int
* Fri 24 Jan 2014 12:59:58 AM JST
XStringToKeysym
* Fri 24 Jan 2014 01:00:57 AM JST
KeyCode keycode = XKeysymToKeycode(display, XStringToKeysym(key));
* Fri 24 Jan 2014 01:01:12 AM JST
int
* Fri 24 Jan 2014 01:01:18 AM JST
KeyCode keycode = XKeysymToKeycode(display, XStringToKeysym(key));
* Fri 24 Jan 2014 01:01:41 AM JST
int
* Fri 24 Jan 2014 01:01:47 AM JST
KeyCode keycode = XKeysymToKeycode(display, XStringToKeysym(key));
* Fri 24 Jan 2014 01:02:04 AM JST
kcode
* Fri 24 Jan 2014 01:02:09 AM JST
bcode
* Fri 24 Jan 2014 01:02:19 AM JST
acode
* Fri 24 Jan 2014 01:02:24 AM JST
ccode
* Fri 24 Jan 2014 01:08:01 AM JST
XFlush(display);
* Fri 24 Jan 2014 01:08:21 AM JST
(char *)
* Fri 24 Jan 2014 01:09:10 AM JST
XSendEvent
* Fri 24 Jan 2014 01:15:47 AM JST
SyncHandle
* Fri 24 Jan 2014 01:16:31 AM JST
SyncHandle
* Fri 24 Jan 2014 01:17:43 AM JST
synchandler
* Fri 24 Jan 2014 01:18:12 AM JST
#include <X11/Xlibint.h>
* Fri 24 Jan 2014 01:18:48 AM JST
SyncHandle();
* Fri 24 Jan 2014 01:20:50 AM JST
display
* Fri 24 Jan 2014 01:20:54 AM JST
display
* Fri 24 Jan 2014 01:20:58 AM JST
display
* Fri 24 Jan 2014 01:29:00 AM JST

* Fri 24 Jan 2014 01:29:00 AM JST

* Fri 24 Jan 2014 01:29:00 AM JST
      std::cout << "DEBUG-4-sendkey.cc" << std::endl;

* Fri 24 Jan 2014 01:29:02 AM JST

* Fri 24 Jan 2014 01:29:02 AM JST

* Fri 24 Jan 2014 01:29:02 AM JST
    {

* Fri 24 Jan 2014 01:30:05 AM JST
False
* Fri 24 Jan 2014 01:30:21 AM JST

* Fri 24 Jan 2014 01:30:21 AM JST

* Fri 24 Jan 2014 01:30:21 AM JST
  XFlush(display);

* Fri 24 Jan 2014 01:30:21 AM JST
  XFlush(display);

* Fri 24 Jan 2014 01:30:21 AM JST
  XFlush(display);
  XSync(display, True);

* Fri 24 Jan 2014 02:52:23 AM JST
      
* Fri 24 Jan 2014 03:03:19 AM JST
SuperMask
* Fri 24 Jan 2014 03:04:25 AM JST
char single_char_string[2], *cp;
* Fri 24 Jan 2014 03:05:44 AM JST
          
* Fri 24 Jan 2014 03:05:48 AM JST
keys
* Fri 24 Jan 2014 03:15:49 AM JST
*keys
* Fri 24 Jan 2014 03:16:50 AM JST
string
* Fri 24 Jan 2014 03:30:26 AM JST

* Fri 24 Jan 2014 03:30:26 AM JST

* Fri 24 Jan 2014 03:30:26 AM JST
          single_char[1] = '\0';

* Fri 24 Jan 2014 03:52:14 AM JST
XStringToKeysym
* Fri 24 Jan 2014 03:57:15 AM JST
SendKey(display, win, winRoot, (char *)"a", modifires);
* Fri 24 Jan 2014 03:57:51 AM JST

* Fri 24 Jan 2014 03:57:53 AM JST
space
* Fri 24 Jan 2014 03:58:07 AM JST
SendKey(display, win, winRoot, (char *)"a", modifires);
* Fri 24 Jan 2014 04:01:17 AM JST
XStringToKeysym
* Fri 24 Jan 2014 04:02:50 AM JST
_XkeyTable
* Fri 24 Jan 2014 04:24:18 AM JST
#define XK_B                             0x0042  /* U+0042 LATIN CAPITAL LETTER B */
#define XK_C                             0x0043  /* U+0043 LATIN CAPITAL LETTER C */
#define XK_D                             0x0044  /* U+0044 LATIN CAPITAL LETTER D */
#define XK_E                             0x0045  /* U+0045 LATIN CAPITAL LETTER E */
#define XK_F                             0x0046  /* U+0046 LATIN CAPITAL LETTER F */
#define XK_G                             0x0047  /* U+0047 LATIN CAPITAL LETTER G */
#define XK_H                             0x0048  /* U+0048 LATIN CAPITAL LETTER H */
#define XK_I                             0x0049  /* U+0049 LATIN CAPITAL LETTER I */
#define XK_J                             0x004a  /* U+004A LATIN CAPITAL LETTER J */
#define XK_K                             0x004b  /* U+004B LATIN CAPITAL LETTER K */
#define XK_L                             0x004c  /* U+004C LATIN CAPITAL LETTER L */
#define XK_M                             0x004d  /* U+004D LATIN CAPITAL LETTER M */
#define XK_N                             0x004e  /* U+004E LATIN CAPITAL LETTER N */
#define XK_O                             0x004f  /* U+004F LATIN CAPITAL LETTER O */
#define XK_P                             0x0050  /* U+0050 LATIN CAPITAL LETTER P */
#define XK_Q                             0x0051  /* U+0051 LATIN CAPITAL LETTER Q */
#define XK_R                             0x0052  /* U+0052 LATIN CAPITAL LETTER R */
#define XK_S                             0x0053  /* U+0053 LATIN CAPITAL LETTER S */
#define XK_T                             0x0054  /* U+0054 LATIN CAPITAL LETTER T */
#define XK_U                             0x0055  /* U+0055 LATIN CAPITAL LETTER U */
#define XK_V                             0x0056  /* U+0056 LATIN CAPITAL LETTER V */
#define XK_W                             0x0057  /* U+0057 LATIN CAPITAL LETTER W */
#define XK_X                             0x0058  /* U+0058 LATIN CAPITAL LETTER X */
#define XK_Y                             0x0059  /* U+0059 LATIN CAPITAL LETTER Y */
#define XK_Z                             0x005a  /* U+005A LATIN CAPITAL LETTER Z */
#define XK_bracketleft                   0x005b  /* U+005B LEFT SQUARE BRACKET */
#define XK_backslash                     0x005c  /* U+005C REVERSE SOLIDUS */

* Fri 24 Jan 2014 04:24:42 AM JST

* Fri 24 Jan 2014 04:24:42 AM JST

* Fri 24 Jan 2014 04:24:42 AM JST
#define XK_bracketleft                   0x005b  /* U+005B LEFT SQUARE BRACKET */

* Fri 24 Jan 2014 04:24:55 AM JST
#define 
* Fri 24 Jan 2014 04:24:56 AM JST
#define 
* Fri 24 Jan 2014 04:24:56 AM JST
#define 
* Fri 24 Jan 2014 04:24:56 AM JST
#define 
* Fri 24 Jan 2014 04:24:56 AM JST
#define 
* Fri 24 Jan 2014 04:24:56 AM JST
#define 
* Fri 24 Jan 2014 04:24:56 AM JST
#define 
* Fri 24 Jan 2014 04:24:56 AM JST
#define 
* Fri 24 Jan 2014 04:24:56 AM JST
#define 
* Fri 24 Jan 2014 04:24:56 AM JST
#define 
* Fri 24 Jan 2014 04:24:56 AM JST
#define 
* Fri 24 Jan 2014 04:24:56 AM JST
#define 
* Fri 24 Jan 2014 04:24:57 AM JST
#define 
* Fri 24 Jan 2014 04:24:57 AM JST
#define 
* Fri 24 Jan 2014 04:24:57 AM JST
#define 
* Fri 24 Jan 2014 04:24:57 AM JST
#define 
* Fri 24 Jan 2014 04:24:57 AM JST
#define 
* Fri 24 Jan 2014 04:24:57 AM JST
#define 
* Fri 24 Jan 2014 04:24:57 AM JST
#define 
* Fri 24 Jan 2014 04:24:57 AM JST
#define 
* Fri 24 Jan 2014 04:24:57 AM JST
#define 
* Fri 24 Jan 2014 04:24:57 AM JST
#define 
* Fri 24 Jan 2014 04:24:57 AM JST
#define 
* Fri 24 Jan 2014 04:24:57 AM JST
#define 
* Fri 24 Jan 2014 04:24:57 AM JST
#define 
* Fri 24 Jan 2014 04:24:57 AM JST
#define 
* Fri 24 Jan 2014 04:25:05 AM JST
                     0x005c  /* U+005C REVERSE SOLIDUS */
* Fri 24 Jan 2014 04:25:05 AM JST
                             0x005a  /* U+005A LATIN CAPITAL LETTER Z */
* Fri 24 Jan 2014 04:25:05 AM JST
                             0x0059  /* U+0059 LATIN CAPITAL LETTER Y */
* Fri 24 Jan 2014 04:25:05 AM JST
                             0x0058  /* U+0058 LATIN CAPITAL LETTER X */
* Fri 24 Jan 2014 04:25:05 AM JST
                             0x0057  /* U+0057 LATIN CAPITAL LETTER W */
* Fri 24 Jan 2014 04:25:05 AM JST
                             0x0056  /* U+0056 LATIN CAPITAL LETTER V */
* Fri 24 Jan 2014 04:25:05 AM JST
                             0x0055  /* U+0055 LATIN CAPITAL LETTER U */
* Fri 24 Jan 2014 04:25:05 AM JST
                             0x0054  /* U+0054 LATIN CAPITAL LETTER T */
* Fri 24 Jan 2014 04:25:05 AM JST
                             0x0053  /* U+0053 LATIN CAPITAL LETTER S */
* Fri 24 Jan 2014 04:25:05 AM JST
                             0x0052  /* U+0052 LATIN CAPITAL LETTER R */
* Fri 24 Jan 2014 04:25:05 AM JST
                             0x0051  /* U+0051 LATIN CAPITAL LETTER Q */
* Fri 24 Jan 2014 04:25:06 AM JST
                             0x0050  /* U+0050 LATIN CAPITAL LETTER P */
* Fri 24 Jan 2014 04:25:06 AM JST
                             0x004f  /* U+004F LATIN CAPITAL LETTER O */
* Fri 24 Jan 2014 04:25:06 AM JST
                             0x004e  /* U+004E LATIN CAPITAL LETTER N */
* Fri 24 Jan 2014 04:25:06 AM JST
                             0x004d  /* U+004D LATIN CAPITAL LETTER M */
* Fri 24 Jan 2014 04:25:06 AM JST
                             0x004c  /* U+004C LATIN CAPITAL LETTER L */
* Fri 24 Jan 2014 04:25:06 AM JST
                             0x004b  /* U+004B LATIN CAPITAL LETTER K */
* Fri 24 Jan 2014 04:25:06 AM JST
                             0x004a  /* U+004A LATIN CAPITAL LETTER J */
* Fri 24 Jan 2014 04:25:06 AM JST
                             0x0049  /* U+0049 LATIN CAPITAL LETTER I */
* Fri 24 Jan 2014 04:25:06 AM JST
                             0x0048  /* U+0048 LATIN CAPITAL LETTER H */
* Fri 24 Jan 2014 04:25:06 AM JST
                             0x0047  /* U+0047 LATIN CAPITAL LETTER G */
* Fri 24 Jan 2014 04:25:06 AM JST
                             0x0046  /* U+0046 LATIN CAPITAL LETTER F */
* Fri 24 Jan 2014 04:25:06 AM JST
                             0x0045  /* U+0045 LATIN CAPITAL LETTER E */
* Fri 24 Jan 2014 04:25:06 AM JST
                             0x0044  /* U+0044 LATIN CAPITAL LETTER D */
* Fri 24 Jan 2014 04:25:06 AM JST
                             0x0043  /* U+0043 LATIN CAPITAL LETTER C */
* Fri 24 Jan 2014 04:25:07 AM JST
                             0x0042  /* U+0042 LATIN CAPITAL LETTER B */
* Fri 24 Jan 2014 04:25:19 AM JST
XK_B
XK_C
XK_D
XK_E
XK_F
XK_G
XK_H
XK_I
XK_J
XK_K
XK_L
XK_M
XK_N
XK_O
XK_P
XK_Q
XK_R
XK_S
XK_T
XK_U
XK_V
XK_W
XK_X
XK_Y
XK_Z
XK_backslash

* Fri 24 Jan 2014 04:26:30 AM JST
std::cout << XKeysymToString(
* Fri 24 Jan 2014 04:26:51 AM JST
) << std::endl;
* Fri 24 Jan 2014 04:27:19 AM JST
std::cout << XKeysymToString(XK_C) << std::endl;
std::cout << XKeysymToString(XK_D) << std::endl;
std::cout << XKeysymToString(XK_E) << std::endl;
std::cout << XKeysymToString(XK_F) << std::endl;
std::cout << XKeysymToString(XK_G) << std::endl;
std::cout << XKeysymToString(XK_H) << std::endl;
std::cout << XKeysymToString(XK_I) << std::endl;
std::cout << XKeysymToString(XK_J) << std::endl;
std::cout << XKeysymToString(XK_K) << std::endl;
std::cout << XKeysymToString(XK_L) << std::endl;
std::cout << XKeysymToString(XK_M) << std::endl;
std::cout << XKeysymToString(XK_N) << std::endl;
std::cout << XKeysymToString(XK_O) << std::endl;
std::cout << XKeysymToString(XK_P) << std::endl;
std::cout << XKeysymToString(XK_Q) << std::endl;
std::cout << XKeysymToString(XK_R) << std::endl;
std::cout << XKeysymToString(XK_S) << std::endl;
std::cout << XKeysymToString(XK_T) << std::endl;
std::cout << XKeysymToString(XK_U) << std::endl;
std::cout << XKeysymToString(XK_V) << std::endl;
std::cout << XKeysymToString(XK_W) << std::endl;
std::cout << XKeysymToString(XK_X) << std::endl;
std::cout << XKeysymToString(XK_Y) << std::endl;
std::cout << XKeysymToString(XK_Z) << std::endl;
std::cout << XKeysymToString(XK_backslash) << std::endl;

* Fri 24 Jan 2014 04:28:48 AM JST
ajdlakj
* Fri 24 Jan 2014 04:29:35 AM JST
KeySym
* Fri 24 Jan 2014 04:30:17 AM JST
int SendKeyEvent(Display *display, Window &win, Window &winRoot,
                 bool press, int keycode, int modifiers)
{
  LockDisplay(display);
  XKeyEvent event = createKeyEvent(display, win, winRoot, press,
                                   keycode, modifiers);
  XSendEvent(event.display, event.window, True,
             KeyPressMask|KeyReleaseMask, (XEvent *)&event);
  UnlockDisplay(display);
  XFlush(display);
  return 1;
}

* Fri 24 Jan 2014 04:30:24 AM JST
int
* Fri 24 Jan 2014 04:30:29 AM JST
keycode
* Fri 24 Jan 2014 04:31:34 AM JST
key
* Fri 24 Jan 2014 04:31:58 AM JST
int SendKey (Display *display, Window &win, Window &winRoot,
             char *key, int modifiers)
{
  KeyCode keycode = XKeysymToKeycode(display, XStringToKeysym(key));
  SendKeyEvent(display, win, winRoot, PressKey, keycode, modifiers);
  SendKeyEvent(display, win, winRoot, ReleaseKey, keycode, modifiers);
  return 1;
}

* Fri 24 Jan 2014 04:32:09 AM JST
char
* Fri 24 Jan 2014 04:32:33 AM JST
KeySym
* Fri 24 Jan 2014 04:37:29 AM JST
#define XK_VoidSymbol                  0xffffff  /* Void symbol */

#ifdef XK_MISCELLANY
/*
 * TTY function keys, cleverly chosen to map to ASCII, for convenience of
 * programming, but could have been arbitrary (at the cost of lookup
 * tables in client code).
 */

#define XK_BackSpace                     0xff08  /* Back space, back char */
#define XK_Tab                           0xff09
#define XK_Linefeed                      0xff0a  /* Linefeed, LF */
#define XK_Clear                         0xff0b
#define XK_Return                        0xff0d  /* Return, enter */
#define XK_Pause                         0xff13  /* Pause, hold */
#define XK_Scroll_Lock                   0xff14
#define XK_Sys_Req                       0xff15
#define XK_Escape                        0xff1b
#define XK_Delete                        0xffff  /* Delete, rubout */



/* International & multi-key character composition */

#define XK_Multi_key                     0xff20  /* Multi-key character compose */
#define XK_Codeinput                     0xff37
#define XK_SingleCandidate               0xff3c
#define XK_MultipleCandidate             0xff3d
#define XK_PreviousCandidate             0xff3e

/* Japanese keyboard support */

#define XK_Kanji                         0xff21  /* Kanji, Kanji convert */
#define XK_Muhenkan                      0xff22  /* Cancel Conversion */
#define XK_Henkan_Mode                   0xff23  /* Start/Stop Conversion */
#define XK_Henkan                        0xff23  /* Alias for Henkan_Mode */
#define XK_Romaji                        0xff24  /* to Romaji */
#define XK_Hiragana                      0xff25  /* to Hiragana */
#define XK_Katakana                      0xff26  /* to Katakana */
#define XK_Hiragana_Katakana             0xff27  /* Hiragana/Katakana toggle */
#define XK_Zenkaku                       0xff28  /* to Zenkaku */
#define XK_Hankaku                       0xff29  /* to Hankaku */
#define XK_Zenkaku_Hankaku               0xff2a  /* Zenkaku/Hankaku toggle */
#define XK_Touroku                       0xff2b  /* Add to Dictionary */
#define XK_Massyo                        0xff2c  /* Delete from Dictionary */
#define XK_Kana_Lock                     0xff2d  /* Kana Lock */
#define XK_Kana_Shift                    0xff2e  /* Kana Shift */
#define XK_Eisu_Shift                    0xff2f  /* Alphanumeric Shift */
#define XK_Eisu_toggle                   0xff30  /* Alphanumeric toggle */
#define XK_Kanji_Bangou                  0xff37  /* Codeinput */
#define XK_Zen_Koho                      0xff3d  /* Multiple/All Candidate(s) */
#define XK_Mae_Koho                      0xff3e  /* Previous Candidate */

/* 0xff31 thru 0xff3f are under XK_KOREAN */

/* Cursor control & motion */

#define XK_Home                          0xff50
#define XK_Left                          0xff51  /* Move left, left arrow */
#define XK_Up                            0xff52  /* Move up, up arrow */
#define XK_Right                         0xff53  /* Move right, right arrow */
#define XK_Down                          0xff54  /* Move down, down arrow */
#define XK_Prior                         0xff55  /* Prior, previous */
#define XK_Page_Up                       0xff55
#define XK_Next                          0xff56  /* Next */
#define XK_Page_Down                     0xff56
#define XK_End                           0xff57  /* EOL */
#define XK_Begin                         0xff58  /* BOL */


/* Misc functions */

#define XK_Select                        0xff60  /* Select, mark */
#define XK_Print                         0xff61
#define XK_Execute                       0xff62  /* Execute, run, do */
#define XK_Insert                        0xff63  /* Insert, insert here */
#define XK_Undo                          0xff65
#define XK_Redo                          0xff66  /* Redo, again */
#define XK_Menu                          0xff67
#define XK_Find                          0xff68  /* Find, search */
#define XK_Cancel                        0xff69  /* Cancel, stop, abort, exit */
#define XK_Help                          0xff6a  /* Help */
#define XK_Break                         0xff6b
#define XK_Mode_switch                   0xff7e  /* Character set switch */
#define XK_script_switch                 0xff7e  /* Alias for mode_switch */
#define XK_Num_Lock                      0xff7f

/* Keypad functions, keypad numbers cleverly chosen to map to ASCII */

#define XK_KP_Space                      0xff80  /* Space */
#define XK_KP_Tab                        0xff89
#define XK_KP_Enter                      0xff8d  /* Enter */
#define XK_KP_F1                         0xff91  /* PF1, KP_A, ... */
#define XK_KP_F2                         0xff92
#define XK_KP_F3                         0xff93
#define XK_KP_F4                         0xff94
#define XK_KP_Home                       0xff95
#define XK_KP_Left                       0xff96
#define XK_KP_Up                         0xff97
#define XK_KP_Right                      0xff98
#define XK_KP_Down                       0xff99
#define XK_KP_Prior                      0xff9a
#define XK_KP_Page_Up                    0xff9a
#define XK_KP_Next                       0xff9b
#define XK_KP_Page_Down                  0xff9b
#define XK_KP_End                        0xff9c
#define XK_KP_Begin                      0xff9d
#define XK_KP_Insert                     0xff9e
#define XK_KP_Delete                     0xff9f
#define XK_KP_Equal                      0xffbd  /* Equals */
#define XK_KP_Multiply                   0xffaa
#define XK_KP_Add                        0xffab
#define XK_KP_Separator                  0xffac  /* Separator, often comma */
#define XK_KP_Subtract                   0xffad
#define XK_KP_Decimal                    0xffae
#define XK_KP_Divide                     0xffaf

#define XK_KP_0                          0xffb0
#define XK_KP_1                          0xffb1
#define XK_KP_2                          0xffb2
#define XK_KP_3                          0xffb3
#define XK_KP_4                          0xffb4
#define XK_KP_5                          0xffb5
#define XK_KP_6                          0xffb6
#define XK_KP_7                          0xffb7
#define XK_KP_8                          0xffb8
#define XK_KP_9                          0xffb9



/*
 * Auxiliary functions; note the duplicate definitions for left and right
 * function keys;  Sun keyboards and a few other manufacturers have such
 * function key groups on the left and/or right sides of the keyboard.
 * We've not found a keyboard with more than 35 function keys total.
 */

#define XK_F1                            0xffbe
#define XK_F2                            0xffbf
#define XK_F3                            0xffc0
#define XK_F4                            0xffc1
#define XK_F5                            0xffc2
#define XK_F6                            0xffc3
#define XK_F7                            0xffc4
#define XK_F8                            0xffc5
#define XK_F9                            0xffc6
#define XK_F10                           0xffc7
#define XK_F11                           0xffc8
#define XK_L1                            0xffc8
#define XK_F12                           0xffc9
#define XK_L2                            0xffc9
#define XK_F13                           0xffca
#define XK_L3                            0xffca
#define XK_F14                           0xffcb
#define XK_L4                            0xffcb
#define XK_F15                           0xffcc
#define XK_L5                            0xffcc
#define XK_F16                           0xffcd
#define XK_L6                            0xffcd
#define XK_F17                           0xffce
#define XK_L7                            0xffce
#define XK_F18                           0xffcf
#define XK_L8                            0xffcf
#define XK_F19                           0xffd0
#define XK_L9                            0xffd0
#define XK_F20                           0xffd1
#define XK_L10                           0xffd1
#define XK_F21                           0xffd2
#define XK_R1                            0xffd2
#define XK_F22                           0xffd3
#define XK_R2                            0xffd3
#define XK_F23                           0xffd4
#define XK_R3                            0xffd4
#define XK_F24                           0xffd5
#define XK_R4                            0xffd5
#define XK_F25                           0xffd6
#define XK_R5                            0xffd6
#define XK_F26                           0xffd7
#define XK_R6                            0xffd7
#define XK_F27                           0xffd8
#define XK_R7                            0xffd8
#define XK_F28                           0xffd9
#define XK_R8                            0xffd9
#define XK_F29                           0xffda
#define XK_R9                            0xffda
#define XK_F30                           0xffdb
#define XK_R10                           0xffdb
#define XK_F31                           0xffdc
#define XK_R11                           0xffdc
#define XK_F32                           0xffdd
#define XK_R12                           0xffdd
#define XK_F33                           0xffde
#define XK_R13                           0xffde
#define XK_F34                           0xffdf
#define XK_R14                           0xffdf
#define XK_F35                           0xffe0
#define XK_R15                           0xffe0

/* Modifiers */

#define XK_Shift_L                       0xffe1  /* Left shift */
#define XK_Shift_R                       0xffe2  /* Right shift */
#define XK_Control_L                     0xffe3  /* Left control */
#define XK_Control_R                     0xffe4  /* Right control */
#define XK_Caps_Lock                     0xffe5  /* Caps lock */
#define XK_Shift_Lock                    0xffe6  /* Shift lock */

#define XK_Meta_L                        0xffe7  /* Left meta */
#define XK_Meta_R                        0xffe8  /* Right meta */
#define XK_Alt_L                         0xffe9  /* Left alt */
#define XK_Alt_R                         0xffea  /* Right alt */
#define XK_Super_L                       0xffeb  /* Left super */
#define XK_Super_R                       0xffec  /* Right super */
#define XK_Hyper_L                       0xffed  /* Left hyper */
#define XK_Hyper_R                       0xffee  /* Right hyper */
#endif /* XK_MISCELLANY */

/*
 * Keyboard (XKB) Extension function and modifier keys
 * (from Appendix C of "The X Keyboard Extension: Protocol Specification")
 * Byte 3 = 0xfe
 */

#ifdef XK_XKB_KEYS
#define XK_ISO_Lock                      0xfe01
#define XK_ISO_Level2_Latch              0xfe02
#define XK_ISO_Level3_Shift              0xfe03
#define XK_ISO_Level3_Latch              0xfe04
#define XK_ISO_Level3_Lock               0xfe05
#define XK_ISO_Level5_Shift              0xfe11
#define XK_ISO_Level5_Latch              0xfe12
#define XK_ISO_Level5_Lock               0xfe13
#define XK_ISO_Group_Shift               0xff7e  /* Alias for mode_switch */
#define XK_ISO_Group_Latch               0xfe06
#define XK_ISO_Group_Lock                0xfe07
#define XK_ISO_Next_Group                0xfe08
#define XK_ISO_Next_Group_Lock           0xfe09
#define XK_ISO_Prev_Group                0xfe0a
#define XK_ISO_Prev_Group_Lock           0xfe0b
#define XK_ISO_First_Group               0xfe0c
#define XK_ISO_First_Group_Lock          0xfe0d
#define XK_ISO_Last_Group                0xfe0e
#define XK_ISO_Last_Group_Lock           0xfe0f

#define XK_ISO_Left_Tab                  0xfe20
#define XK_ISO_Move_Line_Up              0xfe21
#define XK_ISO_Move_Line_Down            0xfe22
#define XK_ISO_Partial_Line_Up           0xfe23
#define XK_ISO_Partial_Line_Down         0xfe24
#define XK_ISO_Partial_Space_Left        0xfe25
#define XK_ISO_Partial_Space_Right       0xfe26
#define XK_ISO_Set_Margin_Left           0xfe27
#define XK_ISO_Set_Margin_Right          0xfe28
#define XK_ISO_Release_Margin_Left       0xfe29
#define XK_ISO_Release_Margin_Right      0xfe2a
#define XK_ISO_Release_Both_Margins      0xfe2b
#define XK_ISO_Fast_Cursor_Left          0xfe2c
#define XK_ISO_Fast_Cursor_Right         0xfe2d
#define XK_ISO_Fast_Cursor_Up            0xfe2e
#define XK_ISO_Fast_Cursor_Down          0xfe2f
#define XK_ISO_Continuous_Underline      0xfe30
#define XK_ISO_Discontinuous_Underline   0xfe31
#define XK_ISO_Emphasize                 0xfe32
#define XK_ISO_Center_Object             0xfe33
#define XK_ISO_Enter                     0xfe34

#define XK_dead_grave                    0xfe50
#define XK_dead_acute                    0xfe51
#define XK_dead_circumflex               0xfe52
#define XK_dead_tilde                    0xfe53
#define XK_dead_perispomeni              0xfe53  /* alias for dead_tilde */
#define XK_dead_macron                   0xfe54
#define XK_dead_breve                    0xfe55
#define XK_dead_abovedot                 0xfe56
#define XK_dead_diaeresis                0xfe57
#define XK_dead_abovering                0xfe58
#define XK_dead_doubleacute              0xfe59
#define XK_dead_caron                    0xfe5a
#define XK_dead_cedilla                  0xfe5b
#define XK_dead_ogonek                   0xfe5c
#define XK_dead_iota                     0xfe5d
#define XK_dead_voiced_sound             0xfe5e
#define XK_dead_semivoiced_sound         0xfe5f
#define XK_dead_belowdot                 0xfe60
#define XK_dead_hook                     0xfe61
#define XK_dead_horn                     0xfe62
#define XK_dead_stroke                   0xfe63
#define XK_dead_abovecomma               0xfe64
#define XK_dead_psili                    0xfe64  /* alias for dead_abovecomma */
#define XK_dead_abovereversedcomma       0xfe65
#define XK_dead_dasia                    0xfe65  /* alias for dead_abovereversedcomma */
#define XK_dead_doublegrave              0xfe66
#define XK_dead_belowring                0xfe67
#define XK_dead_belowmacron              0xfe68
#define XK_dead_belowcircumflex          0xfe69
#define XK_dead_belowtilde               0xfe6a
#define XK_dead_belowbreve               0xfe6b
#define XK_dead_belowdiaeresis           0xfe6c
#define XK_dead_invertedbreve            0xfe6d
#define XK_dead_belowcomma               0xfe6e
#define XK_dead_currency                 0xfe6f

/* dead vowels for universal syllable entry */
#define XK_dead_a                        0xfe80
#define XK_dead_A                        0xfe81
#define XK_dead_e                        0xfe82
#define XK_dead_E                        0xfe83
#define XK_dead_i                        0xfe84
#define XK_dead_I                        0xfe85
#define XK_dead_o                        0xfe86
#define XK_dead_O                        0xfe87
#define XK_dead_u                        0xfe88
#define XK_dead_U                        0xfe89
#define XK_dead_small_schwa              0xfe8a
#define XK_dead_capital_schwa            0xfe8b

#define XK_dead_greek                    0xfe8c

#define XK_First_Virtual_Screen          0xfed0
#define XK_Prev_Virtual_Screen           0xfed1
#define XK_Next_Virtual_Screen           0xfed2
#define XK_Last_Virtual_Screen           0xfed4
#define XK_Terminate_Server              0xfed5

#define XK_AccessX_Enable                0xfe70
#define XK_AccessX_Feedback_Enable       0xfe71
#define XK_RepeatKeys_Enable             0xfe72
#define XK_SlowKeys_Enable               0xfe73
#define XK_BounceKeys_Enable             0xfe74
#define XK_StickyKeys_Enable             0xfe75
#define XK_MouseKeys_Enable              0xfe76
#define XK_MouseKeys_Accel_Enable        0xfe77
#define XK_Overlay1_Enable               0xfe78
#define XK_Overlay2_Enable               0xfe79
#define XK_AudibleBell_Enable            0xfe7a

#define XK_Pointer_Left                  0xfee0
#define XK_Pointer_Right                 0xfee1
#define XK_Pointer_Up                    0xfee2
#define XK_Pointer_Down                  0xfee3
#define XK_Pointer_UpLeft                0xfee4
#define XK_Pointer_UpRight               0xfee5
#define XK_Pointer_DownLeft              0xfee6
#define XK_Pointer_DownRight             0xfee7
#define XK_Pointer_Button_Dflt           0xfee8
#define XK_Pointer_Button1               0xfee9
#define XK_Pointer_Button2               0xfeea
#define XK_Pointer_Button3               0xfeeb
#define XK_Pointer_Button4               0xfeec
#define XK_Pointer_Button5               0xfeed
#define XK_Pointer_DblClick_Dflt         0xfeee
#define XK_Pointer_DblClick1             0xfeef
#define XK_Pointer_DblClick2             0xfef0
#define XK_Pointer_DblClick3             0xfef1
#define XK_Pointer_DblClick4             0xfef2
#define XK_Pointer_DblClick5             0xfef3
#define XK_Pointer_Drag_Dflt             0xfef4
#define XK_Pointer_Drag1                 0xfef5
#define XK_Pointer_Drag2                 0xfef6
#define XK_Pointer_Drag3                 0xfef7
#define XK_Pointer_Drag4                 0xfef8
#define XK_Pointer_Drag5                 0xfefd

#define XK_Pointer_EnableKeys            0xfef9
#define XK_Pointer_Accelerate            0xfefa
#define XK_Pointer_DfltBtnNext           0xfefb
#define XK_Pointer_DfltBtnPrev           0xfefc

/* Single-Stroke Multiple-Character N-Graph Keysyms For The X Input Method */

#define XK_ch                            0xfea0
#define XK_Ch                            0xfea1
#define XK_CH                            0xfea2
#define XK_c_h                           0xfea3
#define XK_C_h                           0xfea4
#define XK_C_H                           0xfea5

#endif /* XK_XKB_KEYS */

/*
 * 3270 Terminal Keys
 * Byte 3 = 0xfd
 */

#ifdef XK_3270
#define XK_3270_Duplicate                0xfd01
#define XK_3270_FieldMark                0xfd02
#define XK_3270_Right2                   0xfd03
#define XK_3270_Left2                    0xfd04
#define XK_3270_BackTab                  0xfd05
#define XK_3270_EraseEOF                 0xfd06
#define XK_3270_EraseInput               0xfd07
#define XK_3270_Reset                    0xfd08
#define XK_3270_Quit                     0xfd09
#define XK_3270_PA1                      0xfd0a
#define XK_3270_PA2                      0xfd0b
#define XK_3270_PA3                      0xfd0c
#define XK_3270_Test                     0xfd0d
#define XK_3270_Attn                     0xfd0e
#define XK_3270_CursorBlink              0xfd0f
#define XK_3270_AltCursor                0xfd10
#define XK_3270_KeyClick                 0xfd11
#define XK_3270_Jump                     0xfd12
#define XK_3270_Ident                    0xfd13
#define XK_3270_Rule                     0xfd14
#define XK_3270_Copy                     0xfd15
#define XK_3270_Play                     0xfd16
#define XK_3270_Setup                    0xfd17
#define XK_3270_Record                   0xfd18
#define XK_3270_ChangeScreen             0xfd19
#define XK_3270_DeleteWord               0xfd1a
#define XK_3270_ExSelect                 0xfd1b
#define XK_3270_CursorSelect             0xfd1c
#define XK_3270_PrintScreen              0xfd1d
#define XK_3270_Enter                    0xfd1e
#endif /* XK_3270 */

/*
 * Latin 1
 * (ISO/IEC 8859-1 = Unicode U+0020..U+00FF)
 * Byte 3 = 0
 */
#ifdef XK_LATIN1
#define XK_space                         0x0020  /* U+0020 SPACE */
#define XK_exclam                        0x0021  /* U+0021 EXCLAMATION MARK */
#define XK_quotedbl                      0x0022  /* U+0022 QUOTATION MARK */
#define XK_numbersign                    0x0023  /* U+0023 NUMBER SIGN */
#define XK_dollar                        0x0024  /* U+0024 DOLLAR SIGN */
#define XK_percent                       0x0025  /* U+0025 PERCENT SIGN */
#define XK_ampersand                     0x0026  /* U+0026 AMPERSAND */
#define XK_apostrophe                    0x0027  /* U+0027 APOSTROPHE */
#define XK_quoteright                    0x0027  /* deprecated */
#define XK_parenleft                     0x0028  /* U+0028 LEFT PARENTHESIS */
#define XK_parenright                    0x0029  /* U+0029 RIGHT PARENTHESIS */
#define XK_asterisk                      0x002a  /* U+002A ASTERISK */
#define XK_plus                          0x002b  /* U+002B PLUS SIGN */
#define XK_comma                         0x002c  /* U+002C COMMA */
#define XK_minus                         0x002d  /* U+002D HYPHEN-MINUS */
#define XK_period                        0x002e  /* U+002E FULL STOP */
#define XK_slash                         0x002f  /* U+002F SOLIDUS */
#define XK_0                             0x0030  /* U+0030 DIGIT ZERO */
#define XK_1                             0x0031  /* U+0031 DIGIT ONE */
#define XK_2                             0x0032  /* U+0032 DIGIT TWO */
#define XK_3                             0x0033  /* U+0033 DIGIT THREE */
#define XK_4                             0x0034  /* U+0034 DIGIT FOUR */
#define XK_5                             0x0035  /* U+0035 DIGIT FIVE */
#define XK_6                             0x0036  /* U+0036 DIGIT SIX */
#define XK_7                             0x0037  /* U+0037 DIGIT SEVEN */
#define XK_8                             0x0038  /* U+0038 DIGIT EIGHT */
#define XK_9                             0x0039  /* U+0039 DIGIT NINE */
#define XK_colon                         0x003a  /* U+003A COLON */
#define XK_semicolon                     0x003b  /* U+003B SEMICOLON */
#define XK_less                          0x003c  /* U+003C LESS-THAN SIGN */
#define XK_equal                         0x003d  /* U+003D EQUALS SIGN */
#define XK_greater                       0x003e  /* U+003E GREATER-THAN SIGN */
#define XK_question                      0x003f  /* U+003F QUESTION MARK */
#define XK_at                            0x0040  /* U+0040 COMMERCIAL AT */
#define XK_A                             0x0041  /* U+0041 LATIN CAPITAL LETTER A */
#define XK_B                             0x0042  /* U+0042 LATIN CAPITAL LETTER B */
#define XK_C                             0x0043  /* U+0043 LATIN CAPITAL LETTER C */
#define XK_D                             0x0044  /* U+0044 LATIN CAPITAL LETTER D */
#define XK_E                             0x0045  /* U+0045 LATIN CAPITAL LETTER E */
#define XK_F                             0x0046  /* U+0046 LATIN CAPITAL LETTER F */
#define XK_G                             0x0047  /* U+0047 LATIN CAPITAL LETTER G */
#define XK_H                             0x0048  /* U+0048 LATIN CAPITAL LETTER H */
#define XK_I                             0x0049  /* U+0049 LATIN CAPITAL LETTER I */
#define XK_J                             0x004a  /* U+004A LATIN CAPITAL LETTER J */
#define XK_K                             0x004b  /* U+004B LATIN CAPITAL LETTER K */
#define XK_L                             0x004c  /* U+004C LATIN CAPITAL LETTER L */
#define XK_M                             0x004d  /* U+004D LATIN CAPITAL LETTER M */
#define XK_N                             0x004e  /* U+004E LATIN CAPITAL LETTER N */
#define XK_O                             0x004f  /* U+004F LATIN CAPITAL LETTER O */
#define XK_P                             0x0050  /* U+0050 LATIN CAPITAL LETTER P */
#define XK_Q                             0x0051  /* U+0051 LATIN CAPITAL LETTER Q */
#define XK_R                             0x0052  /* U+0052 LATIN CAPITAL LETTER R */
#define XK_S                             0x0053  /* U+0053 LATIN CAPITAL LETTER S */
#define XK_T                             0x0054  /* U+0054 LATIN CAPITAL LETTER T */
#define XK_U                             0x0055  /* U+0055 LATIN CAPITAL LETTER U */
#define XK_V                             0x0056  /* U+0056 LATIN CAPITAL LETTER V */
#define XK_W                             0x0057  /* U+0057 LATIN CAPITAL LETTER W */
#define XK_X                             0x0058  /* U+0058 LATIN CAPITAL LETTER X */
#define XK_Y                             0x0059  /* U+0059 LATIN CAPITAL LETTER Y */
#define XK_Z                             0x005a  /* U+005A LATIN CAPITAL LETTER Z */
#define XK_bracketleft                   0x005b  /* U+005B LEFT SQUARE BRACKET */
#define XK_backslash                     0x005c  /* U+005C REVERSE SOLIDUS */
#define XK_bracketright                  0x005d  /* U+005D RIGHT SQUARE BRACKET */
#define XK_asciicircum                   0x005e  /* U+005E CIRCUMFLEX ACCENT */
#define XK_underscore                    0x005f  /* U+005F LOW LINE */
#define XK_grave                         0x0060  /* U+0060 GRAVE ACCENT */
#define XK_quoteleft                     0x0060  /* deprecated */
#define XK_a                             0x0061  /* U+0061 LATIN SMALL LETTER A */
#define XK_b                             0x0062  /* U+0062 LATIN SMALL LETTER B */
#define XK_c                             0x0063  /* U+0063 LATIN SMALL LETTER C */
#define XK_d                             0x0064  /* U+0064 LATIN SMALL LETTER D */
#define XK_e                             0x0065  /* U+0065 LATIN SMALL LETTER E */
#define XK_f                             0x0066  /* U+0066 LATIN SMALL LETTER F */
#define XK_g                             0x0067  /* U+0067 LATIN SMALL LETTER G */
#define XK_h                             0x0068  /* U+0068 LATIN SMALL LETTER H */
#define XK_i                             0x0069  /* U+0069 LATIN SMALL LETTER I */
#define XK_j                             0x006a  /* U+006A LATIN SMALL LETTER J */
#define XK_k                             0x006b  /* U+006B LATIN SMALL LETTER K */
#define XK_l                             0x006c  /* U+006C LATIN SMALL LETTER L */
#define XK_m                             0x006d  /* U+006D LATIN SMALL LETTER M */
#define XK_n                             0x006e  /* U+006E LATIN SMALL LETTER N */
#define XK_o                             0x006f  /* U+006F LATIN SMALL LETTER O */
#define XK_p                             0x0070  /* U+0070 LATIN SMALL LETTER P */
#define XK_q                             0x0071  /* U+0071 LATIN SMALL LETTER Q */
#define XK_r                             0x0072  /* U+0072 LATIN SMALL LETTER R */
#define XK_s                             0x0073  /* U+0073 LATIN SMALL LETTER S */
#define XK_t                             0x0074  /* U+0074 LATIN SMALL LETTER T */
#define XK_u                             0x0075  /* U+0075 LATIN SMALL LETTER U */
#define XK_v                             0x0076  /* U+0076 LATIN SMALL LETTER V */
#define XK_w                             0x0077  /* U+0077 LATIN SMALL LETTER W */
#define XK_x                             0x0078  /* U+0078 LATIN SMALL LETTER X */
#define XK_y                             0x0079  /* U+0079 LATIN SMALL LETTER Y */
#define XK_z                             0x007a  /* U+007A LATIN SMALL LETTER Z */
#define XK_braceleft                     0x007b  /* U+007B LEFT CURLY BRACKET */
#define XK_bar                           0x007c  /* U+007C VERTICAL LINE */
#define XK_braceright                    0x007d  /* U+007D RIGHT CURLY BRACKET */
#define XK_asciitilde                    0x007e  /* U+007E TILDE */

#define XK_nobreakspace                  0x00a0  /* U+00A0 NO-BREAK SPACE */
#define XK_exclamdown                    0x00a1  /* U+00A1 INVERTED EXCLAMATION MARK */
#define XK_cent                          0x00a2  /* U+00A2 CENT SIGN */
#define XK_sterling                      0x00a3  /* U+00A3 POUND SIGN */
#define XK_currency                      0x00a4  /* U+00A4 CURRENCY SIGN */
#define XK_yen                           0x00a5  /* U+00A5 YEN SIGN */
#define XK_brokenbar                     0x00a6  /* U+00A6 BROKEN BAR */
#define XK_section                       0x00a7  /* U+00A7 SECTION SIGN */
#define XK_diaeresis                     0x00a8  /* U+00A8 DIAERESIS */
#define XK_copyright                     0x00a9  /* U+00A9 COPYRIGHT SIGN */
#define XK_ordfeminine                   0x00aa  /* U+00AA FEMININE ORDINAL INDICATOR */
#define XK_guillemotleft                 0x00ab  /* U+00AB LEFT-POINTING DOUBLE ANGLE QUOTATION MARK */
#define XK_notsign                       0x00ac  /* U+00AC NOT SIGN */
#define XK_hyphen                        0x00ad  /* U+00AD SOFT HYPHEN */
#define XK_registered                    0x00ae  /* U+00AE REGISTERED SIGN */
#define XK_macron                        0x00af  /* U+00AF MACRON */
#define XK_degree                        0x00b0  /* U+00B0 DEGREE SIGN */
#define XK_plusminus                     0x00b1  /* U+00B1 PLUS-MINUS SIGN */
#define XK_twosuperior                   0x00b2  /* U+00B2 SUPERSCRIPT TWO */
#define XK_threesuperior                 0x00b3  /* U+00B3 SUPERSCRIPT THREE */
#define XK_acute                         0x00b4  /* U+00B4 ACUTE ACCENT */
#define XK_mu                            0x00b5  /* U+00B5 MICRO SIGN */
#define XK_paragraph                     0x00b6  /* U+00B6 PILCROW SIGN */
#define XK_periodcentered                0x00b7  /* U+00B7 MIDDLE DOT */
#define XK_cedilla                       0x00b8  /* U+00B8 CEDILLA */
#define XK_onesuperior                   0x00b9  /* U+00B9 SUPERSCRIPT ONE */
#define XK_masculine                     0x00ba  /* U+00BA MASCULINE ORDINAL INDICATOR */
#define XK_guillemotright                0x00bb  /* U+00BB RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK */
#define XK_onequarter                    0x00bc  /* U+00BC VULGAR FRACTION ONE QUARTER */
#define XK_onehalf                       0x00bd  /* U+00BD VULGAR FRACTION ONE HALF */
#define XK_threequarters                 0x00be  /* U+00BE VULGAR FRACTION THREE QUARTERS */
#define XK_questiondown                  0x00bf  /* U+00BF INVERTED QUESTION MARK */
#define XK_Agrave                        0x00c0  /* U+00C0 LATIN CAPITAL LETTER A WITH GRAVE */
#define XK_Aacute                        0x00c1  /* U+00C1 LATIN CAPITAL LETTER A WITH ACUTE */
#define XK_Acircumflex                   0x00c2  /* U+00C2 LATIN CAPITAL LETTER A WITH CIRCUMFLEX */
#define XK_Atilde                        0x00c3  /* U+00C3 LATIN CAPITAL LETTER A WITH TILDE */
#define XK_Adiaeresis                    0x00c4  /* U+00C4 LATIN CAPITAL LETTER A WITH DIAERESIS */
#define XK_Aring                         0x00c5  /* U+00C5 LATIN CAPITAL LETTER A WITH RING ABOVE */
#define XK_AE                            0x00c6  /* U+00C6 LATIN CAPITAL LETTER AE */
#define XK_Ccedilla                      0x00c7  /* U+00C7 LATIN CAPITAL LETTER C WITH CEDILLA */
#define XK_Egrave                        0x00c8  /* U+00C8 LATIN CAPITAL LETTER E WITH GRAVE */
#define XK_Eacute                        0x00c9  /* U+00C9 LATIN CAPITAL LETTER E WITH ACUTE */
#define XK_Ecircumflex                   0x00ca  /* U+00CA LATIN CAPITAL LETTER E WITH CIRCUMFLEX */
#define XK_Ediaeresis                    0x00cb  /* U+00CB LATIN CAPITAL LETTER E WITH DIAERESIS */
#define XK_Igrave                        0x00cc  /* U+00CC LATIN CAPITAL LETTER I WITH GRAVE */
#define XK_Iacute                        0x00cd  /* U+00CD LATIN CAPITAL LETTER I WITH ACUTE */
#define XK_Icircumflex                   0x00ce  /* U+00CE LATIN CAPITAL LETTER I WITH CIRCUMFLEX */
#define XK_Idiaeresis                    0x00cf  /* U+00CF LATIN CAPITAL LETTER I WITH DIAERESIS */
#define XK_ETH                           0x00d0  /* U+00D0 LATIN CAPITAL LETTER ETH */
#define XK_Eth                           0x00d0  /* deprecated */
#define XK_Ntilde                        0x00d1  /* U+00D1 LATIN CAPITAL LETTER N WITH TILDE */
#define XK_Ograve                        0x00d2  /* U+00D2 LATIN CAPITAL LETTER O WITH GRAVE */
#define XK_Oacute                        0x00d3  /* U+00D3 LATIN CAPITAL LETTER O WITH ACUTE */
#define XK_Ocircumflex                   0x00d4  /* U+00D4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX */
#define XK_Otilde                        0x00d5  /* U+00D5 LATIN CAPITAL LETTER O WITH TILDE */
#define XK_Odiaeresis                    0x00d6  /* U+00D6 LATIN CAPITAL LETTER O WITH DIAERESIS */
#define XK_multiply                      0x00d7  /* U+00D7 MULTIPLICATION SIGN */
#define XK_Oslash                        0x00d8  /* U+00D8 LATIN CAPITAL LETTER O WITH STROKE */
#define XK_Ooblique                      0x00d8  /* U+00D8 LATIN CAPITAL LETTER O WITH STROKE */
#define XK_Ugrave                        0x00d9  /* U+00D9 LATIN CAPITAL LETTER U WITH GRAVE */
#define XK_Uacute                        0x00da  /* U+00DA LATIN CAPITAL LETTER U WITH ACUTE */
#define XK_Ucircumflex                   0x00db  /* U+00DB LATIN CAPITAL LETTER U WITH CIRCUMFLEX */
#define XK_Udiaeresis                    0x00dc  /* U+00DC LATIN CAPITAL LETTER U WITH DIAERESIS */
#define XK_Yacute                        0x00dd  /* U+00DD LATIN CAPITAL LETTER Y WITH ACUTE */
#define XK_THORN                         0x00de  /* U+00DE LATIN CAPITAL LETTER THORN */
#define XK_Thorn                         0x00de  /* deprecated */
#define XK_ssharp                        0x00df  /* U+00DF LATIN SMALL LETTER SHARP S */
#define XK_agrave                        0x00e0  /* U+00E0 LATIN SMALL LETTER A WITH GRAVE */
#define XK_aacute                        0x00e1  /* U+00E1 LATIN SMALL LETTER A WITH ACUTE */
#define XK_acircumflex                   0x00e2  /* U+00E2 LATIN SMALL LETTER A WITH CIRCUMFLEX */
#define XK_atilde                        0x00e3  /* U+00E3 LATIN SMALL LETTER A WITH TILDE */
#define XK_adiaeresis                    0x00e4  /* U+00E4 LATIN SMALL LETTER A WITH DIAERESIS */
#define XK_aring                         0x00e5  /* U+00E5 LATIN SMALL LETTER A WITH RING ABOVE */
#define XK_ae                            0x00e6  /* U+00E6 LATIN SMALL LETTER AE */
#define XK_ccedilla                      0x00e7  /* U+00E7 LATIN SMALL LETTER C WITH CEDILLA */
#define XK_egrave                        0x00e8  /* U+00E8 LATIN SMALL LETTER E WITH GRAVE */
#define XK_eacute                        0x00e9  /* U+00E9 LATIN SMALL LETTER E WITH ACUTE */
#define XK_ecircumflex                   0x00ea  /* U+00EA LATIN SMALL LETTER E WITH CIRCUMFLEX */
#define XK_ediaeresis                    0x00eb  /* U+00EB LATIN SMALL LETTER E WITH DIAERESIS */
#define XK_igrave                        0x00ec  /* U+00EC LATIN SMALL LETTER I WITH GRAVE */
#define XK_iacute                        0x00ed  /* U+00ED LATIN SMALL LETTER I WITH ACUTE */
#define XK_icircumflex                   0x00ee  /* U+00EE LATIN SMALL LETTER I WITH CIRCUMFLEX */
#define XK_idiaeresis                    0x00ef  /* U+00EF LATIN SMALL LETTER I WITH DIAERESIS */
#define XK_eth                           0x00f0  /* U+00F0 LATIN SMALL LETTER ETH */
#define XK_ntilde                        0x00f1  /* U+00F1 LATIN SMALL LETTER N WITH TILDE */
#define XK_ograve                        0x00f2  /* U+00F2 LATIN SMALL LETTER O WITH GRAVE */
#define XK_oacute                        0x00f3  /* U+00F3 LATIN SMALL LETTER O WITH ACUTE */
#define XK_ocircumflex                   0x00f4  /* U+00F4 LATIN SMALL LETTER O WITH CIRCUMFLEX */
#define XK_otilde                        0x00f5  /* U+00F5 LATIN SMALL LETTER O WITH TILDE */
#define XK_odiaeresis                    0x00f6  /* U+00F6 LATIN SMALL LETTER O WITH DIAERESIS */
#define XK_division                      0x00f7  /* U+00F7 DIVISION SIGN */
#define XK_oslash                        0x00f8  /* U+00F8 LATIN SMALL LETTER O WITH STROKE */
#define XK_ooblique                      0x00f8  /* U+00F8 LATIN SMALL LETTER O WITH STROKE */
#define XK_ugrave                        0x00f9  /* U+00F9 LATIN SMALL LETTER U WITH GRAVE */
#define XK_uacute                        0x00fa  /* U+00FA LATIN SMALL LETTER U WITH ACUTE */
#define XK_ucircumflex                   0x00fb  /* U+00FB LATIN SMALL LETTER U WITH CIRCUMFLEX */
#define XK_udiaeresis                    0x00fc  /* U+00FC LATIN SMALL LETTER U WITH DIAERESIS */
#define XK_yacute                        0x00fd  /* U+00FD LATIN SMALL LETTER Y WITH ACUTE */
#define XK_thorn                         0x00fe  /* U+00FE LATIN SMALL LETTER THORN */
#define XK_ydiaeresis                    0x00ff  /* U+00FF LATIN SMALL LETTER Y WITH DIAERESIS */
#endif /* XK_LATIN1 */

/*
 * Latin 2
 * Byte 3 = 1
 */

#ifdef XK_LATIN2
#define XK_Aogonek                       0x01a1  /* U+0104 LATIN CAPITAL LETTER A WITH OGONEK */
#define XK_breve                         0x01a2  /* U+02D8 BREVE */
#define XK_Lstroke                       0x01a3  /* U+0141 LATIN CAPITAL LETTER L WITH STROKE */
#define XK_Lcaron                        0x01a5  /* U+013D LATIN CAPITAL LETTER L WITH CARON */
#define XK_Sacute                        0x01a6  /* U+015A LATIN CAPITAL LETTER S WITH ACUTE */
#define XK_Scaron                        0x01a9  /* U+0160 LATIN CAPITAL LETTER S WITH CARON */
#define XK_Scedilla                      0x01aa  /* U+015E LATIN CAPITAL LETTER S WITH CEDILLA */
#define XK_Tcaron                        0x01ab  /* U+0164 LATIN CAPITAL LETTER T WITH CARON */
#define XK_Zacute                        0x01ac  /* U+0179 LATIN CAPITAL LETTER Z WITH ACUTE */
#define XK_Zcaron                        0x01ae  /* U+017D LATIN CAPITAL LETTER Z WITH CARON */
#define XK_Zabovedot                     0x01af  /* U+017B LATIN CAPITAL LETTER Z WITH DOT ABOVE */
#define XK_aogonek                       0x01b1  /* U+0105 LATIN SMALL LETTER A WITH OGONEK */
#define XK_ogonek                        0x01b2  /* U+02DB OGONEK */
#define XK_lstroke                       0x01b3  /* U+0142 LATIN SMALL LETTER L WITH STROKE */
#define XK_lcaron                        0x01b5  /* U+013E LATIN SMALL LETTER L WITH CARON */
#define XK_sacute                        0x01b6  /* U+015B LATIN SMALL LETTER S WITH ACUTE */
#define XK_caron                         0x01b7  /* U+02C7 CARON */
#define XK_scaron                        0x01b9  /* U+0161 LATIN SMALL LETTER S WITH CARON */
#define XK_scedilla                      0x01ba  /* U+015F LATIN SMALL LETTER S WITH CEDILLA */
#define XK_tcaron                        0x01bb  /* U+0165 LATIN SMALL LETTER T WITH CARON */
#define XK_zacute                        0x01bc  /* U+017A LATIN SMALL LETTER Z WITH ACUTE */
#define XK_doubleacute                   0x01bd  /* U+02DD DOUBLE ACUTE ACCENT */
#define XK_zcaron                        0x01be  /* U+017E LATIN SMALL LETTER Z WITH CARON */
#define XK_zabovedot                     0x01bf  /* U+017C LATIN SMALL LETTER Z WITH DOT ABOVE */
#define XK_Racute                        0x01c0  /* U+0154 LATIN CAPITAL LETTER R WITH ACUTE */
#define XK_Abreve                        0x01c3  /* U+0102 LATIN CAPITAL LETTER A WITH BREVE */
#define XK_Lacute                        0x01c5  /* U+0139 LATIN CAPITAL LETTER L WITH ACUTE */
#define XK_Cacute                        0x01c6  /* U+0106 LATIN CAPITAL LETTER C WITH ACUTE */
#define XK_Ccaron                        0x01c8  /* U+010C LATIN CAPITAL LETTER C WITH CARON */
#define XK_Eogonek                       0x01ca  /* U+0118 LATIN CAPITAL LETTER E WITH OGONEK */
#define XK_Ecaron                        0x01cc  /* U+011A LATIN CAPITAL LETTER E WITH CARON */
#define XK_Dcaron                        0x01cf  /* U+010E LATIN CAPITAL LETTER D WITH CARON */
#define XK_Dstroke                       0x01d0  /* U+0110 LATIN CAPITAL LETTER D WITH STROKE */
#define XK_Nacute                        0x01d1  /* U+0143 LATIN CAPITAL LETTER N WITH ACUTE */
#define XK_Ncaron                        0x01d2  /* U+0147 LATIN CAPITAL LETTER N WITH CARON */
#define XK_Odoubleacute                  0x01d5  /* U+0150 LATIN CAPITAL LETTER O WITH DOUBLE ACUTE */
#define XK_Rcaron                        0x01d8  /* U+0158 LATIN CAPITAL LETTER R WITH CARON */
#define XK_Uring                         0x01d9  /* U+016E LATIN CAPITAL LETTER U WITH RING ABOVE */
#define XK_Udoubleacute                  0x01db  /* U+0170 LATIN CAPITAL LETTER U WITH DOUBLE ACUTE */
#define XK_Tcedilla                      0x01de  /* U+0162 LATIN CAPITAL LETTER T WITH CEDILLA */
#define XK_racute                        0x01e0  /* U+0155 LATIN SMALL LETTER R WITH ACUTE */
#define XK_abreve                        0x01e3  /* U+0103 LATIN SMALL LETTER A WITH BREVE */
#define XK_lacute                        0x01e5  /* U+013A LATIN SMALL LETTER L WITH ACUTE */
#define XK_cacute                        0x01e6  /* U+0107 LATIN SMALL LETTER C WITH ACUTE */
#define XK_ccaron                        0x01e8  /* U+010D LATIN SMALL LETTER C WITH CARON */
#define XK_eogonek                       0x01ea  /* U+0119 LATIN SMALL LETTER E WITH OGONEK */
#define XK_ecaron                        0x01ec  /* U+011B LATIN SMALL LETTER E WITH CARON */
#define XK_dcaron                        0x01ef  /* U+010F LATIN SMALL LETTER D WITH CARON */
#define XK_dstroke                       0x01f0  /* U+0111 LATIN SMALL LETTER D WITH STROKE */
#define XK_nacute                        0x01f1  /* U+0144 LATIN SMALL LETTER N WITH ACUTE */
#define XK_ncaron                        0x01f2  /* U+0148 LATIN SMALL LETTER N WITH CARON */
#define XK_odoubleacute                  0x01f5  /* U+0151 LATIN SMALL LETTER O WITH DOUBLE ACUTE */
#define XK_rcaron                        0x01f8  /* U+0159 LATIN SMALL LETTER R WITH CARON */
#define XK_uring                         0x01f9  /* U+016F LATIN SMALL LETTER U WITH RING ABOVE */
#define XK_udoubleacute                  0x01fb  /* U+0171 LATIN SMALL LETTER U WITH DOUBLE ACUTE */
#define XK_tcedilla                      0x01fe  /* U+0163 LATIN SMALL LETTER T WITH CEDILLA */
#define XK_abovedot                      0x01ff  /* U+02D9 DOT ABOVE */
#endif /* XK_LATIN2 */

/*
 * Latin 3
 * Byte 3 = 2
 */

#ifdef XK_LATIN3
#define XK_Hstroke                       0x02a1  /* U+0126 LATIN CAPITAL LETTER H WITH STROKE */
#define XK_Hcircumflex                   0x02a6  /* U+0124 LATIN CAPITAL LETTER H WITH CIRCUMFLEX */
#define XK_Iabovedot                     0x02a9  /* U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE */
#define XK_Gbreve                        0x02ab  /* U+011E LATIN CAPITAL LETTER G WITH BREVE */
#define XK_Jcircumflex                   0x02ac  /* U+0134 LATIN CAPITAL LETTER J WITH CIRCUMFLEX */
#define XK_hstroke                       0x02b1  /* U+0127 LATIN SMALL LETTER H WITH STROKE */
#define XK_hcircumflex                   0x02b6  /* U+0125 LATIN SMALL LETTER H WITH CIRCUMFLEX */
#define XK_idotless                      0x02b9  /* U+0131 LATIN SMALL LETTER DOTLESS I */
#define XK_gbreve                        0x02bb  /* U+011F LATIN SMALL LETTER G WITH BREVE */
#define XK_jcircumflex                   0x02bc  /* U+0135 LATIN SMALL LETTER J WITH CIRCUMFLEX */
#define XK_Cabovedot                     0x02c5  /* U+010A LATIN CAPITAL LETTER C WITH DOT ABOVE */
#define XK_Ccircumflex                   0x02c6  /* U+0108 LATIN CAPITAL LETTER C WITH CIRCUMFLEX */
#define XK_Gabovedot                     0x02d5  /* U+0120 LATIN CAPITAL LETTER G WITH DOT ABOVE */
#define XK_Gcircumflex                   0x02d8  /* U+011C LATIN CAPITAL LETTER G WITH CIRCUMFLEX */
#define XK_Ubreve                        0x02dd  /* U+016C LATIN CAPITAL LETTER U WITH BREVE */
#define XK_Scircumflex                   0x02de  /* U+015C LATIN CAPITAL LETTER S WITH CIRCUMFLEX */
#define XK_cabovedot                     0x02e5  /* U+010B LATIN SMALL LETTER C WITH DOT ABOVE */
#define XK_ccircumflex                   0x02e6  /* U+0109 LATIN SMALL LETTER C WITH CIRCUMFLEX */
#define XK_gabovedot                     0x02f5  /* U+0121 LATIN SMALL LETTER G WITH DOT ABOVE */
#define XK_gcircumflex                   0x02f8  /* U+011D LATIN SMALL LETTER G WITH CIRCUMFLEX */
#define XK_ubreve                        0x02fd  /* U+016D LATIN SMALL LETTER U WITH BREVE */
#define XK_scircumflex                   0x02fe  /* U+015D LATIN SMALL LETTER S WITH CIRCUMFLEX */
#endif /* XK_LATIN3 */


/*
 * Latin 4
 * Byte 3 = 3
 */

#ifdef XK_LATIN4
#define XK_kra                           0x03a2  /* U+0138 LATIN SMALL LETTER KRA */
#define XK_kappa                         0x03a2  /* deprecated */
#define XK_Rcedilla                      0x03a3  /* U+0156 LATIN CAPITAL LETTER R WITH CEDILLA */
#define XK_Itilde                        0x03a5  /* U+0128 LATIN CAPITAL LETTER I WITH TILDE */
#define XK_Lcedilla                      0x03a6  /* U+013B LATIN CAPITAL LETTER L WITH CEDILLA */
#define XK_Emacron                       0x03aa  /* U+0112 LATIN CAPITAL LETTER E WITH MACRON */
#define XK_Gcedilla                      0x03ab  /* U+0122 LATIN CAPITAL LETTER G WITH CEDILLA */
#define XK_Tslash                        0x03ac  /* U+0166 LATIN CAPITAL LETTER T WITH STROKE */
#define XK_rcedilla                      0x03b3  /* U+0157 LATIN SMALL LETTER R WITH CEDILLA */
#define XK_itilde                        0x03b5  /* U+0129 LATIN SMALL LETTER I WITH TILDE */
#define XK_lcedilla                      0x03b6  /* U+013C LATIN SMALL LETTER L WITH CEDILLA */
#define XK_emacron                       0x03ba  /* U+0113 LATIN SMALL LETTER E WITH MACRON */
#define XK_gcedilla                      0x03bb  /* U+0123 LATIN SMALL LETTER G WITH CEDILLA */
#define XK_tslash                        0x03bc  /* U+0167 LATIN SMALL LETTER T WITH STROKE */
#define XK_ENG                           0x03bd  /* U+014A LATIN CAPITAL LETTER ENG */
#define XK_eng                           0x03bf  /* U+014B LATIN SMALL LETTER ENG */
#define XK_Amacron                       0x03c0  /* U+0100 LATIN CAPITAL LETTER A WITH MACRON */
#define XK_Iogonek                       0x03c7  /* U+012E LATIN CAPITAL LETTER I WITH OGONEK */
#define XK_Eabovedot                     0x03cc  /* U+0116 LATIN CAPITAL LETTER E WITH DOT ABOVE */
#define XK_Imacron                       0x03cf  /* U+012A LATIN CAPITAL LETTER I WITH MACRON */
#define XK_Ncedilla                      0x03d1  /* U+0145 LATIN CAPITAL LETTER N WITH CEDILLA */
#define XK_Omacron                       0x03d2  /* U+014C LATIN CAPITAL LETTER O WITH MACRON */
#define XK_Kcedilla                      0x03d3  /* U+0136 LATIN CAPITAL LETTER K WITH CEDILLA */
#define XK_Uogonek                       0x03d9  /* U+0172 LATIN CAPITAL LETTER U WITH OGONEK */
#define XK_Utilde                        0x03dd  /* U+0168 LATIN CAPITAL LETTER U WITH TILDE */
#define XK_Umacron                       0x03de  /* U+016A LATIN CAPITAL LETTER U WITH MACRON */
#define XK_amacron                       0x03e0  /* U+0101 LATIN SMALL LETTER A WITH MACRON */
#define XK_iogonek                       0x03e7  /* U+012F LATIN SMALL LETTER I WITH OGONEK */
#define XK_eabovedot                     0x03ec  /* U+0117 LATIN SMALL LETTER E WITH DOT ABOVE */
#define XK_imacron                       0x03ef  /* U+012B LATIN SMALL LETTER I WITH MACRON */
#define XK_ncedilla                      0x03f1  /* U+0146 LATIN SMALL LETTER N WITH CEDILLA */
#define XK_omacron                       0x03f2  /* U+014D LATIN SMALL LETTER O WITH MACRON */
#define XK_kcedilla                      0x03f3  /* U+0137 LATIN SMALL LETTER K WITH CEDILLA */
#define XK_uogonek                       0x03f9  /* U+0173 LATIN SMALL LETTER U WITH OGONEK */
#define XK_utilde                        0x03fd  /* U+0169 LATIN SMALL LETTER U WITH TILDE */
#define XK_umacron                       0x03fe  /* U+016B LATIN SMALL LETTER U WITH MACRON */
#endif /* XK_LATIN4 */

/*
 * Latin 8
 */
#ifdef XK_LATIN8
#define XK_Wcircumflex                0x1000174  /* U+0174 LATIN CAPITAL LETTER W WITH CIRCUMFLEX */
#define XK_wcircumflex                0x1000175  /* U+0175 LATIN SMALL LETTER W WITH CIRCUMFLEX */
#define XK_Ycircumflex                0x1000176  /* U+0176 LATIN CAPITAL LETTER Y WITH CIRCUMFLEX */
#define XK_ycircumflex                0x1000177  /* U+0177 LATIN SMALL LETTER Y WITH CIRCUMFLEX */
#define XK_Babovedot                  0x1001e02  /* U+1E02 LATIN CAPITAL LETTER B WITH DOT ABOVE */
#define XK_babovedot                  0x1001e03  /* U+1E03 LATIN SMALL LETTER B WITH DOT ABOVE */
#define XK_Dabovedot                  0x1001e0a  /* U+1E0A LATIN CAPITAL LETTER D WITH DOT ABOVE */
#define XK_dabovedot                  0x1001e0b  /* U+1E0B LATIN SMALL LETTER D WITH DOT ABOVE */
#define XK_Fabovedot                  0x1001e1e  /* U+1E1E LATIN CAPITAL LETTER F WITH DOT ABOVE */
#define XK_fabovedot                  0x1001e1f  /* U+1E1F LATIN SMALL LETTER F WITH DOT ABOVE */
#define XK_Mabovedot                  0x1001e40  /* U+1E40 LATIN CAPITAL LETTER M WITH DOT ABOVE */
#define XK_mabovedot                  0x1001e41  /* U+1E41 LATIN SMALL LETTER M WITH DOT ABOVE */
#define XK_Pabovedot                  0x1001e56  /* U+1E56 LATIN CAPITAL LETTER P WITH DOT ABOVE */
#define XK_pabovedot                  0x1001e57  /* U+1E57 LATIN SMALL LETTER P WITH DOT ABOVE */
#define XK_Sabovedot                  0x1001e60  /* U+1E60 LATIN CAPITAL LETTER S WITH DOT ABOVE */
#define XK_sabovedot                  0x1001e61  /* U+1E61 LATIN SMALL LETTER S WITH DOT ABOVE */
#define XK_Tabovedot                  0x1001e6a  /* U+1E6A LATIN CAPITAL LETTER T WITH DOT ABOVE */
#define XK_tabovedot                  0x1001e6b  /* U+1E6B LATIN SMALL LETTER T WITH DOT ABOVE */
#define XK_Wgrave                     0x1001e80  /* U+1E80 LATIN CAPITAL LETTER W WITH GRAVE */
#define XK_wgrave                     0x1001e81  /* U+1E81 LATIN SMALL LETTER W WITH GRAVE */
#define XK_Wacute                     0x1001e82  /* U+1E82 LATIN CAPITAL LETTER W WITH ACUTE */
#define XK_wacute                     0x1001e83  /* U+1E83 LATIN SMALL LETTER W WITH ACUTE */
#define XK_Wdiaeresis                 0x1001e84  /* U+1E84 LATIN CAPITAL LETTER W WITH DIAERESIS */
#define XK_wdiaeresis                 0x1001e85  /* U+1E85 LATIN SMALL LETTER W WITH DIAERESIS */
#define XK_Ygrave                     0x1001ef2  /* U+1EF2 LATIN CAPITAL LETTER Y WITH GRAVE */
#define XK_ygrave                     0x1001ef3  /* U+1EF3 LATIN SMALL LETTER Y WITH GRAVE */
#endif /* XK_LATIN8 */

/*
 * Latin 9
 * Byte 3 = 0x13
 */

#ifdef XK_LATIN9
#define XK_OE                            0x13bc  /* U+0152 LATIN CAPITAL LIGATURE OE */
#define XK_oe                            0x13bd  /* U+0153 LATIN SMALL LIGATURE OE */
#define XK_Ydiaeresis                    0x13be  /* U+0178 LATIN CAPITAL LETTER Y WITH DIAERESIS */
#endif /* XK_LATIN9 */

/*
 * Katakana
 * Byte 3 = 4
 */

#ifdef XK_KATAKANA
#define XK_overline                      0x047e  /* U+203E OVERLINE */
#define XK_kana_fullstop                 0x04a1  /* U+3002 IDEOGRAPHIC FULL STOP */
#define XK_kana_openingbracket           0x04a2  /* U+300C LEFT CORNER BRACKET */
#define XK_kana_closingbracket           0x04a3  /* U+300D RIGHT CORNER BRACKET */
#define XK_kana_comma                    0x04a4  /* U+3001 IDEOGRAPHIC COMMA */
#define XK_kana_conjunctive              0x04a5  /* U+30FB KATAKANA MIDDLE DOT */
#define XK_kana_middledot                0x04a5  /* deprecated */
#define XK_kana_WO                       0x04a6  /* U+30F2 KATAKANA LETTER WO */
#define XK_kana_a                        0x04a7  /* U+30A1 KATAKANA LETTER SMALL A */
#define XK_kana_i                        0x04a8  /* U+30A3 KATAKANA LETTER SMALL I */
#define XK_kana_u                        0x04a9  /* U+30A5 KATAKANA LETTER SMALL U */
#define XK_kana_e                        0x04aa  /* U+30A7 KATAKANA LETTER SMALL E */
#define XK_kana_o                        0x04ab  /* U+30A9 KATAKANA LETTER SMALL O */
#define XK_kana_ya                       0x04ac  /* U+30E3 KATAKANA LETTER SMALL YA */
#define XK_kana_yu                       0x04ad  /* U+30E5 KATAKANA LETTER SMALL YU */
#define XK_kana_yo                       0x04ae  /* U+30E7 KATAKANA LETTER SMALL YO */
#define XK_kana_tsu                      0x04af  /* U+30C3 KATAKANA LETTER SMALL TU */
#define XK_kana_tu                       0x04af  /* deprecated */
#define XK_prolongedsound                0x04b0  /* U+30FC KATAKANA-HIRAGANA PROLONGED SOUND MARK */
#define XK_kana_A                        0x04b1  /* U+30A2 KATAKANA LETTER A */
#define XK_kana_I                        0x04b2  /* U+30A4 KATAKANA LETTER I */
#define XK_kana_U                        0x04b3  /* U+30A6 KATAKANA LETTER U */
#define XK_kana_E                        0x04b4  /* U+30A8 KATAKANA LETTER E */
#define XK_kana_O                        0x04b5  /* U+30AA KATAKANA LETTER O */
#define XK_kana_KA                       0x04b6  /* U+30AB KATAKANA LETTER KA */
#define XK_kana_KI                       0x04b7  /* U+30AD KATAKANA LETTER KI */
#define XK_kana_KU                       0x04b8  /* U+30AF KATAKANA LETTER KU */
#define XK_kana_KE                       0x04b9  /* U+30B1 KATAKANA LETTER KE */
#define XK_kana_KO                       0x04ba  /* U+30B3 KATAKANA LETTER KO */
#define XK_kana_SA                       0x04bb  /* U+30B5 KATAKANA LETTER SA */
#define XK_kana_SHI                      0x04bc  /* U+30B7 KATAKANA LETTER SI */
#define XK_kana_SU                       0x04bd  /* U+30B9 KATAKANA LETTER SU */
#define XK_kana_SE                       0x04be  /* U+30BB KATAKANA LETTER SE */
#define XK_kana_SO                       0x04bf  /* U+30BD KATAKANA LETTER SO */
#define XK_kana_TA                       0x04c0  /* U+30BF KATAKANA LETTER TA */
#define XK_kana_CHI                      0x04c1  /* U+30C1 KATAKANA LETTER TI */
#define XK_kana_TI                       0x04c1  /* deprecated */
#define XK_kana_TSU                      0x04c2  /* U+30C4 KATAKANA LETTER TU */
#define XK_kana_TU                       0x04c2  /* deprecated */
#define XK_kana_TE                       0x04c3  /* U+30C6 KATAKANA LETTER TE */
#define XK_kana_TO                       0x04c4  /* U+30C8 KATAKANA LETTER TO */
#define XK_kana_NA                       0x04c5  /* U+30CA KATAKANA LETTER NA */
#define XK_kana_NI                       0x04c6  /* U+30CB KATAKANA LETTER NI */
#define XK_kana_NU                       0x04c7  /* U+30CC KATAKANA LETTER NU */
#define XK_kana_NE                       0x04c8  /* U+30CD KATAKANA LETTER NE */
#define XK_kana_NO                       0x04c9  /* U+30CE KATAKANA LETTER NO */
#define XK_kana_HA                       0x04ca  /* U+30CF KATAKANA LETTER HA */
#define XK_kana_HI                       0x04cb  /* U+30D2 KATAKANA LETTER HI */
#define XK_kana_FU                       0x04cc  /* U+30D5 KATAKANA LETTER HU */
#define XK_kana_HU                       0x04cc  /* deprecated */
#define XK_kana_HE                       0x04cd  /* U+30D8 KATAKANA LETTER HE */
#define XK_kana_HO                       0x04ce  /* U+30DB KATAKANA LETTER HO */
#define XK_kana_MA                       0x04cf  /* U+30DE KATAKANA LETTER MA */
#define XK_kana_MI                       0x04d0  /* U+30DF KATAKANA LETTER MI */
#define XK_kana_MU                       0x04d1  /* U+30E0 KATAKANA LETTER MU */
#define XK_kana_ME                       0x04d2  /* U+30E1 KATAKANA LETTER ME */
#define XK_kana_MO                       0x04d3  /* U+30E2 KATAKANA LETTER MO */
#define XK_kana_YA                       0x04d4  /* U+30E4 KATAKANA LETTER YA */
#define XK_kana_YU                       0x04d5  /* U+30E6 KATAKANA LETTER YU */
#define XK_kana_YO                       0x04d6  /* U+30E8 KATAKANA LETTER YO */
#define XK_kana_RA                       0x04d7  /* U+30E9 KATAKANA LETTER RA */
#define XK_kana_RI                       0x04d8  /* U+30EA KATAKANA LETTER RI */
#define XK_kana_RU                       0x04d9  /* U+30EB KATAKANA LETTER RU */
#define XK_kana_RE                       0x04da  /* U+30EC KATAKANA LETTER RE */
#define XK_kana_RO                       0x04db  /* U+30ED KATAKANA LETTER RO */
#define XK_kana_WA                       0x04dc  /* U+30EF KATAKANA LETTER WA */
#define XK_kana_N                        0x04dd  /* U+30F3 KATAKANA LETTER N */
#define XK_voicedsound                   0x04de  /* U+309B KATAKANA-HIRAGANA VOICED SOUND MARK */
#define XK_semivoicedsound               0x04df  /* U+309C KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK */
#define XK_kana_switch                   0xff7e  /* Alias for mode_switch */
#endif /* XK_KATAKANA */

/*
 * Arabic
 * Byte 3 = 5
 */

#ifdef XK_ARABIC
#define XK_Farsi_0                    0x10006f0  /* U+06F0 EXTENDED ARABIC-INDIC DIGIT ZERO */
#define XK_Farsi_1                    0x10006f1  /* U+06F1 EXTENDED ARABIC-INDIC DIGIT ONE */
#define XK_Farsi_2                    0x10006f2  /* U+06F2 EXTENDED ARABIC-INDIC DIGIT TWO */
#define XK_Farsi_3                    0x10006f3  /* U+06F3 EXTENDED ARABIC-INDIC DIGIT THREE */
#define XK_Farsi_4                    0x10006f4  /* U+06F4 EXTENDED ARABIC-INDIC DIGIT FOUR */
#define XK_Farsi_5                    0x10006f5  /* U+06F5 EXTENDED ARABIC-INDIC DIGIT FIVE */
#define XK_Farsi_6                    0x10006f6  /* U+06F6 EXTENDED ARABIC-INDIC DIGIT SIX */
#define XK_Farsi_7                    0x10006f7  /* U+06F7 EXTENDED ARABIC-INDIC DIGIT SEVEN */
#define XK_Farsi_8                    0x10006f8  /* U+06F8 EXTENDED ARABIC-INDIC DIGIT EIGHT */
#define XK_Farsi_9                    0x10006f9  /* U+06F9 EXTENDED ARABIC-INDIC DIGIT NINE */
#define XK_Arabic_percent             0x100066a  /* U+066A ARABIC PERCENT SIGN */
#define XK_Arabic_superscript_alef    0x1000670  /* U+0670 ARABIC LETTER SUPERSCRIPT ALEF */
#define XK_Arabic_tteh                0x1000679  /* U+0679 ARABIC LETTER TTEH */
#define XK_Arabic_peh                 0x100067e  /* U+067E ARABIC LETTER PEH */
#define XK_Arabic_tcheh               0x1000686  /* U+0686 ARABIC LETTER TCHEH */
#define XK_Arabic_ddal                0x1000688  /* U+0688 ARABIC LETTER DDAL */
#define XK_Arabic_rreh                0x1000691  /* U+0691 ARABIC LETTER RREH */
#define XK_Arabic_comma                  0x05ac  /* U+060C ARABIC COMMA */
#define XK_Arabic_fullstop            0x10006d4  /* U+06D4 ARABIC FULL STOP */
#define XK_Arabic_0                   0x1000660  /* U+0660 ARABIC-INDIC DIGIT ZERO */
#define XK_Arabic_1                   0x1000661  /* U+0661 ARABIC-INDIC DIGIT ONE */
#define XK_Arabic_2                   0x1000662  /* U+0662 ARABIC-INDIC DIGIT TWO */
#define XK_Arabic_3                   0x1000663  /* U+0663 ARABIC-INDIC DIGIT THREE */
#define XK_Arabic_4                   0x1000664  /* U+0664 ARABIC-INDIC DIGIT FOUR */
#define XK_Arabic_5                   0x1000665  /* U+0665 ARABIC-INDIC DIGIT FIVE */
#define XK_Arabic_6                   0x1000666  /* U+0666 ARABIC-INDIC DIGIT SIX */
#define XK_Arabic_7                   0x1000667  /* U+0667 ARABIC-INDIC DIGIT SEVEN */
#define XK_Arabic_8                   0x1000668  /* U+0668 ARABIC-INDIC DIGIT EIGHT */
#define XK_Arabic_9                   0x1000669  /* U+0669 ARABIC-INDIC DIGIT NINE */
#define XK_Arabic_semicolon              0x05bb  /* U+061B ARABIC SEMICOLON */
#define XK_Arabic_question_mark          0x05bf  /* U+061F ARABIC QUESTION MARK */
#define XK_Arabic_hamza                  0x05c1  /* U+0621 ARABIC LETTER HAMZA */
#define XK_Arabic_maddaonalef            0x05c2  /* U+0622 ARABIC LETTER ALEF WITH MADDA ABOVE */
#define XK_Arabic_hamzaonalef            0x05c3  /* U+0623 ARABIC LETTER ALEF WITH HAMZA ABOVE */
#define XK_Arabic_hamzaonwaw             0x05c4  /* U+0624 ARABIC LETTER WAW WITH HAMZA ABOVE */
#define XK_Arabic_hamzaunderalef         0x05c5  /* U+0625 ARABIC LETTER ALEF WITH HAMZA BELOW */
#define XK_Arabic_hamzaonyeh             0x05c6  /* U+0626 ARABIC LETTER YEH WITH HAMZA ABOVE */
#define XK_Arabic_alef                   0x05c7  /* U+0627 ARABIC LETTER ALEF */
#define XK_Arabic_beh                    0x05c8  /* U+0628 ARABIC LETTER BEH */
#define XK_Arabic_tehmarbuta             0x05c9  /* U+0629 ARABIC LETTER TEH MARBUTA */
#define XK_Arabic_teh                    0x05ca  /* U+062A ARABIC LETTER TEH */
#define XK_Arabic_theh                   0x05cb  /* U+062B ARABIC LETTER THEH */
#define XK_Arabic_jeem                   0x05cc  /* U+062C ARABIC LETTER JEEM */
#define XK_Arabic_hah                    0x05cd  /* U+062D ARABIC LETTER HAH */
#define XK_Arabic_khah                   0x05ce  /* U+062E ARABIC LETTER KHAH */
#define XK_Arabic_dal                    0x05cf  /* U+062F ARABIC LETTER DAL */
#define XK_Arabic_thal                   0x05d0  /* U+0630 ARABIC LETTER THAL */
#define XK_Arabic_ra                     0x05d1  /* U+0631 ARABIC LETTER REH */
#define XK_Arabic_zain                   0x05d2  /* U+0632 ARABIC LETTER ZAIN */
#define XK_Arabic_seen                   0x05d3  /* U+0633 ARABIC LETTER SEEN */
#define XK_Arabic_sheen                  0x05d4  /* U+0634 ARABIC LETTER SHEEN */
#define XK_Arabic_sad                    0x05d5  /* U+0635 ARABIC LETTER SAD */
#define XK_Arabic_dad                    0x05d6  /* U+0636 ARABIC LETTER DAD */
#define XK_Arabic_tah                    0x05d7  /* U+0637 ARABIC LETTER TAH */
#define XK_Arabic_zah                    0x05d8  /* U+0638 ARABIC LETTER ZAH */
#define XK_Arabic_ain                    0x05d9  /* U+0639 ARABIC LETTER AIN */
#define XK_Arabic_ghain                  0x05da  /* U+063A ARABIC LETTER GHAIN */
#define XK_Arabic_tatweel                0x05e0  /* U+0640 ARABIC TATWEEL */
#define XK_Arabic_feh                    0x05e1  /* U+0641 ARABIC LETTER FEH */
#define XK_Arabic_qaf                    0x05e2  /* U+0642 ARABIC LETTER QAF */
#define XK_Arabic_kaf                    0x05e3  /* U+0643 ARABIC LETTER KAF */
#define XK_Arabic_lam                    0x05e4  /* U+0644 ARABIC LETTER LAM */
#define XK_Arabic_meem                   0x05e5  /* U+0645 ARABIC LETTER MEEM */
#define XK_Arabic_noon                   0x05e6  /* U+0646 ARABIC LETTER NOON */
#define XK_Arabic_ha                     0x05e7  /* U+0647 ARABIC LETTER HEH */
#define XK_Arabic_heh                    0x05e7  /* deprecated */
#define XK_Arabic_waw                    0x05e8  /* U+0648 ARABIC LETTER WAW */
#define XK_Arabic_alefmaksura            0x05e9  /* U+0649 ARABIC LETTER ALEF MAKSURA */
#define XK_Arabic_yeh                    0x05ea  /* U+064A ARABIC LETTER YEH */
#define XK_Arabic_fathatan               0x05eb  /* U+064B ARABIC FATHATAN */
#define XK_Arabic_dammatan               0x05ec  /* U+064C ARABIC DAMMATAN */
#define XK_Arabic_kasratan               0x05ed  /* U+064D ARABIC KASRATAN */
#define XK_Arabic_fatha                  0x05ee  /* U+064E ARABIC FATHA */
#define XK_Arabic_damma                  0x05ef  /* U+064F ARABIC DAMMA */
#define XK_Arabic_kasra                  0x05f0  /* U+0650 ARABIC KASRA */
#define XK_Arabic_shadda                 0x05f1  /* U+0651 ARABIC SHADDA */
#define XK_Arabic_sukun                  0x05f2  /* U+0652 ARABIC SUKUN */
#define XK_Arabic_madda_above         0x1000653  /* U+0653 ARABIC MADDAH ABOVE */
#define XK_Arabic_hamza_above         0x1000654  /* U+0654 ARABIC HAMZA ABOVE */
#define XK_Arabic_hamza_below         0x1000655  /* U+0655 ARABIC HAMZA BELOW */
#define XK_Arabic_jeh                 0x1000698  /* U+0698 ARABIC LETTER JEH */
#define XK_Arabic_veh                 0x10006a4  /* U+06A4 ARABIC LETTER VEH */
#define XK_Arabic_keheh               0x10006a9  /* U+06A9 ARABIC LETTER KEHEH */
#define XK_Arabic_gaf                 0x10006af  /* U+06AF ARABIC LETTER GAF */
#define XK_Arabic_noon_ghunna         0x10006ba  /* U+06BA ARABIC LETTER NOON GHUNNA */
#define XK_Arabic_heh_doachashmee     0x10006be  /* U+06BE ARABIC LETTER HEH DOACHASHMEE */
#define XK_Farsi_yeh                  0x10006cc  /* U+06CC ARABIC LETTER FARSI YEH */
#define XK_Arabic_farsi_yeh           0x10006cc  /* U+06CC ARABIC LETTER FARSI YEH */
#define XK_Arabic_yeh_baree           0x10006d2  /* U+06D2 ARABIC LETTER YEH BARREE */
#define XK_Arabic_heh_goal            0x10006c1  /* U+06C1 ARABIC LETTER HEH GOAL */
#define XK_Arabic_switch                 0xff7e  /* Alias for mode_switch */
#endif /* XK_ARABIC */

/*
 * Cyrillic
 * Byte 3 = 6
 */
#ifdef XK_CYRILLIC
#define XK_Cyrillic_GHE_bar           0x1000492  /* U+0492 CYRILLIC CAPITAL LETTER GHE WITH STROKE */
#define XK_Cyrillic_ghe_bar           0x1000493  /* U+0493 CYRILLIC SMALL LETTER GHE WITH STROKE */
#define XK_Cyrillic_ZHE_descender     0x1000496  /* U+0496 CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER */
#define XK_Cyrillic_zhe_descender     0x1000497  /* U+0497 CYRILLIC SMALL LETTER ZHE WITH DESCENDER */
#define XK_Cyrillic_KA_descender      0x100049a  /* U+049A CYRILLIC CAPITAL LETTER KA WITH DESCENDER */
#define XK_Cyrillic_ka_descender      0x100049b  /* U+049B CYRILLIC SMALL LETTER KA WITH DESCENDER */
#define XK_Cyrillic_KA_vertstroke     0x100049c  /* U+049C CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE */
#define XK_Cyrillic_ka_vertstroke     0x100049d  /* U+049D CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE */
#define XK_Cyrillic_EN_descender      0x10004a2  /* U+04A2 CYRILLIC CAPITAL LETTER EN WITH DESCENDER */
#define XK_Cyrillic_en_descender      0x10004a3  /* U+04A3 CYRILLIC SMALL LETTER EN WITH DESCENDER */
#define XK_Cyrillic_U_straight        0x10004ae  /* U+04AE CYRILLIC CAPITAL LETTER STRAIGHT U */
#define XK_Cyrillic_u_straight        0x10004af  /* U+04AF CYRILLIC SMALL LETTER STRAIGHT U */
#define XK_Cyrillic_U_straight_bar    0x10004b0  /* U+04B0 CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE */
#define XK_Cyrillic_u_straight_bar    0x10004b1  /* U+04B1 CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE */
#define XK_Cyrillic_HA_descender      0x10004b2  /* U+04B2 CYRILLIC CAPITAL LETTER HA WITH DESCENDER */
#define XK_Cyrillic_ha_descender      0x10004b3  /* U+04B3 CYRILLIC SMALL LETTER HA WITH DESCENDER */
#define XK_Cyrillic_CHE_descender     0x10004b6  /* U+04B6 CYRILLIC CAPITAL LETTER CHE WITH DESCENDER */
#define XK_Cyrillic_che_descender     0x10004b7  /* U+04B7 CYRILLIC SMALL LETTER CHE WITH DESCENDER */
#define XK_Cyrillic_CHE_vertstroke    0x10004b8  /* U+04B8 CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE */
#define XK_Cyrillic_che_vertstroke    0x10004b9  /* U+04B9 CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE */
#define XK_Cyrillic_SHHA              0x10004ba  /* U+04BA CYRILLIC CAPITAL LETTER SHHA */
#define XK_Cyrillic_shha              0x10004bb  /* U+04BB CYRILLIC SMALL LETTER SHHA */

#define XK_Cyrillic_SCHWA             0x10004d8  /* U+04D8 CYRILLIC CAPITAL LETTER SCHWA */
#define XK_Cyrillic_schwa             0x10004d9  /* U+04D9 CYRILLIC SMALL LETTER SCHWA */
#define XK_Cyrillic_I_macron          0x10004e2  /* U+04E2 CYRILLIC CAPITAL LETTER I WITH MACRON */
#define XK_Cyrillic_i_macron          0x10004e3  /* U+04E3 CYRILLIC SMALL LETTER I WITH MACRON */
#define XK_Cyrillic_O_bar             0x10004e8  /* U+04E8 CYRILLIC CAPITAL LETTER BARRED O */
#define XK_Cyrillic_o_bar             0x10004e9  /* U+04E9 CYRILLIC SMALL LETTER BARRED O */
#define XK_Cyrillic_U_macron          0x10004ee  /* U+04EE CYRILLIC CAPITAL LETTER U WITH MACRON */
#define XK_Cyrillic_u_macron          0x10004ef  /* U+04EF CYRILLIC SMALL LETTER U WITH MACRON */

#define XK_Serbian_dje                   0x06a1  /* U+0452 CYRILLIC SMALL LETTER DJE */
#define XK_Macedonia_gje                 0x06a2  /* U+0453 CYRILLIC SMALL LETTER GJE */
#define XK_Cyrillic_io                   0x06a3  /* U+0451 CYRILLIC SMALL LETTER IO */
#define XK_Ukrainian_ie                  0x06a4  /* U+0454 CYRILLIC SMALL LETTER UKRAINIAN IE */
#define XK_Ukranian_je                   0x06a4  /* deprecated */
#define XK_Macedonia_dse                 0x06a5  /* U+0455 CYRILLIC SMALL LETTER DZE */
#define XK_Ukrainian_i                   0x06a6  /* U+0456 CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I */
#define XK_Ukranian_i                    0x06a6  /* deprecated */
#define XK_Ukrainian_yi                  0x06a7  /* U+0457 CYRILLIC SMALL LETTER YI */
#define XK_Ukranian_yi                   0x06a7  /* deprecated */
#define XK_Cyrillic_je                   0x06a8  /* U+0458 CYRILLIC SMALL LETTER JE */
#define XK_Serbian_je                    0x06a8  /* deprecated */
#define XK_Cyrillic_lje                  0x06a9  /* U+0459 CYRILLIC SMALL LETTER LJE */
#define XK_Serbian_lje                   0x06a9  /* deprecated */
#define XK_Cyrillic_nje                  0x06aa  /* U+045A CYRILLIC SMALL LETTER NJE */
#define XK_Serbian_nje                   0x06aa  /* deprecated */
#define XK_Serbian_tshe                  0x06ab  /* U+045B CYRILLIC SMALL LETTER TSHE */
#define XK_Macedonia_kje                 0x06ac  /* U+045C CYRILLIC SMALL LETTER KJE */
#define XK_Ukrainian_ghe_with_upturn     0x06ad  /* U+0491 CYRILLIC SMALL LETTER GHE WITH UPTURN */
#define XK_Byelorussian_shortu           0x06ae  /* U+045E CYRILLIC SMALL LETTER SHORT U */
#define XK_Cyrillic_dzhe                 0x06af  /* U+045F CYRILLIC SMALL LETTER DZHE */
#define XK_Serbian_dze                   0x06af  /* deprecated */
#define XK_numerosign                    0x06b0  /* U+2116 NUMERO SIGN */
#define XK_Serbian_DJE                   0x06b1  /* U+0402 CYRILLIC CAPITAL LETTER DJE */
#define XK_Macedonia_GJE                 0x06b2  /* U+0403 CYRILLIC CAPITAL LETTER GJE */
#define XK_Cyrillic_IO                   0x06b3  /* U+0401 CYRILLIC CAPITAL LETTER IO */
#define XK_Ukrainian_IE                  0x06b4  /* U+0404 CYRILLIC CAPITAL LETTER UKRAINIAN IE */
#define XK_Ukranian_JE                   0x06b4  /* deprecated */
#define XK_Macedonia_DSE                 0x06b5  /* U+0405 CYRILLIC CAPITAL LETTER DZE */
#define XK_Ukrainian_I                   0x06b6  /* U+0406 CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I */
#define XK_Ukranian_I                    0x06b6  /* deprecated */
#define XK_Ukrainian_YI                  0x06b7  /* U+0407 CYRILLIC CAPITAL LETTER YI */
#define XK_Ukranian_YI                   0x06b7  /* deprecated */
#define XK_Cyrillic_JE                   0x06b8  /* U+0408 CYRILLIC CAPITAL LETTER JE */
#define XK_Serbian_JE                    0x06b8  /* deprecated */
#define XK_Cyrillic_LJE                  0x06b9  /* U+0409 CYRILLIC CAPITAL LETTER LJE */
#define XK_Serbian_LJE                   0x06b9  /* deprecated */
#define XK_Cyrillic_NJE                  0x06ba  /* U+040A CYRILLIC CAPITAL LETTER NJE */
#define XK_Serbian_NJE                   0x06ba  /* deprecated */
#define XK_Serbian_TSHE                  0x06bb  /* U+040B CYRILLIC CAPITAL LETTER TSHE */
#define XK_Macedonia_KJE                 0x06bc  /* U+040C CYRILLIC CAPITAL LETTER KJE */
#define XK_Ukrainian_GHE_WITH_UPTURN     0x06bd  /* U+0490 CYRILLIC CAPITAL LETTER GHE WITH UPTURN */
#define XK_Byelorussian_SHORTU           0x06be  /* U+040E CYRILLIC CAPITAL LETTER SHORT U */
#define XK_Cyrillic_DZHE                 0x06bf  /* U+040F CYRILLIC CAPITAL LETTER DZHE */
#define XK_Serbian_DZE                   0x06bf  /* deprecated */
#define XK_Cyrillic_yu                   0x06c0  /* U+044E CYRILLIC SMALL LETTER YU */
#define XK_Cyrillic_a                    0x06c1  /* U+0430 CYRILLIC SMALL LETTER A */
#define XK_Cyrillic_be                   0x06c2  /* U+0431 CYRILLIC SMALL LETTER BE */
#define XK_Cyrillic_tse                  0x06c3  /* U+0446 CYRILLIC SMALL LETTER TSE */
#define XK_Cyrillic_de                   0x06c4  /* U+0434 CYRILLIC SMALL LETTER DE */
#define XK_Cyrillic_ie                   0x06c5  /* U+0435 CYRILLIC SMALL LETTER IE */
#define XK_Cyrillic_ef                   0x06c6  /* U+0444 CYRILLIC SMALL LETTER EF */
#define XK_Cyrillic_ghe                  0x06c7  /* U+0433 CYRILLIC SMALL LETTER GHE */
#define XK_Cyrillic_ha                   0x06c8  /* U+0445 CYRILLIC SMALL LETTER HA */
#define XK_Cyrillic_i                    0x06c9  /* U+0438 CYRILLIC SMALL LETTER I */
#define XK_Cyrillic_shorti               0x06ca  /* U+0439 CYRILLIC SMALL LETTER SHORT I */
#define XK_Cyrillic_ka                   0x06cb  /* U+043A CYRILLIC SMALL LETTER KA */
#define XK_Cyrillic_el                   0x06cc  /* U+043B CYRILLIC SMALL LETTER EL */
#define XK_Cyrillic_em                   0x06cd  /* U+043C CYRILLIC SMALL LETTER EM */
#define XK_Cyrillic_en                   0x06ce  /* U+043D CYRILLIC SMALL LETTER EN */
#define XK_Cyrillic_o                    0x06cf  /* U+043E CYRILLIC SMALL LETTER O */
#define XK_Cyrillic_pe                   0x06d0  /* U+043F CYRILLIC SMALL LETTER PE */
#define XK_Cyrillic_ya                   0x06d1  /* U+044F CYRILLIC SMALL LETTER YA */
#define XK_Cyrillic_er                   0x06d2  /* U+0440 CYRILLIC SMALL LETTER ER */
#define XK_Cyrillic_es                   0x06d3  /* U+0441 CYRILLIC SMALL LETTER ES */
#define XK_Cyrillic_te                   0x06d4  /* U+0442 CYRILLIC SMALL LETTER TE */
#define XK_Cyrillic_u                    0x06d5  /* U+0443 CYRILLIC SMALL LETTER U */
#define XK_Cyrillic_zhe                  0x06d6  /* U+0436 CYRILLIC SMALL LETTER ZHE */
#define XK_Cyrillic_ve                   0x06d7  /* U+0432 CYRILLIC SMALL LETTER VE */
#define XK_Cyrillic_softsign             0x06d8  /* U+044C CYRILLIC SMALL LETTER SOFT SIGN */
#define XK_Cyrillic_yeru                 0x06d9  /* U+044B CYRILLIC SMALL LETTER YERU */
#define XK_Cyrillic_ze                   0x06da  /* U+0437 CYRILLIC SMALL LETTER ZE */
#define XK_Cyrillic_sha                  0x06db  /* U+0448 CYRILLIC SMALL LETTER SHA */
#define XK_Cyrillic_e                    0x06dc  /* U+044D CYRILLIC SMALL LETTER E */
#define XK_Cyrillic_shcha                0x06dd  /* U+0449 CYRILLIC SMALL LETTER SHCHA */
#define XK_Cyrillic_che                  0x06de  /* U+0447 CYRILLIC SMALL LETTER CHE */
#define XK_Cyrillic_hardsign             0x06df  /* U+044A CYRILLIC SMALL LETTER HARD SIGN */
#define XK_Cyrillic_YU                   0x06e0  /* U+042E CYRILLIC CAPITAL LETTER YU */
#define XK_Cyrillic_A                    0x06e1  /* U+0410 CYRILLIC CAPITAL LETTER A */
#define XK_Cyrillic_BE                   0x06e2  /* U+0411 CYRILLIC CAPITAL LETTER BE */
#define XK_Cyrillic_TSE                  0x06e3  /* U+0426 CYRILLIC CAPITAL LETTER TSE */
#define XK_Cyrillic_DE                   0x06e4  /* U+0414 CYRILLIC CAPITAL LETTER DE */
#define XK_Cyrillic_IE                   0x06e5  /* U+0415 CYRILLIC CAPITAL LETTER IE */
#define XK_Cyrillic_EF                   0x06e6  /* U+0424 CYRILLIC CAPITAL LETTER EF */
#define XK_Cyrillic_GHE                  0x06e7  /* U+0413 CYRILLIC CAPITAL LETTER GHE */
#define XK_Cyrillic_HA                   0x06e8  /* U+0425 CYRILLIC CAPITAL LETTER HA */
#define XK_Cyrillic_I                    0x06e9  /* U+0418 CYRILLIC CAPITAL LETTER I */
#define XK_Cyrillic_SHORTI               0x06ea  /* U+0419 CYRILLIC CAPITAL LETTER SHORT I */
#define XK_Cyrillic_KA                   0x06eb  /* U+041A CYRILLIC CAPITAL LETTER KA */
#define XK_Cyrillic_EL                   0x06ec  /* U+041B CYRILLIC CAPITAL LETTER EL */
#define XK_Cyrillic_EM                   0x06ed  /* U+041C CYRILLIC CAPITAL LETTER EM */
#define XK_Cyrillic_EN                   0x06ee  /* U+041D CYRILLIC CAPITAL LETTER EN */
#define XK_Cyrillic_O                    0x06ef  /* U+041E CYRILLIC CAPITAL LETTER O */
#define XK_Cyrillic_PE                   0x06f0  /* U+041F CYRILLIC CAPITAL LETTER PE */
#define XK_Cyrillic_YA                   0x06f1  /* U+042F CYRILLIC CAPITAL LETTER YA */
#define XK_Cyrillic_ER                   0x06f2  /* U+0420 CYRILLIC CAPITAL LETTER ER */
#define XK_Cyrillic_ES                   0x06f3  /* U+0421 CYRILLIC CAPITAL LETTER ES */
#define XK_Cyrillic_TE                   0x06f4  /* U+0422 CYRILLIC CAPITAL LETTER TE */
#define XK_Cyrillic_U                    0x06f5  /* U+0423 CYRILLIC CAPITAL LETTER U */
#define XK_Cyrillic_ZHE                  0x06f6  /* U+0416 CYRILLIC CAPITAL LETTER ZHE */
#define XK_Cyrillic_VE                   0x06f7  /* U+0412 CYRILLIC CAPITAL LETTER VE */
#define XK_Cyrillic_SOFTSIGN             0x06f8  /* U+042C CYRILLIC CAPITAL LETTER SOFT SIGN */
#define XK_Cyrillic_YERU                 0x06f9  /* U+042B CYRILLIC CAPITAL LETTER YERU */
#define XK_Cyrillic_ZE                   0x06fa  /* U+0417 CYRILLIC CAPITAL LETTER ZE */
#define XK_Cyrillic_SHA                  0x06fb  /* U+0428 CYRILLIC CAPITAL LETTER SHA */
#define XK_Cyrillic_E                    0x06fc  /* U+042D CYRILLIC CAPITAL LETTER E */
#define XK_Cyrillic_SHCHA                0x06fd  /* U+0429 CYRILLIC CAPITAL LETTER SHCHA */
#define XK_Cyrillic_CHE                  0x06fe  /* U+0427 CYRILLIC CAPITAL LETTER CHE */
#define XK_Cyrillic_HARDSIGN             0x06ff  /* U+042A CYRILLIC CAPITAL LETTER HARD SIGN */
#endif /* XK_CYRILLIC */

/*
 * Greek
 * (based on an early draft of, and not quite identical to, ISO/IEC 8859-7)
 * Byte 3 = 7
 */

#ifdef XK_GREEK
#define XK_Greek_ALPHAaccent             0x07a1  /* U+0386 GREEK CAPITAL LETTER ALPHA WITH TONOS */
#define XK_Greek_EPSILONaccent           0x07a2  /* U+0388 GREEK CAPITAL LETTER EPSILON WITH TONOS */
#define XK_Greek_ETAaccent               0x07a3  /* U+0389 GREEK CAPITAL LETTER ETA WITH TONOS */
#define XK_Greek_IOTAaccent              0x07a4  /* U+038A GREEK CAPITAL LETTER IOTA WITH TONOS */
#define XK_Greek_IOTAdieresis            0x07a5  /* U+03AA GREEK CAPITAL LETTER IOTA WITH DIALYTIKA */
#define XK_Greek_IOTAdiaeresis           0x07a5  /* old typo */
#define XK_Greek_OMICRONaccent           0x07a7  /* U+038C GREEK CAPITAL LETTER OMICRON WITH TONOS */
#define XK_Greek_UPSILONaccent           0x07a8  /* U+038E GREEK CAPITAL LETTER UPSILON WITH TONOS */
#define XK_Greek_UPSILONdieresis         0x07a9  /* U+03AB GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA */
#define XK_Greek_OMEGAaccent             0x07ab  /* U+038F GREEK CAPITAL LETTER OMEGA WITH TONOS */
#define XK_Greek_accentdieresis          0x07ae  /* U+0385 GREEK DIALYTIKA TONOS */
#define XK_Greek_horizbar                0x07af  /* U+2015 HORIZONTAL BAR */
#define XK_Greek_alphaaccent             0x07b1  /* U+03AC GREEK SMALL LETTER ALPHA WITH TONOS */
#define XK_Greek_epsilonaccent           0x07b2  /* U+03AD GREEK SMALL LETTER EPSILON WITH TONOS */
#define XK_Greek_etaaccent               0x07b3  /* U+03AE GREEK SMALL LETTER ETA WITH TONOS */
#define XK_Greek_iotaaccent              0x07b4  /* U+03AF GREEK SMALL LETTER IOTA WITH TONOS */
#define XK_Greek_iotadieresis            0x07b5  /* U+03CA GREEK SMALL LETTER IOTA WITH DIALYTIKA */
#define XK_Greek_iotaaccentdieresis      0x07b6  /* U+0390 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS */
#define XK_Greek_omicronaccent           0x07b7  /* U+03CC GREEK SMALL LETTER OMICRON WITH TONOS */
#define XK_Greek_upsilonaccent           0x07b8  /* U+03CD GREEK SMALL LETTER UPSILON WITH TONOS */
#define XK_Greek_upsilondieresis         0x07b9  /* U+03CB GREEK SMALL LETTER UPSILON WITH DIALYTIKA */
#define XK_Greek_upsilonaccentdieresis   0x07ba  /* U+03B0 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS */
#define XK_Greek_omegaaccent             0x07bb  /* U+03CE GREEK SMALL LETTER OMEGA WITH TONOS */
#define XK_Greek_ALPHA                   0x07c1  /* U+0391 GREEK CAPITAL LETTER ALPHA */
#define XK_Greek_BETA                    0x07c2  /* U+0392 GREEK CAPITAL LETTER BETA */
#define XK_Greek_GAMMA                   0x07c3  /* U+0393 GREEK CAPITAL LETTER GAMMA */
#define XK_Greek_DELTA                   0x07c4  /* U+0394 GREEK CAPITAL LETTER DELTA */
#define XK_Greek_EPSILON                 0x07c5  /* U+0395 GREEK CAPITAL LETTER EPSILON */
#define XK_Greek_ZETA                    0x07c6  /* U+0396 GREEK CAPITAL LETTER ZETA */
#define XK_Greek_ETA                     0x07c7  /* U+0397 GREEK CAPITAL LETTER ETA */
#define XK_Greek_THETA                   0x07c8  /* U+0398 GREEK CAPITAL LETTER THETA */
#define XK_Greek_IOTA                    0x07c9  /* U+0399 GREEK CAPITAL LETTER IOTA */
#define XK_Greek_KAPPA                   0x07ca  /* U+039A GREEK CAPITAL LETTER KAPPA */
#define XK_Greek_LAMDA                   0x07cb  /* U+039B GREEK CAPITAL LETTER LAMDA */
#define XK_Greek_LAMBDA                  0x07cb  /* U+039B GREEK CAPITAL LETTER LAMDA */
#define XK_Greek_MU                      0x07cc  /* U+039C GREEK CAPITAL LETTER MU */
#define XK_Greek_NU                      0x07cd  /* U+039D GREEK CAPITAL LETTER NU */
#define XK_Greek_XI                      0x07ce  /* U+039E GREEK CAPITAL LETTER XI */
#define XK_Greek_OMICRON                 0x07cf  /* U+039F GREEK CAPITAL LETTER OMICRON */
#define XK_Greek_PI                      0x07d0  /* U+03A0 GREEK CAPITAL LETTER PI */
#define XK_Greek_RHO                     0x07d1  /* U+03A1 GREEK CAPITAL LETTER RHO */
#define XK_Greek_SIGMA                   0x07d2  /* U+03A3 GREEK CAPITAL LETTER SIGMA */
#define XK_Greek_TAU                     0x07d4  /* U+03A4 GREEK CAPITAL LETTER TAU */
#define XK_Greek_UPSILON                 0x07d5  /* U+03A5 GREEK CAPITAL LETTER UPSILON */
#define XK_Greek_PHI                     0x07d6  /* U+03A6 GREEK CAPITAL LETTER PHI */
#define XK_Greek_CHI                     0x07d7  /* U+03A7 GREEK CAPITAL LETTER CHI */
#define XK_Greek_PSI                     0x07d8  /* U+03A8 GREEK CAPITAL LETTER PSI */
#define XK_Greek_OMEGA                   0x07d9  /* U+03A9 GREEK CAPITAL LETTER OMEGA */
#define XK_Greek_alpha                   0x07e1  /* U+03B1 GREEK SMALL LETTER ALPHA */
#define XK_Greek_beta                    0x07e2  /* U+03B2 GREEK SMALL LETTER BETA */
#define XK_Greek_gamma                   0x07e3  /* U+03B3 GREEK SMALL LETTER GAMMA */
#define XK_Greek_delta                   0x07e4  /* U+03B4 GREEK SMALL LETTER DELTA */
#define XK_Greek_epsilon                 0x07e5  /* U+03B5 GREEK SMALL LETTER EPSILON */
#define XK_Greek_zeta                    0x07e6  /* U+03B6 GREEK SMALL LETTER ZETA */
#define XK_Greek_eta                     0x07e7  /* U+03B7 GREEK SMALL LETTER ETA */
#define XK_Greek_theta                   0x07e8  /* U+03B8 GREEK SMALL LETTER THETA */
#define XK_Greek_iota                    0x07e9  /* U+03B9 GREEK SMALL LETTER IOTA */
#define XK_Greek_kappa                   0x07ea  /* U+03BA GREEK SMALL LETTER KAPPA */
#define XK_Greek_lamda                   0x07eb  /* U+03BB GREEK SMALL LETTER LAMDA */
#define XK_Greek_lambda                  0x07eb  /* U+03BB GREEK SMALL LETTER LAMDA */
#define XK_Greek_mu                      0x07ec  /* U+03BC GREEK SMALL LETTER MU */
#define XK_Greek_nu                      0x07ed  /* U+03BD GREEK SMALL LETTER NU */
#define XK_Greek_xi                      0x07ee  /* U+03BE GREEK SMALL LETTER XI */
#define XK_Greek_omicron                 0x07ef  /* U+03BF GREEK SMALL LETTER OMICRON */
#define XK_Greek_pi                      0x07f0  /* U+03C0 GREEK SMALL LETTER PI */
#define XK_Greek_rho                     0x07f1  /* U+03C1 GREEK SMALL LETTER RHO */
#define XK_Greek_sigma                   0x07f2  /* U+03C3 GREEK SMALL LETTER SIGMA */
#define XK_Greek_finalsmallsigma         0x07f3  /* U+03C2 GREEK SMALL LETTER FINAL SIGMA */
#define XK_Greek_tau                     0x07f4  /* U+03C4 GREEK SMALL LETTER TAU */
#define XK_Greek_upsilon                 0x07f5  /* U+03C5 GREEK SMALL LETTER UPSILON */
#define XK_Greek_phi                     0x07f6  /* U+03C6 GREEK SMALL LETTER PHI */
#define XK_Greek_chi                     0x07f7  /* U+03C7 GREEK SMALL LETTER CHI */
#define XK_Greek_psi                     0x07f8  /* U+03C8 GREEK SMALL LETTER PSI */
#define XK_Greek_omega                   0x07f9  /* U+03C9 GREEK SMALL LETTER OMEGA */
#define XK_Greek_switch                  0xff7e  /* Alias for mode_switch */
#endif /* XK_GREEK */

/*
 * Technical
 * (from the DEC VT330/VT420 Technical Character Set, http://vt100.net/charsets/technical.html)
 * Byte 3 = 8
 */

#ifdef XK_TECHNICAL
#define XK_leftradical                   0x08a1  /* U+23B7 RADICAL SYMBOL BOTTOM */
#define XK_topleftradical                0x08a2  /*(U+250C BOX DRAWINGS LIGHT DOWN AND RIGHT)*/
#define XK_horizconnector                0x08a3  /*(U+2500 BOX DRAWINGS LIGHT HORIZONTAL)*/
#define XK_topintegral                   0x08a4  /* U+2320 TOP HALF INTEGRAL */
#define XK_botintegral                   0x08a5  /* U+2321 BOTTOM HALF INTEGRAL */
#define XK_vertconnector                 0x08a6  /*(U+2502 BOX DRAWINGS LIGHT VERTICAL)*/
#define XK_topleftsqbracket              0x08a7  /* U+23A1 LEFT SQUARE BRACKET UPPER CORNER */
#define XK_botleftsqbracket              0x08a8  /* U+23A3 LEFT SQUARE BRACKET LOWER CORNER */
#define XK_toprightsqbracket             0x08a9  /* U+23A4 RIGHT SQUARE BRACKET UPPER CORNER */
#define XK_botrightsqbracket             0x08aa  /* U+23A6 RIGHT SQUARE BRACKET LOWER CORNER */
#define XK_topleftparens                 0x08ab  /* U+239B LEFT PARENTHESIS UPPER HOOK */
#define XK_botleftparens                 0x08ac  /* U+239D LEFT PARENTHESIS LOWER HOOK */
#define XK_toprightparens                0x08ad  /* U+239E RIGHT PARENTHESIS UPPER HOOK */
#define XK_botrightparens                0x08ae  /* U+23A0 RIGHT PARENTHESIS LOWER HOOK */
#define XK_leftmiddlecurlybrace          0x08af  /* U+23A8 LEFT CURLY BRACKET MIDDLE PIECE */
#define XK_rightmiddlecurlybrace         0x08b0  /* U+23AC RIGHT CURLY BRACKET MIDDLE PIECE */
#define XK_topleftsummation              0x08b1
#define XK_botleftsummation              0x08b2
#define XK_topvertsummationconnector     0x08b3
#define XK_botvertsummationconnector     0x08b4
#define XK_toprightsummation             0x08b5
#define XK_botrightsummation             0x08b6
#define XK_rightmiddlesummation          0x08b7
#define XK_lessthanequal                 0x08bc  /* U+2264 LESS-THAN OR EQUAL TO */
#define XK_notequal                      0x08bd  /* U+2260 NOT EQUAL TO */
#define XK_greaterthanequal              0x08be  /* U+2265 GREATER-THAN OR EQUAL TO */
#define XK_integral                      0x08bf  /* U+222B INTEGRAL */
#define XK_therefore                     0x08c0  /* U+2234 THEREFORE */
#define XK_variation                     0x08c1  /* U+221D PROPORTIONAL TO */
#define XK_infinity                      0x08c2  /* U+221E INFINITY */
#define XK_nabla                         0x08c5  /* U+2207 NABLA */
#define XK_approximate                   0x08c8  /* U+223C TILDE OPERATOR */
#define XK_similarequal                  0x08c9  /* U+2243 ASYMPTOTICALLY EQUAL TO */
#define XK_ifonlyif                      0x08cd  /* U+21D4 LEFT RIGHT DOUBLE ARROW */
#define XK_implies                       0x08ce  /* U+21D2 RIGHTWARDS DOUBLE ARROW */
#define XK_identical                     0x08cf  /* U+2261 IDENTICAL TO */
#define XK_radical                       0x08d6  /* U+221A SQUARE ROOT */
#define XK_includedin                    0x08da  /* U+2282 SUBSET OF */
#define XK_includes                      0x08db  /* U+2283 SUPERSET OF */
#define XK_intersection                  0x08dc  /* U+2229 INTERSECTION */
#define XK_union                         0x08dd  /* U+222A UNION */
#define XK_logicaland                    0x08de  /* U+2227 LOGICAL AND */
#define XK_logicalor                     0x08df  /* U+2228 LOGICAL OR */
#define XK_partialderivative             0x08ef  /* U+2202 PARTIAL DIFFERENTIAL */
#define XK_function                      0x08f6  /* U+0192 LATIN SMALL LETTER F WITH HOOK */
#define XK_leftarrow                     0x08fb  /* U+2190 LEFTWARDS ARROW */
#define XK_uparrow                       0x08fc  /* U+2191 UPWARDS ARROW */
#define XK_rightarrow                    0x08fd  /* U+2192 RIGHTWARDS ARROW */
#define XK_downarrow                     0x08fe  /* U+2193 DOWNWARDS ARROW */
#endif /* XK_TECHNICAL */

/*
 * Special
 * (from the DEC VT100 Special Graphics Character Set)
 * Byte 3 = 9
 */

#ifdef XK_SPECIAL
#define XK_blank                         0x09df
#define XK_soliddiamond                  0x09e0  /* U+25C6 BLACK DIAMOND */
#define XK_checkerboard                  0x09e1  /* U+2592 MEDIUM SHADE */
#define XK_ht                            0x09e2  /* U+2409 SYMBOL FOR HORIZONTAL TABULATION */
#define XK_ff                            0x09e3  /* U+240C SYMBOL FOR FORM FEED */
#define XK_cr                            0x09e4  /* U+240D SYMBOL FOR CARRIAGE RETURN */
#define XK_lf                            0x09e5  /* U+240A SYMBOL FOR LINE FEED */
#define XK_nl                            0x09e8  /* U+2424 SYMBOL FOR NEWLINE */
#define XK_vt                            0x09e9  /* U+240B SYMBOL FOR VERTICAL TABULATION */
#define XK_lowrightcorner                0x09ea  /* U+2518 BOX DRAWINGS LIGHT UP AND LEFT */
#define XK_uprightcorner                 0x09eb  /* U+2510 BOX DRAWINGS LIGHT DOWN AND LEFT */
#define XK_upleftcorner                  0x09ec  /* U+250C BOX DRAWINGS LIGHT DOWN AND RIGHT */
#define XK_lowleftcorner                 0x09ed  /* U+2514 BOX DRAWINGS LIGHT UP AND RIGHT */
#define XK_crossinglines                 0x09ee  /* U+253C BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL */
#define XK_horizlinescan1                0x09ef  /* U+23BA HORIZONTAL SCAN LINE-1 */
#define XK_horizlinescan3                0x09f0  /* U+23BB HORIZONTAL SCAN LINE-3 */
#define XK_horizlinescan5                0x09f1  /* U+2500 BOX DRAWINGS LIGHT HORIZONTAL */
#define XK_horizlinescan7                0x09f2  /* U+23BC HORIZONTAL SCAN LINE-7 */
#define XK_horizlinescan9                0x09f3  /* U+23BD HORIZONTAL SCAN LINE-9 */
#define XK_leftt                         0x09f4  /* U+251C BOX DRAWINGS LIGHT VERTICAL AND RIGHT */
#define XK_rightt                        0x09f5  /* U+2524 BOX DRAWINGS LIGHT VERTICAL AND LEFT */
#define XK_bott                          0x09f6  /* U+2534 BOX DRAWINGS LIGHT UP AND HORIZONTAL */
#define XK_topt                          0x09f7  /* U+252C BOX DRAWINGS LIGHT DOWN AND HORIZONTAL */
#define XK_vertbar                       0x09f8  /* U+2502 BOX DRAWINGS LIGHT VERTICAL */
#endif /* XK_SPECIAL */

/*
 * Publishing
 * (these are probably from a long forgotten DEC Publishing
 * font that once shipped with DECwrite)
 * Byte 3 = 0x0a
 */

#ifdef XK_PUBLISHING
#define XK_emspace                       0x0aa1  /* U+2003 EM SPACE */
#define XK_enspace                       0x0aa2  /* U+2002 EN SPACE */
#define XK_em3space                      0x0aa3  /* U+2004 THREE-PER-EM SPACE */
#define XK_em4space                      0x0aa4  /* U+2005 FOUR-PER-EM SPACE */
#define XK_digitspace                    0x0aa5  /* U+2007 FIGURE SPACE */
#define XK_punctspace                    0x0aa6  /* U+2008 PUNCTUATION SPACE */
#define XK_thinspace                     0x0aa7  /* U+2009 THIN SPACE */
#define XK_hairspace                     0x0aa8  /* U+200A HAIR SPACE */
#define XK_emdash                        0x0aa9  /* U+2014 EM DASH */
#define XK_endash                        0x0aaa  /* U+2013 EN DASH */
#define XK_signifblank                   0x0aac  /*(U+2423 OPEN BOX)*/
#define XK_ellipsis                      0x0aae  /* U+2026 HORIZONTAL ELLIPSIS */
#define XK_doubbaselinedot               0x0aaf  /* U+2025 TWO DOT LEADER */
#define XK_onethird                      0x0ab0  /* U+2153 VULGAR FRACTION ONE THIRD */
#define XK_twothirds                     0x0ab1  /* U+2154 VULGAR FRACTION TWO THIRDS */
#define XK_onefifth                      0x0ab2  /* U+2155 VULGAR FRACTION ONE FIFTH */
#define XK_twofifths                     0x0ab3  /* U+2156 VULGAR FRACTION TWO FIFTHS */
#define XK_threefifths                   0x0ab4  /* U+2157 VULGAR FRACTION THREE FIFTHS */
#define XK_fourfifths                    0x0ab5  /* U+2158 VULGAR FRACTION FOUR FIFTHS */
#define XK_onesixth                      0x0ab6  /* U+2159 VULGAR FRACTION ONE SIXTH */
#define XK_fivesixths                    0x0ab7  /* U+215A VULGAR FRACTION FIVE SIXTHS */
#define XK_careof                        0x0ab8  /* U+2105 CARE OF */
#define XK_figdash                       0x0abb  /* U+2012 FIGURE DASH */
#define XK_leftanglebracket              0x0abc  /*(U+27E8 MATHEMATICAL LEFT ANGLE BRACKET)*/
#define XK_decimalpoint                  0x0abd  /*(U+002E FULL STOP)*/
#define XK_rightanglebracket             0x0abe  /*(U+27E9 MATHEMATICAL RIGHT ANGLE BRACKET)*/
#define XK_marker                        0x0abf
#define XK_oneeighth                     0x0ac3  /* U+215B VULGAR FRACTION ONE EIGHTH */
#define XK_threeeighths                  0x0ac4  /* U+215C VULGAR FRACTION THREE EIGHTHS */
#define XK_fiveeighths                   0x0ac5  /* U+215D VULGAR FRACTION FIVE EIGHTHS */
#define XK_seveneighths                  0x0ac6  /* U+215E VULGAR FRACTION SEVEN EIGHTHS */
#define XK_trademark                     0x0ac9  /* U+2122 TRADE MARK SIGN */
#define XK_signaturemark                 0x0aca  /*(U+2613 SALTIRE)*/
#define XK_trademarkincircle             0x0acb
#define XK_leftopentriangle              0x0acc  /*(U+25C1 WHITE LEFT-POINTING TRIANGLE)*/
#define XK_rightopentriangle             0x0acd  /*(U+25B7 WHITE RIGHT-POINTING TRIANGLE)*/
#define XK_emopencircle                  0x0ace  /*(U+25CB WHITE CIRCLE)*/
#define XK_emopenrectangle               0x0acf  /*(U+25AF WHITE VERTICAL RECTANGLE)*/
#define XK_leftsinglequotemark           0x0ad0  /* U+2018 LEFT SINGLE QUOTATION MARK */
#define XK_rightsinglequotemark          0x0ad1  /* U+2019 RIGHT SINGLE QUOTATION MARK */
#define XK_leftdoublequotemark           0x0ad2  /* U+201C LEFT DOUBLE QUOTATION MARK */
#define XK_rightdoublequotemark          0x0ad3  /* U+201D RIGHT DOUBLE QUOTATION MARK */
#define XK_prescription                  0x0ad4  /* U+211E PRESCRIPTION TAKE */
#define XK_permille                      0x0ad5  /* U+2030 PER MILLE SIGN */
#define XK_minutes                       0x0ad6  /* U+2032 PRIME */
#define XK_seconds                       0x0ad7  /* U+2033 DOUBLE PRIME */
#define XK_latincross                    0x0ad9  /* U+271D LATIN CROSS */
#define XK_hexagram                      0x0ada
#define XK_filledrectbullet              0x0adb  /*(U+25AC BLACK RECTANGLE)*/
#define XK_filledlefttribullet           0x0adc  /*(U+25C0 BLACK LEFT-POINTING TRIANGLE)*/
#define XK_filledrighttribullet          0x0add  /*(U+25B6 BLACK RIGHT-POINTING TRIANGLE)*/
#define XK_emfilledcircle                0x0ade  /*(U+25CF BLACK CIRCLE)*/
#define XK_emfilledrect                  0x0adf  /*(U+25AE BLACK VERTICAL RECTANGLE)*/
#define XK_enopencircbullet              0x0ae0  /*(U+25E6 WHITE BULLET)*/
#define XK_enopensquarebullet            0x0ae1  /*(U+25AB WHITE SMALL SQUARE)*/
#define XK_openrectbullet                0x0ae2  /*(U+25AD WHITE RECTANGLE)*/
#define XK_opentribulletup               0x0ae3  /*(U+25B3 WHITE UP-POINTING TRIANGLE)*/
#define XK_opentribulletdown             0x0ae4  /*(U+25BD WHITE DOWN-POINTING TRIANGLE)*/
#define XK_openstar                      0x0ae5  /*(U+2606 WHITE STAR)*/
#define XK_enfilledcircbullet            0x0ae6  /*(U+2022 BULLET)*/
#define XK_enfilledsqbullet              0x0ae7  /*(U+25AA BLACK SMALL SQUARE)*/
#define XK_filledtribulletup             0x0ae8  /*(U+25B2 BLACK UP-POINTING TRIANGLE)*/
#define XK_filledtribulletdown           0x0ae9  /*(U+25BC BLACK DOWN-POINTING TRIANGLE)*/
#define XK_leftpointer                   0x0aea  /*(U+261C WHITE LEFT POINTING INDEX)*/
#define XK_rightpointer                  0x0aeb  /*(U+261E WHITE RIGHT POINTING INDEX)*/
#define XK_club                          0x0aec  /* U+2663 BLACK CLUB SUIT */
#define XK_diamond                       0x0aed  /* U+2666 BLACK DIAMOND SUIT */
#define XK_heart                         0x0aee  /* U+2665 BLACK HEART SUIT */
#define XK_maltesecross                  0x0af0  /* U+2720 MALTESE CROSS */
#define XK_dagger                        0x0af1  /* U+2020 DAGGER */
#define XK_doubledagger                  0x0af2  /* U+2021 DOUBLE DAGGER */
#define XK_checkmark                     0x0af3  /* U+2713 CHECK MARK */
#define XK_ballotcross                   0x0af4  /* U+2717 BALLOT X */
#define XK_musicalsharp                  0x0af5  /* U+266F MUSIC SHARP SIGN */
#define XK_musicalflat                   0x0af6  /* U+266D MUSIC FLAT SIGN */
#define XK_malesymbol                    0x0af7  /* U+2642 MALE SIGN */
#define XK_femalesymbol                  0x0af8  /* U+2640 FEMALE SIGN */
#define XK_telephone                     0x0af9  /* U+260E BLACK TELEPHONE */
#define XK_telephonerecorder             0x0afa  /* U+2315 TELEPHONE RECORDER */
#define XK_phonographcopyright           0x0afb  /* U+2117 SOUND RECORDING COPYRIGHT */
#define XK_caret                         0x0afc  /* U+2038 CARET */
#define XK_singlelowquotemark            0x0afd  /* U+201A SINGLE LOW-9 QUOTATION MARK */
#define XK_doublelowquotemark            0x0afe  /* U+201E DOUBLE LOW-9 QUOTATION MARK */
#define XK_cursor                        0x0aff
#endif /* XK_PUBLISHING */

/*
 * APL
 * Byte 3 = 0x0b
 */

#ifdef XK_APL
#define XK_leftcaret                     0x0ba3  /*(U+003C LESS-THAN SIGN)*/
#define XK_rightcaret                    0x0ba6  /*(U+003E GREATER-THAN SIGN)*/
#define XK_downcaret                     0x0ba8  /*(U+2228 LOGICAL OR)*/
#define XK_upcaret                       0x0ba9  /*(U+2227 LOGICAL AND)*/
#define XK_overbar                       0x0bc0  /*(U+00AF MACRON)*/
#define XK_downtack                      0x0bc2  /* U+22A4 DOWN TACK */
#define XK_upshoe                        0x0bc3  /*(U+2229 INTERSECTION)*/
#define XK_downstile                     0x0bc4  /* U+230A LEFT FLOOR */
#define XK_underbar                      0x0bc6  /*(U+005F LOW LINE)*/
#define XK_jot                           0x0bca  /* U+2218 RING OPERATOR */
#define XK_quad                          0x0bcc  /* U+2395 APL FUNCTIONAL SYMBOL QUAD */
#define XK_uptack                        0x0bce  /* U+22A5 UP TACK */
#define XK_circle                        0x0bcf  /* U+25CB WHITE CIRCLE */
#define XK_upstile                       0x0bd3  /* U+2308 LEFT CEILING */
#define XK_downshoe                      0x0bd6  /*(U+222A UNION)*/
#define XK_rightshoe                     0x0bd8  /*(U+2283 SUPERSET OF)*/
#define XK_leftshoe                      0x0bda  /*(U+2282 SUBSET OF)*/
#define XK_lefttack                      0x0bdc  /* U+22A3 LEFT TACK */
#define XK_righttack                     0x0bfc  /* U+22A2 RIGHT TACK */
#endif /* XK_APL */

/*
 * Hebrew
 * Byte 3 = 0x0c
 */

#ifdef XK_HEBREW
#define XK_hebrew_doublelowline          0x0cdf  /* U+2017 DOUBLE LOW LINE */
#define XK_hebrew_aleph                  0x0ce0  /* U+05D0 HEBREW LETTER ALEF */
#define XK_hebrew_bet                    0x0ce1  /* U+05D1 HEBREW LETTER BET */
#define XK_hebrew_beth                   0x0ce1  /* deprecated */
#define XK_hebrew_gimel                  0x0ce2  /* U+05D2 HEBREW LETTER GIMEL */
#define XK_hebrew_gimmel                 0x0ce2  /* deprecated */
#define XK_hebrew_dalet                  0x0ce3  /* U+05D3 HEBREW LETTER DALET */
#define XK_hebrew_daleth                 0x0ce3  /* deprecated */
#define XK_hebrew_he                     0x0ce4  /* U+05D4 HEBREW LETTER HE */
#define XK_hebrew_waw                    0x0ce5  /* U+05D5 HEBREW LETTER VAV */
#define XK_hebrew_zain                   0x0ce6  /* U+05D6 HEBREW LETTER ZAYIN */
#define XK_hebrew_zayin                  0x0ce6  /* deprecated */
#define XK_hebrew_chet                   0x0ce7  /* U+05D7 HEBREW LETTER HET */
#define XK_hebrew_het                    0x0ce7  /* deprecated */
#define XK_hebrew_tet                    0x0ce8  /* U+05D8 HEBREW LETTER TET */
#define XK_hebrew_teth                   0x0ce8  /* deprecated */
#define XK_hebrew_yod                    0x0ce9  /* U+05D9 HEBREW LETTER YOD */
#define XK_hebrew_finalkaph              0x0cea  /* U+05DA HEBREW LETTER FINAL KAF */
#define XK_hebrew_kaph                   0x0ceb  /* U+05DB HEBREW LETTER KAF */
#define XK_hebrew_lamed                  0x0cec  /* U+05DC HEBREW LETTER LAMED */
#define XK_hebrew_finalmem               0x0ced  /* U+05DD HEBREW LETTER FINAL MEM */
#define XK_hebrew_mem                    0x0cee  /* U+05DE HEBREW LETTER MEM */
#define XK_hebrew_finalnun               0x0cef  /* U+05DF HEBREW LETTER FINAL NUN */
#define XK_hebrew_nun                    0x0cf0  /* U+05E0 HEBREW LETTER NUN */
#define XK_hebrew_samech                 0x0cf1  /* U+05E1 HEBREW LETTER SAMEKH */
#define XK_hebrew_samekh                 0x0cf1  /* deprecated */
#define XK_hebrew_ayin                   0x0cf2  /* U+05E2 HEBREW LETTER AYIN */
#define XK_hebrew_finalpe                0x0cf3  /* U+05E3 HEBREW LETTER FINAL PE */
#define XK_hebrew_pe                     0x0cf4  /* U+05E4 HEBREW LETTER PE */
#define XK_hebrew_finalzade              0x0cf5  /* U+05E5 HEBREW LETTER FINAL TSADI */
#define XK_hebrew_finalzadi              0x0cf5  /* deprecated */
#define XK_hebrew_zade                   0x0cf6  /* U+05E6 HEBREW LETTER TSADI */
#define XK_hebrew_zadi                   0x0cf6  /* deprecated */
#define XK_hebrew_qoph                   0x0cf7  /* U+05E7 HEBREW LETTER QOF */
#define XK_hebrew_kuf                    0x0cf7  /* deprecated */
#define XK_hebrew_resh                   0x0cf8  /* U+05E8 HEBREW LETTER RESH */
#define XK_hebrew_shin                   0x0cf9  /* U+05E9 HEBREW LETTER SHIN */
#define XK_hebrew_taw                    0x0cfa  /* U+05EA HEBREW LETTER TAV */
#define XK_hebrew_taf                    0x0cfa  /* deprecated */
#define XK_Hebrew_switch                 0xff7e  /* Alias for mode_switch */
#endif /* XK_HEBREW */

/*
 * Thai
 * Byte 3 = 0x0d
 */

#ifdef XK_THAI
#define XK_Thai_kokai                    0x0da1  /* U+0E01 THAI CHARACTER KO KAI */
#define XK_Thai_khokhai                  0x0da2  /* U+0E02 THAI CHARACTER KHO KHAI */
#define XK_Thai_khokhuat                 0x0da3  /* U+0E03 THAI CHARACTER KHO KHUAT */
#define XK_Thai_khokhwai                 0x0da4  /* U+0E04 THAI CHARACTER KHO KHWAI */
#define XK_Thai_khokhon                  0x0da5  /* U+0E05 THAI CHARACTER KHO KHON */
#define XK_Thai_khorakhang               0x0da6  /* U+0E06 THAI CHARACTER KHO RAKHANG */
#define XK_Thai_ngongu                   0x0da7  /* U+0E07 THAI CHARACTER NGO NGU */
#define XK_Thai_chochan                  0x0da8  /* U+0E08 THAI CHARACTER CHO CHAN */
#define XK_Thai_choching                 0x0da9  /* U+0E09 THAI CHARACTER CHO CHING */
#define XK_Thai_chochang                 0x0daa  /* U+0E0A THAI CHARACTER CHO CHANG */
#define XK_Thai_soso                     0x0dab  /* U+0E0B THAI CHARACTER SO SO */
#define XK_Thai_chochoe                  0x0dac  /* U+0E0C THAI CHARACTER CHO CHOE */
#define XK_Thai_yoying                   0x0dad  /* U+0E0D THAI CHARACTER YO YING */
#define XK_Thai_dochada                  0x0dae  /* U+0E0E THAI CHARACTER DO CHADA */
#define XK_Thai_topatak                  0x0daf  /* U+0E0F THAI CHARACTER TO PATAK */
#define XK_Thai_thothan                  0x0db0  /* U+0E10 THAI CHARACTER THO THAN */
#define XK_Thai_thonangmontho            0x0db1  /* U+0E11 THAI CHARACTER THO NANGMONTHO */
#define XK_Thai_thophuthao               0x0db2  /* U+0E12 THAI CHARACTER THO PHUTHAO */
#define XK_Thai_nonen                    0x0db3  /* U+0E13 THAI CHARACTER NO NEN */
#define XK_Thai_dodek                    0x0db4  /* U+0E14 THAI CHARACTER DO DEK */
#define XK_Thai_totao                    0x0db5  /* U+0E15 THAI CHARACTER TO TAO */
#define XK_Thai_thothung                 0x0db6  /* U+0E16 THAI CHARACTER THO THUNG */
#define XK_Thai_thothahan                0x0db7  /* U+0E17 THAI CHARACTER THO THAHAN */
#define XK_Thai_thothong                 0x0db8  /* U+0E18 THAI CHARACTER THO THONG */
#define XK_Thai_nonu                     0x0db9  /* U+0E19 THAI CHARACTER NO NU */
#define XK_Thai_bobaimai                 0x0dba  /* U+0E1A THAI CHARACTER BO BAIMAI */
#define XK_Thai_popla                    0x0dbb  /* U+0E1B THAI CHARACTER PO PLA */
#define XK_Thai_phophung                 0x0dbc  /* U+0E1C THAI CHARACTER PHO PHUNG */
#define XK_Thai_fofa                     0x0dbd  /* U+0E1D THAI CHARACTER FO FA */
#define XK_Thai_phophan                  0x0dbe  /* U+0E1E THAI CHARACTER PHO PHAN */
#define XK_Thai_fofan                    0x0dbf  /* U+0E1F THAI CHARACTER FO FAN */
#define XK_Thai_phosamphao               0x0dc0  /* U+0E20 THAI CHARACTER PHO SAMPHAO */
#define XK_Thai_moma                     0x0dc1  /* U+0E21 THAI CHARACTER MO MA */
#define XK_Thai_yoyak                    0x0dc2  /* U+0E22 THAI CHARACTER YO YAK */
#define XK_Thai_rorua                    0x0dc3  /* U+0E23 THAI CHARACTER RO RUA */
#define XK_Thai_ru                       0x0dc4  /* U+0E24 THAI CHARACTER RU */
#define XK_Thai_loling                   0x0dc5  /* U+0E25 THAI CHARACTER LO LING */
#define XK_Thai_lu                       0x0dc6  /* U+0E26 THAI CHARACTER LU */
#define XK_Thai_wowaen                   0x0dc7  /* U+0E27 THAI CHARACTER WO WAEN */
#define XK_Thai_sosala                   0x0dc8  /* U+0E28 THAI CHARACTER SO SALA */
#define XK_Thai_sorusi                   0x0dc9  /* U+0E29 THAI CHARACTER SO RUSI */
#define XK_Thai_sosua                    0x0dca  /* U+0E2A THAI CHARACTER SO SUA */
#define XK_Thai_hohip                    0x0dcb  /* U+0E2B THAI CHARACTER HO HIP */
#define XK_Thai_lochula                  0x0dcc  /* U+0E2C THAI CHARACTER LO CHULA */
#define XK_Thai_oang                     0x0dcd  /* U+0E2D THAI CHARACTER O ANG */
#define XK_Thai_honokhuk                 0x0dce  /* U+0E2E THAI CHARACTER HO NOKHUK */
#define XK_Thai_paiyannoi                0x0dcf  /* U+0E2F THAI CHARACTER PAIYANNOI */
#define XK_Thai_saraa                    0x0dd0  /* U+0E30 THAI CHARACTER SARA A */
#define XK_Thai_maihanakat               0x0dd1  /* U+0E31 THAI CHARACTER MAI HAN-AKAT */
#define XK_Thai_saraaa                   0x0dd2  /* U+0E32 THAI CHARACTER SARA AA */
#define XK_Thai_saraam                   0x0dd3  /* U+0E33 THAI CHARACTER SARA AM */
#define XK_Thai_sarai                    0x0dd4  /* U+0E34 THAI CHARACTER SARA I */
#define XK_Thai_saraii                   0x0dd5  /* U+0E35 THAI CHARACTER SARA II */
#define XK_Thai_saraue                   0x0dd6  /* U+0E36 THAI CHARACTER SARA UE */
#define XK_Thai_sarauee                  0x0dd7  /* U+0E37 THAI CHARACTER SARA UEE */
#define XK_Thai_sarau                    0x0dd8  /* U+0E38 THAI CHARACTER SARA U */
#define XK_Thai_sarauu                   0x0dd9  /* U+0E39 THAI CHARACTER SARA UU */
#define XK_Thai_phinthu                  0x0dda  /* U+0E3A THAI CHARACTER PHINTHU */
#define XK_Thai_maihanakat_maitho        0x0dde
#define XK_Thai_baht                     0x0ddf  /* U+0E3F THAI CURRENCY SYMBOL BAHT */
#define XK_Thai_sarae                    0x0de0  /* U+0E40 THAI CHARACTER SARA E */
#define XK_Thai_saraae                   0x0de1  /* U+0E41 THAI CHARACTER SARA AE */
#define XK_Thai_sarao                    0x0de2  /* U+0E42 THAI CHARACTER SARA O */
#define XK_Thai_saraaimaimuan            0x0de3  /* U+0E43 THAI CHARACTER SARA AI MAIMUAN */
#define XK_Thai_saraaimaimalai           0x0de4  /* U+0E44 THAI CHARACTER SARA AI MAIMALAI */
#define XK_Thai_lakkhangyao              0x0de5  /* U+0E45 THAI CHARACTER LAKKHANGYAO */
#define XK_Thai_maiyamok                 0x0de6  /* U+0E46 THAI CHARACTER MAIYAMOK */
#define XK_Thai_maitaikhu                0x0de7  /* U+0E47 THAI CHARACTER MAITAIKHU */
#define XK_Thai_maiek                    0x0de8  /* U+0E48 THAI CHARACTER MAI EK */
#define XK_Thai_maitho                   0x0de9  /* U+0E49 THAI CHARACTER MAI THO */
#define XK_Thai_maitri                   0x0dea  /* U+0E4A THAI CHARACTER MAI TRI */
#define XK_Thai_maichattawa              0x0deb  /* U+0E4B THAI CHARACTER MAI CHATTAWA */
#define XK_Thai_thanthakhat              0x0dec  /* U+0E4C THAI CHARACTER THANTHAKHAT */
#define XK_Thai_nikhahit                 0x0ded  /* U+0E4D THAI CHARACTER NIKHAHIT */
#define XK_Thai_leksun                   0x0df0  /* U+0E50 THAI DIGIT ZERO */
#define XK_Thai_leknung                  0x0df1  /* U+0E51 THAI DIGIT ONE */
#define XK_Thai_leksong                  0x0df2  /* U+0E52 THAI DIGIT TWO */
#define XK_Thai_leksam                   0x0df3  /* U+0E53 THAI DIGIT THREE */
#define XK_Thai_leksi                    0x0df4  /* U+0E54 THAI DIGIT FOUR */
#define XK_Thai_lekha                    0x0df5  /* U+0E55 THAI DIGIT FIVE */
#define XK_Thai_lekhok                   0x0df6  /* U+0E56 THAI DIGIT SIX */
#define XK_Thai_lekchet                  0x0df7  /* U+0E57 THAI DIGIT SEVEN */
#define XK_Thai_lekpaet                  0x0df8  /* U+0E58 THAI DIGIT EIGHT */
#define XK_Thai_lekkao                   0x0df9  /* U+0E59 THAI DIGIT NINE */
#endif /* XK_THAI */

/*
 * Korean
 * Byte 3 = 0x0e
 */

#ifdef XK_KOREAN

#define XK_Hangul                        0xff31  /* Hangul start/stop(toggle) */
#define XK_Hangul_Start                  0xff32  /* Hangul start */
#define XK_Hangul_End                    0xff33  /* Hangul end, English start */
#define XK_Hangul_Hanja                  0xff34  /* Start Hangul->Hanja Conversion */
#define XK_Hangul_Jamo                   0xff35  /* Hangul Jamo mode */
#define XK_Hangul_Romaja                 0xff36  /* Hangul Romaja mode */
#define XK_Hangul_Codeinput              0xff37  /* Hangul code input mode */
#define XK_Hangul_Jeonja                 0xff38  /* Jeonja mode */
#define XK_Hangul_Banja                  0xff39  /* Banja mode */
#define XK_Hangul_PreHanja               0xff3a  /* Pre Hanja conversion */
#define XK_Hangul_PostHanja              0xff3b  /* Post Hanja conversion */
#define XK_Hangul_SingleCandidate        0xff3c  /* Single candidate */
#define XK_Hangul_MultipleCandidate      0xff3d  /* Multiple candidate */
#define XK_Hangul_PreviousCandidate      0xff3e  /* Previous candidate */
#define XK_Hangul_Special                0xff3f  /* Special symbols */
#define XK_Hangul_switch                 0xff7e  /* Alias for mode_switch */

/* Hangul Consonant Characters */
#define XK_Hangul_Kiyeog                 0x0ea1
#define XK_Hangul_SsangKiyeog            0x0ea2
#define XK_Hangul_KiyeogSios             0x0ea3
#define XK_Hangul_Nieun                  0x0ea4
#define XK_Hangul_NieunJieuj             0x0ea5
#define XK_Hangul_NieunHieuh             0x0ea6
#define XK_Hangul_Dikeud                 0x0ea7
#define XK_Hangul_SsangDikeud            0x0ea8
#define XK_Hangul_Rieul                  0x0ea9
#define XK_Hangul_RieulKiyeog            0x0eaa
#define XK_Hangul_RieulMieum             0x0eab
#define XK_Hangul_RieulPieub             0x0eac
#define XK_Hangul_RieulSios              0x0ead
#define XK_Hangul_RieulTieut             0x0eae
#define XK_Hangul_RieulPhieuf            0x0eaf
#define XK_Hangul_RieulHieuh             0x0eb0
#define XK_Hangul_Mieum                  0x0eb1
#define XK_Hangul_Pieub                  0x0eb2
#define XK_Hangul_SsangPieub             0x0eb3
#define XK_Hangul_PieubSios              0x0eb4
#define XK_Hangul_Sios                   0x0eb5
#define XK_Hangul_SsangSios              0x0eb6
#define XK_Hangul_Ieung                  0x0eb7
#define XK_Hangul_Jieuj                  0x0eb8
#define XK_Hangul_SsangJieuj             0x0eb9
#define XK_Hangul_Cieuc                  0x0eba
#define XK_Hangul_Khieuq                 0x0ebb
#define XK_Hangul_Tieut                  0x0ebc
#define XK_Hangul_Phieuf                 0x0ebd
#define XK_Hangul_Hieuh                  0x0ebe

/* Hangul Vowel Characters */
#define XK_Hangul_A                      0x0ebf
#define XK_Hangul_AE                     0x0ec0
#define XK_Hangul_YA                     0x0ec1
#define XK_Hangul_YAE                    0x0ec2
#define XK_Hangul_EO                     0x0ec3
#define XK_Hangul_E                      0x0ec4
#define XK_Hangul_YEO                    0x0ec5
#define XK_Hangul_YE                     0x0ec6
#define XK_Hangul_O                      0x0ec7
#define XK_Hangul_WA                     0x0ec8
#define XK_Hangul_WAE                    0x0ec9
#define XK_Hangul_OE                     0x0eca
#define XK_Hangul_YO                     0x0ecb
#define XK_Hangul_U                      0x0ecc
#define XK_Hangul_WEO                    0x0ecd
#define XK_Hangul_WE                     0x0ece
#define XK_Hangul_WI                     0x0ecf
#define XK_Hangul_YU                     0x0ed0
#define XK_Hangul_EU                     0x0ed1
#define XK_Hangul_YI                     0x0ed2
#define XK_Hangul_I                      0x0ed3

/* Hangul syllable-final (JongSeong) Characters */
#define XK_Hangul_J_Kiyeog               0x0ed4
#define XK_Hangul_J_SsangKiyeog          0x0ed5
#define XK_Hangul_J_KiyeogSios           0x0ed6
#define XK_Hangul_J_Nieun                0x0ed7
#define XK_Hangul_J_NieunJieuj           0x0ed8
#define XK_Hangul_J_NieunHieuh           0x0ed9
#define XK_Hangul_J_Dikeud               0x0eda
#define XK_Hangul_J_Rieul                0x0edb
#define XK_Hangul_J_RieulKiyeog          0x0edc
#define XK_Hangul_J_RieulMieum           0x0edd
#define XK_Hangul_J_RieulPieub           0x0ede
#define XK_Hangul_J_RieulSios            0x0edf
#define XK_Hangul_J_RieulTieut           0x0ee0
#define XK_Hangul_J_RieulPhieuf          0x0ee1
#define XK_Hangul_J_RieulHieuh           0x0ee2
#define XK_Hangul_J_Mieum                0x0ee3
#define XK_Hangul_J_Pieub                0x0ee4
#define XK_Hangul_J_PieubSios            0x0ee5
#define XK_Hangul_J_Sios                 0x0ee6
#define XK_Hangul_J_SsangSios            0x0ee7
#define XK_Hangul_J_Ieung                0x0ee8
#define XK_Hangul_J_Jieuj                0x0ee9
#define XK_Hangul_J_Cieuc                0x0eea
#define XK_Hangul_J_Khieuq               0x0eeb
#define XK_Hangul_J_Tieut                0x0eec
#define XK_Hangul_J_Phieuf               0x0eed
#define XK_Hangul_J_Hieuh                0x0eee

/* Ancient Hangul Consonant Characters */
#define XK_Hangul_RieulYeorinHieuh       0x0eef
#define XK_Hangul_SunkyeongeumMieum      0x0ef0
#define XK_Hangul_SunkyeongeumPieub      0x0ef1
#define XK_Hangul_PanSios                0x0ef2
#define XK_Hangul_KkogjiDalrinIeung      0x0ef3
#define XK_Hangul_SunkyeongeumPhieuf     0x0ef4
#define XK_Hangul_YeorinHieuh            0x0ef5

/* Ancient Hangul Vowel Characters */
#define XK_Hangul_AraeA                  0x0ef6
#define XK_Hangul_AraeAE                 0x0ef7

/* Ancient Hangul syllable-final (JongSeong) Characters */
#define XK_Hangul_J_PanSios              0x0ef8
#define XK_Hangul_J_KkogjiDalrinIeung    0x0ef9
#define XK_Hangul_J_YeorinHieuh          0x0efa

/* Korean currency symbol */
#define XK_Korean_Won                    0x0eff  /*(U+20A9 WON SIGN)*/

#endif /* XK_KOREAN */

/*
 * Armenian
 */

#ifdef XK_ARMENIAN
#define XK_Armenian_ligature_ew       0x1000587  /* U+0587 ARMENIAN SMALL LIGATURE ECH YIWN */
#define XK_Armenian_full_stop         0x1000589  /* U+0589 ARMENIAN FULL STOP */
#define XK_Armenian_verjaket          0x1000589  /* U+0589 ARMENIAN FULL STOP */
#define XK_Armenian_separation_mark   0x100055d  /* U+055D ARMENIAN COMMA */
#define XK_Armenian_but               0x100055d  /* U+055D ARMENIAN COMMA */
#define XK_Armenian_hyphen            0x100058a  /* U+058A ARMENIAN HYPHEN */
#define XK_Armenian_yentamna          0x100058a  /* U+058A ARMENIAN HYPHEN */
#define XK_Armenian_exclam            0x100055c  /* U+055C ARMENIAN EXCLAMATION MARK */
#define XK_Armenian_amanak            0x100055c  /* U+055C ARMENIAN EXCLAMATION MARK */
#define XK_Armenian_accent            0x100055b  /* U+055B ARMENIAN EMPHASIS MARK */
#define XK_Armenian_shesht            0x100055b  /* U+055B ARMENIAN EMPHASIS MARK */
#define XK_Armenian_question          0x100055e  /* U+055E ARMENIAN QUESTION MARK */
#define XK_Armenian_paruyk            0x100055e  /* U+055E ARMENIAN QUESTION MARK */
#define XK_Armenian_AYB               0x1000531  /* U+0531 ARMENIAN CAPITAL LETTER AYB */
#define XK_Armenian_ayb               0x1000561  /* U+0561 ARMENIAN SMALL LETTER AYB */
#define XK_Armenian_BEN               0x1000532  /* U+0532 ARMENIAN CAPITAL LETTER BEN */
#define XK_Armenian_ben               0x1000562  /* U+0562 ARMENIAN SMALL LETTER BEN */
#define XK_Armenian_GIM               0x1000533  /* U+0533 ARMENIAN CAPITAL LETTER GIM */
#define XK_Armenian_gim               0x1000563  /* U+0563 ARMENIAN SMALL LETTER GIM */
#define XK_Armenian_DA                0x1000534  /* U+0534 ARMENIAN CAPITAL LETTER DA */
#define XK_Armenian_da                0x1000564  /* U+0564 ARMENIAN SMALL LETTER DA */
#define XK_Armenian_YECH              0x1000535  /* U+0535 ARMENIAN CAPITAL LETTER ECH */
#define XK_Armenian_yech              0x1000565  /* U+0565 ARMENIAN SMALL LETTER ECH */
#define XK_Armenian_ZA                0x1000536  /* U+0536 ARMENIAN CAPITAL LETTER ZA */
#define XK_Armenian_za                0x1000566  /* U+0566 ARMENIAN SMALL LETTER ZA */
#define XK_Armenian_E                 0x1000537  /* U+0537 ARMENIAN CAPITAL LETTER EH */
#define XK_Armenian_e                 0x1000567  /* U+0567 ARMENIAN SMALL LETTER EH */
#define XK_Armenian_AT                0x1000538  /* U+0538 ARMENIAN CAPITAL LETTER ET */
#define XK_Armenian_at                0x1000568  /* U+0568 ARMENIAN SMALL LETTER ET */
#define XK_Armenian_TO                0x1000539  /* U+0539 ARMENIAN CAPITAL LETTER TO */
#define XK_Armenian_to                0x1000569  /* U+0569 ARMENIAN SMALL LETTER TO */
#define XK_Armenian_ZHE               0x100053a  /* U+053A ARMENIAN CAPITAL LETTER ZHE */
#define XK_Armenian_zhe               0x100056a  /* U+056A ARMENIAN SMALL LETTER ZHE */
#define XK_Armenian_INI               0x100053b  /* U+053B ARMENIAN CAPITAL LETTER INI */
#define XK_Armenian_ini               0x100056b  /* U+056B ARMENIAN SMALL LETTER INI */
#define XK_Armenian_LYUN              0x100053c  /* U+053C ARMENIAN CAPITAL LETTER LIWN */
#define XK_Armenian_lyun              0x100056c  /* U+056C ARMENIAN SMALL LETTER LIWN */
#define XK_Armenian_KHE               0x100053d  /* U+053D ARMENIAN CAPITAL LETTER XEH */
#define XK_Armenian_khe               0x100056d  /* U+056D ARMENIAN SMALL LETTER XEH */
#define XK_Armenian_TSA               0x100053e  /* U+053E ARMENIAN CAPITAL LETTER CA */
#define XK_Armenian_tsa               0x100056e  /* U+056E ARMENIAN SMALL LETTER CA */
#define XK_Armenian_KEN               0x100053f  /* U+053F ARMENIAN CAPITAL LETTER KEN */
#define XK_Armenian_ken               0x100056f  /* U+056F ARMENIAN SMALL LETTER KEN */
#define XK_Armenian_HO                0x1000540  /* U+0540 ARMENIAN CAPITAL LETTER HO */
#define XK_Armenian_ho                0x1000570  /* U+0570 ARMENIAN SMALL LETTER HO */
#define XK_Armenian_DZA               0x1000541  /* U+0541 ARMENIAN CAPITAL LETTER JA */
#define XK_Armenian_dza               0x1000571  /* U+0571 ARMENIAN SMALL LETTER JA */
#define XK_Armenian_GHAT              0x1000542  /* U+0542 ARMENIAN CAPITAL LETTER GHAD */
#define XK_Armenian_ghat              0x1000572  /* U+0572 ARMENIAN SMALL LETTER GHAD */
#define XK_Armenian_TCHE              0x1000543  /* U+0543 ARMENIAN CAPITAL LETTER CHEH */
#define XK_Armenian_tche              0x1000573  /* U+0573 ARMENIAN SMALL LETTER CHEH */
#define XK_Armenian_MEN               0x1000544  /* U+0544 ARMENIAN CAPITAL LETTER MEN */
#define XK_Armenian_men               0x1000574  /* U+0574 ARMENIAN SMALL LETTER MEN */
#define XK_Armenian_HI                0x1000545  /* U+0545 ARMENIAN CAPITAL LETTER YI */
#define XK_Armenian_hi                0x1000575  /* U+0575 ARMENIAN SMALL LETTER YI */
#define XK_Armenian_NU                0x1000546  /* U+0546 ARMENIAN CAPITAL LETTER NOW */
#define XK_Armenian_nu                0x1000576  /* U+0576 ARMENIAN SMALL LETTER NOW */
#define XK_Armenian_SHA               0x1000547  /* U+0547 ARMENIAN CAPITAL LETTER SHA */
#define XK_Armenian_sha               0x1000577  /* U+0577 ARMENIAN SMALL LETTER SHA */
#define XK_Armenian_VO                0x1000548  /* U+0548 ARMENIAN CAPITAL LETTER VO */
#define XK_Armenian_vo                0x1000578  /* U+0578 ARMENIAN SMALL LETTER VO */
#define XK_Armenian_CHA               0x1000549  /* U+0549 ARMENIAN CAPITAL LETTER CHA */
#define XK_Armenian_cha               0x1000579  /* U+0579 ARMENIAN SMALL LETTER CHA */
#define XK_Armenian_PE                0x100054a  /* U+054A ARMENIAN CAPITAL LETTER PEH */
#define XK_Armenian_pe                0x100057a  /* U+057A ARMENIAN SMALL LETTER PEH */
#define XK_Armenian_JE                0x100054b  /* U+054B ARMENIAN CAPITAL LETTER JHEH */
#define XK_Armenian_je                0x100057b  /* U+057B ARMENIAN SMALL LETTER JHEH */
#define XK_Armenian_RA                0x100054c  /* U+054C ARMENIAN CAPITAL LETTER RA */
#define XK_Armenian_ra                0x100057c  /* U+057C ARMENIAN SMALL LETTER RA */
#define XK_Armenian_SE                0x100054d  /* U+054D ARMENIAN CAPITAL LETTER SEH */
#define XK_Armenian_se                0x100057d  /* U+057D ARMENIAN SMALL LETTER SEH */
#define XK_Armenian_VEV               0x100054e  /* U+054E ARMENIAN CAPITAL LETTER VEW */
#define XK_Armenian_vev               0x100057e  /* U+057E ARMENIAN SMALL LETTER VEW */
#define XK_Armenian_TYUN              0x100054f  /* U+054F ARMENIAN CAPITAL LETTER TIWN */
#define XK_Armenian_tyun              0x100057f  /* U+057F ARMENIAN SMALL LETTER TIWN */
#define XK_Armenian_RE                0x1000550  /* U+0550 ARMENIAN CAPITAL LETTER REH */
#define XK_Armenian_re                0x1000580  /* U+0580 ARMENIAN SMALL LETTER REH */
#define XK_Armenian_TSO               0x1000551  /* U+0551 ARMENIAN CAPITAL LETTER CO */
#define XK_Armenian_tso               0x1000581  /* U+0581 ARMENIAN SMALL LETTER CO */
#define XK_Armenian_VYUN              0x1000552  /* U+0552 ARMENIAN CAPITAL LETTER YIWN */
#define XK_Armenian_vyun              0x1000582  /* U+0582 ARMENIAN SMALL LETTER YIWN */
#define XK_Armenian_PYUR              0x1000553  /* U+0553 ARMENIAN CAPITAL LETTER PIWR */
#define XK_Armenian_pyur              0x1000583  /* U+0583 ARMENIAN SMALL LETTER PIWR */
#define XK_Armenian_KE                0x1000554  /* U+0554 ARMENIAN CAPITAL LETTER KEH */
#define XK_Armenian_ke                0x1000584  /* U+0584 ARMENIAN SMALL LETTER KEH */
#define XK_Armenian_O                 0x1000555  /* U+0555 ARMENIAN CAPITAL LETTER OH */
#define XK_Armenian_o                 0x1000585  /* U+0585 ARMENIAN SMALL LETTER OH */
#define XK_Armenian_FE                0x1000556  /* U+0556 ARMENIAN CAPITAL LETTER FEH */
#define XK_Armenian_fe                0x1000586  /* U+0586 ARMENIAN SMALL LETTER FEH */
#define XK_Armenian_apostrophe        0x100055a  /* U+055A ARMENIAN APOSTROPHE */
#endif /* XK_ARMENIAN */

/*
 * Georgian
 */

#ifdef XK_GEORGIAN
#define XK_Georgian_an                0x10010d0  /* U+10D0 GEORGIAN LETTER AN */
#define XK_Georgian_ban               0x10010d1  /* U+10D1 GEORGIAN LETTER BAN */
#define XK_Georgian_gan               0x10010d2  /* U+10D2 GEORGIAN LETTER GAN */
#define XK_Georgian_don               0x10010d3  /* U+10D3 GEORGIAN LETTER DON */
#define XK_Georgian_en                0x10010d4  /* U+10D4 GEORGIAN LETTER EN */
#define XK_Georgian_vin               0x10010d5  /* U+10D5 GEORGIAN LETTER VIN */
#define XK_Georgian_zen               0x10010d6  /* U+10D6 GEORGIAN LETTER ZEN */
#define XK_Georgian_tan               0x10010d7  /* U+10D7 GEORGIAN LETTER TAN */
#define XK_Georgian_in                0x10010d8  /* U+10D8 GEORGIAN LETTER IN */
#define XK_Georgian_kan               0x10010d9  /* U+10D9 GEORGIAN LETTER KAN */
#define XK_Georgian_las               0x10010da  /* U+10DA GEORGIAN LETTER LAS */
#define XK_Georgian_man               0x10010db  /* U+10DB GEORGIAN LETTER MAN */
#define XK_Georgian_nar               0x10010dc  /* U+10DC GEORGIAN LETTER NAR */
#define XK_Georgian_on                0x10010dd  /* U+10DD GEORGIAN LETTER ON */
#define XK_Georgian_par               0x10010de  /* U+10DE GEORGIAN LETTER PAR */
#define XK_Georgian_zhar              0x10010df  /* U+10DF GEORGIAN LETTER ZHAR */
#define XK_Georgian_rae               0x10010e0  /* U+10E0 GEORGIAN LETTER RAE */
#define XK_Georgian_san               0x10010e1  /* U+10E1 GEORGIAN LETTER SAN */
#define XK_Georgian_tar               0x10010e2  /* U+10E2 GEORGIAN LETTER TAR */
#define XK_Georgian_un                0x10010e3  /* U+10E3 GEORGIAN LETTER UN */
#define XK_Georgian_phar              0x10010e4  /* U+10E4 GEORGIAN LETTER PHAR */
#define XK_Georgian_khar              0x10010e5  /* U+10E5 GEORGIAN LETTER KHAR */
#define XK_Georgian_ghan              0x10010e6  /* U+10E6 GEORGIAN LETTER GHAN */
#define XK_Georgian_qar               0x10010e7  /* U+10E7 GEORGIAN LETTER QAR */
#define XK_Georgian_shin              0x10010e8  /* U+10E8 GEORGIAN LETTER SHIN */
#define XK_Georgian_chin              0x10010e9  /* U+10E9 GEORGIAN LETTER CHIN */
#define XK_Georgian_can               0x10010ea  /* U+10EA GEORGIAN LETTER CAN */
#define XK_Georgian_jil               0x10010eb  /* U+10EB GEORGIAN LETTER JIL */
#define XK_Georgian_cil               0x10010ec  /* U+10EC GEORGIAN LETTER CIL */
#define XK_Georgian_char              0x10010ed  /* U+10ED GEORGIAN LETTER CHAR */
#define XK_Georgian_xan               0x10010ee  /* U+10EE GEORGIAN LETTER XAN */
#define XK_Georgian_jhan              0x10010ef  /* U+10EF GEORGIAN LETTER JHAN */
#define XK_Georgian_hae               0x10010f0  /* U+10F0 GEORGIAN LETTER HAE */
#define XK_Georgian_he                0x10010f1  /* U+10F1 GEORGIAN LETTER HE */
#define XK_Georgian_hie               0x10010f2  /* U+10F2 GEORGIAN LETTER HIE */
#define XK_Georgian_we                0x10010f3  /* U+10F3 GEORGIAN LETTER WE */
#define XK_Georgian_har               0x10010f4  /* U+10F4 GEORGIAN LETTER HAR */
#define XK_Georgian_hoe               0x10010f5  /* U+10F5 GEORGIAN LETTER HOE */
#define XK_Georgian_fi                0x10010f6  /* U+10F6 GEORGIAN LETTER FI */
#endif /* XK_GEORGIAN */

/*
 * Azeri (and other Turkic or Caucasian languages)
 */

#ifdef XK_CAUCASUS
/* latin */
#define XK_Xabovedot                  0x1001e8a  /* U+1E8A LATIN CAPITAL LETTER X WITH DOT ABOVE */
#define XK_Ibreve                     0x100012c  /* U+012C LATIN CAPITAL LETTER I WITH BREVE */
#define XK_Zstroke                    0x10001b5  /* U+01B5 LATIN CAPITAL LETTER Z WITH STROKE */
#define XK_Gcaron                     0x10001e6  /* U+01E6 LATIN CAPITAL LETTER G WITH CARON */
#define XK_Ocaron                     0x10001d1  /* U+01D2 LATIN CAPITAL LETTER O WITH CARON */
#define XK_Obarred                    0x100019f  /* U+019F LATIN CAPITAL LETTER O WITH MIDDLE TILDE */
#define XK_xabovedot                  0x1001e8b  /* U+1E8B LATIN SMALL LETTER X WITH DOT ABOVE */
#define XK_ibreve                     0x100012d  /* U+012D LATIN SMALL LETTER I WITH BREVE */
#define XK_zstroke                    0x10001b6  /* U+01B6 LATIN SMALL LETTER Z WITH STROKE */
#define XK_gcaron                     0x10001e7  /* U+01E7 LATIN SMALL LETTER G WITH CARON */
#define XK_ocaron                     0x10001d2  /* U+01D2 LATIN SMALL LETTER O WITH CARON */
#define XK_obarred                    0x1000275  /* U+0275 LATIN SMALL LETTER BARRED O */
#define XK_SCHWA                      0x100018f  /* U+018F LATIN CAPITAL LETTER SCHWA */
#define XK_schwa                      0x1000259  /* U+0259 LATIN SMALL LETTER SCHWA */
#define XK_EZH                        0x10001b7  /* U+01B7 LATIN CAPITAL LETTER EZH */
#define XK_ezh                        0x1000292  /* U+0292 LATIN SMALL LETTER EZH */
/* those are not really Caucasus */
/* For Inupiak */
#define XK_Lbelowdot                  0x1001e36  /* U+1E36 LATIN CAPITAL LETTER L WITH DOT BELOW */
#define XK_lbelowdot                  0x1001e37  /* U+1E37 LATIN SMALL LETTER L WITH DOT BELOW */
#endif /* XK_CAUCASUS */

/*
 * Vietnamese
 */
 
#ifdef XK_VIETNAMESE
#define XK_Abelowdot                  0x1001ea0  /* U+1EA0 LATIN CAPITAL LETTER A WITH DOT BELOW */
#define XK_abelowdot                  0x1001ea1  /* U+1EA1 LATIN SMALL LETTER A WITH DOT BELOW */
#define XK_Ahook                      0x1001ea2  /* U+1EA2 LATIN CAPITAL LETTER A WITH HOOK ABOVE */
#define XK_ahook                      0x1001ea3  /* U+1EA3 LATIN SMALL LETTER A WITH HOOK ABOVE */
#define XK_Acircumflexacute           0x1001ea4  /* U+1EA4 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE */
#define XK_acircumflexacute           0x1001ea5  /* U+1EA5 LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE */
#define XK_Acircumflexgrave           0x1001ea6  /* U+1EA6 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE */
#define XK_acircumflexgrave           0x1001ea7  /* U+1EA7 LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE */
#define XK_Acircumflexhook            0x1001ea8  /* U+1EA8 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE */
#define XK_acircumflexhook            0x1001ea9  /* U+1EA9 LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE */
#define XK_Acircumflextilde           0x1001eaa  /* U+1EAA LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE */
#define XK_acircumflextilde           0x1001eab  /* U+1EAB LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE */
#define XK_Acircumflexbelowdot        0x1001eac  /* U+1EAC LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW */
#define XK_acircumflexbelowdot        0x1001ead  /* U+1EAD LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW */
#define XK_Abreveacute                0x1001eae  /* U+1EAE LATIN CAPITAL LETTER A WITH BREVE AND ACUTE */
#define XK_abreveacute                0x1001eaf  /* U+1EAF LATIN SMALL LETTER A WITH BREVE AND ACUTE */
#define XK_Abrevegrave                0x1001eb0  /* U+1EB0 LATIN CAPITAL LETTER A WITH BREVE AND GRAVE */
#define XK_abrevegrave                0x1001eb1  /* U+1EB1 LATIN SMALL LETTER A WITH BREVE AND GRAVE */
#define XK_Abrevehook                 0x1001eb2  /* U+1EB2 LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE */
#define XK_abrevehook                 0x1001eb3  /* U+1EB3 LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE */
#define XK_Abrevetilde                0x1001eb4  /* U+1EB4 LATIN CAPITAL LETTER A WITH BREVE AND TILDE */
#define XK_abrevetilde                0x1001eb5  /* U+1EB5 LATIN SMALL LETTER A WITH BREVE AND TILDE */
#define XK_Abrevebelowdot             0x1001eb6  /* U+1EB6 LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW */
#define XK_abrevebelowdot             0x1001eb7  /* U+1EB7 LATIN SMALL LETTER A WITH BREVE AND DOT BELOW */
#define XK_Ebelowdot                  0x1001eb8  /* U+1EB8 LATIN CAPITAL LETTER E WITH DOT BELOW */
#define XK_ebelowdot                  0x1001eb9  /* U+1EB9 LATIN SMALL LETTER E WITH DOT BELOW */
#define XK_Ehook                      0x1001eba  /* U+1EBA LATIN CAPITAL LETTER E WITH HOOK ABOVE */
#define XK_ehook                      0x1001ebb  /* U+1EBB LATIN SMALL LETTER E WITH HOOK ABOVE */
#define XK_Etilde                     0x1001ebc  /* U+1EBC LATIN CAPITAL LETTER E WITH TILDE */
#define XK_etilde                     0x1001ebd  /* U+1EBD LATIN SMALL LETTER E WITH TILDE */
#define XK_Ecircumflexacute           0x1001ebe  /* U+1EBE LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE */
#define XK_ecircumflexacute           0x1001ebf  /* U+1EBF LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE */
#define XK_Ecircumflexgrave           0x1001ec0  /* U+1EC0 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE */
#define XK_ecircumflexgrave           0x1001ec1  /* U+1EC1 LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE */
#define XK_Ecircumflexhook            0x1001ec2  /* U+1EC2 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE */
#define XK_ecircumflexhook            0x1001ec3  /* U+1EC3 LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE */
#define XK_Ecircumflextilde           0x1001ec4  /* U+1EC4 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE */
#define XK_ecircumflextilde           0x1001ec5  /* U+1EC5 LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE */
#define XK_Ecircumflexbelowdot        0x1001ec6  /* U+1EC6 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW */
#define XK_ecircumflexbelowdot        0x1001ec7  /* U+1EC7 LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW */
#define XK_Ihook                      0x1001ec8  /* U+1EC8 LATIN CAPITAL LETTER I WITH HOOK ABOVE */
#define XK_ihook                      0x1001ec9  /* U+1EC9 LATIN SMALL LETTER I WITH HOOK ABOVE */
#define XK_Ibelowdot                  0x1001eca  /* U+1ECA LATIN CAPITAL LETTER I WITH DOT BELOW */
#define XK_ibelowdot                  0x1001ecb  /* U+1ECB LATIN SMALL LETTER I WITH DOT BELOW */
#define XK_Obelowdot                  0x1001ecc  /* U+1ECC LATIN CAPITAL LETTER O WITH DOT BELOW */
#define XK_obelowdot                  0x1001ecd  /* U+1ECD LATIN SMALL LETTER O WITH DOT BELOW */
#define XK_Ohook                      0x1001ece  /* U+1ECE LATIN CAPITAL LETTER O WITH HOOK ABOVE */
#define XK_ohook                      0x1001ecf  /* U+1ECF LATIN SMALL LETTER O WITH HOOK ABOVE */
#define XK_Ocircumflexacute           0x1001ed0  /* U+1ED0 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE */
#define XK_ocircumflexacute           0x1001ed1  /* U+1ED1 LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE */
#define XK_Ocircumflexgrave           0x1001ed2  /* U+1ED2 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE */
#define XK_ocircumflexgrave           0x1001ed3  /* U+1ED3 LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE */
#define XK_Ocircumflexhook            0x1001ed4  /* U+1ED4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE */
#define XK_ocircumflexhook            0x1001ed5  /* U+1ED5 LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE */
#define XK_Ocircumflextilde           0x1001ed6  /* U+1ED6 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE */
#define XK_ocircumflextilde           0x1001ed7  /* U+1ED7 LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE */
#define XK_Ocircumflexbelowdot        0x1001ed8  /* U+1ED8 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW */
#define XK_ocircumflexbelowdot        0x1001ed9  /* U+1ED9 LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW */
#define XK_Ohornacute                 0x1001eda  /* U+1EDA LATIN CAPITAL LETTER O WITH HORN AND ACUTE */
#define XK_ohornacute                 0x1001edb  /* U+1EDB LATIN SMALL LETTER O WITH HORN AND ACUTE */
#define XK_Ohorngrave                 0x1001edc  /* U+1EDC LATIN CAPITAL LETTER O WITH HORN AND GRAVE */
#define XK_ohorngrave                 0x1001edd  /* U+1EDD LATIN SMALL LETTER O WITH HORN AND GRAVE */
#define XK_Ohornhook                  0x1001ede  /* U+1EDE LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE */
#define XK_ohornhook                  0x1001edf  /* U+1EDF LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE */
#define XK_Ohorntilde                 0x1001ee0  /* U+1EE0 LATIN CAPITAL LETTER O WITH HORN AND TILDE */
#define XK_ohorntilde                 0x1001ee1  /* U+1EE1 LATIN SMALL LETTER O WITH HORN AND TILDE */
#define XK_Ohornbelowdot              0x1001ee2  /* U+1EE2 LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW */
#define XK_ohornbelowdot              0x1001ee3  /* U+1EE3 LATIN SMALL LETTER O WITH HORN AND DOT BELOW */
#define XK_Ubelowdot                  0x1001ee4  /* U+1EE4 LATIN CAPITAL LETTER U WITH DOT BELOW */
#define XK_ubelowdot                  0x1001ee5  /* U+1EE5 LATIN SMALL LETTER U WITH DOT BELOW */
#define XK_Uhook                      0x1001ee6  /* U+1EE6 LATIN CAPITAL LETTER U WITH HOOK ABOVE */
#define XK_uhook                      0x1001ee7  /* U+1EE7 LATIN SMALL LETTER U WITH HOOK ABOVE */
#define XK_Uhornacute                 0x1001ee8  /* U+1EE8 LATIN CAPITAL LETTER U WITH HORN AND ACUTE */
#define XK_uhornacute                 0x1001ee9  /* U+1EE9 LATIN SMALL LETTER U WITH HORN AND ACUTE */
#define XK_Uhorngrave                 0x1001eea  /* U+1EEA LATIN CAPITAL LETTER U WITH HORN AND GRAVE */
#define XK_uhorngrave                 0x1001eeb  /* U+1EEB LATIN SMALL LETTER U WITH HORN AND GRAVE */
#define XK_Uhornhook                  0x1001eec  /* U+1EEC LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE */
#define XK_uhornhook                  0x1001eed  /* U+1EED LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE */
#define XK_Uhorntilde                 0x1001eee  /* U+1EEE LATIN CAPITAL LETTER U WITH HORN AND TILDE */
#define XK_uhorntilde                 0x1001eef  /* U+1EEF LATIN SMALL LETTER U WITH HORN AND TILDE */
#define XK_Uhornbelowdot              0x1001ef0  /* U+1EF0 LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW */
#define XK_uhornbelowdot              0x1001ef1  /* U+1EF1 LATIN SMALL LETTER U WITH HORN AND DOT BELOW */
#define XK_Ybelowdot                  0x1001ef4  /* U+1EF4 LATIN CAPITAL LETTER Y WITH DOT BELOW */
#define XK_ybelowdot                  0x1001ef5  /* U+1EF5 LATIN SMALL LETTER Y WITH DOT BELOW */
#define XK_Yhook                      0x1001ef6  /* U+1EF6 LATIN CAPITAL LETTER Y WITH HOOK ABOVE */
#define XK_yhook                      0x1001ef7  /* U+1EF7 LATIN SMALL LETTER Y WITH HOOK ABOVE */
#define XK_Ytilde                     0x1001ef8  /* U+1EF8 LATIN CAPITAL LETTER Y WITH TILDE */
#define XK_ytilde                     0x1001ef9  /* U+1EF9 LATIN SMALL LETTER Y WITH TILDE */
#define XK_Ohorn                      0x10001a0  /* U+01A0 LATIN CAPITAL LETTER O WITH HORN */
#define XK_ohorn                      0x10001a1  /* U+01A1 LATIN SMALL LETTER O WITH HORN */
#define XK_Uhorn                      0x10001af  /* U+01AF LATIN CAPITAL LETTER U WITH HORN */
#define XK_uhorn                      0x10001b0  /* U+01B0 LATIN SMALL LETTER U WITH HORN */

#endif /* XK_VIETNAMESE */

#ifdef XK_CURRENCY
#define XK_EcuSign                    0x10020a0  /* U+20A0 EURO-CURRENCY SIGN */
#define XK_ColonSign                  0x10020a1  /* U+20A1 COLON SIGN */
#define XK_CruzeiroSign               0x10020a2  /* U+20A2 CRUZEIRO SIGN */
#define XK_FFrancSign                 0x10020a3  /* U+20A3 FRENCH FRANC SIGN */
#define XK_LiraSign                   0x10020a4  /* U+20A4 LIRA SIGN */
#define XK_MillSign                   0x10020a5  /* U+20A5 MILL SIGN */
#define XK_NairaSign                  0x10020a6  /* U+20A6 NAIRA SIGN */
#define XK_PesetaSign                 0x10020a7  /* U+20A7 PESETA SIGN */
#define XK_RupeeSign                  0x10020a8  /* U+20A8 RUPEE SIGN */
#define XK_WonSign                    0x10020a9  /* U+20A9 WON SIGN */
#define XK_NewSheqelSign              0x10020aa  /* U+20AA NEW SHEQEL SIGN */
#define XK_DongSign                   0x10020ab  /* U+20AB DONG SIGN */
#define XK_EuroSign                      0x20ac  /* U+20AC EURO SIGN */
#endif /* XK_CURRENCY */

#ifdef XK_MATHEMATICAL
/* one, two and three are defined above. */
#define XK_zerosuperior               0x1002070  /* U+2070 SUPERSCRIPT ZERO */
#define XK_foursuperior               0x1002074  /* U+2074 SUPERSCRIPT FOUR */
#define XK_fivesuperior               0x1002075  /* U+2075 SUPERSCRIPT FIVE */
#define XK_sixsuperior                0x1002076  /* U+2076 SUPERSCRIPT SIX */
#define XK_sevensuperior              0x1002077  /* U+2077 SUPERSCRIPT SEVEN */
#define XK_eightsuperior              0x1002078  /* U+2078 SUPERSCRIPT EIGHT */
#define XK_ninesuperior               0x1002079  /* U+2079 SUPERSCRIPT NINE */
#define XK_zerosubscript              0x1002080  /* U+2080 SUBSCRIPT ZERO */
#define XK_onesubscript               0x1002081  /* U+2081 SUBSCRIPT ONE */
#define XK_twosubscript               0x1002082  /* U+2082 SUBSCRIPT TWO */
#define XK_threesubscript             0x1002083  /* U+2083 SUBSCRIPT THREE */
#define XK_foursubscript              0x1002084  /* U+2084 SUBSCRIPT FOUR */
#define XK_fivesubscript              0x1002085  /* U+2085 SUBSCRIPT FIVE */
#define XK_sixsubscript               0x1002086  /* U+2086 SUBSCRIPT SIX */
#define XK_sevensubscript             0x1002087  /* U+2087 SUBSCRIPT SEVEN */
#define XK_eightsubscript             0x1002088  /* U+2088 SUBSCRIPT EIGHT */
#define XK_ninesubscript              0x1002089  /* U+2089 SUBSCRIPT NINE */
#define XK_partdifferential           0x1002202  /* U+2202 PARTIAL DIFFERENTIAL */
#define XK_emptyset                   0x1002205  /* U+2205 NULL SET */
#define XK_elementof                  0x1002208  /* U+2208 ELEMENT OF */
#define XK_notelementof               0x1002209  /* U+2209 NOT AN ELEMENT OF */
#define XK_containsas                 0x100220B  /* U+220B CONTAINS AS MEMBER */
#define XK_squareroot                 0x100221A  /* U+221A SQUARE ROOT */
#define XK_cuberoot                   0x100221B  /* U+221B CUBE ROOT */
#define XK_fourthroot                 0x100221C  /* U+221C FOURTH ROOT */
#define XK_dintegral                  0x100222C  /* U+222C DOUBLE INTEGRAL */
#define XK_tintegral                  0x100222D  /* U+222D TRIPLE INTEGRAL */
#define XK_because                    0x1002235  /* U+2235 BECAUSE */
#define XK_approxeq                   0x1002248  /* U+2245 ALMOST EQUAL TO */
#define XK_notapproxeq                0x1002247  /* U+2247 NOT ALMOST EQUAL TO */
#define XK_notidentical               0x1002262  /* U+2262 NOT IDENTICAL TO */
#define XK_stricteq                   0x1002263  /* U+2263 STRICTLY EQUIVALENT TO */          
#endif /* XK_MATHEMATICAL */

#ifdef XK_BRAILLE
#define XK_braille_dot_1                 0xfff1
#define XK_braille_dot_2                 0xfff2
#define XK_braille_dot_3                 0xfff3
#define XK_braille_dot_4                 0xfff4
#define XK_braille_dot_5                 0xfff5
#define XK_braille_dot_6                 0xfff6
#define XK_braille_dot_7                 0xfff7
#define XK_braille_dot_8                 0xfff8
#define XK_braille_dot_9                 0xfff9
#define XK_braille_dot_10                0xfffa
#define XK_braille_blank              0x1002800  /* U+2800 BRAILLE PATTERN BLANK */
#define XK_braille_dots_1             0x1002801  /* U+2801 BRAILLE PATTERN DOTS-1 */
#define XK_braille_dots_2             0x1002802  /* U+2802 BRAILLE PATTERN DOTS-2 */
#define XK_braille_dots_12            0x1002803  /* U+2803 BRAILLE PATTERN DOTS-12 */
#define XK_braille_dots_3             0x1002804  /* U+2804 BRAILLE PATTERN DOTS-3 */
#define XK_braille_dots_13            0x1002805  /* U+2805 BRAILLE PATTERN DOTS-13 */
#define XK_braille_dots_23            0x1002806  /* U+2806 BRAILLE PATTERN DOTS-23 */
#define XK_braille_dots_123           0x1002807  /* U+2807 BRAILLE PATTERN DOTS-123 */
#define XK_braille_dots_4             0x1002808  /* U+2808 BRAILLE PATTERN DOTS-4 */
#define XK_braille_dots_14            0x1002809  /* U+2809 BRAILLE PATTERN DOTS-14 */
#define XK_braille_dots_24            0x100280a  /* U+280a BRAILLE PATTERN DOTS-24 */
#define XK_braille_dots_124           0x100280b  /* U+280b BRAILLE PATTERN DOTS-124 */
#define XK_braille_dots_34            0x100280c  /* U+280c BRAILLE PATTERN DOTS-34 */
#define XK_braille_dots_134           0x100280d  /* U+280d BRAILLE PATTERN DOTS-134 */
#define XK_braille_dots_234           0x100280e  /* U+280e BRAILLE PATTERN DOTS-234 */
#define XK_braille_dots_1234          0x100280f  /* U+280f BRAILLE PATTERN DOTS-1234 */
#define XK_braille_dots_5             0x1002810  /* U+2810 BRAILLE PATTERN DOTS-5 */
#define XK_braille_dots_15            0x1002811  /* U+2811 BRAILLE PATTERN DOTS-15 */
#define XK_braille_dots_25            0x1002812  /* U+2812 BRAILLE PATTERN DOTS-25 */
#define XK_braille_dots_125           0x1002813  /* U+2813 BRAILLE PATTERN DOTS-125 */
#define XK_braille_dots_35            0x1002814  /* U+2814 BRAILLE PATTERN DOTS-35 */
#define XK_braille_dots_135           0x1002815  /* U+2815 BRAILLE PATTERN DOTS-135 */
#define XK_braille_dots_235           0x1002816  /* U+2816 BRAILLE PATTERN DOTS-235 */
#define XK_braille_dots_1235          0x1002817  /* U+2817 BRAILLE PATTERN DOTS-1235 */
#define XK_braille_dots_45            0x1002818  /* U+2818 BRAILLE PATTERN DOTS-45 */
#define XK_braille_dots_145           0x1002819  /* U+2819 BRAILLE PATTERN DOTS-145 */
#define XK_braille_dots_245           0x100281a  /* U+281a BRAILLE PATTERN DOTS-245 */
#define XK_braille_dots_1245          0x100281b  /* U+281b BRAILLE PATTERN DOTS-1245 */
#define XK_braille_dots_345           0x100281c  /* U+281c BRAILLE PATTERN DOTS-345 */
#define XK_braille_dots_1345          0x100281d  /* U+281d BRAILLE PATTERN DOTS-1345 */
#define XK_braille_dots_2345          0x100281e  /* U+281e BRAILLE PATTERN DOTS-2345 */
#define XK_braille_dots_12345         0x100281f  /* U+281f BRAILLE PATTERN DOTS-12345 */
#define XK_braille_dots_6             0x1002820  /* U+2820 BRAILLE PATTERN DOTS-6 */
#define XK_braille_dots_16            0x1002821  /* U+2821 BRAILLE PATTERN DOTS-16 */
#define XK_braille_dots_26            0x1002822  /* U+2822 BRAILLE PATTERN DOTS-26 */
#define XK_braille_dots_126           0x1002823  /* U+2823 BRAILLE PATTERN DOTS-126 */
#define XK_braille_dots_36            0x1002824  /* U+2824 BRAILLE PATTERN DOTS-36 */
#define XK_braille_dots_136           0x1002825  /* U+2825 BRAILLE PATTERN DOTS-136 */
#define XK_braille_dots_236           0x1002826  /* U+2826 BRAILLE PATTERN DOTS-236 */
#define XK_braille_dots_1236          0x1002827  /* U+2827 BRAILLE PATTERN DOTS-1236 */
#define XK_braille_dots_46            0x1002828  /* U+2828 BRAILLE PATTERN DOTS-46 */
#define XK_braille_dots_146           0x1002829  /* U+2829 BRAILLE PATTERN DOTS-146 */
#define XK_braille_dots_246           0x100282a  /* U+282a BRAILLE PATTERN DOTS-246 */
#define XK_braille_dots_1246          0x100282b  /* U+282b BRAILLE PATTERN DOTS-1246 */
#define XK_braille_dots_346           0x100282c  /* U+282c BRAILLE PATTERN DOTS-346 */
#define XK_braille_dots_1346          0x100282d  /* U+282d BRAILLE PATTERN DOTS-1346 */
#define XK_braille_dots_2346          0x100282e  /* U+282e BRAILLE PATTERN DOTS-2346 */
#define XK_braille_dots_12346         0x100282f  /* U+282f BRAILLE PATTERN DOTS-12346 */
#define XK_braille_dots_56            0x1002830  /* U+2830 BRAILLE PATTERN DOTS-56 */
#define XK_braille_dots_156           0x1002831  /* U+2831 BRAILLE PATTERN DOTS-156 */
#define XK_braille_dots_256           0x1002832  /* U+2832 BRAILLE PATTERN DOTS-256 */
#define XK_braille_dots_1256          0x1002833  /* U+2833 BRAILLE PATTERN DOTS-1256 */
#define XK_braille_dots_356           0x1002834  /* U+2834 BRAILLE PATTERN DOTS-356 */
#define XK_braille_dots_1356          0x1002835  /* U+2835 BRAILLE PATTERN DOTS-1356 */
#define XK_braille_dots_2356          0x1002836  /* U+2836 BRAILLE PATTERN DOTS-2356 */
#define XK_braille_dots_12356         0x1002837  /* U+2837 BRAILLE PATTERN DOTS-12356 */
#define XK_braille_dots_456           0x1002838  /* U+2838 BRAILLE PATTERN DOTS-456 */
#define XK_braille_dots_1456          0x1002839  /* U+2839 BRAILLE PATTERN DOTS-1456 */
#define XK_braille_dots_2456          0x100283a  /* U+283a BRAILLE PATTERN DOTS-2456 */
#define XK_braille_dots_12456         0x100283b  /* U+283b BRAILLE PATTERN DOTS-12456 */
#define XK_braille_dots_3456          0x100283c  /* U+283c BRAILLE PATTERN DOTS-3456 */
#define XK_braille_dots_13456         0x100283d  /* U+283d BRAILLE PATTERN DOTS-13456 */
#define XK_braille_dots_23456         0x100283e  /* U+283e BRAILLE PATTERN DOTS-23456 */
#define XK_braille_dots_123456        0x100283f  /* U+283f BRAILLE PATTERN DOTS-123456 */
#define XK_braille_dots_7             0x1002840  /* U+2840 BRAILLE PATTERN DOTS-7 */
#define XK_braille_dots_17            0x1002841  /* U+2841 BRAILLE PATTERN DOTS-17 */
#define XK_braille_dots_27            0x1002842  /* U+2842 BRAILLE PATTERN DOTS-27 */
#define XK_braille_dots_127           0x1002843  /* U+2843 BRAILLE PATTERN DOTS-127 */
#define XK_braille_dots_37            0x1002844  /* U+2844 BRAILLE PATTERN DOTS-37 */
#define XK_braille_dots_137           0x1002845  /* U+2845 BRAILLE PATTERN DOTS-137 */
#define XK_braille_dots_237           0x1002846  /* U+2846 BRAILLE PATTERN DOTS-237 */
#define XK_braille_dots_1237          0x1002847  /* U+2847 BRAILLE PATTERN DOTS-1237 */
#define XK_braille_dots_47            0x1002848  /* U+2848 BRAILLE PATTERN DOTS-47 */
#define XK_braille_dots_147           0x1002849  /* U+2849 BRAILLE PATTERN DOTS-147 */
#define XK_braille_dots_247           0x100284a  /* U+284a BRAILLE PATTERN DOTS-247 */
#define XK_braille_dots_1247          0x100284b  /* U+284b BRAILLE PATTERN DOTS-1247 */
#define XK_braille_dots_347           0x100284c  /* U+284c BRAILLE PATTERN DOTS-347 */
#define XK_braille_dots_1347          0x100284d  /* U+284d BRAILLE PATTERN DOTS-1347 */
#define XK_braille_dots_2347          0x100284e  /* U+284e BRAILLE PATTERN DOTS-2347 */
#define XK_braille_dots_12347         0x100284f  /* U+284f BRAILLE PATTERN DOTS-12347 */
#define XK_braille_dots_57            0x1002850  /* U+2850 BRAILLE PATTERN DOTS-57 */
#define XK_braille_dots_157           0x1002851  /* U+2851 BRAILLE PATTERN DOTS-157 */
#define XK_braille_dots_257           0x1002852  /* U+2852 BRAILLE PATTERN DOTS-257 */
#define XK_braille_dots_1257          0x1002853  /* U+2853 BRAILLE PATTERN DOTS-1257 */
#define XK_braille_dots_357           0x1002854  /* U+2854 BRAILLE PATTERN DOTS-357 */
#define XK_braille_dots_1357          0x1002855  /* U+2855 BRAILLE PATTERN DOTS-1357 */
#define XK_braille_dots_2357          0x1002856  /* U+2856 BRAILLE PATTERN DOTS-2357 */
#define XK_braille_dots_12357         0x1002857  /* U+2857 BRAILLE PATTERN DOTS-12357 */
#define XK_braille_dots_457           0x1002858  /* U+2858 BRAILLE PATTERN DOTS-457 */
#define XK_braille_dots_1457          0x1002859  /* U+2859 BRAILLE PATTERN DOTS-1457 */
#define XK_braille_dots_2457          0x100285a  /* U+285a BRAILLE PATTERN DOTS-2457 */
#define XK_braille_dots_12457         0x100285b  /* U+285b BRAILLE PATTERN DOTS-12457 */
#define XK_braille_dots_3457          0x100285c  /* U+285c BRAILLE PATTERN DOTS-3457 */
#define XK_braille_dots_13457         0x100285d  /* U+285d BRAILLE PATTERN DOTS-13457 */
#define XK_braille_dots_23457         0x100285e  /* U+285e BRAILLE PATTERN DOTS-23457 */
#define XK_braille_dots_123457        0x100285f  /* U+285f BRAILLE PATTERN DOTS-123457 */
#define XK_braille_dots_67            0x1002860  /* U+2860 BRAILLE PATTERN DOTS-67 */
#define XK_braille_dots_167           0x1002861  /* U+2861 BRAILLE PATTERN DOTS-167 */
#define XK_braille_dots_267           0x1002862  /* U+2862 BRAILLE PATTERN DOTS-267 */
#define XK_braille_dots_1267          0x1002863  /* U+2863 BRAILLE PATTERN DOTS-1267 */
#define XK_braille_dots_367           0x1002864  /* U+2864 BRAILLE PATTERN DOTS-367 */
#define XK_braille_dots_1367          0x1002865  /* U+2865 BRAILLE PATTERN DOTS-1367 */
#define XK_braille_dots_2367          0x1002866  /* U+2866 BRAILLE PATTERN DOTS-2367 */
#define XK_braille_dots_12367         0x1002867  /* U+2867 BRAILLE PATTERN DOTS-12367 */
#define XK_braille_dots_467           0x1002868  /* U+2868 BRAILLE PATTERN DOTS-467 */
#define XK_braille_dots_1467          0x1002869  /* U+2869 BRAILLE PATTERN DOTS-1467 */
#define XK_braille_dots_2467          0x100286a  /* U+286a BRAILLE PATTERN DOTS-2467 */
#define XK_braille_dots_12467         0x100286b  /* U+286b BRAILLE PATTERN DOTS-12467 */
#define XK_braille_dots_3467          0x100286c  /* U+286c BRAILLE PATTERN DOTS-3467 */
#define XK_braille_dots_13467         0x100286d  /* U+286d BRAILLE PATTERN DOTS-13467 */
#define XK_braille_dots_23467         0x100286e  /* U+286e BRAILLE PATTERN DOTS-23467 */
#define XK_braille_dots_123467        0x100286f  /* U+286f BRAILLE PATTERN DOTS-123467 */
#define XK_braille_dots_567           0x1002870  /* U+2870 BRAILLE PATTERN DOTS-567 */
#define XK_braille_dots_1567          0x1002871  /* U+2871 BRAILLE PATTERN DOTS-1567 */
#define XK_braille_dots_2567          0x1002872  /* U+2872 BRAILLE PATTERN DOTS-2567 */
#define XK_braille_dots_12567         0x1002873  /* U+2873 BRAILLE PATTERN DOTS-12567 */
#define XK_braille_dots_3567          0x1002874  /* U+2874 BRAILLE PATTERN DOTS-3567 */
#define XK_braille_dots_13567         0x1002875  /* U+2875 BRAILLE PATTERN DOTS-13567 */
#define XK_braille_dots_23567         0x1002876  /* U+2876 BRAILLE PATTERN DOTS-23567 */
#define XK_braille_dots_123567        0x1002877  /* U+2877 BRAILLE PATTERN DOTS-123567 */
#define XK_braille_dots_4567          0x1002878  /* U+2878 BRAILLE PATTERN DOTS-4567 */
#define XK_braille_dots_14567         0x1002879  /* U+2879 BRAILLE PATTERN DOTS-14567 */
#define XK_braille_dots_24567         0x100287a  /* U+287a BRAILLE PATTERN DOTS-24567 */
#define XK_braille_dots_124567        0x100287b  /* U+287b BRAILLE PATTERN DOTS-124567 */
#define XK_braille_dots_34567         0x100287c  /* U+287c BRAILLE PATTERN DOTS-34567 */
#define XK_braille_dots_134567        0x100287d  /* U+287d BRAILLE PATTERN DOTS-134567 */
#define XK_braille_dots_234567        0x100287e  /* U+287e BRAILLE PATTERN DOTS-234567 */
#define XK_braille_dots_1234567       0x100287f  /* U+287f BRAILLE PATTERN DOTS-1234567 */
#define XK_braille_dots_8             0x1002880  /* U+2880 BRAILLE PATTERN DOTS-8 */
#define XK_braille_dots_18            0x1002881  /* U+2881 BRAILLE PATTERN DOTS-18 */
#define XK_braille_dots_28            0x1002882  /* U+2882 BRAILLE PATTERN DOTS-28 */
#define XK_braille_dots_128           0x1002883  /* U+2883 BRAILLE PATTERN DOTS-128 */
#define XK_braille_dots_38            0x1002884  /* U+2884 BRAILLE PATTERN DOTS-38 */
#define XK_braille_dots_138           0x1002885  /* U+2885 BRAILLE PATTERN DOTS-138 */
#define XK_braille_dots_238           0x1002886  /* U+2886 BRAILLE PATTERN DOTS-238 */
#define XK_braille_dots_1238          0x1002887  /* U+2887 BRAILLE PATTERN DOTS-1238 */
#define XK_braille_dots_48            0x1002888  /* U+2888 BRAILLE PATTERN DOTS-48 */
#define XK_braille_dots_148           0x1002889  /* U+2889 BRAILLE PATTERN DOTS-148 */
#define XK_braille_dots_248           0x100288a  /* U+288a BRAILLE PATTERN DOTS-248 */
#define XK_braille_dots_1248          0x100288b  /* U+288b BRAILLE PATTERN DOTS-1248 */
#define XK_braille_dots_348           0x100288c  /* U+288c BRAILLE PATTERN DOTS-348 */
#define XK_braille_dots_1348          0x100288d  /* U+288d BRAILLE PATTERN DOTS-1348 */
#define XK_braille_dots_2348          0x100288e  /* U+288e BRAILLE PATTERN DOTS-2348 */
#define XK_braille_dots_12348         0x100288f  /* U+288f BRAILLE PATTERN DOTS-12348 */
#define XK_braille_dots_58            0x1002890  /* U+2890 BRAILLE PATTERN DOTS-58 */
#define XK_braille_dots_158           0x1002891  /* U+2891 BRAILLE PATTERN DOTS-158 */
#define XK_braille_dots_258           0x1002892  /* U+2892 BRAILLE PATTERN DOTS-258 */
#define XK_braille_dots_1258          0x1002893  /* U+2893 BRAILLE PATTERN DOTS-1258 */
#define XK_braille_dots_358           0x1002894  /* U+2894 BRAILLE PATTERN DOTS-358 */
#define XK_braille_dots_1358          0x1002895  /* U+2895 BRAILLE PATTERN DOTS-1358 */
#define XK_braille_dots_2358          0x1002896  /* U+2896 BRAILLE PATTERN DOTS-2358 */
#define XK_braille_dots_12358         0x1002897  /* U+2897 BRAILLE PATTERN DOTS-12358 */
#define XK_braille_dots_458           0x1002898  /* U+2898 BRAILLE PATTERN DOTS-458 */
#define XK_braille_dots_1458          0x1002899  /* U+2899 BRAILLE PATTERN DOTS-1458 */
#define XK_braille_dots_2458          0x100289a  /* U+289a BRAILLE PATTERN DOTS-2458 */
#define XK_braille_dots_12458         0x100289b  /* U+289b BRAILLE PATTERN DOTS-12458 */
#define XK_braille_dots_3458          0x100289c  /* U+289c BRAILLE PATTERN DOTS-3458 */
#define XK_braille_dots_13458         0x100289d  /* U+289d BRAILLE PATTERN DOTS-13458 */
#define XK_braille_dots_23458         0x100289e  /* U+289e BRAILLE PATTERN DOTS-23458 */
#define XK_braille_dots_123458        0x100289f  /* U+289f BRAILLE PATTERN DOTS-123458 */
#define XK_braille_dots_68            0x10028a0  /* U+28a0 BRAILLE PATTERN DOTS-68 */
#define XK_braille_dots_168           0x10028a1  /* U+28a1 BRAILLE PATTERN DOTS-168 */
#define XK_braille_dots_268           0x10028a2  /* U+28a2 BRAILLE PATTERN DOTS-268 */
#define XK_braille_dots_1268          0x10028a3  /* U+28a3 BRAILLE PATTERN DOTS-1268 */
#define XK_braille_dots_368           0x10028a4  /* U+28a4 BRAILLE PATTERN DOTS-368 */
#define XK_braille_dots_1368          0x10028a5  /* U+28a5 BRAILLE PATTERN DOTS-1368 */
#define XK_braille_dots_2368          0x10028a6  /* U+28a6 BRAILLE PATTERN DOTS-2368 */
#define XK_braille_dots_12368         0x10028a7  /* U+28a7 BRAILLE PATTERN DOTS-12368 */
#define XK_braille_dots_468           0x10028a8  /* U+28a8 BRAILLE PATTERN DOTS-468 */
#define XK_braille_dots_1468          0x10028a9  /* U+28a9 BRAILLE PATTERN DOTS-1468 */
#define XK_braille_dots_2468          0x10028aa  /* U+28aa BRAILLE PATTERN DOTS-2468 */
#define XK_braille_dots_12468         0x10028ab  /* U+28ab BRAILLE PATTERN DOTS-12468 */
#define XK_braille_dots_3468          0x10028ac  /* U+28ac BRAILLE PATTERN DOTS-3468 */
#define XK_braille_dots_13468         0x10028ad  /* U+28ad BRAILLE PATTERN DOTS-13468 */
#define XK_braille_dots_23468         0x10028ae  /* U+28ae BRAILLE PATTERN DOTS-23468 */
#define XK_braille_dots_123468        0x10028af  /* U+28af BRAILLE PATTERN DOTS-123468 */
#define XK_braille_dots_568           0x10028b0  /* U+28b0 BRAILLE PATTERN DOTS-568 */
#define XK_braille_dots_1568          0x10028b1  /* U+28b1 BRAILLE PATTERN DOTS-1568 */
#define XK_braille_dots_2568          0x10028b2  /* U+28b2 BRAILLE PATTERN DOTS-2568 */
#define XK_braille_dots_12568         0x10028b3  /* U+28b3 BRAILLE PATTERN DOTS-12568 */
#define XK_braille_dots_3568          0x10028b4  /* U+28b4 BRAILLE PATTERN DOTS-3568 */
#define XK_braille_dots_13568         0x10028b5  /* U+28b5 BRAILLE PATTERN DOTS-13568 */
#define XK_braille_dots_23568         0x10028b6  /* U+28b6 BRAILLE PATTERN DOTS-23568 */
#define XK_braille_dots_123568        0x10028b7  /* U+28b7 BRAILLE PATTERN DOTS-123568 */
#define XK_braille_dots_4568          0x10028b8  /* U+28b8 BRAILLE PATTERN DOTS-4568 */
#define XK_braille_dots_14568         0x10028b9  /* U+28b9 BRAILLE PATTERN DOTS-14568 */
#define XK_braille_dots_24568         0x10028ba  /* U+28ba BRAILLE PATTERN DOTS-24568 */
#define XK_braille_dots_124568        0x10028bb  /* U+28bb BRAILLE PATTERN DOTS-124568 */
#define XK_braille_dots_34568         0x10028bc  /* U+28bc BRAILLE PATTERN DOTS-34568 */
#define XK_braille_dots_134568        0x10028bd  /* U+28bd BRAILLE PATTERN DOTS-134568 */
#define XK_braille_dots_234568        0x10028be  /* U+28be BRAILLE PATTERN DOTS-234568 */
#define XK_braille_dots_1234568       0x10028bf  /* U+28bf BRAILLE PATTERN DOTS-1234568 */
#define XK_braille_dots_78            0x10028c0  /* U+28c0 BRAILLE PATTERN DOTS-78 */
#define XK_braille_dots_178           0x10028c1  /* U+28c1 BRAILLE PATTERN DOTS-178 */
#define XK_braille_dots_278           0x10028c2  /* U+28c2 BRAILLE PATTERN DOTS-278 */
#define XK_braille_dots_1278          0x10028c3  /* U+28c3 BRAILLE PATTERN DOTS-1278 */
#define XK_braille_dots_378           0x10028c4  /* U+28c4 BRAILLE PATTERN DOTS-378 */
#define XK_braille_dots_1378          0x10028c5  /* U+28c5 BRAILLE PATTERN DOTS-1378 */
#define XK_braille_dots_2378          0x10028c6  /* U+28c6 BRAILLE PATTERN DOTS-2378 */
#define XK_braille_dots_12378         0x10028c7  /* U+28c7 BRAILLE PATTERN DOTS-12378 */
#define XK_braille_dots_478           0x10028c8  /* U+28c8 BRAILLE PATTERN DOTS-478 */
#define XK_braille_dots_1478          0x10028c9  /* U+28c9 BRAILLE PATTERN DOTS-1478 */
#define XK_braille_dots_2478          0x10028ca  /* U+28ca BRAILLE PATTERN DOTS-2478 */
#define XK_braille_dots_12478         0x10028cb  /* U+28cb BRAILLE PATTERN DOTS-12478 */
#define XK_braille_dots_3478          0x10028cc  /* U+28cc BRAILLE PATTERN DOTS-3478 */
#define XK_braille_dots_13478         0x10028cd  /* U+28cd BRAILLE PATTERN DOTS-13478 */
#define XK_braille_dots_23478         0x10028ce  /* U+28ce BRAILLE PATTERN DOTS-23478 */
#define XK_braille_dots_123478        0x10028cf  /* U+28cf BRAILLE PATTERN DOTS-123478 */
#define XK_braille_dots_578           0x10028d0  /* U+28d0 BRAILLE PATTERN DOTS-578 */
#define XK_braille_dots_1578          0x10028d1  /* U+28d1 BRAILLE PATTERN DOTS-1578 */
#define XK_braille_dots_2578          0x10028d2  /* U+28d2 BRAILLE PATTERN DOTS-2578 */
#define XK_braille_dots_12578         0x10028d3  /* U+28d3 BRAILLE PATTERN DOTS-12578 */
#define XK_braille_dots_3578          0x10028d4  /* U+28d4 BRAILLE PATTERN DOTS-3578 */
#define XK_braille_dots_13578         0x10028d5  /* U+28d5 BRAILLE PATTERN DOTS-13578 */
#define XK_braille_dots_23578         0x10028d6  /* U+28d6 BRAILLE PATTERN DOTS-23578 */
#define XK_braille_dots_123578        0x10028d7  /* U+28d7 BRAILLE PATTERN DOTS-123578 */
#define XK_braille_dots_4578          0x10028d8  /* U+28d8 BRAILLE PATTERN DOTS-4578 */
#define XK_braille_dots_14578         0x10028d9  /* U+28d9 BRAILLE PATTERN DOTS-14578 */
#define XK_braille_dots_24578         0x10028da  /* U+28da BRAILLE PATTERN DOTS-24578 */
#define XK_braille_dots_124578        0x10028db  /* U+28db BRAILLE PATTERN DOTS-124578 */
#define XK_braille_dots_34578         0x10028dc  /* U+28dc BRAILLE PATTERN DOTS-34578 */
#define XK_braille_dots_134578        0x10028dd  /* U+28dd BRAILLE PATTERN DOTS-134578 */
#define XK_braille_dots_234578        0x10028de  /* U+28de BRAILLE PATTERN DOTS-234578 */
#define XK_braille_dots_1234578       0x10028df  /* U+28df BRAILLE PATTERN DOTS-1234578 */
#define XK_braille_dots_678           0x10028e0  /* U+28e0 BRAILLE PATTERN DOTS-678 */
#define XK_braille_dots_1678          0x10028e1  /* U+28e1 BRAILLE PATTERN DOTS-1678 */
#define XK_braille_dots_2678          0x10028e2  /* U+28e2 BRAILLE PATTERN DOTS-2678 */
#define XK_braille_dots_12678         0x10028e3  /* U+28e3 BRAILLE PATTERN DOTS-12678 */
#define XK_braille_dots_3678          0x10028e4  /* U+28e4 BRAILLE PATTERN DOTS-3678 */
#define XK_braille_dots_13678         0x10028e5  /* U+28e5 BRAILLE PATTERN DOTS-13678 */
#define XK_braille_dots_23678         0x10028e6  /* U+28e6 BRAILLE PATTERN DOTS-23678 */
#define XK_braille_dots_123678        0x10028e7  /* U+28e7 BRAILLE PATTERN DOTS-123678 */
#define XK_braille_dots_4678          0x10028e8  /* U+28e8 BRAILLE PATTERN DOTS-4678 */
#define XK_braille_dots_14678         0x10028e9  /* U+28e9 BRAILLE PATTERN DOTS-14678 */
#define XK_braille_dots_24678         0x10028ea  /* U+28ea BRAILLE PATTERN DOTS-24678 */
#define XK_braille_dots_124678        0x10028eb  /* U+28eb BRAILLE PATTERN DOTS-124678 */
#define XK_braille_dots_34678         0x10028ec  /* U+28ec BRAILLE PATTERN DOTS-34678 */
#define XK_braille_dots_134678        0x10028ed  /* U+28ed BRAILLE PATTERN DOTS-134678 */
#define XK_braille_dots_234678        0x10028ee  /* U+28ee BRAILLE PATTERN DOTS-234678 */
#define XK_braille_dots_1234678       0x10028ef  /* U+28ef BRAILLE PATTERN DOTS-1234678 */
#define XK_braille_dots_5678          0x10028f0  /* U+28f0 BRAILLE PATTERN DOTS-5678 */
#define XK_braille_dots_15678         0x10028f1  /* U+28f1 BRAILLE PATTERN DOTS-15678 */
#define XK_braille_dots_25678         0x10028f2  /* U+28f2 BRAILLE PATTERN DOTS-25678 */
#define XK_braille_dots_125678        0x10028f3  /* U+28f3 BRAILLE PATTERN DOTS-125678 */
#define XK_braille_dots_35678         0x10028f4  /* U+28f4 BRAILLE PATTERN DOTS-35678 */
#define XK_braille_dots_135678        0x10028f5  /* U+28f5 BRAILLE PATTERN DOTS-135678 */
#define XK_braille_dots_235678        0x10028f6  /* U+28f6 BRAILLE PATTERN DOTS-235678 */
#define XK_braille_dots_1235678       0x10028f7  /* U+28f7 BRAILLE PATTERN DOTS-1235678 */
#define XK_braille_dots_45678         0x10028f8  /* U+28f8 BRAILLE PATTERN DOTS-45678 */
#define XK_braille_dots_145678        0x10028f9  /* U+28f9 BRAILLE PATTERN DOTS-145678 */
#define XK_braille_dots_245678        0x10028fa  /* U+28fa BRAILLE PATTERN DOTS-245678 */
#define XK_braille_dots_1245678       0x10028fb  /* U+28fb BRAILLE PATTERN DOTS-1245678 */
#define XK_braille_dots_345678        0x10028fc  /* U+28fc BRAILLE PATTERN DOTS-345678 */
#define XK_braille_dots_1345678       0x10028fd  /* U+28fd BRAILLE PATTERN DOTS-1345678 */
#define XK_braille_dots_2345678       0x10028fe  /* U+28fe BRAILLE PATTERN DOTS-2345678 */
#define XK_braille_dots_12345678      0x10028ff  /* U+28ff BRAILLE PATTERN DOTS-12345678 */
#endif /* XK_BRAILLE */

/*
 * Sinhala (http://unicode.org/charts/PDF/U0D80.pdf)
 * http://www.nongnu.org/sinhala/doc/transliteration/sinhala-transliteration_6.html
 */

#ifdef XK_SINHALA
#define XK_Sinh_ng            0x1000d82  /* U+0D82 SINHALA ANUSVARAYA */
#define XK_Sinh_h2            0x1000d83  /* U+0D83 SINHALA VISARGAYA */
#define XK_Sinh_a             0x1000d85  /* U+0D85 SINHALA AYANNA */
#define XK_Sinh_aa            0x1000d86  /* U+0D86 SINHALA AAYANNA */
#define XK_Sinh_ae            0x1000d87  /* U+0D87 SINHALA AEYANNA */
#define XK_Sinh_aee           0x1000d88  /* U+0D88 SINHALA AEEYANNA */
#define XK_Sinh_i             0x1000d89  /* U+0D89 SINHALA IYANNA */
#define XK_Sinh_ii            0x1000d8a  /* U+0D8A SINHALA IIYANNA */
#define XK_Sinh_u             0x1000d8b  /* U+0D8B SINHALA UYANNA */
#define XK_Sinh_uu            0x1000d8c  /* U+0D8C SINHALA UUYANNA */
#define XK_Sinh_ri            0x1000d8d  /* U+0D8D SINHALA IRUYANNA */
#define XK_Sinh_rii           0x1000d8e  /* U+0D8E SINHALA IRUUYANNA */
#define XK_Sinh_lu            0x1000d8f  /* U+0D8F SINHALA ILUYANNA */
#define XK_Sinh_luu           0x1000d90  /* U+0D90 SINHALA ILUUYANNA */
#define XK_Sinh_e             0x1000d91  /* U+0D91 SINHALA EYANNA */
#define XK_Sinh_ee            0x1000d92  /* U+0D92 SINHALA EEYANNA */
#define XK_Sinh_ai            0x1000d93  /* U+0D93 SINHALA AIYANNA */
#define XK_Sinh_o             0x1000d94  /* U+0D94 SINHALA OYANNA */
#define XK_Sinh_oo            0x1000d95  /* U+0D95 SINHALA OOYANNA */
#define XK_Sinh_au            0x1000d96  /* U+0D96 SINHALA AUYANNA */
#define XK_Sinh_ka            0x1000d9a  /* U+0D9A SINHALA KAYANNA */
#define XK_Sinh_kha           0x1000d9b  /* U+0D9B SINHALA MAHA. KAYANNA */
#define XK_Sinh_ga            0x1000d9c  /* U+0D9C SINHALA GAYANNA */
#define XK_Sinh_gha           0x1000d9d  /* U+0D9D SINHALA MAHA. GAYANNA */
#define XK_Sinh_ng2           0x1000d9e  /* U+0D9E SINHALA KANTAJA NAASIKYAYA */
#define XK_Sinh_nga           0x1000d9f  /* U+0D9F SINHALA SANYAKA GAYANNA */
#define XK_Sinh_ca            0x1000da0  /* U+0DA0 SINHALA CAYANNA */
#define XK_Sinh_cha           0x1000da1  /* U+0DA1 SINHALA MAHA. CAYANNA */
#define XK_Sinh_ja            0x1000da2  /* U+0DA2 SINHALA JAYANNA */
#define XK_Sinh_jha           0x1000da3  /* U+0DA3 SINHALA MAHA. JAYANNA */
#define XK_Sinh_nya           0x1000da4  /* U+0DA4 SINHALA TAALUJA NAASIKYAYA */
#define XK_Sinh_jnya          0x1000da5  /* U+0DA5 SINHALA TAALUJA SANYOOGA NAASIKYAYA */
#define XK_Sinh_nja           0x1000da6  /* U+0DA6 SINHALA SANYAKA JAYANNA */
#define XK_Sinh_tta           0x1000da7  /* U+0DA7 SINHALA TTAYANNA */
#define XK_Sinh_ttha          0x1000da8  /* U+0DA8 SINHALA MAHA. TTAYANNA */
#define XK_Sinh_dda           0x1000da9  /* U+0DA9 SINHALA DDAYANNA */
#define XK_Sinh_ddha          0x1000daa  /* U+0DAA SINHALA MAHA. DDAYANNA */
#define XK_Sinh_nna           0x1000dab  /* U+0DAB SINHALA MUURDHAJA NAYANNA */
#define XK_Sinh_ndda          0x1000dac  /* U+0DAC SINHALA SANYAKA DDAYANNA */
#define XK_Sinh_tha           0x1000dad  /* U+0DAD SINHALA TAYANNA */
#define XK_Sinh_thha          0x1000dae  /* U+0DAE SINHALA MAHA. TAYANNA */
#define XK_Sinh_dha           0x1000daf  /* U+0DAF SINHALA DAYANNA */
#define XK_Sinh_dhha          0x1000db0  /* U+0DB0 SINHALA MAHA. DAYANNA */
#define XK_Sinh_na            0x1000db1  /* U+0DB1 SINHALA DANTAJA NAYANNA */
#define XK_Sinh_ndha          0x1000db3  /* U+0DB3 SINHALA SANYAKA DAYANNA */
#define XK_Sinh_pa            0x1000db4  /* U+0DB4 SINHALA PAYANNA */
#define XK_Sinh_pha           0x1000db5  /* U+0DB5 SINHALA MAHA. PAYANNA */
#define XK_Sinh_ba            0x1000db6  /* U+0DB6 SINHALA BAYANNA */
#define XK_Sinh_bha           0x1000db7  /* U+0DB7 SINHALA MAHA. BAYANNA */
#define XK_Sinh_ma            0x1000db8  /* U+0DB8 SINHALA MAYANNA */
#define XK_Sinh_mba           0x1000db9  /* U+0DB9 SINHALA AMBA BAYANNA */
#define XK_Sinh_ya            0x1000dba  /* U+0DBA SINHALA YAYANNA */
#define XK_Sinh_ra            0x1000dbb  /* U+0DBB SINHALA RAYANNA */
#define XK_Sinh_la            0x1000dbd  /* U+0DBD SINHALA DANTAJA LAYANNA */
#define XK_Sinh_va            0x1000dc0  /* U+0DC0 SINHALA VAYANNA */
#define XK_Sinh_sha           0x1000dc1  /* U+0DC1 SINHALA TAALUJA SAYANNA */
#define XK_Sinh_ssha          0x1000dc2  /* U+0DC2 SINHALA MUURDHAJA SAYANNA */
#define XK_Sinh_sa            0x1000dc3  /* U+0DC3 SINHALA DANTAJA SAYANNA */
#define XK_Sinh_ha            0x1000dc4  /* U+0DC4 SINHALA HAYANNA */
#define XK_Sinh_lla           0x1000dc5  /* U+0DC5 SINHALA MUURDHAJA LAYANNA */
#define XK_Sinh_fa            0x1000dc6  /* U+0DC6 SINHALA FAYANNA */
#define XK_Sinh_al            0x1000dca  /* U+0DCA SINHALA AL-LAKUNA */
#define XK_Sinh_aa2           0x1000dcf  /* U+0DCF SINHALA AELA-PILLA */
#define XK_Sinh_ae2           0x1000dd0  /* U+0DD0 SINHALA AEDA-PILLA */
#define XK_Sinh_aee2          0x1000dd1  /* U+0DD1 SINHALA DIGA AEDA-PILLA */
#define XK_Sinh_i2            0x1000dd2  /* U+0DD2 SINHALA IS-PILLA */
#define XK_Sinh_ii2           0x1000dd3  /* U+0DD3 SINHALA DIGA IS-PILLA */
#define XK_Sinh_u2            0x1000dd4  /* U+0DD4 SINHALA PAA-PILLA */
#define XK_Sinh_uu2           0x1000dd6  /* U+0DD6 SINHALA DIGA PAA-PILLA */
#define XK_Sinh_ru2           0x1000dd8  /* U+0DD8 SINHALA GAETTA-PILLA */
#define XK_Sinh_e2            0x1000dd9  /* U+0DD9 SINHALA KOMBUVA */
#define XK_Sinh_ee2           0x1000dda  /* U+0DDA SINHALA DIGA KOMBUVA */
#define XK_Sinh_ai2           0x1000ddb  /* U+0DDB SINHALA KOMBU DEKA */
#define XK_Sinh_o2            0x1000ddc  /* U+0DDC SINHALA KOMBUVA HAA AELA-PILLA*/
#define XK_Sinh_oo2           0x1000ddd  /* U+0DDD SINHALA KOMBUVA HAA DIGA AELA-PILLA*/
#define XK_Sinh_au2           0x1000dde  /* U+0DDE SINHALA KOMBUVA HAA GAYANUKITTA */
#define XK_Sinh_lu2           0x1000ddf  /* U+0DDF SINHALA GAYANUKITTA */
#define XK_Sinh_ruu2          0x1000df2  /* U+0DF2 SINHALA DIGA GAETTA-PILLA */
#define XK_Sinh_luu2          0x1000df3  /* U+0DF3 SINHALA DIGA GAYANUKITTA */
#define XK_Sinh_kunddaliya    0x1000df4  /* U+0DF4 SINHALA KUNDDALIYA */

* Fri 24 Jan 2014 04:52:00 AM JST
0xff08  /* Back space, back char */
* Fri 24 Jan 2014 04:52:03 AM JST
0xff09
* Fri 24 Jan 2014 04:52:04 AM JST
0xff0a  /* Linefeed, LF */
* Fri 24 Jan 2014 04:52:05 AM JST
0xff0b
* Fri 24 Jan 2014 04:52:05 AM JST
0xff0d  /* Return, enter */
* Fri 24 Jan 2014 04:52:05 AM JST
0xff13  /* Pause, hold */
* Fri 24 Jan 2014 04:52:06 AM JST
0xff14
* Fri 24 Jan 2014 04:52:06 AM JST
0xff15
* Fri 24 Jan 2014 04:52:06 AM JST
0xff1b
* Fri 24 Jan 2014 04:52:06 AM JST
0xffff  /* Delete, rubout */
* Fri 24 Jan 2014 04:52:07 AM JST
0xff20  /* Multi-key character compose */
* Fri 24 Jan 2014 04:52:07 AM JST
0xff37
* Fri 24 Jan 2014 04:52:07 AM JST
0xff3c
* Fri 24 Jan 2014 04:52:07 AM JST
0xff3d
* Fri 24 Jan 2014 04:52:08 AM JST
0xff3e
* Fri 24 Jan 2014 04:52:08 AM JST
0xff21  /* Kanji, Kanji convert */
* Fri 24 Jan 2014 04:52:08 AM JST
0xff22  /* Cancel Conversion */
* Fri 24 Jan 2014 04:52:09 AM JST
0xff23  /* Start/Stop Conversion */
* Fri 24 Jan 2014 04:52:09 AM JST
0xff23  /* Alias for Henkan_Mode */
* Fri 24 Jan 2014 04:52:09 AM JST
0xff24  /* to Romaji */
* Fri 24 Jan 2014 04:52:09 AM JST
0xff25  /* to Hiragana */
* Fri 24 Jan 2014 04:52:10 AM JST
0xff26  /* to Katakana */
* Fri 24 Jan 2014 04:52:10 AM JST
0xff27  /* Hiragana/Katakana toggle */
* Fri 24 Jan 2014 04:52:10 AM JST
0xff28  /* to Zenkaku */
* Fri 24 Jan 2014 04:52:10 AM JST
0xff29  /* to Hankaku */
* Fri 24 Jan 2014 04:52:10 AM JST
0xff2a  /* Zenkaku/Hankaku toggle */
* Fri 24 Jan 2014 04:52:11 AM JST
0xff2b  /* Add to Dictionary */
* Fri 24 Jan 2014 04:52:11 AM JST
0xff2c  /* Delete from Dictionary */
* Fri 24 Jan 2014 04:52:11 AM JST
0xff2d  /* Kana Lock */
* Fri 24 Jan 2014 04:52:11 AM JST
0xff2e  /* Kana Shift */
* Fri 24 Jan 2014 04:52:11 AM JST
0xff2f  /* Alphanumeric Shift */
* Fri 24 Jan 2014 04:52:11 AM JST
0xff30  /* Alphanumeric toggle */
* Fri 24 Jan 2014 04:52:12 AM JST
0xff37  /* Codeinput */
* Fri 24 Jan 2014 04:52:13 AM JST
0xff3d  /* Multiple/All Candidate(s) */
* Fri 24 Jan 2014 04:52:13 AM JST
0xff3e  /* Previous Candidate */
* Fri 24 Jan 2014 04:52:14 AM JST
*/
* Fri 24 Jan 2014 04:52:16 AM JST
0xff50
* Fri 24 Jan 2014 04:52:17 AM JST
0xff51  /* Move left, left arrow */
* Fri 24 Jan 2014 04:52:17 AM JST
0xff52  /* Move up, up arrow */
* Fri 24 Jan 2014 04:52:17 AM JST
0xff53  /* Move right, right arrow */
* Fri 24 Jan 2014 04:52:24 AM JST
0xff54  /* Move down, down arrow */
* Fri 24 Jan 2014 04:52:24 AM JST
0xff55  /* Prior, previous */
* Fri 24 Jan 2014 04:52:24 AM JST
0xff55
* Fri 24 Jan 2014 04:52:24 AM JST
0xff56  /* Next */
* Fri 24 Jan 2014 04:52:25 AM JST
0xff56
* Fri 24 Jan 2014 04:52:25 AM JST
0xff57  /* EOL */
* Fri 24 Jan 2014 04:52:25 AM JST
0xff58  /* BOL */
* Fri 24 Jan 2014 04:52:25 AM JST
0xff60  /* Select, mark */
* Fri 24 Jan 2014 04:52:25 AM JST
0xff61
* Fri 24 Jan 2014 04:52:25 AM JST
0xff62  /* Execute, run, do */
* Fri 24 Jan 2014 04:52:25 AM JST
0xff63  /* Insert, insert here */
* Fri 24 Jan 2014 04:52:25 AM JST
0xff65
* Fri 24 Jan 2014 04:52:26 AM JST
0xff66  /* Redo, again */
* Fri 24 Jan 2014 04:52:26 AM JST
0xff67
* Fri 24 Jan 2014 04:52:26 AM JST
0xff68  /* Find, search */
* Fri 24 Jan 2014 04:52:26 AM JST
0xff69  /* Cancel, stop, abort, exit */
* Fri 24 Jan 2014 04:52:26 AM JST
0xff6a  /* Help */
* Fri 24 Jan 2014 04:52:26 AM JST
0xff6b
* Fri 24 Jan 2014 04:52:26 AM JST
0xff7e  /* Character set switch */
* Fri 24 Jan 2014 04:52:26 AM JST
0xff7e  /* Alias for mode_switch */
* Fri 24 Jan 2014 04:52:26 AM JST
0xff7f
* Fri 24 Jan 2014 04:52:27 AM JST
0xff80  /* Space */
* Fri 24 Jan 2014 04:52:27 AM JST
0xff89
* Fri 24 Jan 2014 04:52:27 AM JST
0xff8d  /* Enter */
* Fri 24 Jan 2014 04:52:27 AM JST
0xff91  /* PF1, KP_A, ... */
* Fri 24 Jan 2014 04:52:27 AM JST
0xff92
* Fri 24 Jan 2014 04:52:27 AM JST
0xff93
* Fri 24 Jan 2014 04:52:27 AM JST
0xff94
* Fri 24 Jan 2014 04:52:27 AM JST
0xff95
* Fri 24 Jan 2014 04:52:27 AM JST
0xff96
* Fri 24 Jan 2014 04:52:27 AM JST
0xff97
* Fri 24 Jan 2014 04:52:27 AM JST
0xff98
* Fri 24 Jan 2014 04:52:27 AM JST
0xff99
* Fri 24 Jan 2014 04:52:28 AM JST
0xff9a
* Fri 24 Jan 2014 04:52:28 AM JST
0xff9a
* Fri 24 Jan 2014 04:52:28 AM JST
0xff9b
* Fri 24 Jan 2014 04:52:28 AM JST
0xff9b
* Fri 24 Jan 2014 04:52:28 AM JST
0xff9c
* Fri 24 Jan 2014 04:52:28 AM JST
0xff9d
* Fri 24 Jan 2014 04:52:28 AM JST
0xff9e
* Fri 24 Jan 2014 04:52:28 AM JST
0xff9f
* Fri 24 Jan 2014 04:52:28 AM JST
0xffbd  /* Equals */
* Fri 24 Jan 2014 04:52:28 AM JST
0xffaa
* Fri 24 Jan 2014 04:52:29 AM JST
0xffab
* Fri 24 Jan 2014 04:52:29 AM JST
0xffac  /* Separator, often comma */
* Fri 24 Jan 2014 04:52:29 AM JST
0xffad
* Fri 24 Jan 2014 04:52:29 AM JST
0xffae
* Fri 24 Jan 2014 04:52:29 AM JST
0xffaf
* Fri 24 Jan 2014 04:52:29 AM JST
0xffb0
* Fri 24 Jan 2014 04:52:29 AM JST
0xffb1
* Fri 24 Jan 2014 04:52:29 AM JST
0xffb2
* Fri 24 Jan 2014 04:52:29 AM JST
0xffb3
* Fri 24 Jan 2014 04:52:29 AM JST
0xffb4
* Fri 24 Jan 2014 04:52:29 AM JST
0xffb5
* Fri 24 Jan 2014 04:52:29 AM JST
0xffb6
* Fri 24 Jan 2014 04:52:29 AM JST
0xffb7
* Fri 24 Jan 2014 04:52:29 AM JST
0xffb8
* Fri 24 Jan 2014 04:52:30 AM JST
0xffb9
* Fri 24 Jan 2014 04:52:30 AM JST
0xffbe
* Fri 24 Jan 2014 04:52:30 AM JST
0xffbf
* Fri 24 Jan 2014 04:52:30 AM JST
0xffc0
* Fri 24 Jan 2014 04:52:30 AM JST
0xffc1
* Fri 24 Jan 2014 04:52:30 AM JST
0xffc2
* Fri 24 Jan 2014 04:52:30 AM JST
0xffc3
* Fri 24 Jan 2014 04:52:30 AM JST
0xffc4
* Fri 24 Jan 2014 04:52:30 AM JST
0xffc5
* Fri 24 Jan 2014 04:52:30 AM JST
0xffc6
* Fri 24 Jan 2014 04:52:30 AM JST
0xffc7
* Fri 24 Jan 2014 04:52:30 AM JST
0xffc8
* Fri 24 Jan 2014 04:52:30 AM JST
0xffc8
* Fri 24 Jan 2014 04:52:31 AM JST
0xffc9
* Fri 24 Jan 2014 04:52:31 AM JST
0xffc9
* Fri 24 Jan 2014 04:52:31 AM JST
0xffca
* Fri 24 Jan 2014 04:52:31 AM JST
0xffca
* Fri 24 Jan 2014 04:52:31 AM JST
0xffcb
* Fri 24 Jan 2014 04:52:31 AM JST
0xffcb
* Fri 24 Jan 2014 04:52:31 AM JST
0xffcc
* Fri 24 Jan 2014 04:52:31 AM JST
0xffcc
* Fri 24 Jan 2014 04:52:31 AM JST
0xffcd
* Fri 24 Jan 2014 04:52:31 AM JST
0xffcd
* Fri 24 Jan 2014 04:52:31 AM JST
0xffce
* Fri 24 Jan 2014 04:52:31 AM JST
0xffce
* Fri 24 Jan 2014 04:52:31 AM JST
0xffcf
* Fri 24 Jan 2014 04:52:31 AM JST
0xffcf
* Fri 24 Jan 2014 04:52:32 AM JST
0xffd0
* Fri 24 Jan 2014 04:52:32 AM JST
0xffd0
* Fri 24 Jan 2014 04:52:32 AM JST
0xffd1
* Fri 24 Jan 2014 04:52:32 AM JST
0xffd1
* Fri 24 Jan 2014 04:52:32 AM JST
0xffd2
* Fri 24 Jan 2014 04:52:32 AM JST
0xffd2
* Fri 24 Jan 2014 04:52:32 AM JST
0xffd3
* Fri 24 Jan 2014 04:52:32 AM JST
0xffd3
* Fri 24 Jan 2014 04:52:32 AM JST
0xffd4
* Fri 24 Jan 2014 04:52:32 AM JST
0xffd4
* Fri 24 Jan 2014 04:52:32 AM JST
0xffd5
* Fri 24 Jan 2014 04:52:33 AM JST
0xffd5
* Fri 24 Jan 2014 04:52:33 AM JST
0xffd6
* Fri 24 Jan 2014 04:52:33 AM JST
0xffd6
* Fri 24 Jan 2014 04:52:33 AM JST
0xffd7
* Fri 24 Jan 2014 04:52:33 AM JST
0xffd7
* Fri 24 Jan 2014 04:52:33 AM JST
0xffd8
* Fri 24 Jan 2014 04:52:33 AM JST
0xffd8
* Fri 24 Jan 2014 04:52:33 AM JST
0xffd9
* Fri 24 Jan 2014 04:52:33 AM JST
0xffd9
* Fri 24 Jan 2014 04:52:33 AM JST
0xffda
* Fri 24 Jan 2014 04:52:33 AM JST
0xffda
* Fri 24 Jan 2014 04:52:33 AM JST
0xffdb
* Fri 24 Jan 2014 04:52:33 AM JST
0xffdb
* Fri 24 Jan 2014 04:52:34 AM JST
0xffdc
* Fri 24 Jan 2014 04:52:34 AM JST
0xffdc
* Fri 24 Jan 2014 04:52:34 AM JST
0xffdd
* Fri 24 Jan 2014 04:52:34 AM JST
0xffdd
* Fri 24 Jan 2014 04:52:34 AM JST
0xffde
* Fri 24 Jan 2014 04:52:34 AM JST
0xffde
* Fri 24 Jan 2014 04:52:34 AM JST
0xffdf
* Fri 24 Jan 2014 04:52:34 AM JST
0xffdf
* Fri 24 Jan 2014 04:52:34 AM JST
0xffe0
* Fri 24 Jan 2014 04:52:34 AM JST
0xffe0
* Fri 24 Jan 2014 04:52:34 AM JST
0xffe1  /* Left shift */
* Fri 24 Jan 2014 04:52:34 AM JST
0xffe2  /* Right shift */
* Fri 24 Jan 2014 04:52:35 AM JST
0xffe3  /* Left control */
* Fri 24 Jan 2014 04:52:35 AM JST
0xffe4  /* Right control */
* Fri 24 Jan 2014 04:52:35 AM JST
0xffe5  /* Caps lock */
* Fri 24 Jan 2014 04:52:35 AM JST
0xffe6  /* Shift lock */
* Fri 24 Jan 2014 04:52:35 AM JST
0xffe7  /* Left meta */
* Fri 24 Jan 2014 04:52:35 AM JST
0xffe8  /* Right meta */
* Fri 24 Jan 2014 04:52:35 AM JST
0xffe9  /* Left alt */
* Fri 24 Jan 2014 04:52:35 AM JST
0xffea  /* Right alt */
* Fri 24 Jan 2014 04:52:35 AM JST
0xffeb  /* Left super */
* Fri 24 Jan 2014 04:52:35 AM JST
0xffec  /* Right super */
* Fri 24 Jan 2014 04:52:35 AM JST
0xffed  /* Left hyper */
* Fri 24 Jan 2014 04:52:36 AM JST
0xffee  /* Right hyper */
* Fri 24 Jan 2014 04:52:36 AM JST
*/
* Fri 24 Jan 2014 04:52:36 AM JST
Extension function and modifier keys
* Fri 24 Jan 2014 04:52:36 AM JST
 XK_ISO_Lock                      0xfe01

* Fri 24 Jan 2014 04:52:36 AM JST
0xfe02
* Fri 24 Jan 2014 04:52:36 AM JST
0xfe03
* Fri 24 Jan 2014 04:52:36 AM JST
0xfe04
* Fri 24 Jan 2014 04:52:36 AM JST
0xfe05
* Fri 24 Jan 2014 04:52:36 AM JST
0xfe11
* Fri 24 Jan 2014 04:52:36 AM JST
0xfe12
* Fri 24 Jan 2014 04:52:36 AM JST
0xfe13
* Fri 24 Jan 2014 04:52:36 AM JST
0xff7e  /* Alias for mode_switch */
* Fri 24 Jan 2014 04:52:37 AM JST
0xfe06
* Fri 24 Jan 2014 04:52:37 AM JST
0xfe07
* Fri 24 Jan 2014 04:52:37 AM JST
0xfe08
* Fri 24 Jan 2014 04:52:37 AM JST
0xfe09
* Fri 24 Jan 2014 04:52:37 AM JST
0xfe0a
* Fri 24 Jan 2014 04:52:37 AM JST
0xfe0b
* Fri 24 Jan 2014 04:52:37 AM JST
0xfe0c
* Fri 24 Jan 2014 04:52:37 AM JST
0xfe0d
* Fri 24 Jan 2014 04:52:37 AM JST
0xfe0e
* Fri 24 Jan 2014 04:52:38 AM JST
0xfe0f
* Fri 24 Jan 2014 04:52:38 AM JST
0xfe20
* Fri 24 Jan 2014 04:52:38 AM JST
0xfe21
* Fri 24 Jan 2014 04:52:38 AM JST
0xfe22
* Fri 24 Jan 2014 04:52:38 AM JST
0xfe23
* Fri 24 Jan 2014 04:52:38 AM JST
0xfe24
* Fri 24 Jan 2014 04:52:38 AM JST
0xfe25
* Fri 24 Jan 2014 04:52:38 AM JST
0xfe26
* Fri 24 Jan 2014 04:52:38 AM JST
0xfe27
* Fri 24 Jan 2014 04:52:38 AM JST
0xfe28
* Fri 24 Jan 2014 04:52:39 AM JST
0xfe29
* Fri 24 Jan 2014 04:52:39 AM JST
0xfe2a
* Fri 24 Jan 2014 04:52:39 AM JST
0xfe2b
* Fri 24 Jan 2014 04:52:39 AM JST
0xfe2c
* Fri 24 Jan 2014 04:52:39 AM JST
0xfe2d
* Fri 24 Jan 2014 04:52:39 AM JST
0xfe2e
* Fri 24 Jan 2014 04:52:39 AM JST
0xfe2f
* Fri 24 Jan 2014 04:52:39 AM JST
0xfe30
* Fri 24 Jan 2014 04:52:39 AM JST
0xfe31
* Fri 24 Jan 2014 04:52:39 AM JST
0xfe32
* Fri 24 Jan 2014 04:52:39 AM JST
0xfe33
* Fri 24 Jan 2014 04:52:39 AM JST
0xfe34
* Fri 24 Jan 2014 04:52:39 AM JST
0xfe50
* Fri 24 Jan 2014 04:52:40 AM JST
0xfe51
* Fri 24 Jan 2014 04:52:40 AM JST
0xfe52
* Fri 24 Jan 2014 04:52:40 AM JST
0xfe53
* Fri 24 Jan 2014 04:52:40 AM JST
0xfe53  /* alias for dead_tilde */
* Fri 24 Jan 2014 04:52:40 AM JST
0xfe54
* Fri 24 Jan 2014 04:52:40 AM JST
0xfe55
* Fri 24 Jan 2014 04:52:40 AM JST
0xfe56
* Fri 24 Jan 2014 04:52:40 AM JST
0xfe57
* Fri 24 Jan 2014 04:52:40 AM JST
0xfe58
* Fri 24 Jan 2014 04:52:40 AM JST
0xfe59
* Fri 24 Jan 2014 04:52:40 AM JST
0xfe5a
* Fri 24 Jan 2014 04:52:40 AM JST
0xfe5b
* Fri 24 Jan 2014 04:52:40 AM JST
0xfe5c
* Fri 24 Jan 2014 04:52:41 AM JST
0xfe5d
* Fri 24 Jan 2014 04:52:41 AM JST
0xfe5e
* Fri 24 Jan 2014 04:52:41 AM JST
0xfe5f
* Fri 24 Jan 2014 04:52:41 AM JST
0xfe60
* Fri 24 Jan 2014 04:52:41 AM JST
0xfe61
* Fri 24 Jan 2014 04:52:41 AM JST
0xfe62
* Fri 24 Jan 2014 04:52:41 AM JST
0xfe63
* Fri 24 Jan 2014 04:52:41 AM JST
0xfe64
* Fri 24 Jan 2014 04:52:41 AM JST
0xfe64  /* alias for dead_abovecomma */
* Fri 24 Jan 2014 04:52:41 AM JST
0xfe65
* Fri 24 Jan 2014 04:52:41 AM JST
0xfe65  /* alias for dead_abovereversedcomma */
* Fri 24 Jan 2014 04:52:41 AM JST
0xfe66
* Fri 24 Jan 2014 04:52:41 AM JST
0xfe67
* Fri 24 Jan 2014 04:52:41 AM JST
0xfe68
* Fri 24 Jan 2014 04:52:42 AM JST
0xfe69
* Fri 24 Jan 2014 04:52:42 AM JST
0xfe6a
* Fri 24 Jan 2014 04:52:42 AM JST
0xfe6b
* Fri 24 Jan 2014 04:52:42 AM JST
0xfe6c
* Fri 24 Jan 2014 04:52:42 AM JST
0xfe6d
* Fri 24 Jan 2014 04:52:42 AM JST
0xfe6e
* Fri 24 Jan 2014 04:52:42 AM JST
0xfe6f
* Fri 24 Jan 2014 04:52:42 AM JST
0xfe80
* Fri 24 Jan 2014 04:52:42 AM JST
0xfe81
* Fri 24 Jan 2014 04:52:42 AM JST
0xfe82
* Fri 24 Jan 2014 04:52:42 AM JST
0xfe83
* Fri 24 Jan 2014 04:52:42 AM JST
0xfe84
* Fri 24 Jan 2014 04:52:42 AM JST
0xfe85
* Fri 24 Jan 2014 04:52:42 AM JST
0xfe86
* Fri 24 Jan 2014 04:52:43 AM JST
0xfe87
* Fri 24 Jan 2014 04:52:43 AM JST
0xfe88
* Fri 24 Jan 2014 04:52:43 AM JST
0xfe89
* Fri 24 Jan 2014 04:52:43 AM JST
0xfe8a
* Fri 24 Jan 2014 04:52:43 AM JST
0xfe8b
* Fri 24 Jan 2014 04:52:43 AM JST
0xfe8c
* Fri 24 Jan 2014 04:52:43 AM JST
0xfed0
* Fri 24 Jan 2014 04:52:43 AM JST
0xfed1
* Fri 24 Jan 2014 04:52:43 AM JST
0xfed2
* Fri 24 Jan 2014 04:52:43 AM JST
0xfed4
* Fri 24 Jan 2014 04:52:44 AM JST
0xfed5
* Fri 24 Jan 2014 04:52:44 AM JST
0xfe70
* Fri 24 Jan 2014 04:52:44 AM JST
0xfe71
* Fri 24 Jan 2014 04:52:44 AM JST
0xfe72
* Fri 24 Jan 2014 04:52:44 AM JST
0xfe73
* Fri 24 Jan 2014 04:52:44 AM JST
0xfe74
* Fri 24 Jan 2014 04:52:44 AM JST
0xfe75
* Fri 24 Jan 2014 04:52:44 AM JST
0xfe76
* Fri 24 Jan 2014 04:52:44 AM JST
0xfe77
* Fri 24 Jan 2014 04:52:44 AM JST
0xfe78
* Fri 24 Jan 2014 04:52:44 AM JST
0xfe79
* Fri 24 Jan 2014 04:52:44 AM JST
0xfe7a
* Fri 24 Jan 2014 04:52:44 AM JST
0xfee0
* Fri 24 Jan 2014 04:52:45 AM JST
0xfee1
* Fri 24 Jan 2014 04:52:45 AM JST
0xfee2
* Fri 24 Jan 2014 04:52:45 AM JST
0xfee3
* Fri 24 Jan 2014 04:52:45 AM JST
0xfee4
* Fri 24 Jan 2014 04:52:45 AM JST
0xfee5
* Fri 24 Jan 2014 04:52:45 AM JST
0xfee6
* Fri 24 Jan 2014 04:52:45 AM JST
0xfee7
* Fri 24 Jan 2014 04:52:45 AM JST
0xfee8
* Fri 24 Jan 2014 04:52:45 AM JST
0xfee9
* Fri 24 Jan 2014 04:52:45 AM JST
0xfeea
* Fri 24 Jan 2014 04:52:45 AM JST
0xfeeb
* Fri 24 Jan 2014 04:52:45 AM JST
0xfeec
* Fri 24 Jan 2014 04:52:45 AM JST
0xfeed
* Fri 24 Jan 2014 04:52:45 AM JST
0xfeee
* Fri 24 Jan 2014 04:52:46 AM JST
0xfeef
* Fri 24 Jan 2014 04:52:46 AM JST
0xfef0
* Fri 24 Jan 2014 04:52:46 AM JST
0xfef1
* Fri 24 Jan 2014 04:52:46 AM JST
0xfef2
* Fri 24 Jan 2014 04:52:46 AM JST
0xfef3
* Fri 24 Jan 2014 04:52:46 AM JST
0xfef4
* Fri 24 Jan 2014 04:52:46 AM JST
0xfef5
* Fri 24 Jan 2014 04:52:46 AM JST
0xfef6
* Fri 24 Jan 2014 04:52:46 AM JST
0xfef7
* Fri 24 Jan 2014 04:52:46 AM JST
0xfef8
* Fri 24 Jan 2014 04:52:46 AM JST
0xfefd
* Fri 24 Jan 2014 04:52:46 AM JST
0xfef9
* Fri 24 Jan 2014 04:52:46 AM JST
0xfefa
* Fri 24 Jan 2014 04:52:46 AM JST
0xfefb
* Fri 24 Jan 2014 04:52:46 AM JST
0xfefc
* Fri 24 Jan 2014 04:52:47 AM JST
0xfea0
* Fri 24 Jan 2014 04:52:47 AM JST
0xfea1
* Fri 24 Jan 2014 04:52:47 AM JST
0xfea2
* Fri 24 Jan 2014 04:52:47 AM JST
0xfea3
* Fri 24 Jan 2014 04:52:47 AM JST
0xfea4
* Fri 24 Jan 2014 04:52:47 AM JST
0xfea5
* Fri 24 Jan 2014 04:52:47 AM JST
*/
* Fri 24 Jan 2014 04:52:47 AM JST
 XK_3270_Duplicate                0xfd01

* Fri 24 Jan 2014 04:52:47 AM JST
0xfd02
* Fri 24 Jan 2014 04:52:47 AM JST
0xfd03
* Fri 24 Jan 2014 04:52:47 AM JST
0xfd04
* Fri 24 Jan 2014 04:52:47 AM JST
0xfd05
* Fri 24 Jan 2014 04:52:48 AM JST
0xfd06
* Fri 24 Jan 2014 04:52:48 AM JST
0xfd07
* Fri 24 Jan 2014 04:52:48 AM JST
0xfd08
* Fri 24 Jan 2014 04:52:48 AM JST
0xfd09
* Fri 24 Jan 2014 04:52:48 AM JST
0xfd0a
* Fri 24 Jan 2014 04:52:48 AM JST
0xfd0b
* Fri 24 Jan 2014 04:52:48 AM JST
0xfd0c
* Fri 24 Jan 2014 04:52:48 AM JST
0xfd0d
* Fri 24 Jan 2014 04:52:48 AM JST
0xfd0e
* Fri 24 Jan 2014 04:52:48 AM JST
0xfd0f
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd10
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd11
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd12
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd13
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd14
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd15
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd16
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd17
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd18
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd19
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd1a
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd1b
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd1c
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd1d
* Fri 24 Jan 2014 04:52:49 AM JST
0xfd1e
* Fri 24 Jan 2014 04:52:50 AM JST
*/
* Fri 24 Jan 2014 04:52:50 AM JST
 XK_space                         0x0020  /* U+0020 SPACE */

* Fri 24 Jan 2014 04:52:50 AM JST
0x0021  /* U+0021 EXCLAMATION MARK */
* Fri 24 Jan 2014 04:52:50 AM JST
0x0022  /* U+0022 QUOTATION MARK */
* Fri 24 Jan 2014 04:52:50 AM JST
0x0023  /* U+0023 NUMBER SIGN */
* Fri 24 Jan 2014 04:52:50 AM JST
0x0024  /* U+0024 DOLLAR SIGN */
* Fri 24 Jan 2014 04:52:50 AM JST
0x0025  /* U+0025 PERCENT SIGN */
* Fri 24 Jan 2014 04:52:50 AM JST
0x0026  /* U+0026 AMPERSAND */
* Fri 24 Jan 2014 04:52:50 AM JST
0x0027  /* U+0027 APOSTROPHE */
* Fri 24 Jan 2014 04:52:50 AM JST
0x0027  /* deprecated */
* Fri 24 Jan 2014 04:52:50 AM JST
0x0028  /* U+0028 LEFT PARENTHESIS */
* Fri 24 Jan 2014 04:52:50 AM JST
0x0029  /* U+0029 RIGHT PARENTHESIS */
* Fri 24 Jan 2014 04:52:50 AM JST
0x002a  /* U+002A ASTERISK */
* Fri 24 Jan 2014 04:52:50 AM JST
0x002b  /* U+002B PLUS SIGN */
* Fri 24 Jan 2014 04:52:51 AM JST
0x002c  /* U+002C COMMA */
* Fri 24 Jan 2014 04:52:51 AM JST
0x002d  /* U+002D HYPHEN-MINUS */
* Fri 24 Jan 2014 04:52:51 AM JST
0x002e  /* U+002E FULL STOP */
* Fri 24 Jan 2014 04:52:51 AM JST
0x002f  /* U+002F SOLIDUS */
* Fri 24 Jan 2014 04:52:51 AM JST
0x0030  /* U+0030 DIGIT ZERO */
* Fri 24 Jan 2014 04:52:51 AM JST
0x0031  /* U+0031 DIGIT ONE */
* Fri 24 Jan 2014 04:52:51 AM JST
0x0032  /* U+0032 DIGIT TWO */
* Fri 24 Jan 2014 04:52:51 AM JST
0x0033  /* U+0033 DIGIT THREE */
* Fri 24 Jan 2014 04:52:51 AM JST
0x0034  /* U+0034 DIGIT FOUR */
* Fri 24 Jan 2014 04:52:51 AM JST
0x0035  /* U+0035 DIGIT FIVE */
* Fri 24 Jan 2014 04:52:51 AM JST
0x0036  /* U+0036 DIGIT SIX */
* Fri 24 Jan 2014 04:52:51 AM JST
0x0037  /* U+0037 DIGIT SEVEN */
* Fri 24 Jan 2014 04:52:51 AM JST
0x0038  /* U+0038 DIGIT EIGHT */
* Fri 24 Jan 2014 04:52:51 AM JST
0x0039  /* U+0039 DIGIT NINE */
* Fri 24 Jan 2014 04:52:52 AM JST
0x003a  /* U+003A COLON */
* Fri 24 Jan 2014 04:52:52 AM JST
0x003b  /* U+003B SEMICOLON */
* Fri 24 Jan 2014 04:52:52 AM JST
0x003c  /* U+003C LESS-THAN SIGN */
* Fri 24 Jan 2014 04:52:52 AM JST
0x003d  /* U+003D EQUALS SIGN */
* Fri 24 Jan 2014 04:52:52 AM JST
0x003e  /* U+003E GREATER-THAN SIGN */
* Fri 24 Jan 2014 04:52:52 AM JST
0x003f  /* U+003F QUESTION MARK */
* Fri 24 Jan 2014 04:52:52 AM JST
0x0040  /* U+0040 COMMERCIAL AT */
* Fri 24 Jan 2014 04:52:52 AM JST
0x0041  /* U+0041 LATIN CAPITAL LETTER A */
* Fri 24 Jan 2014 04:52:52 AM JST
0x0042  /* U+0042 LATIN CAPITAL LETTER B */
* Fri 24 Jan 2014 04:52:52 AM JST
0x0043  /* U+0043 LATIN CAPITAL LETTER C */
* Fri 24 Jan 2014 04:52:52 AM JST
0x0044  /* U+0044 LATIN CAPITAL LETTER D */
* Fri 24 Jan 2014 04:52:52 AM JST
0x0045  /* U+0045 LATIN CAPITAL LETTER E */
* Fri 24 Jan 2014 04:52:53 AM JST
0x0046  /* U+0046 LATIN CAPITAL LETTER F */
* Fri 24 Jan 2014 04:52:53 AM JST
0x0047  /* U+0047 LATIN CAPITAL LETTER G */
* Fri 24 Jan 2014 04:52:53 AM JST
0x0048  /* U+0048 LATIN CAPITAL LETTER H */
* Fri 24 Jan 2014 04:52:53 AM JST
0x0049  /* U+0049 LATIN CAPITAL LETTER I */
* Fri 24 Jan 2014 04:52:53 AM JST
0x004a  /* U+004A LATIN CAPITAL LETTER J */
* Fri 24 Jan 2014 04:52:53 AM JST
0x004b  /* U+004B LATIN CAPITAL LETTER K */
* Fri 24 Jan 2014 04:52:53 AM JST
0x004c  /* U+004C LATIN CAPITAL LETTER L */
* Fri 24 Jan 2014 04:52:53 AM JST
0x004d  /* U+004D LATIN CAPITAL LETTER M */
* Fri 24 Jan 2014 04:52:53 AM JST
0x004e  /* U+004E LATIN CAPITAL LETTER N */
* Fri 24 Jan 2014 04:52:53 AM JST
0x004f  /* U+004F LATIN CAPITAL LETTER O */
* Fri 24 Jan 2014 04:52:53 AM JST
0x0050  /* U+0050 LATIN CAPITAL LETTER P */
* Fri 24 Jan 2014 04:52:53 AM JST
0x0051  /* U+0051 LATIN CAPITAL LETTER Q */
* Fri 24 Jan 2014 04:52:53 AM JST
0x0052  /* U+0052 LATIN CAPITAL LETTER R */
* Fri 24 Jan 2014 04:52:54 AM JST
0x0053  /* U+0053 LATIN CAPITAL LETTER S */
* Fri 24 Jan 2014 04:52:54 AM JST
0x0054  /* U+0054 LATIN CAPITAL LETTER T */
* Fri 24 Jan 2014 04:52:54 AM JST
0x0055  /* U+0055 LATIN CAPITAL LETTER U */
* Fri 24 Jan 2014 04:52:54 AM JST
0x0056  /* U+0056 LATIN CAPITAL LETTER V */
* Fri 24 Jan 2014 04:52:54 AM JST
0x0057  /* U+0057 LATIN CAPITAL LETTER W */
* Fri 24 Jan 2014 04:52:54 AM JST
0x0058  /* U+0058 LATIN CAPITAL LETTER X */
* Fri 24 Jan 2014 04:52:54 AM JST
0x0059  /* U+0059 LATIN CAPITAL LETTER Y */
* Fri 24 Jan 2014 04:52:54 AM JST
0x005a  /* U+005A LATIN CAPITAL LETTER Z */
* Fri 24 Jan 2014 04:52:54 AM JST
0x005b  /* U+005B LEFT SQUARE BRACKET */
* Fri 24 Jan 2014 04:52:54 AM JST
0x005c  /* U+005C REVERSE SOLIDUS */
* Fri 24 Jan 2014 04:52:54 AM JST
0x005d  /* U+005D RIGHT SQUARE BRACKET */
* Fri 24 Jan 2014 04:52:54 AM JST
0x005e  /* U+005E CIRCUMFLEX ACCENT */
* Fri 24 Jan 2014 04:52:54 AM JST
0x005f  /* U+005F LOW LINE */
* Fri 24 Jan 2014 04:52:54 AM JST
0x0060  /* U+0060 GRAVE ACCENT */
* Fri 24 Jan 2014 04:52:54 AM JST
0x0060  /* deprecated */
* Fri 24 Jan 2014 04:52:55 AM JST
0x0061  /* U+0061 LATIN SMALL LETTER A */
* Fri 24 Jan 2014 04:52:55 AM JST
0x0062  /* U+0062 LATIN SMALL LETTER B */
* Fri 24 Jan 2014 04:52:55 AM JST
0x0063  /* U+0063 LATIN SMALL LETTER C */
* Fri 24 Jan 2014 04:52:55 AM JST
0x0064  /* U+0064 LATIN SMALL LETTER D */
* Fri 24 Jan 2014 04:52:55 AM JST
0x0065  /* U+0065 LATIN SMALL LETTER E */
* Fri 24 Jan 2014 04:52:55 AM JST
0x0066  /* U+0066 LATIN SMALL LETTER F */
* Fri 24 Jan 2014 04:52:55 AM JST
0x0067  /* U+0067 LATIN SMALL LETTER G */
* Fri 24 Jan 2014 04:52:55 AM JST
0x0068  /* U+0068 LATIN SMALL LETTER H */
* Fri 24 Jan 2014 04:52:55 AM JST
0x0069  /* U+0069 LATIN SMALL LETTER I */
* Fri 24 Jan 2014 04:52:55 AM JST
0x006a  /* U+006A LATIN SMALL LETTER J */
* Fri 24 Jan 2014 04:52:55 AM JST
0x006b  /* U+006B LATIN SMALL LETTER K */
* Fri 24 Jan 2014 04:52:55 AM JST
0x006c  /* U+006C LATIN SMALL LETTER L */
* Fri 24 Jan 2014 04:52:55 AM JST
0x006d  /* U+006D LATIN SMALL LETTER M */
* Fri 24 Jan 2014 04:52:55 AM JST
0x006e  /* U+006E LATIN SMALL LETTER N */
* Fri 24 Jan 2014 04:52:56 AM JST
0x006f  /* U+006F LATIN SMALL LETTER O */
* Fri 24 Jan 2014 04:52:56 AM JST
0x0070  /* U+0070 LATIN SMALL LETTER P */
* Fri 24 Jan 2014 04:52:56 AM JST
0x0071  /* U+0071 LATIN SMALL LETTER Q */
* Fri 24 Jan 2014 04:52:56 AM JST
0x0072  /* U+0072 LATIN SMALL LETTER R */
* Fri 24 Jan 2014 04:52:56 AM JST
0x0073  /* U+0073 LATIN SMALL LETTER S */
* Fri 24 Jan 2014 04:52:56 AM JST
0x0074  /* U+0074 LATIN SMALL LETTER T */
* Fri 24 Jan 2014 04:52:56 AM JST
0x0075  /* U+0075 LATIN SMALL LETTER U */
* Fri 24 Jan 2014 04:52:56 AM JST
0x0076  /* U+0076 LATIN SMALL LETTER V */
* Fri 24 Jan 2014 04:52:56 AM JST
0x0077  /* U+0077 LATIN SMALL LETTER W */
* Fri 24 Jan 2014 04:52:56 AM JST
0x0078  /* U+0078 LATIN SMALL LETTER X */
* Fri 24 Jan 2014 04:52:56 AM JST
0x0079  /* U+0079 LATIN SMALL LETTER Y */
* Fri 24 Jan 2014 04:52:56 AM JST
0x007a  /* U+007A LATIN SMALL LETTER Z */
* Fri 24 Jan 2014 04:52:56 AM JST
0x007b  /* U+007B LEFT CURLY BRACKET */
* Fri 24 Jan 2014 04:52:56 AM JST
0x007c  /* U+007C VERTICAL LINE */
* Fri 24 Jan 2014 04:52:57 AM JST
0x007d  /* U+007D RIGHT CURLY BRACKET */
* Fri 24 Jan 2014 04:52:57 AM JST
0x007e  /* U+007E TILDE */
* Fri 24 Jan 2014 04:52:57 AM JST
0x00a0  /* U+00A0 NO-BREAK SPACE */
* Fri 24 Jan 2014 04:52:57 AM JST
0x00a1  /* U+00A1 INVERTED EXCLAMATION MARK */
* Fri 24 Jan 2014 04:52:57 AM JST
0x00a2  /* U+00A2 CENT SIGN */
* Fri 24 Jan 2014 04:52:57 AM JST
0x00a3  /* U+00A3 POUND SIGN */
* Fri 24 Jan 2014 04:52:57 AM JST
0x00a4  /* U+00A4 CURRENCY SIGN */
* Fri 24 Jan 2014 04:52:57 AM JST
0x00a5  /* U+00A5 YEN SIGN */
* Fri 24 Jan 2014 04:52:57 AM JST
0x00a6  /* U+00A6 BROKEN BAR */
* Fri 24 Jan 2014 04:52:57 AM JST
0x00a7  /* U+00A7 SECTION SIGN */
* Fri 24 Jan 2014 04:52:57 AM JST
0x00a8  /* U+00A8 DIAERESIS */
* Fri 24 Jan 2014 04:52:58 AM JST
0x00a9  /* U+00A9 COPYRIGHT SIGN */
* Fri 24 Jan 2014 04:52:58 AM JST
0x00aa  /* U+00AA FEMININE ORDINAL INDICATOR */
* Fri 24 Jan 2014 04:52:58 AM JST
0x00ab  /* U+00AB LEFT-POINTING DOUBLE ANGLE QUOTATION MARK */
* Fri 24 Jan 2014 04:52:58 AM JST
0x00ac  /* U+00AC NOT SIGN */
* Fri 24 Jan 2014 04:52:58 AM JST
0x00ad  /* U+00AD SOFT HYPHEN */
* Fri 24 Jan 2014 04:52:58 AM JST
0x00ae  /* U+00AE REGISTERED SIGN */
* Fri 24 Jan 2014 04:52:58 AM JST
0x00af  /* U+00AF MACRON */
* Fri 24 Jan 2014 04:52:58 AM JST
0x00b0  /* U+00B0 DEGREE SIGN */
* Fri 24 Jan 2014 04:52:58 AM JST
0x00b1  /* U+00B1 PLUS-MINUS SIGN */
* Fri 24 Jan 2014 04:52:58 AM JST
0x00b2  /* U+00B2 SUPERSCRIPT TWO */
* Fri 24 Jan 2014 04:52:58 AM JST
0x00b3  /* U+00B3 SUPERSCRIPT THREE */
* Fri 24 Jan 2014 04:52:58 AM JST
0x00b4  /* U+00B4 ACUTE ACCENT */
* Fri 24 Jan 2014 04:52:58 AM JST
0x00b5  /* U+00B5 MICRO SIGN */
* Fri 24 Jan 2014 04:52:58 AM JST
0x00b6  /* U+00B6 PILCROW SIGN */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00b7  /* U+00B7 MIDDLE DOT */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00b8  /* U+00B8 CEDILLA */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00b9  /* U+00B9 SUPERSCRIPT ONE */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00ba  /* U+00BA MASCULINE ORDINAL INDICATOR */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00bb  /* U+00BB RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00bc  /* U+00BC VULGAR FRACTION ONE QUARTER */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00bd  /* U+00BD VULGAR FRACTION ONE HALF */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00be  /* U+00BE VULGAR FRACTION THREE QUARTERS */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00bf  /* U+00BF INVERTED QUESTION MARK */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00c0  /* U+00C0 LATIN CAPITAL LETTER A WITH GRAVE */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00c1  /* U+00C1 LATIN CAPITAL LETTER A WITH ACUTE */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00c2  /* U+00C2 LATIN CAPITAL LETTER A WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00c3  /* U+00C3 LATIN CAPITAL LETTER A WITH TILDE */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00c4  /* U+00C4 LATIN CAPITAL LETTER A WITH DIAERESIS */
* Fri 24 Jan 2014 04:52:59 AM JST
0x00c5  /* U+00C5 LATIN CAPITAL LETTER A WITH RING ABOVE */
* Fri 24 Jan 2014 04:53:00 AM JST
0x00c6  /* U+00C6 LATIN CAPITAL LETTER AE */
* Fri 24 Jan 2014 04:53:00 AM JST
0x00c7  /* U+00C7 LATIN CAPITAL LETTER C WITH CEDILLA */
* Fri 24 Jan 2014 04:53:00 AM JST
0x00c8  /* U+00C8 LATIN CAPITAL LETTER E WITH GRAVE */
* Fri 24 Jan 2014 04:53:00 AM JST
0x00c9  /* U+00C9 LATIN CAPITAL LETTER E WITH ACUTE */
* Fri 24 Jan 2014 04:53:00 AM JST
0x00ca  /* U+00CA LATIN CAPITAL LETTER E WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:00 AM JST
0x00cb  /* U+00CB LATIN CAPITAL LETTER E WITH DIAERESIS */
* Fri 24 Jan 2014 04:53:00 AM JST
0x00cc  /* U+00CC LATIN CAPITAL LETTER I WITH GRAVE */
* Fri 24 Jan 2014 04:53:00 AM JST
0x00cd  /* U+00CD LATIN CAPITAL LETTER I WITH ACUTE */
* Fri 24 Jan 2014 04:53:00 AM JST
0x00ce  /* U+00CE LATIN CAPITAL LETTER I WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:00 AM JST
0x00cf  /* U+00CF LATIN CAPITAL LETTER I WITH DIAERESIS */
* Fri 24 Jan 2014 04:53:00 AM JST
0x00d0  /* U+00D0 LATIN CAPITAL LETTER ETH */
* Fri 24 Jan 2014 04:53:00 AM JST
0x00d0  /* deprecated */
* Fri 24 Jan 2014 04:53:00 AM JST
0x00d1  /* U+00D1 LATIN CAPITAL LETTER N WITH TILDE */
* Fri 24 Jan 2014 04:53:00 AM JST
0x00d2  /* U+00D2 LATIN CAPITAL LETTER O WITH GRAVE */
* Fri 24 Jan 2014 04:53:01 AM JST
0x00d3  /* U+00D3 LATIN CAPITAL LETTER O WITH ACUTE */
* Fri 24 Jan 2014 04:53:01 AM JST
0x00d4  /* U+00D4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:01 AM JST
0x00d5  /* U+00D5 LATIN CAPITAL LETTER O WITH TILDE */
* Fri 24 Jan 2014 04:53:01 AM JST
0x00d6  /* U+00D6 LATIN CAPITAL LETTER O WITH DIAERESIS */
* Fri 24 Jan 2014 04:53:01 AM JST
0x00d7  /* U+00D7 MULTIPLICATION SIGN */
* Fri 24 Jan 2014 04:53:01 AM JST
0x00d8  /* U+00D8 LATIN CAPITAL LETTER O WITH STROKE */
* Fri 24 Jan 2014 04:53:01 AM JST
0x00d8  /* U+00D8 LATIN CAPITAL LETTER O WITH STROKE */
* Fri 24 Jan 2014 04:53:01 AM JST
0x00d9  /* U+00D9 LATIN CAPITAL LETTER U WITH GRAVE */
* Fri 24 Jan 2014 04:53:01 AM JST
0x00da  /* U+00DA LATIN CAPITAL LETTER U WITH ACUTE */
* Fri 24 Jan 2014 04:53:01 AM JST
0x00db  /* U+00DB LATIN CAPITAL LETTER U WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00dc  /* U+00DC LATIN CAPITAL LETTER U WITH DIAERESIS */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00dd  /* U+00DD LATIN CAPITAL LETTER Y WITH ACUTE */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00de  /* U+00DE LATIN CAPITAL LETTER THORN */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00de  /* deprecated */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00df  /* U+00DF LATIN SMALL LETTER SHARP S */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00e0  /* U+00E0 LATIN SMALL LETTER A WITH GRAVE */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00e1  /* U+00E1 LATIN SMALL LETTER A WITH ACUTE */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00e2  /* U+00E2 LATIN SMALL LETTER A WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00e3  /* U+00E3 LATIN SMALL LETTER A WITH TILDE */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00e4  /* U+00E4 LATIN SMALL LETTER A WITH DIAERESIS */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00e5  /* U+00E5 LATIN SMALL LETTER A WITH RING ABOVE */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00e6  /* U+00E6 LATIN SMALL LETTER AE */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00e7  /* U+00E7 LATIN SMALL LETTER C WITH CEDILLA */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00e8  /* U+00E8 LATIN SMALL LETTER E WITH GRAVE */
* Fri 24 Jan 2014 04:53:02 AM JST
0x00e9  /* U+00E9 LATIN SMALL LETTER E WITH ACUTE */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00ea  /* U+00EA LATIN SMALL LETTER E WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00eb  /* U+00EB LATIN SMALL LETTER E WITH DIAERESIS */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00ec  /* U+00EC LATIN SMALL LETTER I WITH GRAVE */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00ed  /* U+00ED LATIN SMALL LETTER I WITH ACUTE */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00ee  /* U+00EE LATIN SMALL LETTER I WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00ef  /* U+00EF LATIN SMALL LETTER I WITH DIAERESIS */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00f0  /* U+00F0 LATIN SMALL LETTER ETH */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00f1  /* U+00F1 LATIN SMALL LETTER N WITH TILDE */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00f2  /* U+00F2 LATIN SMALL LETTER O WITH GRAVE */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00f3  /* U+00F3 LATIN SMALL LETTER O WITH ACUTE */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00f4  /* U+00F4 LATIN SMALL LETTER O WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00f5  /* U+00F5 LATIN SMALL LETTER O WITH TILDE */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00f6  /* U+00F6 LATIN SMALL LETTER O WITH DIAERESIS */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00f7  /* U+00F7 DIVISION SIGN */
* Fri 24 Jan 2014 04:53:03 AM JST
0x00f8  /* U+00F8 LATIN SMALL LETTER O WITH STROKE */
* Fri 24 Jan 2014 04:53:04 AM JST
0x00f8  /* U+00F8 LATIN SMALL LETTER O WITH STROKE */
* Fri 24 Jan 2014 04:53:04 AM JST
0x00f9  /* U+00F9 LATIN SMALL LETTER U WITH GRAVE */
* Fri 24 Jan 2014 04:53:04 AM JST
0x00fa  /* U+00FA LATIN SMALL LETTER U WITH ACUTE */
* Fri 24 Jan 2014 04:53:04 AM JST
0x00fb  /* U+00FB LATIN SMALL LETTER U WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:04 AM JST
0x00fc  /* U+00FC LATIN SMALL LETTER U WITH DIAERESIS */
* Fri 24 Jan 2014 04:53:04 AM JST
0x00fd  /* U+00FD LATIN SMALL LETTER Y WITH ACUTE */
* Fri 24 Jan 2014 04:53:04 AM JST
0x00fe  /* U+00FE LATIN SMALL LETTER THORN */
* Fri 24 Jan 2014 04:53:04 AM JST
0x00ff  /* U+00FF LATIN SMALL LETTER Y WITH DIAERESIS */
* Fri 24 Jan 2014 04:53:04 AM JST
*/
* Fri 24 Jan 2014 04:53:04 AM JST
 XK_Aogonek                       0x01a1  /* U+0104 LATIN CAPITAL LETTER A WITH OGONEK */

* Fri 24 Jan 2014 04:53:04 AM JST
0x01a2  /* U+02D8 BREVE */
* Fri 24 Jan 2014 04:53:04 AM JST
0x01a3  /* U+0141 LATIN CAPITAL LETTER L WITH STROKE */
* Fri 24 Jan 2014 04:53:04 AM JST
0x01a5  /* U+013D LATIN CAPITAL LETTER L WITH CARON */
* Fri 24 Jan 2014 04:53:05 AM JST
0x01a6  /* U+015A LATIN CAPITAL LETTER S WITH ACUTE */
* Fri 24 Jan 2014 04:53:05 AM JST
0x01a9  /* U+0160 LATIN CAPITAL LETTER S WITH CARON */
* Fri 24 Jan 2014 04:53:05 AM JST
0x01aa  /* U+015E LATIN CAPITAL LETTER S WITH CEDILLA */
* Fri 24 Jan 2014 04:53:05 AM JST
0x01ab  /* U+0164 LATIN CAPITAL LETTER T WITH CARON */
* Fri 24 Jan 2014 04:53:05 AM JST
0x01ac  /* U+0179 LATIN CAPITAL LETTER Z WITH ACUTE */
* Fri 24 Jan 2014 04:53:05 AM JST
0x01ae  /* U+017D LATIN CAPITAL LETTER Z WITH CARON */
* Fri 24 Jan 2014 04:53:05 AM JST
0x01af  /* U+017B LATIN CAPITAL LETTER Z WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:05 AM JST
0x01b1  /* U+0105 LATIN SMALL LETTER A WITH OGONEK */
* Fri 24 Jan 2014 04:53:05 AM JST
0x01b2  /* U+02DB OGONEK */
* Fri 24 Jan 2014 04:53:05 AM JST
0x01b3  /* U+0142 LATIN SMALL LETTER L WITH STROKE */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01b5  /* U+013E LATIN SMALL LETTER L WITH CARON */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01b6  /* U+015B LATIN SMALL LETTER S WITH ACUTE */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01b7  /* U+02C7 CARON */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01b9  /* U+0161 LATIN SMALL LETTER S WITH CARON */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01ba  /* U+015F LATIN SMALL LETTER S WITH CEDILLA */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01bb  /* U+0165 LATIN SMALL LETTER T WITH CARON */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01bc  /* U+017A LATIN SMALL LETTER Z WITH ACUTE */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01bd  /* U+02DD DOUBLE ACUTE ACCENT */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01be  /* U+017E LATIN SMALL LETTER Z WITH CARON */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01bf  /* U+017C LATIN SMALL LETTER Z WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01c0  /* U+0154 LATIN CAPITAL LETTER R WITH ACUTE */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01c3  /* U+0102 LATIN CAPITAL LETTER A WITH BREVE */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01c5  /* U+0139 LATIN CAPITAL LETTER L WITH ACUTE */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01c6  /* U+0106 LATIN CAPITAL LETTER C WITH ACUTE */
* Fri 24 Jan 2014 04:53:06 AM JST
0x01c8  /* U+010C LATIN CAPITAL LETTER C WITH CARON */
* Fri 24 Jan 2014 04:53:07 AM JST
0x01ca  /* U+0118 LATIN CAPITAL LETTER E WITH OGONEK */
* Fri 24 Jan 2014 04:53:07 AM JST
0x01cc  /* U+011A LATIN CAPITAL LETTER E WITH CARON */
* Fri 24 Jan 2014 04:53:07 AM JST
0x01cf  /* U+010E LATIN CAPITAL LETTER D WITH CARON */
* Fri 24 Jan 2014 04:53:07 AM JST
0x01d0  /* U+0110 LATIN CAPITAL LETTER D WITH STROKE */
* Fri 24 Jan 2014 04:53:07 AM JST
0x01d1  /* U+0143 LATIN CAPITAL LETTER N WITH ACUTE */
* Fri 24 Jan 2014 04:53:07 AM JST
0x01d2  /* U+0147 LATIN CAPITAL LETTER N WITH CARON */
* Fri 24 Jan 2014 04:53:07 AM JST
0x01d5  /* U+0150 LATIN CAPITAL LETTER O WITH DOUBLE ACUTE */
* Fri 24 Jan 2014 04:53:07 AM JST
0x01d8  /* U+0158 LATIN CAPITAL LETTER R WITH CARON */
* Fri 24 Jan 2014 04:53:07 AM JST
0x01d9  /* U+016E LATIN CAPITAL LETTER U WITH RING ABOVE */
* Fri 24 Jan 2014 04:53:07 AM JST
0x01db  /* U+0170 LATIN CAPITAL LETTER U WITH DOUBLE ACUTE */
* Fri 24 Jan 2014 04:53:07 AM JST
0x01de  /* U+0162 LATIN CAPITAL LETTER T WITH CEDILLA */
* Fri 24 Jan 2014 04:53:07 AM JST
0x01e0  /* U+0155 LATIN SMALL LETTER R WITH ACUTE */
* Fri 24 Jan 2014 04:53:07 AM JST
0x01e3  /* U+0103 LATIN SMALL LETTER A WITH BREVE */
* Fri 24 Jan 2014 04:53:07 AM JST
0x01e5  /* U+013A LATIN SMALL LETTER L WITH ACUTE */
* Fri 24 Jan 2014 04:53:08 AM JST
0x01e6  /* U+0107 LATIN SMALL LETTER C WITH ACUTE */
* Fri 24 Jan 2014 04:53:08 AM JST
0x01e8  /* U+010D LATIN SMALL LETTER C WITH CARON */
* Fri 24 Jan 2014 04:53:08 AM JST
0x01ea  /* U+0119 LATIN SMALL LETTER E WITH OGONEK */
* Fri 24 Jan 2014 04:53:08 AM JST
0x01ec  /* U+011B LATIN SMALL LETTER E WITH CARON */
* Fri 24 Jan 2014 04:53:08 AM JST
0x01ef  /* U+010F LATIN SMALL LETTER D WITH CARON */
* Fri 24 Jan 2014 04:53:08 AM JST
0x01f0  /* U+0111 LATIN SMALL LETTER D WITH STROKE */
* Fri 24 Jan 2014 04:53:08 AM JST
0x01f1  /* U+0144 LATIN SMALL LETTER N WITH ACUTE */
* Fri 24 Jan 2014 04:53:08 AM JST
0x01f2  /* U+0148 LATIN SMALL LETTER N WITH CARON */
* Fri 24 Jan 2014 04:53:08 AM JST
0x01f5  /* U+0151 LATIN SMALL LETTER O WITH DOUBLE ACUTE */
* Fri 24 Jan 2014 04:53:08 AM JST
0x01f8  /* U+0159 LATIN SMALL LETTER R WITH CARON */
* Fri 24 Jan 2014 04:53:08 AM JST
0x01f9  /* U+016F LATIN SMALL LETTER U WITH RING ABOVE */
* Fri 24 Jan 2014 04:53:08 AM JST
0x01fb  /* U+0171 LATIN SMALL LETTER U WITH DOUBLE ACUTE */
* Fri 24 Jan 2014 04:53:08 AM JST
0x01fe  /* U+0163 LATIN SMALL LETTER T WITH CEDILLA */
* Fri 24 Jan 2014 04:53:08 AM JST
0x01ff  /* U+02D9 DOT ABOVE */
* Fri 24 Jan 2014 04:53:09 AM JST
*/
* Fri 24 Jan 2014 04:53:09 AM JST
 XK_Hstroke                       0x02a1  /* U+0126 LATIN CAPITAL LETTER H WITH STROKE */

* Fri 24 Jan 2014 04:53:09 AM JST
0x02a6  /* U+0124 LATIN CAPITAL LETTER H WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:09 AM JST
0x02a9  /* U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:09 AM JST
0x02ab  /* U+011E LATIN CAPITAL LETTER G WITH BREVE */
* Fri 24 Jan 2014 04:53:09 AM JST
0x02ac  /* U+0134 LATIN CAPITAL LETTER J WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:09 AM JST
0x02b1  /* U+0127 LATIN SMALL LETTER H WITH STROKE */
* Fri 24 Jan 2014 04:53:09 AM JST
0x02b6  /* U+0125 LATIN SMALL LETTER H WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:09 AM JST
0x02b9  /* U+0131 LATIN SMALL LETTER DOTLESS I */
* Fri 24 Jan 2014 04:53:10 AM JST
0x02bb  /* U+011F LATIN SMALL LETTER G WITH BREVE */
* Fri 24 Jan 2014 04:53:10 AM JST
0x02bc  /* U+0135 LATIN SMALL LETTER J WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:10 AM JST
0x02c5  /* U+010A LATIN CAPITAL LETTER C WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:10 AM JST
0x02c6  /* U+0108 LATIN CAPITAL LETTER C WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:10 AM JST
0x02d5  /* U+0120 LATIN CAPITAL LETTER G WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:10 AM JST
0x02d8  /* U+011C LATIN CAPITAL LETTER G WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:10 AM JST
0x02dd  /* U+016C LATIN CAPITAL LETTER U WITH BREVE */
* Fri 24 Jan 2014 04:53:10 AM JST
0x02de  /* U+015C LATIN CAPITAL LETTER S WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:10 AM JST
0x02e5  /* U+010B LATIN SMALL LETTER C WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:11 AM JST
0x02e6  /* U+0109 LATIN SMALL LETTER C WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:11 AM JST
0x02f5  /* U+0121 LATIN SMALL LETTER G WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:11 AM JST
0x02f8  /* U+011D LATIN SMALL LETTER G WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:11 AM JST
0x02fd  /* U+016D LATIN SMALL LETTER U WITH BREVE */
* Fri 24 Jan 2014 04:53:11 AM JST
0x02fe  /* U+015D LATIN SMALL LETTER S WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:11 AM JST
*/
* Fri 24 Jan 2014 04:53:11 AM JST
 XK_kra                           0x03a2  /* U+0138 LATIN SMALL LETTER KRA */

* Fri 24 Jan 2014 04:53:11 AM JST
0x03a2  /* deprecated */
* Fri 24 Jan 2014 04:53:11 AM JST
0x03a3  /* U+0156 LATIN CAPITAL LETTER R WITH CEDILLA */
* Fri 24 Jan 2014 04:53:11 AM JST
0x03a5  /* U+0128 LATIN CAPITAL LETTER I WITH TILDE */
* Fri 24 Jan 2014 04:53:11 AM JST
0x03a6  /* U+013B LATIN CAPITAL LETTER L WITH CEDILLA */
* Fri 24 Jan 2014 04:53:11 AM JST
0x03aa  /* U+0112 LATIN CAPITAL LETTER E WITH MACRON */
* Fri 24 Jan 2014 04:53:11 AM JST
0x03ab  /* U+0122 LATIN CAPITAL LETTER G WITH CEDILLA */
* Fri 24 Jan 2014 04:53:11 AM JST
0x03ac  /* U+0166 LATIN CAPITAL LETTER T WITH STROKE */
* Fri 24 Jan 2014 04:53:12 AM JST
0x03b3  /* U+0157 LATIN SMALL LETTER R WITH CEDILLA */
* Fri 24 Jan 2014 04:53:12 AM JST
0x03b5  /* U+0129 LATIN SMALL LETTER I WITH TILDE */
* Fri 24 Jan 2014 04:53:12 AM JST
0x03b6  /* U+013C LATIN SMALL LETTER L WITH CEDILLA */
* Fri 24 Jan 2014 04:53:12 AM JST
0x03ba  /* U+0113 LATIN SMALL LETTER E WITH MACRON */
* Fri 24 Jan 2014 04:53:12 AM JST
0x03bb  /* U+0123 LATIN SMALL LETTER G WITH CEDILLA */
* Fri 24 Jan 2014 04:53:12 AM JST
0x03bc  /* U+0167 LATIN SMALL LETTER T WITH STROKE */
* Fri 24 Jan 2014 04:53:12 AM JST
0x03bd  /* U+014A LATIN CAPITAL LETTER ENG */
* Fri 24 Jan 2014 04:53:12 AM JST
0x03bf  /* U+014B LATIN SMALL LETTER ENG */
* Fri 24 Jan 2014 04:53:12 AM JST
0x03c0  /* U+0100 LATIN CAPITAL LETTER A WITH MACRON */
* Fri 24 Jan 2014 04:53:12 AM JST
0x03c7  /* U+012E LATIN CAPITAL LETTER I WITH OGONEK */
* Fri 24 Jan 2014 04:53:12 AM JST
0x03cc  /* U+0116 LATIN CAPITAL LETTER E WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:12 AM JST
0x03cf  /* U+012A LATIN CAPITAL LETTER I WITH MACRON */
* Fri 24 Jan 2014 04:53:12 AM JST
0x03d1  /* U+0145 LATIN CAPITAL LETTER N WITH CEDILLA */
* Fri 24 Jan 2014 04:53:13 AM JST
0x03d2  /* U+014C LATIN CAPITAL LETTER O WITH MACRON */
* Fri 24 Jan 2014 04:53:13 AM JST
0x03d3  /* U+0136 LATIN CAPITAL LETTER K WITH CEDILLA */
* Fri 24 Jan 2014 04:53:13 AM JST
0x03d9  /* U+0172 LATIN CAPITAL LETTER U WITH OGONEK */
* Fri 24 Jan 2014 04:53:13 AM JST
0x03dd  /* U+0168 LATIN CAPITAL LETTER U WITH TILDE */
* Fri 24 Jan 2014 04:53:13 AM JST
0x03de  /* U+016A LATIN CAPITAL LETTER U WITH MACRON */
* Fri 24 Jan 2014 04:53:13 AM JST
0x03e0  /* U+0101 LATIN SMALL LETTER A WITH MACRON */
* Fri 24 Jan 2014 04:53:13 AM JST
0x03e7  /* U+012F LATIN SMALL LETTER I WITH OGONEK */
* Fri 24 Jan 2014 04:53:13 AM JST
0x03ec  /* U+0117 LATIN SMALL LETTER E WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:13 AM JST
0x03ef  /* U+012B LATIN SMALL LETTER I WITH MACRON */
* Fri 24 Jan 2014 04:53:14 AM JST
0x03f1  /* U+0146 LATIN SMALL LETTER N WITH CEDILLA */
* Fri 24 Jan 2014 04:53:14 AM JST
0x03f2  /* U+014D LATIN SMALL LETTER O WITH MACRON */
* Fri 24 Jan 2014 04:53:14 AM JST
0x03f3  /* U+0137 LATIN SMALL LETTER K WITH CEDILLA */
* Fri 24 Jan 2014 04:53:14 AM JST
0x03f9  /* U+0173 LATIN SMALL LETTER U WITH OGONEK */
* Fri 24 Jan 2014 04:53:14 AM JST
0x03fd  /* U+0169 LATIN SMALL LETTER U WITH TILDE */
* Fri 24 Jan 2014 04:53:14 AM JST
0x03fe  /* U+016B LATIN SMALL LETTER U WITH MACRON */
* Fri 24 Jan 2014 04:53:14 AM JST
*/
* Fri 24 Jan 2014 04:53:14 AM JST
 XK_Wcircumflex                0x1000174  /* U+0174 LATIN CAPITAL LETTER W WITH CIRCUMFLEX */

* Fri 24 Jan 2014 04:53:14 AM JST
0x1000175  /* U+0175 LATIN SMALL LETTER W WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:14 AM JST
0x1000176  /* U+0176 LATIN CAPITAL LETTER Y WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:14 AM JST
0x1000177  /* U+0177 LATIN SMALL LETTER Y WITH CIRCUMFLEX */
* Fri 24 Jan 2014 04:53:14 AM JST
0x1001e02  /* U+1E02 LATIN CAPITAL LETTER B WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:14 AM JST
0x1001e03  /* U+1E03 LATIN SMALL LETTER B WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:14 AM JST
0x1001e0a  /* U+1E0A LATIN CAPITAL LETTER D WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:15 AM JST
0x1001e0b  /* U+1E0B LATIN SMALL LETTER D WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:15 AM JST
0x1001e1e  /* U+1E1E LATIN CAPITAL LETTER F WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:15 AM JST
0x1001e1f  /* U+1E1F LATIN SMALL LETTER F WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:15 AM JST
0x1001e40  /* U+1E40 LATIN CAPITAL LETTER M WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:15 AM JST
0x1001e41  /* U+1E41 LATIN SMALL LETTER M WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:15 AM JST
0x1001e56  /* U+1E56 LATIN CAPITAL LETTER P WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:16 AM JST
0x1001e57  /* U+1E57 LATIN SMALL LETTER P WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:16 AM JST
0x1001e60  /* U+1E60 LATIN CAPITAL LETTER S WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:16 AM JST
0x1001e61  /* U+1E61 LATIN SMALL LETTER S WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:16 AM JST
0x1001e6a  /* U+1E6A LATIN CAPITAL LETTER T WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:16 AM JST
0x1001e6b  /* U+1E6B LATIN SMALL LETTER T WITH DOT ABOVE */
* Fri 24 Jan 2014 04:53:16 AM JST
0x1001e80  /* U+1E80 LATIN CAPITAL LETTER W WITH GRAVE */
* Fri 24 Jan 2014 04:53:16 AM JST
0x1001e81  /* U+1E81 LATIN SMALL LETTER W WITH GRAVE */
* Fri 24 Jan 2014 04:53:16 AM JST
0x1001e82  /* U+1E82 LATIN CAPITAL LETTER W WITH ACUTE */
* Fri 24 Jan 2014 04:53:16 AM JST
0x1001e83  /* U+1E83 LATIN SMALL LETTER W WITH ACUTE */
* Fri 24 Jan 2014 04:53:16 AM JST
0x1001e84  /* U+1E84 LATIN CAPITAL LETTER W WITH DIAERESIS */
* Fri 24 Jan 2014 04:53:16 AM JST
0x1001e85  /* U+1E85 LATIN SMALL LETTER W WITH DIAERESIS */
* Fri 24 Jan 2014 04:53:17 AM JST
0x1001ef2  /* U+1EF2 LATIN CAPITAL LETTER Y WITH GRAVE */
* Fri 24 Jan 2014 04:53:17 AM JST
0x1001ef3  /* U+1EF3 LATIN SMALL LETTER Y WITH GRAVE */
* Fri 24 Jan 2014 04:53:17 AM JST
*/
* Fri 24 Jan 2014 04:53:17 AM JST
 XK_OE                            0x13bc  /* U+0152 LATIN CAPITAL LIGATURE OE */

* Fri 24 Jan 2014 04:53:17 AM JST
0x13bd  /* U+0153 LATIN SMALL LIGATURE OE */
* Fri 24 Jan 2014 04:53:17 AM JST
0x13be  /* U+0178 LATIN CAPITAL LETTER Y WITH DIAERESIS */
* Fri 24 Jan 2014 04:53:17 AM JST
*/
* Fri 24 Jan 2014 04:53:17 AM JST
 XK_overline                      0x047e  /* U+203E OVERLINE */

* Fri 24 Jan 2014 04:53:17 AM JST
0x04a1  /* U+3002 IDEOGRAPHIC FULL STOP */
* Fri 24 Jan 2014 04:53:17 AM JST
0x04a2  /* U+300C LEFT CORNER BRACKET */
* Fri 24 Jan 2014 04:53:17 AM JST
0x04a3  /* U+300D RIGHT CORNER BRACKET */
* Fri 24 Jan 2014 04:53:17 AM JST
0x04a4  /* U+3001 IDEOGRAPHIC COMMA */
* Fri 24 Jan 2014 04:53:17 AM JST
0x04a5  /* U+30FB KATAKANA MIDDLE DOT */
* Fri 24 Jan 2014 04:53:17 AM JST
0x04a5  /* deprecated */
* Fri 24 Jan 2014 04:53:18 AM JST
0x04a6  /* U+30F2 KATAKANA LETTER WO */
* Fri 24 Jan 2014 04:53:18 AM JST
0x04a7  /* U+30A1 KATAKANA LETTER SMALL A */
* Fri 24 Jan 2014 04:53:18 AM JST
0x04a8  /* U+30A3 KATAKANA LETTER SMALL I */
* Fri 24 Jan 2014 04:53:18 AM JST
0x04a9  /* U+30A5 KATAKANA LETTER SMALL U */
* Fri 24 Jan 2014 04:53:18 AM JST
0x04aa  /* U+30A7 KATAKANA LETTER SMALL E */
* Fri 24 Jan 2014 04:53:18 AM JST
0x04ab  /* U+30A9 KATAKANA LETTER SMALL O */
* Fri 24 Jan 2014 04:53:18 AM JST
0x04ac  /* U+30E3 KATAKANA LETTER SMALL YA */
* Fri 24 Jan 2014 04:53:19 AM JST
0x04ad  /* U+30E5 KATAKANA LETTER SMALL YU */
* Fri 24 Jan 2014 04:53:19 AM JST
0x04ae  /* U+30E7 KATAKANA LETTER SMALL YO */
* Fri 24 Jan 2014 04:53:19 AM JST
0x04af  /* U+30C3 KATAKANA LETTER SMALL TU */
* Fri 24 Jan 2014 04:53:19 AM JST
0x04af  /* deprecated */
* Fri 24 Jan 2014 04:53:19 AM JST
0x04b0  /* U+30FC KATAKANA-HIRAGANA PROLONGED SOUND MARK */
* Fri 24 Jan 2014 04:53:19 AM JST
0x04b1  /* U+30A2 KATAKANA LETTER A */
* Fri 24 Jan 2014 04:53:19 AM JST
0x04b2  /* U+30A4 KATAKANA LETTER I */
* Fri 24 Jan 2014 04:53:19 AM JST
0x04b3  /* U+30A6 KATAKANA LETTER U */
* Fri 24 Jan 2014 04:53:19 AM JST
0x04b4  /* U+30A8 KATAKANA LETTER E */
* Fri 24 Jan 2014 04:53:19 AM JST
0x04b5  /* U+30AA KATAKANA LETTER O */
* Fri 24 Jan 2014 04:53:19 AM JST
0x04b6  /* U+30AB KATAKANA LETTER KA */
* Fri 24 Jan 2014 04:53:19 AM JST
0x04b7  /* U+30AD KATAKANA LETTER KI */
* Fri 24 Jan 2014 04:53:20 AM JST
0x04b8  /* U+30AF KATAKANA LETTER KU */
* Fri 24 Jan 2014 04:53:20 AM JST
0x04b9  /* U+30B1 KATAKANA LETTER KE */
* Fri 24 Jan 2014 04:53:20 AM JST
0x04ba  /* U+30B3 KATAKANA LETTER KO */
* Fri 24 Jan 2014 04:53:20 AM JST
0x04bb  /* U+30B5 KATAKANA LETTER SA */
* Fri 24 Jan 2014 04:53:20 AM JST
0x04bc  /* U+30B7 KATAKANA LETTER SI */
* Fri 24 Jan 2014 04:53:20 AM JST
0x04bd  /* U+30B9 KATAKANA LETTER SU */
* Fri 24 Jan 2014 04:53:20 AM JST
0x04be  /* U+30BB KATAKANA LETTER SE */
* Fri 24 Jan 2014 04:53:20 AM JST
0x04bf  /* U+30BD KATAKANA LETTER SO */
* Fri 24 Jan 2014 04:53:20 AM JST
0x04c0  /* U+30BF KATAKANA LETTER TA */
* Fri 24 Jan 2014 04:53:20 AM JST
0x04c1  /* U+30C1 KATAKANA LETTER TI */
* Fri 24 Jan 2014 04:53:20 AM JST
0x04c1  /* deprecated */
* Fri 24 Jan 2014 04:53:20 AM JST
0x04c2  /* U+30C4 KATAKANA LETTER TU */
* Fri 24 Jan 2014 04:53:20 AM JST
0x04c2  /* deprecated */
* Fri 24 Jan 2014 04:53:21 AM JST
0x04c3  /* U+30C6 KATAKANA LETTER TE */
* Fri 24 Jan 2014 04:53:21 AM JST
0x04c4  /* U+30C8 KATAKANA LETTER TO */
* Fri 24 Jan 2014 04:53:21 AM JST
0x04c5  /* U+30CA KATAKANA LETTER NA */
* Fri 24 Jan 2014 04:53:21 AM JST
0x04c6  /* U+30CB KATAKANA LETTER NI */
* Fri 24 Jan 2014 04:53:21 AM JST
0x04c7  /* U+30CC KATAKANA LETTER NU */
* Fri 24 Jan 2014 04:53:21 AM JST
0x04c8  /* U+30CD KATAKANA LETTER NE */
* Fri 24 Jan 2014 04:53:21 AM JST
0x04c9  /* U+30CE KATAKANA LETTER NO */
* Fri 24 Jan 2014 04:53:21 AM JST
0x04ca  /* U+30CF KATAKANA LETTER HA */
* Fri 24 Jan 2014 04:53:21 AM JST
0x04cb  /* U+30D2 KATAKANA LETTER HI */
* Fri 24 Jan 2014 04:53:21 AM JST
0x04cc  /* U+30D5 KATAKANA LETTER HU */
* Fri 24 Jan 2014 04:53:21 AM JST
0x04cc  /* deprecated */
* Fri 24 Jan 2014 04:53:21 AM JST
0x04cd  /* U+30D8 KATAKANA LETTER HE */
* Fri 24 Jan 2014 04:53:21 AM JST
0x04ce  /* U+30DB KATAKANA LETTER HO */
* Fri 24 Jan 2014 04:53:22 AM JST
0x04cf  /* U+30DE KATAKANA LETTER MA */
* Fri 24 Jan 2014 04:53:22 AM JST
0x04d0  /* U+30DF KATAKANA LETTER MI */
* Fri 24 Jan 2014 04:53:22 AM JST
0x04d1  /* U+30E0 KATAKANA LETTER MU */
* Fri 24 Jan 2014 04:53:22 AM JST
0x04d2  /* U+30E1 KATAKANA LETTER ME */
* Fri 24 Jan 2014 04:53:22 AM JST
0x04d3  /* U+30E2 KATAKANA LETTER MO */
* Fri 24 Jan 2014 04:53:22 AM JST
0x04d4  /* U+30E4 KATAKANA LETTER YA */
* Fri 24 Jan 2014 04:53:22 AM JST
0x04d5  /* U+30E6 KATAKANA LETTER YU */
* Fri 24 Jan 2014 04:53:22 AM JST
0x04d6  /* U+30E8 KATAKANA LETTER YO */
* Fri 24 Jan 2014 04:53:22 AM JST
0x04d7  /* U+30E9 KATAKANA LETTER RA */
* Fri 24 Jan 2014 04:53:22 AM JST
0x04d8  /* U+30EA KATAKANA LETTER RI */
* Fri 24 Jan 2014 04:53:22 AM JST
0x04d9  /* U+30EB KATAKANA LETTER RU */
* Fri 24 Jan 2014 04:53:22 AM JST
0x04da  /* U+30EC KATAKANA LETTER RE */
* Fri 24 Jan 2014 04:53:23 AM JST
0x04db  /* U+30ED KATAKANA LETTER RO */
* Fri 24 Jan 2014 04:53:23 AM JST
0x04dc  /* U+30EF KATAKANA LETTER WA */
* Fri 24 Jan 2014 04:53:23 AM JST
0x04dd  /* U+30F3 KATAKANA LETTER N */
* Fri 24 Jan 2014 04:53:23 AM JST
0x04de  /* U+309B KATAKANA-HIRAGANA VOICED SOUND MARK */
* Fri 24 Jan 2014 04:53:23 AM JST
0x04df  /* U+309C KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK */
* Fri 24 Jan 2014 04:53:23 AM JST
0xff7e  /* Alias for mode_switch */
* Fri 24 Jan 2014 04:53:23 AM JST
*/
* Fri 24 Jan 2014 04:53:23 AM JST
 XK_Farsi_0                    0x10006f0  /* U+06F0 EXTENDED ARABIC-INDIC DIGIT ZERO */

* Fri 24 Jan 2014 04:53:23 AM JST
0x10006f1  /* U+06F1 EXTENDED ARABIC-INDIC DIGIT ONE */
* Fri 24 Jan 2014 04:53:23 AM JST
0x10006f2  /* U+06F2 EXTENDED ARABIC-INDIC DIGIT TWO */
* Fri 24 Jan 2014 04:53:24 AM JST
0x10006f3  /* U+06F3 EXTENDED ARABIC-INDIC DIGIT THREE */
* Fri 24 Jan 2014 04:53:24 AM JST
0x10006f4  /* U+06F4 EXTENDED ARABIC-INDIC DIGIT FOUR */
* Fri 24 Jan 2014 04:53:24 AM JST
0x10006f5  /* U+06F5 EXTENDED ARABIC-INDIC DIGIT FIVE */
* Fri 24 Jan 2014 04:53:24 AM JST
0x10006f6  /* U+06F6 EXTENDED ARABIC-INDIC DIGIT SIX */
* Fri 24 Jan 2014 04:53:24 AM JST
0x10006f7  /* U+06F7 EXTENDED ARABIC-INDIC DIGIT SEVEN */
* Fri 24 Jan 2014 04:53:24 AM JST
0x10006f8  /* U+06F8 EXTENDED ARABIC-INDIC DIGIT EIGHT */
* Fri 24 Jan 2014 04:53:24 AM JST
0x10006f9  /* U+06F9 EXTENDED ARABIC-INDIC DIGIT NINE */
* Fri 24 Jan 2014 04:53:24 AM JST
0x100066a  /* U+066A ARABIC PERCENT SIGN */
* Fri 24 Jan 2014 04:53:24 AM JST
0x1000670  /* U+0670 ARABIC LETTER SUPERSCRIPT ALEF */
* Fri 24 Jan 2014 04:53:24 AM JST
0x1000679  /* U+0679 ARABIC LETTER TTEH */
* Fri 24 Jan 2014 04:53:24 AM JST
0x100067e  /* U+067E ARABIC LETTER PEH */
* Fri 24 Jan 2014 04:53:24 AM JST
0x1000686  /* U+0686 ARABIC LETTER TCHEH */
* Fri 24 Jan 2014 04:53:24 AM JST
0x1000688  /* U+0688 ARABIC LETTER DDAL */
* Fri 24 Jan 2014 04:53:25 AM JST
0x1000691  /* U+0691 ARABIC LETTER RREH */
* Fri 24 Jan 2014 04:53:25 AM JST
0x05ac  /* U+060C ARABIC COMMA */
* Fri 24 Jan 2014 04:53:25 AM JST
0x10006d4  /* U+06D4 ARABIC FULL STOP */
* Fri 24 Jan 2014 04:53:25 AM JST
0x1000660  /* U+0660 ARABIC-INDIC DIGIT ZERO */
* Fri 24 Jan 2014 04:53:25 AM JST
0x1000661  /* U+0661 ARABIC-INDIC DIGIT ONE */
* Fri 24 Jan 2014 04:53:25 AM JST
0x1000662  /* U+0662 ARABIC-INDIC DIGIT TWO */
* Fri 24 Jan 2014 04:53:25 AM JST
0x1000663  /* U+0663 ARABIC-INDIC DIGIT THREE */
* Fri 24 Jan 2014 04:53:25 AM JST
0x1000664  /* U+0664 ARABIC-INDIC DIGIT FOUR */
* Fri 24 Jan 2014 04:53:25 AM JST
0x1000665  /* U+0665 ARABIC-INDIC DIGIT FIVE */
* Fri 24 Jan 2014 04:53:25 AM JST
0x1000666  /* U+0666 ARABIC-INDIC DIGIT SIX */
* Fri 24 Jan 2014 04:53:25 AM JST
0x1000667  /* U+0667 ARABIC-INDIC DIGIT SEVEN */
* Fri 24 Jan 2014 04:53:25 AM JST
0x1000668  /* U+0668 ARABIC-INDIC DIGIT EIGHT */
* Fri 24 Jan 2014 04:53:25 AM JST
0x1000669  /* U+0669 ARABIC-INDIC DIGIT NINE */
* Fri 24 Jan 2014 04:53:26 AM JST
0x05bb  /* U+061B ARABIC SEMICOLON */
* Fri 24 Jan 2014 04:53:26 AM JST
0x05bf  /* U+061F ARABIC QUESTION MARK */
* Fri 24 Jan 2014 04:53:26 AM JST
0x05c1  /* U+0621 ARABIC LETTER HAMZA */
* Fri 24 Jan 2014 04:53:26 AM JST
0x05c2  /* U+0622 ARABIC LETTER ALEF WITH MADDA ABOVE */
* Fri 24 Jan 2014 04:53:26 AM JST
0x05c3  /* U+0623 ARABIC LETTER ALEF WITH HAMZA ABOVE */
* Fri 24 Jan 2014 04:53:26 AM JST
0x05c4  /* U+0624 ARABIC LETTER WAW WITH HAMZA ABOVE */
* Fri 24 Jan 2014 04:53:26 AM JST
0x05c5  /* U+0625 ARABIC LETTER ALEF WITH HAMZA BELOW */
* Fri 24 Jan 2014 04:53:26 AM JST
0x05c6  /* U+0626 ARABIC LETTER YEH WITH HAMZA ABOVE */
* Fri 24 Jan 2014 04:53:26 AM JST
0x05c7  /* U+0627 ARABIC LETTER ALEF */
* Fri 24 Jan 2014 04:53:26 AM JST
0x05c8  /* U+0628 ARABIC LETTER BEH */
* Fri 24 Jan 2014 04:53:26 AM JST
0x05c9  /* U+0629 ARABIC LETTER TEH MARBUTA */
* Fri 24 Jan 2014 04:53:26 AM JST
0x05ca  /* U+062A ARABIC LETTER TEH */
* Fri 24 Jan 2014 04:53:26 AM JST
0x05cb  /* U+062B ARABIC LETTER THEH */
* Fri 24 Jan 2014 04:53:26 AM JST
0x05cc  /* U+062C ARABIC LETTER JEEM */
* Fri 24 Jan 2014 04:53:27 AM JST
0x05cd  /* U+062D ARABIC LETTER HAH */
* Fri 24 Jan 2014 04:53:27 AM JST
0x05ce  /* U+062E ARABIC LETTER KHAH */
* Fri 24 Jan 2014 04:53:27 AM JST
0x05cf  /* U+062F ARABIC LETTER DAL */
* Fri 24 Jan 2014 04:53:27 AM JST
0x05d0  /* U+0630 ARABIC LETTER THAL */
* Fri 24 Jan 2014 04:53:27 AM JST
0x05d1  /* U+0631 ARABIC LETTER REH */
* Fri 24 Jan 2014 04:53:27 AM JST
0x05d2  /* U+0632 ARABIC LETTER ZAIN */
* Fri 24 Jan 2014 04:53:27 AM JST
0x05d3  /* U+0633 ARABIC LETTER SEEN */
* Fri 24 Jan 2014 04:53:27 AM JST
0x05d4  /* U+0634 ARABIC LETTER SHEEN */
* Fri 24 Jan 2014 04:53:27 AM JST
0x05d5  /* U+0635 ARABIC LETTER SAD */
* Fri 24 Jan 2014 04:53:28 AM JST
0x05d6  /* U+0636 ARABIC LETTER DAD */
* Fri 24 Jan 2014 04:53:28 AM JST
0x05d7  /* U+0637 ARABIC LETTER TAH */
* Fri 24 Jan 2014 04:53:28 AM JST
0x05d8  /* U+0638 ARABIC LETTER ZAH */
* Fri 24 Jan 2014 04:53:28 AM JST
0x05d9  /* U+0639 ARABIC LETTER AIN */
* Fri 24 Jan 2014 04:53:28 AM JST
0x05da  /* U+063A ARABIC LETTER GHAIN */
* Fri 24 Jan 2014 04:53:28 AM JST
0x05e0  /* U+0640 ARABIC TATWEEL */
* Fri 24 Jan 2014 04:53:28 AM JST
0x05e1  /* U+0641 ARABIC LETTER FEH */
* Fri 24 Jan 2014 04:53:28 AM JST
0x05e2  /* U+0642 ARABIC LETTER QAF */
* Fri 24 Jan 2014 04:53:28 AM JST
0x05e3  /* U+0643 ARABIC LETTER KAF */
* Fri 24 Jan 2014 04:53:28 AM JST
0x05e4  /* U+0644 ARABIC LETTER LAM */
* Fri 24 Jan 2014 04:53:28 AM JST
0x05e5  /* U+0645 ARABIC LETTER MEEM */
* Fri 24 Jan 2014 04:53:28 AM JST
0x05e6  /* U+0646 ARABIC LETTER NOON */
* Fri 24 Jan 2014 04:53:28 AM JST
0x05e7  /* U+0647 ARABIC LETTER HEH */
* Fri 24 Jan 2014 04:53:29 AM JST
0x05e7  /* deprecated */
* Fri 24 Jan 2014 04:53:29 AM JST
0x05e8  /* U+0648 ARABIC LETTER WAW */
* Fri 24 Jan 2014 04:53:29 AM JST
0x05e9  /* U+0649 ARABIC LETTER ALEF MAKSURA */
* Fri 24 Jan 2014 04:53:29 AM JST
0x05ea  /* U+064A ARABIC LETTER YEH */
* Fri 24 Jan 2014 04:53:29 AM JST
0x05eb  /* U+064B ARABIC FATHATAN */
* Fri 24 Jan 2014 04:53:29 AM JST
0x05ec  /* U+064C ARABIC DAMMATAN */
* Fri 24 Jan 2014 04:53:29 AM JST
0x05ed  /* U+064D ARABIC KASRATAN */
* Fri 24 Jan 2014 04:53:29 AM JST
0x05ee  /* U+064E ARABIC FATHA */
* Fri 24 Jan 2014 04:53:29 AM JST
0x05ef  /* U+064F ARABIC DAMMA */
* Fri 24 Jan 2014 04:53:29 AM JST
0x05f0  /* U+0650 ARABIC KASRA */
* Fri 24 Jan 2014 04:53:29 AM JST
0x05f1  /* U+0651 ARABIC SHADDA */
* Fri 24 Jan 2014 04:53:29 AM JST
0x05f2  /* U+0652 ARABIC SUKUN */
* Fri 24 Jan 2014 04:53:29 AM JST
0x1000653  /* U+0653 ARABIC MADDAH ABOVE */
* Fri 24 Jan 2014 04:53:30 AM JST
0x1000654  /* U+0654 ARABIC HAMZA ABOVE */
* Fri 24 Jan 2014 04:53:30 AM JST
0x1000655  /* U+0655 ARABIC HAMZA BELOW */
* Fri 24 Jan 2014 04:53:30 AM JST
0x1000698  /* U+0698 ARABIC LETTER JEH */
* Fri 24 Jan 2014 04:53:30 AM JST
0x10006a4  /* U+06A4 ARABIC LETTER VEH */
* Fri 24 Jan 2014 04:53:30 AM JST
0x10006a9  /* U+06A9 ARABIC LETTER KEHEH */
* Fri 24 Jan 2014 04:53:30 AM JST
0x10006af  /* U+06AF ARABIC LETTER GAF */
* Fri 24 Jan 2014 04:53:30 AM JST
0x10006ba  /* U+06BA ARABIC LETTER NOON GHUNNA */
* Fri 24 Jan 2014 04:53:30 AM JST
0x10006be  /* U+06BE ARABIC LETTER HEH DOACHASHMEE */
* Fri 24 Jan 2014 04:53:30 AM JST
0x10006cc  /* U+06CC ARABIC LETTER FARSI YEH */
* Fri 24 Jan 2014 04:53:30 AM JST
0x10006cc  /* U+06CC ARABIC LETTER FARSI YEH */
* Fri 24 Jan 2014 04:53:30 AM JST
0x10006d2  /* U+06D2 ARABIC LETTER YEH BARREE */
* Fri 24 Jan 2014 04:53:30 AM JST
0x10006c1  /* U+06C1 ARABIC LETTER HEH GOAL */
* Fri 24 Jan 2014 04:53:30 AM JST
0xff7e  /* Alias for mode_switch */
* Fri 24 Jan 2014 04:53:30 AM JST
*/
* Fri 24 Jan 2014 04:53:31 AM JST
 XK_Cyrillic_GHE_bar           0x1000492  /* U+0492 CYRILLIC CAPITAL LETTER GHE WITH STROKE */

* Fri 24 Jan 2014 04:53:31 AM JST
0x1000493  /* U+0493 CYRILLIC SMALL LETTER GHE WITH STROKE */
* Fri 24 Jan 2014 04:53:31 AM JST
0x1000496  /* U+0496 CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER */
* Fri 24 Jan 2014 04:53:31 AM JST
0x1000497  /* U+0497 CYRILLIC SMALL LETTER ZHE WITH DESCENDER */
* Fri 24 Jan 2014 04:53:31 AM JST
0x100049a  /* U+049A CYRILLIC CAPITAL LETTER KA WITH DESCENDER */
* Fri 24 Jan 2014 04:53:31 AM JST
0x100049b  /* U+049B CYRILLIC SMALL LETTER KA WITH DESCENDER */
* Fri 24 Jan 2014 04:53:31 AM JST
0x100049c  /* U+049C CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE */
* Fri 24 Jan 2014 04:53:31 AM JST
0x100049d  /* U+049D CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE */
* Fri 24 Jan 2014 04:53:31 AM JST
0x10004a2  /* U+04A2 CYRILLIC CAPITAL LETTER EN WITH DESCENDER */
* Fri 24 Jan 2014 04:53:31 AM JST
0x10004a3  /* U+04A3 CYRILLIC SMALL LETTER EN WITH DESCENDER */
* Fri 24 Jan 2014 04:53:31 AM JST
0x10004ae  /* U+04AE CYRILLIC CAPITAL LETTER STRAIGHT U */
* Fri 24 Jan 2014 04:53:32 AM JST
0x10004af  /* U+04AF CYRILLIC SMALL LETTER STRAIGHT U */
* Fri 24 Jan 2014 04:53:32 AM JST
0x10004b0  /* U+04B0 CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE */
* Fri 24 Jan 2014 04:53:32 AM JST
0x10004b1  /* U+04B1 CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE */
* Fri 24 Jan 2014 04:53:32 AM JST
0x10004b2  /* U+04B2 CYRILLIC CAPITAL LETTER HA WITH DESCENDER */
* Fri 24 Jan 2014 04:53:32 AM JST
0x10004b3  /* U+04B3 CYRILLIC SMALL LETTER HA WITH DESCENDER */
* Fri 24 Jan 2014 04:53:32 AM JST
0x10004b6  /* U+04B6 CYRILLIC CAPITAL LETTER CHE WITH DESCENDER */
* Fri 24 Jan 2014 04:53:32 AM JST
0x10004b7  /* U+04B7 CYRILLIC SMALL LETTER CHE WITH DESCENDER */
* Fri 24 Jan 2014 04:53:32 AM JST
0x10004b8  /* U+04B8 CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE */
* Fri 24 Jan 2014 04:53:32 AM JST
0x10004b9  /* U+04B9 CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE */
* Fri 24 Jan 2014 04:53:32 AM JST
0x10004ba  /* U+04BA CYRILLIC CAPITAL LETTER SHHA */
* Fri 24 Jan 2014 04:53:32 AM JST
0x10004bb  /* U+04BB CYRILLIC SMALL LETTER SHHA */
* Fri 24 Jan 2014 04:53:32 AM JST
0x10004d8  /* U+04D8 CYRILLIC CAPITAL LETTER SCHWA */
* Fri 24 Jan 2014 04:53:33 AM JST
0x10004d9  /* U+04D9 CYRILLIC SMALL LETTER SCHWA */
* Fri 24 Jan 2014 04:53:33 AM JST
0x10004e2  /* U+04E2 CYRILLIC CAPITAL LETTER I WITH MACRON */
* Fri 24 Jan 2014 04:53:33 AM JST
0x10004e3  /* U+04E3 CYRILLIC SMALL LETTER I WITH MACRON */
* Fri 24 Jan 2014 04:53:33 AM JST
0x10004e8  /* U+04E8 CYRILLIC CAPITAL LETTER BARRED O */
* Fri 24 Jan 2014 04:53:33 AM JST
0x10004e9  /* U+04E9 CYRILLIC SMALL LETTER BARRED O */
* Fri 24 Jan 2014 04:53:33 AM JST
0x10004ee  /* U+04EE CYRILLIC CAPITAL LETTER U WITH MACRON */
* Fri 24 Jan 2014 04:53:33 AM JST
0x10004ef  /* U+04EF CYRILLIC SMALL LETTER U WITH MACRON */
* Fri 24 Jan 2014 04:53:33 AM JST
0x06a1  /* U+0452 CYRILLIC SMALL LETTER DJE */
* Fri 24 Jan 2014 04:53:33 AM JST
0x06a2  /* U+0453 CYRILLIC SMALL LETTER GJE */
* Fri 24 Jan 2014 04:53:33 AM JST
0x06a3  /* U+0451 CYRILLIC SMALL LETTER IO */
* Fri 24 Jan 2014 04:53:33 AM JST
0x06a4  /* U+0454 CYRILLIC SMALL LETTER UKRAINIAN IE */
* Fri 24 Jan 2014 04:53:33 AM JST
0x06a4  /* deprecated */
* Fri 24 Jan 2014 04:53:33 AM JST
0x06a5  /* U+0455 CYRILLIC SMALL LETTER DZE */
* Fri 24 Jan 2014 04:53:33 AM JST
0x06a6  /* U+0456 CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06a6  /* deprecated */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06a7  /* U+0457 CYRILLIC SMALL LETTER YI */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06a7  /* deprecated */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06a8  /* U+0458 CYRILLIC SMALL LETTER JE */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06a8  /* deprecated */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06a9  /* U+0459 CYRILLIC SMALL LETTER LJE */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06a9  /* deprecated */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06aa  /* U+045A CYRILLIC SMALL LETTER NJE */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06aa  /* deprecated */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06ab  /* U+045B CYRILLIC SMALL LETTER TSHE */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06ac  /* U+045C CYRILLIC SMALL LETTER KJE */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06ad  /* U+0491 CYRILLIC SMALL LETTER GHE WITH UPTURN */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06ae  /* U+045E CYRILLIC SMALL LETTER SHORT U */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06af  /* U+045F CYRILLIC SMALL LETTER DZHE */
* Fri 24 Jan 2014 04:53:34 AM JST
0x06af  /* deprecated */
* Fri 24 Jan 2014 04:53:35 AM JST
0x06b0  /* U+2116 NUMERO SIGN */
* Fri 24 Jan 2014 04:53:35 AM JST
0x06b1  /* U+0402 CYRILLIC CAPITAL LETTER DJE */
* Fri 24 Jan 2014 04:53:35 AM JST
0x06b2  /* U+0403 CYRILLIC CAPITAL LETTER GJE */
* Fri 24 Jan 2014 04:53:35 AM JST
0x06b3  /* U+0401 CYRILLIC CAPITAL LETTER IO */
* Fri 24 Jan 2014 04:53:35 AM JST
0x06b4  /* U+0404 CYRILLIC CAPITAL LETTER UKRAINIAN IE */
* Fri 24 Jan 2014 04:53:35 AM JST
0x06b4  /* deprecated */
* Fri 24 Jan 2014 04:53:35 AM JST
0x06b5  /* U+0405 CYRILLIC CAPITAL LETTER DZE */
* Fri 24 Jan 2014 04:53:35 AM JST
0x06b6  /* U+0406 CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I */
* Fri 24 Jan 2014 04:53:35 AM JST
0x06b6  /* deprecated */
* Fri 24 Jan 2014 04:53:35 AM JST
0x06b7  /* U+0407 CYRILLIC CAPITAL LETTER YI */
* Fri 24 Jan 2014 04:53:35 AM JST
0x06b7  /* deprecated */
* Fri 24 Jan 2014 04:53:35 AM JST
0x06b8  /* U+0408 CYRILLIC CAPITAL LETTER JE */
* Fri 24 Jan 2014 04:53:36 AM JST
0x06b8  /* deprecated */
* Fri 24 Jan 2014 04:53:36 AM JST
0x06b9  /* U+0409 CYRILLIC CAPITAL LETTER LJE */
* Fri 24 Jan 2014 04:53:36 AM JST
0x06b9  /* deprecated */
* Fri 24 Jan 2014 04:53:36 AM JST
0x06ba  /* U+040A CYRILLIC CAPITAL LETTER NJE */
* Fri 24 Jan 2014 04:53:36 AM JST
0x06ba  /* deprecated */
* Fri 24 Jan 2014 04:53:36 AM JST
0x06bb  /* U+040B CYRILLIC CAPITAL LETTER TSHE */
* Fri 24 Jan 2014 04:53:36 AM JST
0x06bc  /* U+040C CYRILLIC CAPITAL LETTER KJE */
* Fri 24 Jan 2014 04:53:36 AM JST
0x06bd  /* U+0490 CYRILLIC CAPITAL LETTER GHE WITH UPTURN */
* Fri 24 Jan 2014 04:53:37 AM JST
0x06be  /* U+040E CYRILLIC CAPITAL LETTER SHORT U */
* Fri 24 Jan 2014 04:53:37 AM JST
0x06bf  /* U+040F CYRILLIC CAPITAL LETTER DZHE */
* Fri 24 Jan 2014 04:53:37 AM JST
0x06bf  /* deprecated */
* Fri 24 Jan 2014 04:53:37 AM JST
0x06c0  /* U+044E CYRILLIC SMALL LETTER YU */
* Fri 24 Jan 2014 04:53:37 AM JST
0x06c1  /* U+0430 CYRILLIC SMALL LETTER A */
* Fri 24 Jan 2014 04:53:37 AM JST
0x06c2  /* U+0431 CYRILLIC SMALL LETTER BE */
* Fri 24 Jan 2014 04:53:37 AM JST
0x06c3  /* U+0446 CYRILLIC SMALL LETTER TSE */
* Fri 24 Jan 2014 04:53:37 AM JST
0x06c4  /* U+0434 CYRILLIC SMALL LETTER DE */
* Fri 24 Jan 2014 04:53:37 AM JST
0x06c5  /* U+0435 CYRILLIC SMALL LETTER IE */
* Fri 24 Jan 2014 04:53:37 AM JST
0x06c6  /* U+0444 CYRILLIC SMALL LETTER EF */
* Fri 24 Jan 2014 04:53:37 AM JST
0x06c7  /* U+0433 CYRILLIC SMALL LETTER GHE */
* Fri 24 Jan 2014 04:53:37 AM JST
0x06c8  /* U+0445 CYRILLIC SMALL LETTER HA */
* Fri 24 Jan 2014 04:53:38 AM JST
0x06c9  /* U+0438 CYRILLIC SMALL LETTER I */
* Fri 24 Jan 2014 04:53:38 AM JST
0x06ca  /* U+0439 CYRILLIC SMALL LETTER SHORT I */
* Fri 24 Jan 2014 04:53:38 AM JST
0x06cb  /* U+043A CYRILLIC SMALL LETTER KA */
* Fri 24 Jan 2014 04:53:38 AM JST
0x06cc  /* U+043B CYRILLIC SMALL LETTER EL */
* Fri 24 Jan 2014 04:53:38 AM JST
0x06cd  /* U+043C CYRILLIC SMALL LETTER EM */
* Fri 24 Jan 2014 04:53:38 AM JST
0x06ce  /* U+043D CYRILLIC SMALL LETTER EN */
* Fri 24 Jan 2014 04:53:38 AM JST
0x06cf  /* U+043E CYRILLIC SMALL LETTER O */
* Fri 24 Jan 2014 04:53:38 AM JST
0x06d0  /* U+043F CYRILLIC SMALL LETTER PE */
* Fri 24 Jan 2014 04:53:38 AM JST
0x06d1  /* U+044F CYRILLIC SMALL LETTER YA */
* Fri 24 Jan 2014 04:53:38 AM JST
0x06d2  /* U+0440 CYRILLIC SMALL LETTER ER */
* Fri 24 Jan 2014 04:53:38 AM JST
0x06d3  /* U+0441 CYRILLIC SMALL LETTER ES */
* Fri 24 Jan 2014 04:53:38 AM JST
0x06d4  /* U+0442 CYRILLIC SMALL LETTER TE */
* Fri 24 Jan 2014 04:53:38 AM JST
0x06d5  /* U+0443 CYRILLIC SMALL LETTER U */
* Fri 24 Jan 2014 04:53:39 AM JST
0x06d6  /* U+0436 CYRILLIC SMALL LETTER ZHE */
* Fri 24 Jan 2014 04:53:39 AM JST
0x06d7  /* U+0432 CYRILLIC SMALL LETTER VE */
* Fri 24 Jan 2014 04:53:39 AM JST
0x06d8  /* U+044C CYRILLIC SMALL LETTER SOFT SIGN */
* Fri 24 Jan 2014 04:53:39 AM JST
0x06d9  /* U+044B CYRILLIC SMALL LETTER YERU */
* Fri 24 Jan 2014 04:53:39 AM JST
0x06da  /* U+0437 CYRILLIC SMALL LETTER ZE */
* Fri 24 Jan 2014 04:53:39 AM JST
0x06db  /* U+0448 CYRILLIC SMALL LETTER SHA */
* Fri 24 Jan 2014 04:53:39 AM JST
0x06dc  /* U+044D CYRILLIC SMALL LETTER E */
* Fri 24 Jan 2014 04:53:39 AM JST
0x06dd  /* U+0449 CYRILLIC SMALL LETTER SHCHA */
* Fri 24 Jan 2014 04:53:39 AM JST
0x06de  /* U+0447 CYRILLIC SMALL LETTER CHE */
* Fri 24 Jan 2014 04:53:39 AM JST
0x06df  /* U+044A CYRILLIC SMALL LETTER HARD SIGN */
* Fri 24 Jan 2014 04:53:39 AM JST
0x06e0  /* U+042E CYRILLIC CAPITAL LETTER YU */
* Fri 24 Jan 2014 04:53:39 AM JST
0x06e1  /* U+0410 CYRILLIC CAPITAL LETTER A */
* Fri 24 Jan 2014 04:53:39 AM JST
0x06e2  /* U+0411 CYRILLIC CAPITAL LETTER BE */
* Fri 24 Jan 2014 04:53:40 AM JST
0x06e3  /* U+0426 CYRILLIC CAPITAL LETTER TSE */
* Fri 24 Jan 2014 04:53:40 AM JST
0x06e4  /* U+0414 CYRILLIC CAPITAL LETTER DE */
* Fri 24 Jan 2014 04:53:40 AM JST
0x06e5  /* U+0415 CYRILLIC CAPITAL LETTER IE */
* Fri 24 Jan 2014 04:53:40 AM JST
0x06e6  /* U+0424 CYRILLIC CAPITAL LETTER EF */
* Fri 24 Jan 2014 04:53:40 AM JST
0x06e7  /* U+0413 CYRILLIC CAPITAL LETTER GHE */
* Fri 24 Jan 2014 04:53:40 AM JST
0x06e8  /* U+0425 CYRILLIC CAPITAL LETTER HA */
* Fri 24 Jan 2014 04:53:40 AM JST
0x06e9  /* U+0418 CYRILLIC CAPITAL LETTER I */
* Fri 24 Jan 2014 04:53:40 AM JST
0x06ea  /* U+0419 CYRILLIC CAPITAL LETTER SHORT I */
* Fri 24 Jan 2014 04:53:41 AM JST
0x06eb  /* U+041A CYRILLIC CAPITAL LETTER KA */
* Fri 24 Jan 2014 04:53:41 AM JST
0x06ec  /* U+041B CYRILLIC CAPITAL LETTER EL */
* Fri 24 Jan 2014 04:53:41 AM JST
0x06ed  /* U+041C CYRILLIC CAPITAL LETTER EM */
* Fri 24 Jan 2014 04:53:41 AM JST
0x06ee  /* U+041D CYRILLIC CAPITAL LETTER EN */
* Fri 24 Jan 2014 04:53:41 AM JST
0x06ef  /* U+041E CYRILLIC CAPITAL LETTER O */
* Fri 24 Jan 2014 04:53:41 AM JST
0x06f0  /* U+041F CYRILLIC CAPITAL LETTER PE */
* Fri 24 Jan 2014 04:53:41 AM JST
0x06f1  /* U+042F CYRILLIC CAPITAL LETTER YA */
* Fri 24 Jan 2014 04:53:41 AM JST
0x06f2  /* U+0420 CYRILLIC CAPITAL LETTER ER */
* Fri 24 Jan 2014 04:53:41 AM JST
0x06f3  /* U+0421 CYRILLIC CAPITAL LETTER ES */
* Fri 24 Jan 2014 04:53:41 AM JST
0x06f4  /* U+0422 CYRILLIC CAPITAL LETTER TE */
* Fri 24 Jan 2014 04:53:41 AM JST
0x06f5  /* U+0423 CYRILLIC CAPITAL LETTER U */
* Fri 24 Jan 2014 04:53:41 AM JST
0x06f6  /* U+0416 CYRILLIC CAPITAL LETTER ZHE */
* Fri 24 Jan 2014 04:53:41 AM JST
0x06f7  /* U+0412 CYRILLIC CAPITAL LETTER VE */
* Fri 24 Jan 2014 04:53:41 AM JST
0x06f8  /* U+042C CYRILLIC CAPITAL LETTER SOFT SIGN */
* Fri 24 Jan 2014 04:53:42 AM JST
0x06f9  /* U+042B CYRILLIC CAPITAL LETTER YERU */
* Fri 24 Jan 2014 04:53:42 AM JST
0x06fa  /* U+0417 CYRILLIC CAPITAL LETTER ZE */
* Fri 24 Jan 2014 04:53:42 AM JST
0x06fb  /* U+0428 CYRILLIC CAPITAL LETTER SHA */
* Fri 24 Jan 2014 04:53:42 AM JST
0x06fc  /* U+042D CYRILLIC CAPITAL LETTER E */
* Fri 24 Jan 2014 04:53:42 AM JST
0x06fd  /* U+0429 CYRILLIC CAPITAL LETTER SHCHA */
* Fri 24 Jan 2014 04:53:42 AM JST
0x06fe  /* U+0427 CYRILLIC CAPITAL LETTER CHE */
* Fri 24 Jan 2014 04:53:42 AM JST
0x06ff  /* U+042A CYRILLIC CAPITAL LETTER HARD SIGN */
* Fri 24 Jan 2014 04:53:42 AM JST
*/
* Fri 24 Jan 2014 04:53:42 AM JST
 XK_Greek_ALPHAaccent             0x07a1  /* U+0386 GREEK CAPITAL LETTER ALPHA WITH TONOS */

* Fri 24 Jan 2014 04:53:42 AM JST
0x07a2  /* U+0388 GREEK CAPITAL LETTER EPSILON WITH TONOS */
* Fri 24 Jan 2014 04:53:42 AM JST
0x07a3  /* U+0389 GREEK CAPITAL LETTER ETA WITH TONOS */
* Fri 24 Jan 2014 04:53:42 AM JST
0x07a4  /* U+038A GREEK CAPITAL LETTER IOTA WITH TONOS */
* Fri 24 Jan 2014 04:53:42 AM JST
0x07a5  /* U+03AA GREEK CAPITAL LETTER IOTA WITH DIALYTIKA */
* Fri 24 Jan 2014 04:53:43 AM JST
0x07a5  /* old typo */
* Fri 24 Jan 2014 04:53:43 AM JST
0x07a7  /* U+038C GREEK CAPITAL LETTER OMICRON WITH TONOS */
* Fri 24 Jan 2014 04:53:43 AM JST
0x07a8  /* U+038E GREEK CAPITAL LETTER UPSILON WITH TONOS */
* Fri 24 Jan 2014 04:53:43 AM JST
0x07a9  /* U+03AB GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA */
* Fri 24 Jan 2014 04:53:43 AM JST
0x07ab  /* U+038F GREEK CAPITAL LETTER OMEGA WITH TONOS */
* Fri 24 Jan 2014 04:53:43 AM JST
0x07ae  /* U+0385 GREEK DIALYTIKA TONOS */
* Fri 24 Jan 2014 04:53:43 AM JST
0x07af  /* U+2015 HORIZONTAL BAR */
* Fri 24 Jan 2014 04:53:43 AM JST
0x07b1  /* U+03AC GREEK SMALL LETTER ALPHA WITH TONOS */
* Fri 24 Jan 2014 04:53:43 AM JST
0x07b2  /* U+03AD GREEK SMALL LETTER EPSILON WITH TONOS */
* Fri 24 Jan 2014 04:53:43 AM JST
0x07b3  /* U+03AE GREEK SMALL LETTER ETA WITH TONOS */
* Fri 24 Jan 2014 04:53:43 AM JST
0x07b4  /* U+03AF GREEK SMALL LETTER IOTA WITH TONOS */
* Fri 24 Jan 2014 04:53:43 AM JST
0x07b5  /* U+03CA GREEK SMALL LETTER IOTA WITH DIALYTIKA */
* Fri 24 Jan 2014 04:53:43 AM JST
0x07b6  /* U+0390 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS */
* Fri 24 Jan 2014 04:53:44 AM JST
0x07b7  /* U+03CC GREEK SMALL LETTER OMICRON WITH TONOS */
* Fri 24 Jan 2014 04:53:44 AM JST
0x07b8  /* U+03CD GREEK SMALL LETTER UPSILON WITH TONOS */
* Fri 24 Jan 2014 04:53:44 AM JST
0x07b9  /* U+03CB GREEK SMALL LETTER UPSILON WITH DIALYTIKA */
* Fri 24 Jan 2014 04:53:44 AM JST
0x07ba  /* U+03B0 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS */
* Fri 24 Jan 2014 04:53:44 AM JST
0x07bb  /* U+03CE GREEK SMALL LETTER OMEGA WITH TONOS */
* Fri 24 Jan 2014 04:53:44 AM JST
0x07c1  /* U+0391 GREEK CAPITAL LETTER ALPHA */
* Fri 24 Jan 2014 04:53:44 AM JST
0x07c2  /* U+0392 GREEK CAPITAL LETTER BETA */
* Fri 24 Jan 2014 04:53:44 AM JST
0x07c3  /* U+0393 GREEK CAPITAL LETTER GAMMA */
* Fri 24 Jan 2014 04:53:44 AM JST
0x07c4  /* U+0394 GREEK CAPITAL LETTER DELTA */
* Fri 24 Jan 2014 04:53:44 AM JST
0x07c5  /* U+0395 GREEK CAPITAL LETTER EPSILON */
* Fri 24 Jan 2014 04:53:44 AM JST
0x07c6  /* U+0396 GREEK CAPITAL LETTER ZETA */
* Fri 24 Jan 2014 04:53:44 AM JST
0x07c7  /* U+0397 GREEK CAPITAL LETTER ETA */
* Fri 24 Jan 2014 04:53:44 AM JST
0x07c8  /* U+0398 GREEK CAPITAL LETTER THETA */
* Fri 24 Jan 2014 04:53:45 AM JST
0x07c9  /* U+0399 GREEK CAPITAL LETTER IOTA */
* Fri 24 Jan 2014 04:53:45 AM JST
0x07ca  /* U+039A GREEK CAPITAL LETTER KAPPA */
* Fri 24 Jan 2014 04:53:45 AM JST
0x07cb  /* U+039B GREEK CAPITAL LETTER LAMDA */
* Fri 24 Jan 2014 04:53:45 AM JST
0x07cb  /* U+039B GREEK CAPITAL LETTER LAMDA */
* Fri 24 Jan 2014 04:53:45 AM JST
0x07cc  /* U+039C GREEK CAPITAL LETTER MU */
* Fri 24 Jan 2014 04:53:45 AM JST
0x07cd  /* U+039D GREEK CAPITAL LETTER NU */
* Fri 24 Jan 2014 04:53:46 AM JST
0x07ce  /* U+039E GREEK CAPITAL LETTER XI */
* Fri 24 Jan 2014 04:53:46 AM JST
0x07cf  /* U+039F GREEK CAPITAL LETTER OMICRON */
* Fri 24 Jan 2014 04:53:46 AM JST
0x07d0  /* U+03A0 GREEK CAPITAL LETTER PI */
* Fri 24 Jan 2014 04:53:46 AM JST
0x07d1  /* U+03A1 GREEK CAPITAL LETTER RHO */
* Fri 24 Jan 2014 04:53:46 AM JST
0x07d2  /* U+03A3 GREEK CAPITAL LETTER SIGMA */
* Fri 24 Jan 2014 04:53:46 AM JST
0x07d4  /* U+03A4 GREEK CAPITAL LETTER TAU */
* Fri 24 Jan 2014 04:53:46 AM JST
0x07d5  /* U+03A5 GREEK CAPITAL LETTER UPSILON */
* Fri 24 Jan 2014 05:01:11 AM JST
0x07d6  /* U+03A6 GREEK CAPITAL LETTER PHI */
* Fri 24 Jan 2014 05:01:12 AM JST
0x07d7  /* U+03A7 GREEK CAPITAL LETTER CHI */
* Fri 24 Jan 2014 05:01:12 AM JST
0x07d8  /* U+03A8 GREEK CAPITAL LETTER PSI */
* Fri 24 Jan 2014 05:01:12 AM JST
0x07d9  /* U+03A9 GREEK CAPITAL LETTER OMEGA */
* Fri 24 Jan 2014 05:01:12 AM JST
0x07e1  /* U+03B1 GREEK SMALL LETTER ALPHA */
* Fri 24 Jan 2014 05:01:12 AM JST
0x07e2  /* U+03B2 GREEK SMALL LETTER BETA */
* Fri 24 Jan 2014 05:01:12 AM JST
0x07e3  /* U+03B3 GREEK SMALL LETTER GAMMA */
* Fri 24 Jan 2014 05:01:12 AM JST
0x07e4  /* U+03B4 GREEK SMALL LETTER DELTA */
* Fri 24 Jan 2014 05:01:13 AM JST
0x07e5  /* U+03B5 GREEK SMALL LETTER EPSILON */
* Fri 24 Jan 2014 05:01:13 AM JST
0x07e6  /* U+03B6 GREEK SMALL LETTER ZETA */
* Fri 24 Jan 2014 05:01:13 AM JST
0x07e7  /* U+03B7 GREEK SMALL LETTER ETA */
* Fri 24 Jan 2014 05:01:13 AM JST
0x07e8  /* U+03B8 GREEK SMALL LETTER THETA */
* Fri 24 Jan 2014 05:01:13 AM JST
0x07e9  /* U+03B9 GREEK SMALL LETTER IOTA */
* Fri 24 Jan 2014 05:01:13 AM JST
0x07ea  /* U+03BA GREEK SMALL LETTER KAPPA */
* Fri 24 Jan 2014 05:01:13 AM JST
0x07eb  /* U+03BB GREEK SMALL LETTER LAMDA */
* Fri 24 Jan 2014 05:01:14 AM JST
0x07eb  /* U+03BB GREEK SMALL LETTER LAMDA */
* Fri 24 Jan 2014 05:01:14 AM JST
0x07ec  /* U+03BC GREEK SMALL LETTER MU */
* Fri 24 Jan 2014 05:01:14 AM JST
0x07ed  /* U+03BD GREEK SMALL LETTER NU */
* Fri 24 Jan 2014 05:01:14 AM JST
0x07ee  /* U+03BE GREEK SMALL LETTER XI */
* Fri 24 Jan 2014 05:01:14 AM JST
0x07ef  /* U+03BF GREEK SMALL LETTER OMICRON */
* Fri 24 Jan 2014 05:01:14 AM JST
0x07f0  /* U+03C0 GREEK SMALL LETTER PI */
* Fri 24 Jan 2014 05:01:14 AM JST
0x07f1  /* U+03C1 GREEK SMALL LETTER RHO */
* Fri 24 Jan 2014 05:01:15 AM JST
0x07f2  /* U+03C3 GREEK SMALL LETTER SIGMA */
* Fri 24 Jan 2014 05:01:15 AM JST
0x07f3  /* U+03C2 GREEK SMALL LETTER FINAL SIGMA */
* Fri 24 Jan 2014 05:01:15 AM JST
0x07f4  /* U+03C4 GREEK SMALL LETTER TAU */
* Fri 24 Jan 2014 05:01:16 AM JST
0x07f5  /* U+03C5 GREEK SMALL LETTER UPSILON */
* Fri 24 Jan 2014 05:01:16 AM JST
0x07f6  /* U+03C6 GREEK SMALL LETTER PHI */
* Fri 24 Jan 2014 05:01:16 AM JST
0x07f7  /* U+03C7 GREEK SMALL LETTER CHI */
* Fri 24 Jan 2014 05:01:16 AM JST
0x07f8  /* U+03C8 GREEK SMALL LETTER PSI */
* Fri 24 Jan 2014 05:01:16 AM JST
0x07f9  /* U+03C9 GREEK SMALL LETTER OMEGA */
* Fri 24 Jan 2014 05:01:16 AM JST
0xff7e  /* Alias for mode_switch */
* Fri 24 Jan 2014 05:01:17 AM JST
*/
* Fri 24 Jan 2014 05:01:17 AM JST
 XK_leftradical                   0x08a1  /* U+23B7 RADICAL SYMBOL BOTTOM */

* Fri 24 Jan 2014 05:01:17 AM JST
0x08a2  /*(U+250C BOX DRAWINGS LIGHT DOWN AND RIGHT)*/
* Fri 24 Jan 2014 05:01:17 AM JST
0x08a3  /*(U+2500 BOX DRAWINGS LIGHT HORIZONTAL)*/
* Fri 24 Jan 2014 05:01:17 AM JST
0x08a4  /* U+2320 TOP HALF INTEGRAL */
* Fri 24 Jan 2014 05:01:17 AM JST
0x08a5  /* U+2321 BOTTOM HALF INTEGRAL */
* Fri 24 Jan 2014 05:01:17 AM JST
0x08a6  /*(U+2502 BOX DRAWINGS LIGHT VERTICAL)*/
* Fri 24 Jan 2014 05:01:18 AM JST
0x08a7  /* U+23A1 LEFT SQUARE BRACKET UPPER CORNER */
* Fri 24 Jan 2014 05:01:18 AM JST
0x08a8  /* U+23A3 LEFT SQUARE BRACKET LOWER CORNER */
* Fri 24 Jan 2014 05:01:18 AM JST
0x08a9  /* U+23A4 RIGHT SQUARE BRACKET UPPER CORNER */
* Fri 24 Jan 2014 05:01:18 AM JST
0x08aa  /* U+23A6 RIGHT SQUARE BRACKET LOWER CORNER */
* Fri 24 Jan 2014 05:01:18 AM JST
0x08ab  /* U+239B LEFT PARENTHESIS UPPER HOOK */
* Fri 24 Jan 2014 05:01:19 AM JST
0x08ac  /* U+239D LEFT PARENTHESIS LOWER HOOK */
* Fri 24 Jan 2014 05:01:19 AM JST
0x08ad  /* U+239E RIGHT PARENTHESIS UPPER HOOK */
* Fri 24 Jan 2014 05:01:19 AM JST
0x08ae  /* U+23A0 RIGHT PARENTHESIS LOWER HOOK */
* Fri 24 Jan 2014 05:01:19 AM JST
0x08af  /* U+23A8 LEFT CURLY BRACKET MIDDLE PIECE */
* Fri 24 Jan 2014 05:01:19 AM JST
0x08b0  /* U+23AC RIGHT CURLY BRACKET MIDDLE PIECE */
* Fri 24 Jan 2014 05:01:19 AM JST
0x08b1
* Fri 24 Jan 2014 05:01:20 AM JST
0x08b2
* Fri 24 Jan 2014 05:01:20 AM JST
0x08b3
* Fri 24 Jan 2014 05:01:20 AM JST
0x08b4
* Fri 24 Jan 2014 05:01:20 AM JST
0x08b5
* Fri 24 Jan 2014 05:01:20 AM JST
0x08b6
* Fri 24 Jan 2014 05:01:20 AM JST
0x08b7
* Fri 24 Jan 2014 05:01:21 AM JST
0x08bc  /* U+2264 LESS-THAN OR EQUAL TO */
* Fri 24 Jan 2014 05:01:21 AM JST
0x08bd  /* U+2260 NOT EQUAL TO */
* Fri 24 Jan 2014 05:01:21 AM JST
0x08be  /* U+2265 GREATER-THAN OR EQUAL TO */
* Fri 24 Jan 2014 05:01:21 AM JST
0x08bf  /* U+222B INTEGRAL */
* Fri 24 Jan 2014 05:01:21 AM JST
0x08c0  /* U+2234 THEREFORE */
* Fri 24 Jan 2014 05:01:21 AM JST
0x08c1  /* U+221D PROPORTIONAL TO */
* Fri 24 Jan 2014 05:01:21 AM JST
0x08c2  /* U+221E INFINITY */
* Fri 24 Jan 2014 05:01:21 AM JST
0x08c5  /* U+2207 NABLA */
* Fri 24 Jan 2014 05:01:22 AM JST
0x08c8  /* U+223C TILDE OPERATOR */
* Fri 24 Jan 2014 05:01:22 AM JST
0x08c9  /* U+2243 ASYMPTOTICALLY EQUAL TO */
* Fri 24 Jan 2014 05:01:22 AM JST
0x08cd  /* U+21D4 LEFT RIGHT DOUBLE ARROW */
* Fri 24 Jan 2014 05:01:22 AM JST
0x08ce  /* U+21D2 RIGHTWARDS DOUBLE ARROW */
* Fri 24 Jan 2014 05:01:23 AM JST
0x08cf  /* U+2261 IDENTICAL TO */
* Fri 24 Jan 2014 05:01:23 AM JST
0x08d6  /* U+221A SQUARE ROOT */
* Fri 24 Jan 2014 05:01:23 AM JST
0x08da  /* U+2282 SUBSET OF */
* Fri 24 Jan 2014 05:01:23 AM JST
0x08db  /* U+2283 SUPERSET OF */
* Fri 24 Jan 2014 05:01:23 AM JST
0x08dc  /* U+2229 INTERSECTION */
* Fri 24 Jan 2014 05:01:23 AM JST
0x08dd  /* U+222A UNION */
* Fri 24 Jan 2014 05:01:23 AM JST
0x08de  /* U+2227 LOGICAL AND */
* Fri 24 Jan 2014 05:01:23 AM JST
0x08df  /* U+2228 LOGICAL OR */
* Fri 24 Jan 2014 05:01:24 AM JST
0x08ef  /* U+2202 PARTIAL DIFFERENTIAL */
* Fri 24 Jan 2014 05:01:24 AM JST
0x08f6  /* U+0192 LATIN SMALL LETTER F WITH HOOK */
* Fri 24 Jan 2014 05:01:24 AM JST
0x08fb  /* U+2190 LEFTWARDS ARROW */
* Fri 24 Jan 2014 05:01:24 AM JST
0x08fc  /* U+2191 UPWARDS ARROW */
* Fri 24 Jan 2014 05:01:24 AM JST
0x08fd  /* U+2192 RIGHTWARDS ARROW */
* Fri 24 Jan 2014 05:01:24 AM JST
0x08fe  /* U+2193 DOWNWARDS ARROW */
* Fri 24 Jan 2014 05:01:24 AM JST
*/
* Fri 24 Jan 2014 05:01:25 AM JST
 XK_blank                         0x09df

* Fri 24 Jan 2014 05:01:25 AM JST
0x09e0  /* U+25C6 BLACK DIAMOND */
* Fri 24 Jan 2014 05:01:25 AM JST
0x09e1  /* U+2592 MEDIUM SHADE */
* Fri 24 Jan 2014 05:01:26 AM JST
0x09e2  /* U+2409 SYMBOL FOR HORIZONTAL TABULATION */
* Fri 24 Jan 2014 05:01:26 AM JST
0x09e3  /* U+240C SYMBOL FOR FORM FEED */
* Fri 24 Jan 2014 05:01:26 AM JST
0x09e4  /* U+240D SYMBOL FOR CARRIAGE RETURN */
* Fri 24 Jan 2014 05:01:26 AM JST
0x09e5  /* U+240A SYMBOL FOR LINE FEED */
* Fri 24 Jan 2014 05:01:26 AM JST
0x09e8  /* U+2424 SYMBOL FOR NEWLINE */
* Fri 24 Jan 2014 05:01:26 AM JST
0x09e9  /* U+240B SYMBOL FOR VERTICAL TABULATION */
* Fri 24 Jan 2014 05:01:27 AM JST
0x09ea  /* U+2518 BOX DRAWINGS LIGHT UP AND LEFT */
* Fri 24 Jan 2014 05:01:27 AM JST
0x09eb  /* U+2510 BOX DRAWINGS LIGHT DOWN AND LEFT */
* Fri 24 Jan 2014 05:01:27 AM JST
0x09ec  /* U+250C BOX DRAWINGS LIGHT DOWN AND RIGHT */
* Fri 24 Jan 2014 05:01:27 AM JST
0x09ed  /* U+2514 BOX DRAWINGS LIGHT UP AND RIGHT */
* Fri 24 Jan 2014 05:01:27 AM JST
0x09ee  /* U+253C BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL */
* Fri 24 Jan 2014 05:01:27 AM JST
0x09ef  /* U+23BA HORIZONTAL SCAN LINE-1 */
* Fri 24 Jan 2014 05:01:27 AM JST
0x09f0  /* U+23BB HORIZONTAL SCAN LINE-3 */
* Fri 24 Jan 2014 05:01:28 AM JST
0x09f1  /* U+2500 BOX DRAWINGS LIGHT HORIZONTAL */
* Fri 24 Jan 2014 05:01:28 AM JST
0x09f2  /* U+23BC HORIZONTAL SCAN LINE-7 */
* Fri 24 Jan 2014 05:01:28 AM JST
0x09f3  /* U+23BD HORIZONTAL SCAN LINE-9 */
* Fri 24 Jan 2014 05:01:28 AM JST
0x09f4  /* U+251C BOX DRAWINGS LIGHT VERTICAL AND RIGHT */
* Fri 24 Jan 2014 05:01:28 AM JST
0x09f5  /* U+2524 BOX DRAWINGS LIGHT VERTICAL AND LEFT */
* Fri 24 Jan 2014 05:01:28 AM JST
0x09f6  /* U+2534 BOX DRAWINGS LIGHT UP AND HORIZONTAL */
* Fri 24 Jan 2014 05:01:28 AM JST
0x09f7  /* U+252C BOX DRAWINGS LIGHT DOWN AND HORIZONTAL */
* Fri 24 Jan 2014 05:01:29 AM JST
0x09f8  /* U+2502 BOX DRAWINGS LIGHT VERTICAL */
* Fri 24 Jan 2014 05:01:29 AM JST
*/
* Fri 24 Jan 2014 05:01:29 AM JST
 XK_emspace                       0x0aa1  /* U+2003 EM SPACE */

* Fri 24 Jan 2014 05:01:29 AM JST
0x0aa2  /* U+2002 EN SPACE */
* Fri 24 Jan 2014 05:01:30 AM JST
0x0aa3  /* U+2004 THREE-PER-EM SPACE */
* Fri 24 Jan 2014 05:01:30 AM JST
0x0aa4  /* U+2005 FOUR-PER-EM SPACE */
* Fri 24 Jan 2014 05:01:30 AM JST
0x0aa5  /* U+2007 FIGURE SPACE */
* Fri 24 Jan 2014 05:01:30 AM JST
0x0aa6  /* U+2008 PUNCTUATION SPACE */
* Fri 24 Jan 2014 05:01:30 AM JST
0x0aa7  /* U+2009 THIN SPACE */
* Fri 24 Jan 2014 05:01:30 AM JST
0x0aa8  /* U+200A HAIR SPACE */
* Fri 24 Jan 2014 05:01:31 AM JST
0x0aa9  /* U+2014 EM DASH */
* Fri 24 Jan 2014 05:01:31 AM JST
0x0aaa  /* U+2013 EN DASH */
* Fri 24 Jan 2014 05:01:31 AM JST
0x0aac  /*(U+2423 OPEN BOX)*/
* Fri 24 Jan 2014 05:01:31 AM JST
0x0aae  /* U+2026 HORIZONTAL ELLIPSIS */
* Fri 24 Jan 2014 05:01:31 AM JST
0x0aaf  /* U+2025 TWO DOT LEADER */
* Fri 24 Jan 2014 05:01:31 AM JST
0x0ab0  /* U+2153 VULGAR FRACTION ONE THIRD */
* Fri 24 Jan 2014 05:01:31 AM JST
0x0ab1  /* U+2154 VULGAR FRACTION TWO THIRDS */
* Fri 24 Jan 2014 05:01:32 AM JST
0x0ab2  /* U+2155 VULGAR FRACTION ONE FIFTH */
* Fri 24 Jan 2014 05:01:32 AM JST
0x0ab3  /* U+2156 VULGAR FRACTION TWO FIFTHS */
* Fri 24 Jan 2014 05:01:32 AM JST
0x0ab4  /* U+2157 VULGAR FRACTION THREE FIFTHS */
* Fri 24 Jan 2014 05:01:32 AM JST
0x0ab5  /* U+2158 VULGAR FRACTION FOUR FIFTHS */
* Fri 24 Jan 2014 05:01:33 AM JST
0x0ab6  /* U+2159 VULGAR FRACTION ONE SIXTH */
* Fri 24 Jan 2014 05:01:33 AM JST
0x0ab7  /* U+215A VULGAR FRACTION FIVE SIXTHS */
* Fri 24 Jan 2014 05:01:33 AM JST
0x0ab8  /* U+2105 CARE OF */
* Fri 24 Jan 2014 05:01:33 AM JST
0x0abb  /* U+2012 FIGURE DASH */
* Fri 24 Jan 2014 05:01:33 AM JST
0x0abc  /*(U+27E8 MATHEMATICAL LEFT ANGLE BRACKET)*/
* Fri 24 Jan 2014 05:01:33 AM JST
0x0abd  /*(U+002E FULL STOP)*/
* Fri 24 Jan 2014 05:01:33 AM JST
0x0abe  /*(U+27E9 MATHEMATICAL RIGHT ANGLE BRACKET)*/
* Fri 24 Jan 2014 05:01:34 AM JST
0x0abf
* Fri 24 Jan 2014 05:01:34 AM JST
0x0ac3  /* U+215B VULGAR FRACTION ONE EIGHTH */
* Fri 24 Jan 2014 05:01:34 AM JST
0x0ac4  /* U+215C VULGAR FRACTION THREE EIGHTHS */
* Fri 24 Jan 2014 05:01:34 AM JST
0x0ac5  /* U+215D VULGAR FRACTION FIVE EIGHTHS */
* Fri 24 Jan 2014 05:01:34 AM JST
0x0ac6  /* U+215E VULGAR FRACTION SEVEN EIGHTHS */
* Fri 24 Jan 2014 05:01:34 AM JST
0x0ac9  /* U+2122 TRADE MARK SIGN */
* Fri 24 Jan 2014 05:01:34 AM JST
0x0aca  /*(U+2613 SALTIRE)*/
* Fri 24 Jan 2014 05:01:34 AM JST
0x0acb
* Fri 24 Jan 2014 05:01:35 AM JST
0x0acc  /*(U+25C1 WHITE LEFT-POINTING TRIANGLE)*/
* Fri 24 Jan 2014 05:01:35 AM JST
0x0acd  /*(U+25B7 WHITE RIGHT-POINTING TRIANGLE)*/
* Fri 24 Jan 2014 05:01:35 AM JST
0x0ace  /*(U+25CB WHITE CIRCLE)*/
* Fri 24 Jan 2014 05:01:35 AM JST
0x0acf  /*(U+25AF WHITE VERTICAL RECTANGLE)*/
* Fri 24 Jan 2014 05:01:35 AM JST
0x0ad0  /* U+2018 LEFT SINGLE QUOTATION MARK */
* Fri 24 Jan 2014 05:01:35 AM JST
0x0ad1  /* U+2019 RIGHT SINGLE QUOTATION MARK */
* Fri 24 Jan 2014 05:01:36 AM JST
0x0ad2  /* U+201C LEFT DOUBLE QUOTATION MARK */
* Fri 24 Jan 2014 05:01:36 AM JST
0x0ad3  /* U+201D RIGHT DOUBLE QUOTATION MARK */
* Fri 24 Jan 2014 05:01:36 AM JST
0x0ad4  /* U+211E PRESCRIPTION TAKE */
* Fri 24 Jan 2014 05:01:36 AM JST
0x0ad5  /* U+2030 PER MILLE SIGN */
* Fri 24 Jan 2014 05:01:37 AM JST
0x0ad6  /* U+2032 PRIME */
* Fri 24 Jan 2014 05:01:37 AM JST
0x0ad7  /* U+2033 DOUBLE PRIME */
* Fri 24 Jan 2014 05:01:37 AM JST
0x0ad9  /* U+271D LATIN CROSS */
* Fri 24 Jan 2014 05:01:37 AM JST
0x0ada
* Fri 24 Jan 2014 05:01:37 AM JST
0x0adb  /*(U+25AC BLACK RECTANGLE)*/
* Fri 24 Jan 2014 05:01:37 AM JST
0x0adc  /*(U+25C0 BLACK LEFT-POINTING TRIANGLE)*/
* Fri 24 Jan 2014 05:01:37 AM JST
0x0add  /*(U+25B6 BLACK RIGHT-POINTING TRIANGLE)*/
* Fri 24 Jan 2014 05:01:38 AM JST
0x0ade  /*(U+25CF BLACK CIRCLE)*/
* Fri 24 Jan 2014 05:01:38 AM JST
0x0adf  /*(U+25AE BLACK VERTICAL RECTANGLE)*/
* Fri 24 Jan 2014 05:01:38 AM JST
0x0ae0  /*(U+25E6 WHITE BULLET)*/
* Fri 24 Jan 2014 05:01:38 AM JST
0x0ae1  /*(U+25AB WHITE SMALL SQUARE)*/
* Fri 24 Jan 2014 05:01:38 AM JST
0x0ae2  /*(U+25AD WHITE RECTANGLE)*/
* Fri 24 Jan 2014 05:01:38 AM JST
0x0ae3  /*(U+25B3 WHITE UP-POINTING TRIANGLE)*/
* Fri 24 Jan 2014 05:01:39 AM JST
0x0ae4  /*(U+25BD WHITE DOWN-POINTING TRIANGLE)*/
* Fri 24 Jan 2014 05:01:39 AM JST
0x0ae5  /*(U+2606 WHITE STAR)*/
* Fri 24 Jan 2014 05:01:39 AM JST
0x0ae6  /*(U+2022 BULLET)*/
* Fri 24 Jan 2014 05:01:39 AM JST
0x0ae7  /*(U+25AA BLACK SMALL SQUARE)*/
* Fri 24 Jan 2014 05:01:39 AM JST
0x0ae8  /*(U+25B2 BLACK UP-POINTING TRIANGLE)*/
* Fri 24 Jan 2014 05:01:39 AM JST
0x0ae9  /*(U+25BC BLACK DOWN-POINTING TRIANGLE)*/
* Fri 24 Jan 2014 05:01:39 AM JST
0x0aea  /*(U+261C WHITE LEFT POINTING INDEX)*/
* Fri 24 Jan 2014 05:01:40 AM JST
0x0aeb  /*(U+261E WHITE RIGHT POINTING INDEX)*/
* Fri 24 Jan 2014 05:01:40 AM JST
0x0aec  /* U+2663 BLACK CLUB SUIT */
* Fri 24 Jan 2014 05:01:40 AM JST
0x0aed  /* U+2666 BLACK DIAMOND SUIT */
* Fri 24 Jan 2014 05:01:40 AM JST
0x0aee  /* U+2665 BLACK HEART SUIT */
* Fri 24 Jan 2014 05:01:40 AM JST
0x0af0  /* U+2720 MALTESE CROSS */
* Fri 24 Jan 2014 05:01:41 AM JST
0x0af1  /* U+2020 DAGGER */
* Fri 24 Jan 2014 05:01:41 AM JST
0x0af2  /* U+2021 DOUBLE DAGGER */
* Fri 24 Jan 2014 05:01:41 AM JST
0x0af3  /* U+2713 CHECK MARK */
* Fri 24 Jan 2014 05:01:41 AM JST
0x0af4  /* U+2717 BALLOT X */
* Fri 24 Jan 2014 05:01:41 AM JST
0x0af5  /* U+266F MUSIC SHARP SIGN */
* Fri 24 Jan 2014 05:01:41 AM JST
0x0af6  /* U+266D MUSIC FLAT SIGN */
* Fri 24 Jan 2014 05:01:42 AM JST
0x0af7  /* U+2642 MALE SIGN */
* Fri 24 Jan 2014 05:01:42 AM JST
0x0af8  /* U+2640 FEMALE SIGN */
* Fri 24 Jan 2014 05:01:42 AM JST
0x0af9  /* U+260E BLACK TELEPHONE */
* Fri 24 Jan 2014 05:01:42 AM JST
0x0afa  /* U+2315 TELEPHONE RECORDER */
* Fri 24 Jan 2014 05:01:42 AM JST
0x0afb  /* U+2117 SOUND RECORDING COPYRIGHT */
* Fri 24 Jan 2014 05:01:42 AM JST
0x0afc  /* U+2038 CARET */
* Fri 24 Jan 2014 05:01:42 AM JST
0x0afd  /* U+201A SINGLE LOW-9 QUOTATION MARK */
* Fri 24 Jan 2014 05:01:42 AM JST
0x0afe  /* U+201E DOUBLE LOW-9 QUOTATION MARK */
* Fri 24 Jan 2014 05:01:43 AM JST
0x0aff
* Fri 24 Jan 2014 05:01:43 AM JST
*/
* Fri 24 Jan 2014 05:01:43 AM JST
 XK_leftcaret                     0x0ba3  /*(U+003C LESS-THAN SIGN)*/

* Fri 24 Jan 2014 05:01:43 AM JST
0x0ba6  /*(U+003E GREATER-THAN SIGN)*/
* Fri 24 Jan 2014 05:01:44 AM JST
0x0ba8  /*(U+2228 LOGICAL OR)*/
* Fri 24 Jan 2014 05:01:44 AM JST
0x0ba9  /*(U+2227 LOGICAL AND)*/
* Fri 24 Jan 2014 05:01:44 AM JST
0x0bc0  /*(U+00AF MACRON)*/
* Fri 24 Jan 2014 05:01:44 AM JST
0x0bc2  /* U+22A4 DOWN TACK */
* Fri 24 Jan 2014 05:01:44 AM JST
0x0bc3  /*(U+2229 INTERSECTION)*/
* Fri 24 Jan 2014 05:01:44 AM JST
0x0bc4  /* U+230A LEFT FLOOR */
* Fri 24 Jan 2014 05:01:44 AM JST
0x0bc6  /*(U+005F LOW LINE)*/
* Fri 24 Jan 2014 05:01:45 AM JST
0x0bca  /* U+2218 RING OPERATOR */
* Fri 24 Jan 2014 05:01:45 AM JST
0x0bcc  /* U+2395 APL FUNCTIONAL SYMBOL QUAD */
* Fri 24 Jan 2014 05:01:45 AM JST
0x0bce  /* U+22A5 UP TACK */
* Fri 24 Jan 2014 05:01:45 AM JST
0x0bcf  /* U+25CB WHITE CIRCLE */
* Fri 24 Jan 2014 05:01:45 AM JST
0x0bd3  /* U+2308 LEFT CEILING */
* Fri 24 Jan 2014 05:01:45 AM JST
0x0bd6  /*(U+222A UNION)*/
* Fri 24 Jan 2014 05:01:45 AM JST
0x0bd8  /*(U+2283 SUPERSET OF)*/
* Fri 24 Jan 2014 05:01:46 AM JST
0x0bda  /*(U+2282 SUBSET OF)*/
* Fri 24 Jan 2014 05:01:46 AM JST
0x0bdc  /* U+22A3 LEFT TACK */
* Fri 24 Jan 2014 05:01:46 AM JST
0x0bfc  /* U+22A2 RIGHT TACK */
* Fri 24 Jan 2014 05:01:46 AM JST
*/
* Fri 24 Jan 2014 05:01:46 AM JST
 XK_hebrew_doublelowline          0x0cdf  /* U+2017 DOUBLE LOW LINE */

* Fri 24 Jan 2014 05:01:47 AM JST
0x0ce0  /* U+05D0 HEBREW LETTER ALEF */
* Fri 24 Jan 2014 05:01:47 AM JST
0x0ce1  /* U+05D1 HEBREW LETTER BET */
* Fri 24 Jan 2014 05:01:47 AM JST
0x0ce1  /* deprecated */
* Fri 24 Jan 2014 05:01:47 AM JST
0x0ce2  /* U+05D2 HEBREW LETTER GIMEL */
* Fri 24 Jan 2014 05:01:47 AM JST
0x0ce2  /* deprecated */
* Fri 24 Jan 2014 05:01:47 AM JST
0x0ce3  /* U+05D3 HEBREW LETTER DALET */
* Fri 24 Jan 2014 05:01:47 AM JST
0x0ce3  /* deprecated */
* Fri 24 Jan 2014 05:01:48 AM JST
0x0ce4  /* U+05D4 HEBREW LETTER HE */
* Fri 24 Jan 2014 05:01:48 AM JST
0x0ce5  /* U+05D5 HEBREW LETTER VAV */
* Fri 24 Jan 2014 05:01:48 AM JST
0x0ce6  /* U+05D6 HEBREW LETTER ZAYIN */
* Fri 24 Jan 2014 05:01:48 AM JST
0x0ce6  /* deprecated */
* Fri 24 Jan 2014 05:01:48 AM JST
0x0ce7  /* U+05D7 HEBREW LETTER HET */
* Fri 24 Jan 2014 05:01:49 AM JST
0x0ce7  /* deprecated */
* Fri 24 Jan 2014 05:01:49 AM JST
0x0ce8  /* U+05D8 HEBREW LETTER TET */
* Fri 24 Jan 2014 05:01:49 AM JST
0x0ce8  /* deprecated */
* Fri 24 Jan 2014 05:01:49 AM JST
0x0ce9  /* U+05D9 HEBREW LETTER YOD */
* Fri 24 Jan 2014 05:01:49 AM JST
0x0cea  /* U+05DA HEBREW LETTER FINAL KAF */
* Fri 24 Jan 2014 05:01:50 AM JST
0x0ceb  /* U+05DB HEBREW LETTER KAF */
* Fri 24 Jan 2014 05:01:50 AM JST
0x0cec  /* U+05DC HEBREW LETTER LAMED */
* Fri 24 Jan 2014 05:01:50 AM JST
0x0ced  /* U+05DD HEBREW LETTER FINAL MEM */
* Fri 24 Jan 2014 05:01:50 AM JST
0x0cee  /* U+05DE HEBREW LETTER MEM */
* Fri 24 Jan 2014 05:01:51 AM JST
0x0cef  /* U+05DF HEBREW LETTER FINAL NUN */
* Fri 24 Jan 2014 05:01:51 AM JST
0x0cf0  /* U+05E0 HEBREW LETTER NUN */
* Fri 24 Jan 2014 05:01:51 AM JST
0x0cf1  /* U+05E1 HEBREW LETTER SAMEKH */
* Fri 24 Jan 2014 05:01:51 AM JST
0x0cf1  /* deprecated */
* Fri 24 Jan 2014 05:01:51 AM JST
0x0cf2  /* U+05E2 HEBREW LETTER AYIN */
* Fri 24 Jan 2014 05:01:52 AM JST
0x0cf3  /* U+05E3 HEBREW LETTER FINAL PE */
* Fri 24 Jan 2014 05:01:52 AM JST
0x0cf4  /* U+05E4 HEBREW LETTER PE */
* Fri 24 Jan 2014 05:01:52 AM JST
0x0cf5  /* U+05E5 HEBREW LETTER FINAL TSADI */
* Fri 24 Jan 2014 05:01:52 AM JST
0x0cf5  /* deprecated */
* Fri 24 Jan 2014 05:01:52 AM JST
0x0cf6  /* U+05E6 HEBREW LETTER TSADI */
* Fri 24 Jan 2014 05:01:52 AM JST
0x0cf6  /* deprecated */
* Fri 24 Jan 2014 05:01:52 AM JST
0x0cf7  /* U+05E7 HEBREW LETTER QOF */
* Fri 24 Jan 2014 05:01:53 AM JST
0x0cf7  /* deprecated */
* Fri 24 Jan 2014 05:01:53 AM JST
0x0cf8  /* U+05E8 HEBREW LETTER RESH */
* Fri 24 Jan 2014 05:01:53 AM JST
0x0cf9  /* U+05E9 HEBREW LETTER SHIN */
* Fri 24 Jan 2014 05:01:53 AM JST
0x0cfa  /* U+05EA HEBREW LETTER TAV */
* Fri 24 Jan 2014 05:01:53 AM JST
0x0cfa  /* deprecated */
* Fri 24 Jan 2014 05:01:53 AM JST
0xff7e  /* Alias for mode_switch */
* Fri 24 Jan 2014 05:01:54 AM JST
*/
* Fri 24 Jan 2014 05:01:54 AM JST
 XK_Thai_kokai                    0x0da1  /* U+0E01 THAI CHARACTER KO KAI */

* Fri 24 Jan 2014 05:01:55 AM JST
0x0da2  /* U+0E02 THAI CHARACTER KHO KHAI */
* Fri 24 Jan 2014 05:01:55 AM JST
0x0da3  /* U+0E03 THAI CHARACTER KHO KHUAT */
* Fri 24 Jan 2014 05:01:55 AM JST
0x0da4  /* U+0E04 THAI CHARACTER KHO KHWAI */
* Fri 24 Jan 2014 05:01:55 AM JST
0x0da5  /* U+0E05 THAI CHARACTER KHO KHON */
* Fri 24 Jan 2014 05:01:55 AM JST
0x0da6  /* U+0E06 THAI CHARACTER KHO RAKHANG */
* Fri 24 Jan 2014 05:01:55 AM JST
0x0da7  /* U+0E07 THAI CHARACTER NGO NGU */
* Fri 24 Jan 2014 05:01:55 AM JST
0x0da8  /* U+0E08 THAI CHARACTER CHO CHAN */
* Fri 24 Jan 2014 05:01:56 AM JST
0x0da9  /* U+0E09 THAI CHARACTER CHO CHING */
* Fri 24 Jan 2014 05:01:56 AM JST
0x0daa  /* U+0E0A THAI CHARACTER CHO CHANG */
* Fri 24 Jan 2014 05:01:56 AM JST
0x0dab  /* U+0E0B THAI CHARACTER SO SO */
* Fri 24 Jan 2014 05:01:56 AM JST
0x0dac  /* U+0E0C THAI CHARACTER CHO CHOE */
* Fri 24 Jan 2014 05:01:56 AM JST
0x0dad  /* U+0E0D THAI CHARACTER YO YING */
* Fri 24 Jan 2014 05:01:56 AM JST
0x0dae  /* U+0E0E THAI CHARACTER DO CHADA */
* Fri 24 Jan 2014 05:01:56 AM JST
0x0daf  /* U+0E0F THAI CHARACTER TO PATAK */
* Fri 24 Jan 2014 05:01:56 AM JST
0x0db0  /* U+0E10 THAI CHARACTER THO THAN */
* Fri 24 Jan 2014 05:01:57 AM JST
0x0db1  /* U+0E11 THAI CHARACTER THO NANGMONTHO */
* Fri 24 Jan 2014 05:01:57 AM JST
0x0db2  /* U+0E12 THAI CHARACTER THO PHUTHAO */
* Fri 24 Jan 2014 05:01:57 AM JST
0x0db3  /* U+0E13 THAI CHARACTER NO NEN */
* Fri 24 Jan 2014 05:01:57 AM JST
0x0db4  /* U+0E14 THAI CHARACTER DO DEK */
* Fri 24 Jan 2014 05:01:57 AM JST
0x0db5  /* U+0E15 THAI CHARACTER TO TAO */
* Fri 24 Jan 2014 05:01:58 AM JST
0x0db6  /* U+0E16 THAI CHARACTER THO THUNG */
* Fri 24 Jan 2014 05:01:58 AM JST
0x0db7  /* U+0E17 THAI CHARACTER THO THAHAN */
* Fri 24 Jan 2014 05:01:58 AM JST
0x0db8  /* U+0E18 THAI CHARACTER THO THONG */
* Fri 24 Jan 2014 05:01:58 AM JST
0x0db9  /* U+0E19 THAI CHARACTER NO NU */
* Fri 24 Jan 2014 05:01:58 AM JST
0x0dba  /* U+0E1A THAI CHARACTER BO BAIMAI */
* Fri 24 Jan 2014 05:01:58 AM JST
0x0dbb  /* U+0E1B THAI CHARACTER PO PLA */
* Fri 24 Jan 2014 05:01:58 AM JST
0x0dbc  /* U+0E1C THAI CHARACTER PHO PHUNG */
* Fri 24 Jan 2014 05:01:59 AM JST
0x0dbd  /* U+0E1D THAI CHARACTER FO FA */
* Fri 24 Jan 2014 05:01:59 AM JST
0x0dbe  /* U+0E1E THAI CHARACTER PHO PHAN */
* Fri 24 Jan 2014 05:01:59 AM JST
0x0dbf  /* U+0E1F THAI CHARACTER FO FAN */
* Fri 24 Jan 2014 05:01:59 AM JST
0x0dc0  /* U+0E20 THAI CHARACTER PHO SAMPHAO */
* Fri 24 Jan 2014 05:01:59 AM JST
0x0dc1  /* U+0E21 THAI CHARACTER MO MA */
* Fri 24 Jan 2014 05:01:59 AM JST
0x0dc2  /* U+0E22 THAI CHARACTER YO YAK */
* Fri 24 Jan 2014 05:02:00 AM JST
0x0dc3  /* U+0E23 THAI CHARACTER RO RUA */
* Fri 24 Jan 2014 05:02:00 AM JST
0x0dc4  /* U+0E24 THAI CHARACTER RU */
* Fri 24 Jan 2014 05:02:00 AM JST
0x0dc5  /* U+0E25 THAI CHARACTER LO LING */
* Fri 24 Jan 2014 05:02:00 AM JST
0x0dc6  /* U+0E26 THAI CHARACTER LU */
* Fri 24 Jan 2014 05:02:00 AM JST
0x0dc7  /* U+0E27 THAI CHARACTER WO WAEN */
* Fri 24 Jan 2014 05:02:00 AM JST
0x0dc8  /* U+0E28 THAI CHARACTER SO SALA */
* Fri 24 Jan 2014 05:02:00 AM JST
0x0dc9  /* U+0E29 THAI CHARACTER SO RUSI */
* Fri 24 Jan 2014 05:02:01 AM JST
0x0dca  /* U+0E2A THAI CHARACTER SO SUA */
* Fri 24 Jan 2014 05:02:01 AM JST
0x0dcb  /* U+0E2B THAI CHARACTER HO HIP */
* Fri 24 Jan 2014 05:02:01 AM JST
0x0dcc  /* U+0E2C THAI CHARACTER LO CHULA */
* Fri 24 Jan 2014 05:02:01 AM JST
0x0dcd  /* U+0E2D THAI CHARACTER O ANG */
* Fri 24 Jan 2014 05:02:01 AM JST
0x0dce  /* U+0E2E THAI CHARACTER HO NOKHUK */
* Fri 24 Jan 2014 05:02:01 AM JST
0x0dcf  /* U+0E2F THAI CHARACTER PAIYANNOI */
* Fri 24 Jan 2014 05:02:02 AM JST
0x0dd0  /* U+0E30 THAI CHARACTER SARA A */
* Fri 24 Jan 2014 05:02:02 AM JST
0x0dd1  /* U+0E31 THAI CHARACTER MAI HAN-AKAT */
* Fri 24 Jan 2014 05:02:02 AM JST
0x0dd2  /* U+0E32 THAI CHARACTER SARA AA */
* Fri 24 Jan 2014 05:02:02 AM JST
0x0dd3  /* U+0E33 THAI CHARACTER SARA AM */
* Fri 24 Jan 2014 05:02:02 AM JST
0x0dd4  /* U+0E34 THAI CHARACTER SARA I */
* Fri 24 Jan 2014 05:02:02 AM JST
0x0dd5  /* U+0E35 THAI CHARACTER SARA II */
* Fri 24 Jan 2014 05:02:02 AM JST
0x0dd6  /* U+0E36 THAI CHARACTER SARA UE */
* Fri 24 Jan 2014 05:02:02 AM JST
0x0dd7  /* U+0E37 THAI CHARACTER SARA UEE */
* Fri 24 Jan 2014 05:02:03 AM JST
0x0dd8  /* U+0E38 THAI CHARACTER SARA U */
* Fri 24 Jan 2014 05:02:03 AM JST
0x0dd9  /* U+0E39 THAI CHARACTER SARA UU */
* Fri 24 Jan 2014 05:02:03 AM JST
0x0dda  /* U+0E3A THAI CHARACTER PHINTHU */
* Fri 24 Jan 2014 05:02:03 AM JST
0x0dde
* Fri 24 Jan 2014 05:02:03 AM JST
0x0ddf  /* U+0E3F THAI CURRENCY SYMBOL BAHT */
* Fri 24 Jan 2014 05:02:03 AM JST
0x0de0  /* U+0E40 THAI CHARACTER SARA E */
* Fri 24 Jan 2014 05:02:04 AM JST
0x0de1  /* U+0E41 THAI CHARACTER SARA AE */
* Fri 24 Jan 2014 05:02:04 AM JST
0x0de2  /* U+0E42 THAI CHARACTER SARA O */
* Fri 24 Jan 2014 05:02:04 AM JST
0x0de3  /* U+0E43 THAI CHARACTER SARA AI MAIMUAN */
* Fri 24 Jan 2014 05:02:04 AM JST
0x0de4  /* U+0E44 THAI CHARACTER SARA AI MAIMALAI */
* Fri 24 Jan 2014 05:02:04 AM JST
0x0de5  /* U+0E45 THAI CHARACTER LAKKHANGYAO */
* Fri 24 Jan 2014 05:02:04 AM JST
0x0de6  /* U+0E46 THAI CHARACTER MAIYAMOK */
* Fri 24 Jan 2014 05:02:05 AM JST
0x0de7  /* U+0E47 THAI CHARACTER MAITAIKHU */
* Fri 24 Jan 2014 05:02:05 AM JST
0x0de8  /* U+0E48 THAI CHARACTER MAI EK */
* Fri 24 Jan 2014 05:02:05 AM JST
0x0de9  /* U+0E49 THAI CHARACTER MAI THO */
* Fri 24 Jan 2014 05:02:05 AM JST
0x0dea  /* U+0E4A THAI CHARACTER MAI TRI */
* Fri 24 Jan 2014 05:02:05 AM JST
0x0deb  /* U+0E4B THAI CHARACTER MAI CHATTAWA */
* Fri 24 Jan 2014 05:02:05 AM JST
0x0dec  /* U+0E4C THAI CHARACTER THANTHAKHAT */
* Fri 24 Jan 2014 05:02:05 AM JST
0x0ded  /* U+0E4D THAI CHARACTER NIKHAHIT */
* Fri 24 Jan 2014 05:02:06 AM JST
0x0df0  /* U+0E50 THAI DIGIT ZERO */
* Fri 24 Jan 2014 05:02:06 AM JST
0x0df1  /* U+0E51 THAI DIGIT ONE */
* Fri 24 Jan 2014 05:02:06 AM JST
0x0df2  /* U+0E52 THAI DIGIT TWO */
* Fri 24 Jan 2014 05:02:06 AM JST
0x0df3  /* U+0E53 THAI DIGIT THREE */
* Fri 24 Jan 2014 05:02:06 AM JST
0x0df4  /* U+0E54 THAI DIGIT FOUR */
* Fri 24 Jan 2014 05:02:06 AM JST
0x0df5  /* U+0E55 THAI DIGIT FIVE */
* Fri 24 Jan 2014 05:02:06 AM JST
0x0df6  /* U+0E56 THAI DIGIT SIX */
* Fri 24 Jan 2014 05:02:07 AM JST
0x0df7  /* U+0E57 THAI DIGIT SEVEN */
* Fri 24 Jan 2014 05:02:07 AM JST
0x0df8  /* U+0E58 THAI DIGIT EIGHT */
* Fri 24 Jan 2014 05:02:07 AM JST
0x0df9  /* U+0E59 THAI DIGIT NINE */
* Fri 24 Jan 2014 05:02:07 AM JST
*/
* Fri 24 Jan 2014 05:02:07 AM JST


* Fri 24 Jan 2014 05:02:08 AM JST
0xff31  /* Hangul start/stop(toggle) */
* Fri 24 Jan 2014 05:02:08 AM JST
0xff32  /* Hangul start */
* Fri 24 Jan 2014 05:02:08 AM JST
0xff33  /* Hangul end, English start */
* Fri 24 Jan 2014 05:02:08 AM JST
0xff34  /* Start Hangul->Hanja Conversion */
* Fri 24 Jan 2014 05:02:08 AM JST
0xff35  /* Hangul Jamo mode */
* Fri 24 Jan 2014 05:02:08 AM JST
0xff36  /* Hangul Romaja mode */
* Fri 24 Jan 2014 05:02:08 AM JST
0xff37  /* Hangul code input mode */
* Fri 24 Jan 2014 05:02:09 AM JST
0xff38  /* Jeonja mode */
* Fri 24 Jan 2014 05:02:09 AM JST
0xff39  /* Banja mode */
* Fri 24 Jan 2014 05:02:09 AM JST
0xff3a  /* Pre Hanja conversion */
* Fri 24 Jan 2014 05:02:09 AM JST
0xff3b  /* Post Hanja conversion */
* Fri 24 Jan 2014 05:02:09 AM JST
0xff3c  /* Single candidate */
* Fri 24 Jan 2014 05:02:09 AM JST
0xff3d  /* Multiple candidate */
* Fri 24 Jan 2014 05:02:09 AM JST
0xff3e  /* Previous candidate */
* Fri 24 Jan 2014 05:02:09 AM JST
0xff3f  /* Special symbols */
* Fri 24 Jan 2014 05:02:10 AM JST
0xff7e  /* Alias for mode_switch */
* Fri 24 Jan 2014 05:02:10 AM JST
0x0ea1
* Fri 24 Jan 2014 05:02:10 AM JST
0x0ea2
* Fri 24 Jan 2014 05:02:10 AM JST
0x0ea3
* Fri 24 Jan 2014 05:02:10 AM JST
0x0ea4
* Fri 24 Jan 2014 05:02:11 AM JST
0x0ea5
* Fri 24 Jan 2014 05:02:11 AM JST
0x0ea6
* Fri 24 Jan 2014 05:02:11 AM JST
0x0ea7
* Fri 24 Jan 2014 05:02:11 AM JST
0x0ea8
* Fri 24 Jan 2014 05:02:11 AM JST
0x0ea9
* Fri 24 Jan 2014 05:02:11 AM JST
0x0eaa
* Fri 24 Jan 2014 05:02:11 AM JST
0x0eab
* Fri 24 Jan 2014 05:02:12 AM JST
0x0eac
* Fri 24 Jan 2014 05:02:12 AM JST
0x0ead
* Fri 24 Jan 2014 05:02:12 AM JST
0x0eae
* Fri 24 Jan 2014 05:02:12 AM JST
0x0eaf
* Fri 24 Jan 2014 05:02:12 AM JST
0x0eb0
* Fri 24 Jan 2014 05:02:12 AM JST
0x0eb1
* Fri 24 Jan 2014 05:02:12 AM JST
0x0eb2
* Fri 24 Jan 2014 05:02:13 AM JST
0x0eb3
* Fri 24 Jan 2014 05:02:13 AM JST
0x0eb4
* Fri 24 Jan 2014 05:02:13 AM JST
0x0eb5
* Fri 24 Jan 2014 05:02:13 AM JST
0x0eb6
* Fri 24 Jan 2014 05:02:13 AM JST
0x0eb7
* Fri 24 Jan 2014 05:02:14 AM JST
0x0eb8
* Fri 24 Jan 2014 05:02:14 AM JST
0x0eb9
* Fri 24 Jan 2014 05:02:14 AM JST
0x0eba
* Fri 24 Jan 2014 05:02:14 AM JST
0x0ebb
* Fri 24 Jan 2014 05:02:14 AM JST
0x0ebc
* Fri 24 Jan 2014 05:02:14 AM JST
0x0ebd
* Fri 24 Jan 2014 05:02:14 AM JST
0x0ebe
* Fri 24 Jan 2014 05:02:15 AM JST
0x0ebf
* Fri 24 Jan 2014 05:02:15 AM JST
0x0ec0
* Fri 24 Jan 2014 05:02:15 AM JST
0x0ec1
* Fri 24 Jan 2014 05:02:15 AM JST
0x0ec2
* Fri 24 Jan 2014 05:02:15 AM JST
0x0ec3
* Fri 24 Jan 2014 05:02:15 AM JST
0x0ec4
* Fri 24 Jan 2014 05:02:15 AM JST
0x0ec5
* Fri 24 Jan 2014 05:02:15 AM JST
0x0ec6
* Fri 24 Jan 2014 05:02:16 AM JST
0x0ec7
* Fri 24 Jan 2014 05:02:16 AM JST
0x0ec8
* Fri 24 Jan 2014 05:02:16 AM JST
0x0ec9
* Fri 24 Jan 2014 05:02:16 AM JST
0x0eca
* Fri 24 Jan 2014 05:02:16 AM JST
0x0ecb
* Fri 24 Jan 2014 05:02:16 AM JST
0x0ecc
* Fri 24 Jan 2014 05:02:16 AM JST
0x0ecd
* Fri 24 Jan 2014 05:02:17 AM JST
0x0ece
* Fri 24 Jan 2014 05:02:17 AM JST
0x0ecf
* Fri 24 Jan 2014 05:02:17 AM JST
0x0ed0
* Fri 24 Jan 2014 05:02:17 AM JST
0x0ed1
* Fri 24 Jan 2014 05:02:17 AM JST
0x0ed2
* Fri 24 Jan 2014 05:02:18 AM JST
0x0ed3
* Fri 24 Jan 2014 05:02:18 AM JST
0x0ed4
* Fri 24 Jan 2014 05:02:18 AM JST
0x0ed5
* Fri 24 Jan 2014 05:02:18 AM JST
0x0ed6
* Fri 24 Jan 2014 05:02:18 AM JST
0x0ed7
* Fri 24 Jan 2014 05:02:18 AM JST
0x0ed8
* Fri 24 Jan 2014 05:02:18 AM JST
0x0ed9
* Fri 24 Jan 2014 05:02:19 AM JST
0x0eda
* Fri 24 Jan 2014 05:02:19 AM JST
0x0edb
* Fri 24 Jan 2014 05:02:19 AM JST
0x0edc
* Fri 24 Jan 2014 05:02:19 AM JST
0x0edd
* Fri 24 Jan 2014 05:02:19 AM JST
0x0ede
* Fri 24 Jan 2014 05:02:19 AM JST
0x0edf
* Fri 24 Jan 2014 05:02:19 AM JST
0x0ee0
* Fri 24 Jan 2014 05:02:19 AM JST
0x0ee1
* Fri 24 Jan 2014 05:02:20 AM JST
0x0ee2
* Fri 24 Jan 2014 05:02:20 AM JST
0x0ee3
* Fri 24 Jan 2014 05:02:20 AM JST
0x0ee4
* Fri 24 Jan 2014 05:02:20 AM JST
0x0ee5
* Fri 24 Jan 2014 05:02:21 AM JST
0x0ee6
* Fri 24 Jan 2014 05:02:21 AM JST
0x0ee7
* Fri 24 Jan 2014 05:02:21 AM JST
0x0ee8
* Fri 24 Jan 2014 05:02:21 AM JST
0x0ee9
* Fri 24 Jan 2014 05:02:21 AM JST
0x0eea
* Fri 24 Jan 2014 05:02:21 AM JST
0x0eeb
* Fri 24 Jan 2014 05:02:21 AM JST
0x0eec
* Fri 24 Jan 2014 05:02:21 AM JST
0x0eed
* Fri 24 Jan 2014 05:02:22 AM JST
0x0eee
* Fri 24 Jan 2014 05:02:22 AM JST
0x0eef
* Fri 24 Jan 2014 05:02:22 AM JST
0x0ef0
* Fri 24 Jan 2014 05:02:22 AM JST
0x0ef1
* Fri 24 Jan 2014 05:02:22 AM JST
0x0ef2
* Fri 24 Jan 2014 05:02:22 AM JST
0x0ef3
* Fri 24 Jan 2014 05:02:22 AM JST
0x0ef4
* Fri 24 Jan 2014 05:02:22 AM JST
0x0ef5
* Fri 24 Jan 2014 05:02:23 AM JST
0x0ef6
* Fri 24 Jan 2014 05:02:23 AM JST
0x0ef7
* Fri 24 Jan 2014 05:02:23 AM JST
0x0ef8
* Fri 24 Jan 2014 05:02:23 AM JST
0x0ef9
* Fri 24 Jan 2014 05:02:23 AM JST
0x0efa
* Fri 24 Jan 2014 05:02:23 AM JST
0x0eff  /*(U+20A9 WON SIGN)*/
* Fri 24 Jan 2014 05:02:24 AM JST
*/
* Fri 24 Jan 2014 05:02:24 AM JST
 XK_Armenian_ligature_ew       0x1000587  /* U+0587 ARMENIAN SMALL LIGATURE ECH YIWN */

* Fri 24 Jan 2014 05:02:24 AM JST
0x1000589  /* U+0589 ARMENIAN FULL STOP */
* Fri 24 Jan 2014 05:02:24 AM JST
0x1000589  /* U+0589 ARMENIAN FULL STOP */
* Fri 24 Jan 2014 05:02:24 AM JST
0x100055d  /* U+055D ARMENIAN COMMA */
* Fri 24 Jan 2014 05:02:24 AM JST
0x100055d  /* U+055D ARMENIAN COMMA */
* Fri 24 Jan 2014 05:02:25 AM JST
0x100058a  /* U+058A ARMENIAN HYPHEN */
* Fri 24 Jan 2014 05:02:25 AM JST
0x100058a  /* U+058A ARMENIAN HYPHEN */
* Fri 24 Jan 2014 05:02:25 AM JST
0x100055c  /* U+055C ARMENIAN EXCLAMATION MARK */
* Fri 24 Jan 2014 05:02:25 AM JST
0x100055c  /* U+055C ARMENIAN EXCLAMATION MARK */
* Fri 24 Jan 2014 05:02:25 AM JST
0x100055b  /* U+055B ARMENIAN EMPHASIS MARK */
* Fri 24 Jan 2014 05:02:26 AM JST
0x100055b  /* U+055B ARMENIAN EMPHASIS MARK */
* Fri 24 Jan 2014 05:02:26 AM JST
0x100055e  /* U+055E ARMENIAN QUESTION MARK */
* Fri 24 Jan 2014 05:02:26 AM JST
0x100055e  /* U+055E ARMENIAN QUESTION MARK */
* Fri 24 Jan 2014 05:02:26 AM JST
0x1000531  /* U+0531 ARMENIAN CAPITAL LETTER AYB */
* Fri 24 Jan 2014 05:02:26 AM JST
0x1000561  /* U+0561 ARMENIAN SMALL LETTER AYB */
* Fri 24 Jan 2014 05:02:26 AM JST
0x1000532  /* U+0532 ARMENIAN CAPITAL LETTER BEN */
* Fri 24 Jan 2014 05:02:26 AM JST
0x1000562  /* U+0562 ARMENIAN SMALL LETTER BEN */
* Fri 24 Jan 2014 05:02:27 AM JST
0x1000533  /* U+0533 ARMENIAN CAPITAL LETTER GIM */
* Fri 24 Jan 2014 05:02:27 AM JST
0x1000563  /* U+0563 ARMENIAN SMALL LETTER GIM */
* Fri 24 Jan 2014 05:02:27 AM JST
0x1000534  /* U+0534 ARMENIAN CAPITAL LETTER DA */
* Fri 24 Jan 2014 05:02:27 AM JST
0x1000564  /* U+0564 ARMENIAN SMALL LETTER DA */
* Fri 24 Jan 2014 05:02:28 AM JST
0x1000535  /* U+0535 ARMENIAN CAPITAL LETTER ECH */
* Fri 24 Jan 2014 05:02:28 AM JST
0x1000565  /* U+0565 ARMENIAN SMALL LETTER ECH */
* Fri 24 Jan 2014 05:02:28 AM JST
0x1000536  /* U+0536 ARMENIAN CAPITAL LETTER ZA */
* Fri 24 Jan 2014 05:02:28 AM JST
0x1000566  /* U+0566 ARMENIAN SMALL LETTER ZA */
* Fri 24 Jan 2014 05:02:28 AM JST
0x1000537  /* U+0537 ARMENIAN CAPITAL LETTER EH */
* Fri 24 Jan 2014 05:02:28 AM JST
0x1000567  /* U+0567 ARMENIAN SMALL LETTER EH */
* Fri 24 Jan 2014 05:02:28 AM JST
0x1000538  /* U+0538 ARMENIAN CAPITAL LETTER ET */
* Fri 24 Jan 2014 05:02:29 AM JST
0x1000568  /* U+0568 ARMENIAN SMALL LETTER ET */
* Fri 24 Jan 2014 05:02:29 AM JST
0x1000539  /* U+0539 ARMENIAN CAPITAL LETTER TO */
* Fri 24 Jan 2014 05:02:29 AM JST
0x1000569  /* U+0569 ARMENIAN SMALL LETTER TO */
* Fri 24 Jan 2014 05:02:29 AM JST
0x100053a  /* U+053A ARMENIAN CAPITAL LETTER ZHE */
* Fri 24 Jan 2014 05:02:29 AM JST
0x100056a  /* U+056A ARMENIAN SMALL LETTER ZHE */
* Fri 24 Jan 2014 05:02:29 AM JST
0x100053b  /* U+053B ARMENIAN CAPITAL LETTER INI */
* Fri 24 Jan 2014 05:02:29 AM JST
0x100056b  /* U+056B ARMENIAN SMALL LETTER INI */
* Fri 24 Jan 2014 05:02:30 AM JST
0x100053c  /* U+053C ARMENIAN CAPITAL LETTER LIWN */
* Fri 24 Jan 2014 05:02:30 AM JST
0x100056c  /* U+056C ARMENIAN SMALL LETTER LIWN */
* Fri 24 Jan 2014 05:02:30 AM JST
0x100053d  /* U+053D ARMENIAN CAPITAL LETTER XEH */
* Fri 24 Jan 2014 05:02:30 AM JST
0x100056d  /* U+056D ARMENIAN SMALL LETTER XEH */
* Fri 24 Jan 2014 05:02:30 AM JST
0x100053e  /* U+053E ARMENIAN CAPITAL LETTER CA */
* Fri 24 Jan 2014 05:02:31 AM JST
0x100056e  /* U+056E ARMENIAN SMALL LETTER CA */
* Fri 24 Jan 2014 05:02:31 AM JST
0x100053f  /* U+053F ARMENIAN CAPITAL LETTER KEN */
* Fri 24 Jan 2014 05:02:31 AM JST
0x100056f  /* U+056F ARMENIAN SMALL LETTER KEN */
* Fri 24 Jan 2014 05:02:31 AM JST
0x1000540  /* U+0540 ARMENIAN CAPITAL LETTER HO */
* Fri 24 Jan 2014 05:02:31 AM JST
0x1000570  /* U+0570 ARMENIAN SMALL LETTER HO */
* Fri 24 Jan 2014 05:02:31 AM JST
0x1000541  /* U+0541 ARMENIAN CAPITAL LETTER JA */
* Fri 24 Jan 2014 05:02:32 AM JST
0x1000571  /* U+0571 ARMENIAN SMALL LETTER JA */
* Fri 24 Jan 2014 05:02:32 AM JST
0x1000542  /* U+0542 ARMENIAN CAPITAL LETTER GHAD */
* Fri 24 Jan 2014 05:02:32 AM JST
0x1000572  /* U+0572 ARMENIAN SMALL LETTER GHAD */
* Fri 24 Jan 2014 05:02:32 AM JST
0x1000543  /* U+0543 ARMENIAN CAPITAL LETTER CHEH */
* Fri 24 Jan 2014 05:02:32 AM JST
0x1000573  /* U+0573 ARMENIAN SMALL LETTER CHEH */
* Fri 24 Jan 2014 05:02:32 AM JST
0x1000544  /* U+0544 ARMENIAN CAPITAL LETTER MEN */
* Fri 24 Jan 2014 05:02:33 AM JST
0x1000574  /* U+0574 ARMENIAN SMALL LETTER MEN */
* Fri 24 Jan 2014 05:02:33 AM JST
0x1000545  /* U+0545 ARMENIAN CAPITAL LETTER YI */
* Fri 24 Jan 2014 05:02:33 AM JST
0x1000575  /* U+0575 ARMENIAN SMALL LETTER YI */
* Fri 24 Jan 2014 05:02:33 AM JST
0x1000546  /* U+0546 ARMENIAN CAPITAL LETTER NOW */
* Fri 24 Jan 2014 05:02:33 AM JST
0x1000576  /* U+0576 ARMENIAN SMALL LETTER NOW */
* Fri 24 Jan 2014 05:02:33 AM JST
0x1000547  /* U+0547 ARMENIAN CAPITAL LETTER SHA */
* Fri 24 Jan 2014 05:02:34 AM JST
0x1000577  /* U+0577 ARMENIAN SMALL LETTER SHA */
* Fri 24 Jan 2014 05:02:34 AM JST
0x1000548  /* U+0548 ARMENIAN CAPITAL LETTER VO */
* Fri 24 Jan 2014 05:02:34 AM JST
0x1000578  /* U+0578 ARMENIAN SMALL LETTER VO */
* Fri 24 Jan 2014 05:02:34 AM JST
0x1000549  /* U+0549 ARMENIAN CAPITAL LETTER CHA */
* Fri 24 Jan 2014 05:02:34 AM JST
0x1000579  /* U+0579 ARMENIAN SMALL LETTER CHA */
* Fri 24 Jan 2014 05:02:34 AM JST
0x100054a  /* U+054A ARMENIAN CAPITAL LETTER PEH */
* Fri 24 Jan 2014 05:02:35 AM JST
0x100057a  /* U+057A ARMENIAN SMALL LETTER PEH */
* Fri 24 Jan 2014 05:02:35 AM JST
0x100054b  /* U+054B ARMENIAN CAPITAL LETTER JHEH */
* Fri 24 Jan 2014 05:02:35 AM JST
0x100057b  /* U+057B ARMENIAN SMALL LETTER JHEH */
* Fri 24 Jan 2014 05:02:35 AM JST
0x100054c  /* U+054C ARMENIAN CAPITAL LETTER RA */
* Fri 24 Jan 2014 05:02:35 AM JST
0x100057c  /* U+057C ARMENIAN SMALL LETTER RA */
* Fri 24 Jan 2014 05:02:35 AM JST
0x100054d  /* U+054D ARMENIAN CAPITAL LETTER SEH */
* Fri 24 Jan 2014 05:02:35 AM JST
0x100057d  /* U+057D ARMENIAN SMALL LETTER SEH */
* Fri 24 Jan 2014 05:02:36 AM JST
0x100054e  /* U+054E ARMENIAN CAPITAL LETTER VEW */
* Fri 24 Jan 2014 05:02:36 AM JST
0x100057e  /* U+057E ARMENIAN SMALL LETTER VEW */
* Fri 24 Jan 2014 05:02:36 AM JST
0x100054f  /* U+054F ARMENIAN CAPITAL LETTER TIWN */
* Fri 24 Jan 2014 05:02:36 AM JST
0x100057f  /* U+057F ARMENIAN SMALL LETTER TIWN */
* Fri 24 Jan 2014 05:02:36 AM JST
0x1000550  /* U+0550 ARMENIAN CAPITAL LETTER REH */
* Fri 24 Jan 2014 05:02:36 AM JST
0x1000580  /* U+0580 ARMENIAN SMALL LETTER REH */
* Fri 24 Jan 2014 05:02:37 AM JST
0x1000551  /* U+0551 ARMENIAN CAPITAL LETTER CO */
* Fri 24 Jan 2014 05:02:37 AM JST
0x1000581  /* U+0581 ARMENIAN SMALL LETTER CO */
* Fri 24 Jan 2014 05:02:37 AM JST
0x1000552  /* U+0552 ARMENIAN CAPITAL LETTER YIWN */
* Fri 24 Jan 2014 05:02:37 AM JST
0x1000582  /* U+0582 ARMENIAN SMALL LETTER YIWN */
* Fri 24 Jan 2014 05:02:37 AM JST
0x1000553  /* U+0553 ARMENIAN CAPITAL LETTER PIWR */
* Fri 24 Jan 2014 05:02:38 AM JST
0x1000583  /* U+0583 ARMENIAN SMALL LETTER PIWR */
* Fri 24 Jan 2014 05:02:38 AM JST
0x1000554  /* U+0554 ARMENIAN CAPITAL LETTER KEH */
* Fri 24 Jan 2014 05:02:38 AM JST
0x1000584  /* U+0584 ARMENIAN SMALL LETTER KEH */
* Fri 24 Jan 2014 05:02:38 AM JST
0x1000555  /* U+0555 ARMENIAN CAPITAL LETTER OH */
* Fri 24 Jan 2014 05:02:38 AM JST
0x1000585  /* U+0585 ARMENIAN SMALL LETTER OH */
* Fri 24 Jan 2014 05:02:38 AM JST
0x1000556  /* U+0556 ARMENIAN CAPITAL LETTER FEH */
* Fri 24 Jan 2014 05:02:38 AM JST
0x1000586  /* U+0586 ARMENIAN SMALL LETTER FEH */
* Fri 24 Jan 2014 05:02:39 AM JST
0x100055a  /* U+055A ARMENIAN APOSTROPHE */
* Fri 24 Jan 2014 05:02:39 AM JST
*/
* Fri 24 Jan 2014 05:02:39 AM JST
 XK_Georgian_an                0x10010d0  /* U+10D0 GEORGIAN LETTER AN */

* Fri 24 Jan 2014 05:02:39 AM JST
0x10010d1  /* U+10D1 GEORGIAN LETTER BAN */
* Fri 24 Jan 2014 05:02:39 AM JST
0x10010d2  /* U+10D2 GEORGIAN LETTER GAN */
* Fri 24 Jan 2014 05:02:39 AM JST
0x10010d3  /* U+10D3 GEORGIAN LETTER DON */
* Fri 24 Jan 2014 05:02:39 AM JST
0x10010d4  /* U+10D4 GEORGIAN LETTER EN */
* Fri 24 Jan 2014 05:02:40 AM JST
0x10010d5  /* U+10D5 GEORGIAN LETTER VIN */
* Fri 24 Jan 2014 05:02:40 AM JST
0x10010d6  /* U+10D6 GEORGIAN LETTER ZEN */
* Fri 24 Jan 2014 05:02:40 AM JST
0x10010d7  /* U+10D7 GEORGIAN LETTER TAN */
* Fri 24 Jan 2014 05:02:40 AM JST
0x10010d8  /* U+10D8 GEORGIAN LETTER IN */
* Fri 24 Jan 2014 05:02:41 AM JST
0x10010d9  /* U+10D9 GEORGIAN LETTER KAN */
* Fri 24 Jan 2014 05:02:41 AM JST
0x10010da  /* U+10DA GEORGIAN LETTER LAS */
* Fri 24 Jan 2014 05:02:41 AM JST
0x10010db  /* U+10DB GEORGIAN LETTER MAN */
* Fri 24 Jan 2014 05:02:41 AM JST
0x10010dc  /* U+10DC GEORGIAN LETTER NAR */
* Fri 24 Jan 2014 05:02:41 AM JST
0x10010dd  /* U+10DD GEORGIAN LETTER ON */
* Fri 24 Jan 2014 05:02:42 AM JST
0x10010de  /* U+10DE GEORGIAN LETTER PAR */
* Fri 24 Jan 2014 05:02:42 AM JST
0x10010df  /* U+10DF GEORGIAN LETTER ZHAR */
* Fri 24 Jan 2014 05:02:42 AM JST
0x10010e0  /* U+10E0 GEORGIAN LETTER RAE */
* Fri 24 Jan 2014 05:02:42 AM JST
0x10010e1  /* U+10E1 GEORGIAN LETTER SAN */
* Fri 24 Jan 2014 05:02:42 AM JST
0x10010e2  /* U+10E2 GEORGIAN LETTER TAR */
* Fri 24 Jan 2014 05:02:42 AM JST
0x10010e3  /* U+10E3 GEORGIAN LETTER UN */
* Fri 24 Jan 2014 05:02:42 AM JST
0x10010e4  /* U+10E4 GEORGIAN LETTER PHAR */
* Fri 24 Jan 2014 05:02:42 AM JST
0x10010e5  /* U+10E5 GEORGIAN LETTER KHAR */
* Fri 24 Jan 2014 05:02:43 AM JST
0x10010e6  /* U+10E6 GEORGIAN LETTER GHAN */
* Fri 24 Jan 2014 05:02:43 AM JST
0x10010e7  /* U+10E7 GEORGIAN LETTER QAR */
* Fri 24 Jan 2014 05:02:43 AM JST
0x10010e8  /* U+10E8 GEORGIAN LETTER SHIN */
* Fri 24 Jan 2014 05:02:44 AM JST
0x10010e9  /* U+10E9 GEORGIAN LETTER CHIN */
* Fri 24 Jan 2014 05:02:44 AM JST
0x10010ea  /* U+10EA GEORGIAN LETTER CAN */
* Fri 24 Jan 2014 05:02:44 AM JST
0x10010eb  /* U+10EB GEORGIAN LETTER JIL */
* Fri 24 Jan 2014 05:02:44 AM JST
0x10010ec  /* U+10EC GEORGIAN LETTER CIL */
* Fri 24 Jan 2014 05:02:44 AM JST
0x10010ed  /* U+10ED GEORGIAN LETTER CHAR */
* Fri 24 Jan 2014 05:02:44 AM JST
0x10010ee  /* U+10EE GEORGIAN LETTER XAN */
* Fri 24 Jan 2014 05:02:45 AM JST
0x10010ef  /* U+10EF GEORGIAN LETTER JHAN */
* Fri 24 Jan 2014 05:02:45 AM JST
0x10010f0  /* U+10F0 GEORGIAN LETTER HAE */
* Fri 24 Jan 2014 05:02:45 AM JST
0x10010f1  /* U+10F1 GEORGIAN LETTER HE */
* Fri 24 Jan 2014 05:02:45 AM JST
0x10010f2  /* U+10F2 GEORGIAN LETTER HIE */
* Fri 24 Jan 2014 05:02:45 AM JST
0x10010f3  /* U+10F3 GEORGIAN LETTER WE */
* Fri 24 Jan 2014 05:02:45 AM JST
0x10010f4  /* U+10F4 GEORGIAN LETTER HAR */
* Fri 24 Jan 2014 05:02:45 AM JST
0x10010f5  /* U+10F5 GEORGIAN LETTER HOE */
* Fri 24 Jan 2014 05:02:46 AM JST
0x10010f6  /* U+10F6 GEORGIAN LETTER FI */
* Fri 24 Jan 2014 05:02:46 AM JST
*/
* Fri 24 Jan 2014 05:02:46 AM JST
/* latin */

* Fri 24 Jan 2014 05:02:46 AM JST
0x1001e8a  /* U+1E8A LATIN CAPITAL LETTER X WITH DOT ABOVE */
* Fri 24 Jan 2014 05:02:46 AM JST
0x100012c  /* U+012C LATIN CAPITAL LETTER I WITH BREVE */
* Fri 24 Jan 2014 05:02:47 AM JST
0x10001b5  /* U+01B5 LATIN CAPITAL LETTER Z WITH STROKE */
* Fri 24 Jan 2014 05:02:47 AM JST
0x10001e6  /* U+01E6 LATIN CAPITAL LETTER G WITH CARON */
* Fri 24 Jan 2014 05:02:47 AM JST
0x10001d1  /* U+01D2 LATIN CAPITAL LETTER O WITH CARON */
* Fri 24 Jan 2014 05:02:47 AM JST
0x100019f  /* U+019F LATIN CAPITAL LETTER O WITH MIDDLE TILDE */
* Fri 24 Jan 2014 05:02:47 AM JST
0x1001e8b  /* U+1E8B LATIN SMALL LETTER X WITH DOT ABOVE */
* Fri 24 Jan 2014 05:02:47 AM JST
0x100012d  /* U+012D LATIN SMALL LETTER I WITH BREVE */
* Fri 24 Jan 2014 05:02:47 AM JST
0x10001b6  /* U+01B6 LATIN SMALL LETTER Z WITH STROKE */
* Fri 24 Jan 2014 05:02:48 AM JST
0x10001e7  /* U+01E7 LATIN SMALL LETTER G WITH CARON */
* Fri 24 Jan 2014 05:02:48 AM JST
0x10001d2  /* U+01D2 LATIN SMALL LETTER O WITH CARON */
* Fri 24 Jan 2014 05:02:48 AM JST
0x1000275  /* U+0275 LATIN SMALL LETTER BARRED O */
* Fri 24 Jan 2014 05:02:48 AM JST
0x100018f  /* U+018F LATIN CAPITAL LETTER SCHWA */
* Fri 24 Jan 2014 05:02:48 AM JST
0x1000259  /* U+0259 LATIN SMALL LETTER SCHWA */
* Fri 24 Jan 2014 05:02:48 AM JST
0x10001b7  /* U+01B7 LATIN CAPITAL LETTER EZH */
* Fri 24 Jan 2014 05:02:48 AM JST
0x1000292  /* U+0292 LATIN SMALL LETTER EZH */
* Fri 24 Jan 2014 05:02:49 AM JST
0x1001e36  /* U+1E36 LATIN CAPITAL LETTER L WITH DOT BELOW */
* Fri 24 Jan 2014 05:02:49 AM JST
0x1001e37  /* U+1E37 LATIN SMALL LETTER L WITH DOT BELOW */
* Fri 24 Jan 2014 05:02:49 AM JST
*/
* Fri 24 Jan 2014 05:02:49 AM JST
 XK_Abelowdot                  0x1001ea0  /* U+1EA0 LATIN CAPITAL LETTER A WITH DOT BELOW */

* Fri 24 Jan 2014 05:02:49 AM JST
0x1001ea1  /* U+1EA1 LATIN SMALL LETTER A WITH DOT BELOW */
* Fri 24 Jan 2014 05:02:50 AM JST
0x1001ea2  /* U+1EA2 LATIN CAPITAL LETTER A WITH HOOK ABOVE */
* Fri 24 Jan 2014 05:02:50 AM JST
0x1001ea3  /* U+1EA3 LATIN SMALL LETTER A WITH HOOK ABOVE */
* Fri 24 Jan 2014 05:02:50 AM JST
0x1001ea4  /* U+1EA4 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE */
* Fri 24 Jan 2014 05:02:50 AM JST
0x1001ea5  /* U+1EA5 LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE */
* Fri 24 Jan 2014 05:02:50 AM JST
0x1001ea6  /* U+1EA6 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE */
* Fri 24 Jan 2014 05:02:51 AM JST
0x1001ea7  /* U+1EA7 LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE */
* Fri 24 Jan 2014 05:02:51 AM JST
0x1001ea8  /* U+1EA8 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE */
* Fri 24 Jan 2014 05:02:51 AM JST
0x1001ea9  /* U+1EA9 LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE */
* Fri 24 Jan 2014 05:02:51 AM JST
0x1001eaa  /* U+1EAA LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE */
* Fri 24 Jan 2014 05:02:51 AM JST
0x1001eab  /* U+1EAB LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE */
* Fri 24 Jan 2014 05:02:51 AM JST
0x1001eac  /* U+1EAC LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW */
* Fri 24 Jan 2014 05:02:51 AM JST
0x1001ead  /* U+1EAD LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW */
* Fri 24 Jan 2014 05:02:51 AM JST
0x1001eae  /* U+1EAE LATIN CAPITAL LETTER A WITH BREVE AND ACUTE */
* Fri 24 Jan 2014 05:02:52 AM JST
0x1001eaf  /* U+1EAF LATIN SMALL LETTER A WITH BREVE AND ACUTE */
* Fri 24 Jan 2014 05:02:52 AM JST
0x1001eb0  /* U+1EB0 LATIN CAPITAL LETTER A WITH BREVE AND GRAVE */
* Fri 24 Jan 2014 05:02:52 AM JST
0x1001eb1  /* U+1EB1 LATIN SMALL LETTER A WITH BREVE AND GRAVE */
* Fri 24 Jan 2014 05:02:52 AM JST
0x1001eb2  /* U+1EB2 LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE */
* Fri 24 Jan 2014 05:02:52 AM JST
0x1001eb3  /* U+1EB3 LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE */
* Fri 24 Jan 2014 05:02:52 AM JST
0x1001eb4  /* U+1EB4 LATIN CAPITAL LETTER A WITH BREVE AND TILDE */
* Fri 24 Jan 2014 05:02:52 AM JST
0x1001eb5  /* U+1EB5 LATIN SMALL LETTER A WITH BREVE AND TILDE */
* Fri 24 Jan 2014 05:02:53 AM JST
0x1001eb6  /* U+1EB6 LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW */
* Fri 24 Jan 2014 05:02:53 AM JST
0x1001eb7  /* U+1EB7 LATIN SMALL LETTER A WITH BREVE AND DOT BELOW */
* Fri 24 Jan 2014 05:02:53 AM JST
0x1001eb8  /* U+1EB8 LATIN CAPITAL LETTER E WITH DOT BELOW */
* Fri 24 Jan 2014 05:02:53 AM JST
0x1001eb9  /* U+1EB9 LATIN SMALL LETTER E WITH DOT BELOW */
* Fri 24 Jan 2014 05:02:54 AM JST
0x1001eba  /* U+1EBA LATIN CAPITAL LETTER E WITH HOOK ABOVE */
* Fri 24 Jan 2014 05:02:54 AM JST
0x1001ebb  /* U+1EBB LATIN SMALL LETTER E WITH HOOK ABOVE */
* Fri 24 Jan 2014 05:02:54 AM JST
0x1001ebc  /* U+1EBC LATIN CAPITAL LETTER E WITH TILDE */
* Fri 24 Jan 2014 05:02:54 AM JST
0x1001ebd  /* U+1EBD LATIN SMALL LETTER E WITH TILDE */
* Fri 24 Jan 2014 05:02:54 AM JST
0x1001ebe  /* U+1EBE LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE */
* Fri 24 Jan 2014 05:02:54 AM JST
0x1001ebf  /* U+1EBF LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE */
* Fri 24 Jan 2014 05:02:54 AM JST
0x1001ec0  /* U+1EC0 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE */
* Fri 24 Jan 2014 05:02:55 AM JST
0x1001ec1  /* U+1EC1 LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE */
* Fri 24 Jan 2014 05:02:55 AM JST
0x1001ec2  /* U+1EC2 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE */
* Fri 24 Jan 2014 05:02:55 AM JST
0x1001ec3  /* U+1EC3 LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE */
* Fri 24 Jan 2014 05:02:55 AM JST
0x1001ec4  /* U+1EC4 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE */
* Fri 24 Jan 2014 05:02:55 AM JST
0x1001ec5  /* U+1EC5 LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE */
* Fri 24 Jan 2014 05:02:55 AM JST
0x1001ec6  /* U+1EC6 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW */
* Fri 24 Jan 2014 05:02:56 AM JST
0x1001ec7  /* U+1EC7 LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW */
* Fri 24 Jan 2014 05:02:56 AM JST
0x1001ec8  /* U+1EC8 LATIN CAPITAL LETTER I WITH HOOK ABOVE */
* Fri 24 Jan 2014 05:02:56 AM JST
0x1001ec9  /* U+1EC9 LATIN SMALL LETTER I WITH HOOK ABOVE */
* Fri 24 Jan 2014 05:02:56 AM JST
0x1001eca  /* U+1ECA LATIN CAPITAL LETTER I WITH DOT BELOW */
* Fri 24 Jan 2014 05:02:56 AM JST
0x1001ecb  /* U+1ECB LATIN SMALL LETTER I WITH DOT BELOW */
* Fri 24 Jan 2014 05:02:57 AM JST
0x1001ecc  /* U+1ECC LATIN CAPITAL LETTER O WITH DOT BELOW */
* Fri 24 Jan 2014 05:02:57 AM JST
0x1001ecd  /* U+1ECD LATIN SMALL LETTER O WITH DOT BELOW */
* Fri 24 Jan 2014 05:02:57 AM JST
0x1001ece  /* U+1ECE LATIN CAPITAL LETTER O WITH HOOK ABOVE */
* Fri 24 Jan 2014 05:02:57 AM JST
0x1001ecf  /* U+1ECF LATIN SMALL LETTER O WITH HOOK ABOVE */
* Fri 24 Jan 2014 05:02:57 AM JST
0x1001ed0  /* U+1ED0 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE */
* Fri 24 Jan 2014 05:02:57 AM JST
0x1001ed1  /* U+1ED1 LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE */
* Fri 24 Jan 2014 05:02:57 AM JST
0x1001ed2  /* U+1ED2 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE */
* Fri 24 Jan 2014 05:02:57 AM JST
0x1001ed3  /* U+1ED3 LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE */
* Fri 24 Jan 2014 05:02:58 AM JST
0x1001ed4  /* U+1ED4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE */
* Fri 24 Jan 2014 05:02:58 AM JST
0x1001ed5  /* U+1ED5 LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE */
* Fri 24 Jan 2014 05:02:58 AM JST
0x1001ed6  /* U+1ED6 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE */
* Fri 24 Jan 2014 05:02:58 AM JST
0x1001ed7  /* U+1ED7 LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE */
* Fri 24 Jan 2014 05:02:58 AM JST
0x1001ed8  /* U+1ED8 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW */
* Fri 24 Jan 2014 05:02:58 AM JST
0x1001ed9  /* U+1ED9 LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW */
* Fri 24 Jan 2014 05:02:59 AM JST
0x1001eda  /* U+1EDA LATIN CAPITAL LETTER O WITH HORN AND ACUTE */
* Fri 24 Jan 2014 05:02:59 AM JST
0x1001edb  /* U+1EDB LATIN SMALL LETTER O WITH HORN AND ACUTE */
* Fri 24 Jan 2014 05:02:59 AM JST
0x1001edc  /* U+1EDC LATIN CAPITAL LETTER O WITH HORN AND GRAVE */
* Fri 24 Jan 2014 05:02:59 AM JST
0x1001edd  /* U+1EDD LATIN SMALL LETTER O WITH HORN AND GRAVE */
* Fri 24 Jan 2014 05:02:59 AM JST
0x1001ede  /* U+1EDE LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE */
* Fri 24 Jan 2014 05:03:00 AM JST
0x1001edf  /* U+1EDF LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE */
* Fri 24 Jan 2014 05:03:00 AM JST
0x1001ee0  /* U+1EE0 LATIN CAPITAL LETTER O WITH HORN AND TILDE */
* Fri 24 Jan 2014 05:03:00 AM JST
0x1001ee1  /* U+1EE1 LATIN SMALL LETTER O WITH HORN AND TILDE */
* Fri 24 Jan 2014 05:03:00 AM JST
0x1001ee2  /* U+1EE2 LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW */
* Fri 24 Jan 2014 05:03:00 AM JST
0x1001ee3  /* U+1EE3 LATIN SMALL LETTER O WITH HORN AND DOT BELOW */
* Fri 24 Jan 2014 05:03:00 AM JST
0x1001ee4  /* U+1EE4 LATIN CAPITAL LETTER U WITH DOT BELOW */
* Fri 24 Jan 2014 05:03:00 AM JST
0x1001ee5  /* U+1EE5 LATIN SMALL LETTER U WITH DOT BELOW */
* Fri 24 Jan 2014 05:03:01 AM JST
0x1001ee6  /* U+1EE6 LATIN CAPITAL LETTER U WITH HOOK ABOVE */
* Fri 24 Jan 2014 05:03:01 AM JST
0x1001ee7  /* U+1EE7 LATIN SMALL LETTER U WITH HOOK ABOVE */
* Fri 24 Jan 2014 05:03:01 AM JST
0x1001ee8  /* U+1EE8 LATIN CAPITAL LETTER U WITH HORN AND ACUTE */
* Fri 24 Jan 2014 05:03:01 AM JST
0x1001ee9  /* U+1EE9 LATIN SMALL LETTER U WITH HORN AND ACUTE */
* Fri 24 Jan 2014 05:03:01 AM JST
0x1001eea  /* U+1EEA LATIN CAPITAL LETTER U WITH HORN AND GRAVE */
* Fri 24 Jan 2014 05:03:01 AM JST
0x1001eeb  /* U+1EEB LATIN SMALL LETTER U WITH HORN AND GRAVE */
* Fri 24 Jan 2014 05:03:01 AM JST
0x1001eec  /* U+1EEC LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE */
* Fri 24 Jan 2014 05:03:02 AM JST
0x1001eed  /* U+1EED LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE */
* Fri 24 Jan 2014 05:03:02 AM JST
0x1001eee  /* U+1EEE LATIN CAPITAL LETTER U WITH HORN AND TILDE */
* Fri 24 Jan 2014 05:03:02 AM JST
0x1001eef  /* U+1EEF LATIN SMALL LETTER U WITH HORN AND TILDE */
* Fri 24 Jan 2014 05:03:02 AM JST
0x1001ef0  /* U+1EF0 LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW */
* Fri 24 Jan 2014 05:03:03 AM JST
0x1001ef1  /* U+1EF1 LATIN SMALL LETTER U WITH HORN AND DOT BELOW */
* Fri 24 Jan 2014 05:03:03 AM JST
0x1001ef4  /* U+1EF4 LATIN CAPITAL LETTER Y WITH DOT BELOW */
* Fri 24 Jan 2014 05:03:03 AM JST
0x1001ef5  /* U+1EF5 LATIN SMALL LETTER Y WITH DOT BELOW */
* Fri 24 Jan 2014 05:03:03 AM JST
0x1001ef6  /* U+1EF6 LATIN CAPITAL LETTER Y WITH HOOK ABOVE */
* Fri 24 Jan 2014 05:03:03 AM JST
0x1001ef7  /* U+1EF7 LATIN SMALL LETTER Y WITH HOOK ABOVE */
* Fri 24 Jan 2014 05:03:03 AM JST
0x1001ef8  /* U+1EF8 LATIN CAPITAL LETTER Y WITH TILDE */
* Fri 24 Jan 2014 05:03:04 AM JST
0x1001ef9  /* U+1EF9 LATIN SMALL LETTER Y WITH TILDE */
* Fri 24 Jan 2014 05:03:04 AM JST
0x10001a0  /* U+01A0 LATIN CAPITAL LETTER O WITH HORN */
* Fri 24 Jan 2014 05:03:04 AM JST
0x10001a1  /* U+01A1 LATIN SMALL LETTER O WITH HORN */
* Fri 24 Jan 2014 05:03:04 AM JST
0x10001af  /* U+01AF LATIN CAPITAL LETTER U WITH HORN */
* Fri 24 Jan 2014 05:03:04 AM JST
0x10001b0  /* U+01B0 LATIN SMALL LETTER U WITH HORN */
* Fri 24 Jan 2014 05:03:04 AM JST
*/
* Fri 24 Jan 2014 05:03:04 AM JST
 XK_EcuSign                    0x10020a0  /* U+20A0 EURO-CURRENCY SIGN */

* Fri 24 Jan 2014 05:03:05 AM JST
0x10020a1  /* U+20A1 COLON SIGN */
* Fri 24 Jan 2014 05:03:05 AM JST
0x10020a2  /* U+20A2 CRUZEIRO SIGN */
* Fri 24 Jan 2014 05:03:05 AM JST
0x10020a3  /* U+20A3 FRENCH FRANC SIGN */
* Fri 24 Jan 2014 05:03:05 AM JST
0x10020a4  /* U+20A4 LIRA SIGN */
* Fri 24 Jan 2014 05:03:05 AM JST
0x10020a5  /* U+20A5 MILL SIGN */
* Fri 24 Jan 2014 05:03:06 AM JST
0x10020a6  /* U+20A6 NAIRA SIGN */
* Fri 24 Jan 2014 05:03:06 AM JST
0x10020a7  /* U+20A7 PESETA SIGN */
* Fri 24 Jan 2014 05:03:06 AM JST
0x10020a8  /* U+20A8 RUPEE SIGN */
* Fri 24 Jan 2014 05:03:06 AM JST
0x10020a9  /* U+20A9 WON SIGN */
* Fri 24 Jan 2014 05:03:06 AM JST
0x10020aa  /* U+20AA NEW SHEQEL SIGN */
* Fri 24 Jan 2014 05:03:06 AM JST
0x10020ab  /* U+20AB DONG SIGN */
* Fri 24 Jan 2014 05:03:06 AM JST
0x20ac  /* U+20AC EURO SIGN */
* Fri 24 Jan 2014 05:03:07 AM JST
*/
* Fri 24 Jan 2014 05:03:07 AM JST
/* one, two and three are defined above. */

* Fri 24 Jan 2014 05:03:07 AM JST
0x1002070  /* U+2070 SUPERSCRIPT ZERO */
* Fri 24 Jan 2014 05:03:07 AM JST
0x1002074  /* U+2074 SUPERSCRIPT FOUR */
* Fri 24 Jan 2014 05:03:07 AM JST
0x1002075  /* U+2075 SUPERSCRIPT FIVE */
* Fri 24 Jan 2014 05:03:07 AM JST
0x1002076  /* U+2076 SUPERSCRIPT SIX */
* Fri 24 Jan 2014 05:03:08 AM JST
0x1002077  /* U+2077 SUPERSCRIPT SEVEN */
* Fri 24 Jan 2014 05:03:08 AM JST
0x1002078  /* U+2078 SUPERSCRIPT EIGHT */
* Fri 24 Jan 2014 05:03:08 AM JST
0x1002079  /* U+2079 SUPERSCRIPT NINE */
* Fri 24 Jan 2014 05:03:08 AM JST
0x1002080  /* U+2080 SUBSCRIPT ZERO */
* Fri 24 Jan 2014 05:03:08 AM JST
0x1002081  /* U+2081 SUBSCRIPT ONE */
* Fri 24 Jan 2014 05:03:08 AM JST
0x1002082  /* U+2082 SUBSCRIPT TWO */
* Fri 24 Jan 2014 05:03:08 AM JST
0x1002083  /* U+2083 SUBSCRIPT THREE */
* Fri 24 Jan 2014 05:03:09 AM JST
0x1002084  /* U+2084 SUBSCRIPT FOUR */
* Fri 24 Jan 2014 05:03:09 AM JST
0x1002085  /* U+2085 SUBSCRIPT FIVE */
* Fri 24 Jan 2014 05:03:09 AM JST
0x1002086  /* U+2086 SUBSCRIPT SIX */
* Fri 24 Jan 2014 05:03:09 AM JST
0x1002087  /* U+2087 SUBSCRIPT SEVEN */
* Fri 24 Jan 2014 05:03:09 AM JST
0x1002088  /* U+2088 SUBSCRIPT EIGHT */
* Fri 24 Jan 2014 05:03:10 AM JST
0x1002089  /* U+2089 SUBSCRIPT NINE */
* Fri 24 Jan 2014 05:03:10 AM JST
0x1002202  /* U+2202 PARTIAL DIFFERENTIAL */
* Fri 24 Jan 2014 05:03:10 AM JST
0x1002205  /* U+2205 NULL SET */
* Fri 24 Jan 2014 05:03:10 AM JST
0x1002208  /* U+2208 ELEMENT OF */
* Fri 24 Jan 2014 05:03:10 AM JST
0x1002209  /* U+2209 NOT AN ELEMENT OF */
* Fri 24 Jan 2014 05:03:10 AM JST
0x100220B  /* U+220B CONTAINS AS MEMBER */
* Fri 24 Jan 2014 05:03:10 AM JST
0x100221A  /* U+221A SQUARE ROOT */
* Fri 24 Jan 2014 05:03:11 AM JST
0x100221B  /* U+221B CUBE ROOT */
* Fri 24 Jan 2014 05:03:11 AM JST
0x100221C  /* U+221C FOURTH ROOT */
* Fri 24 Jan 2014 05:03:11 AM JST
0x100222C  /* U+222C DOUBLE INTEGRAL */
* Fri 24 Jan 2014 05:03:11 AM JST
0x100222D  /* U+222D TRIPLE INTEGRAL */
* Fri 24 Jan 2014 05:03:11 AM JST
0x1002235  /* U+2235 BECAUSE */
* Fri 24 Jan 2014 05:03:11 AM JST
0x1002248  /* U+2245 ALMOST EQUAL TO */
* Fri 24 Jan 2014 05:03:12 AM JST
0x1002247  /* U+2247 NOT ALMOST EQUAL TO */
* Fri 24 Jan 2014 05:03:12 AM JST
0x1002262  /* U+2262 NOT IDENTICAL TO */
* Fri 24 Jan 2014 05:03:12 AM JST
0x1002263  /* U+2263 STRICTLY EQUIVALENT TO */          
* Fri 24 Jan 2014 05:03:13 AM JST
*/
* Fri 24 Jan 2014 05:03:13 AM JST
 XK_braille_dot_1                 0xfff1

* Fri 24 Jan 2014 05:03:13 AM JST
0xfff2
* Fri 24 Jan 2014 05:03:13 AM JST
0xfff3
* Fri 24 Jan 2014 05:03:13 AM JST
0xfff4
* Fri 24 Jan 2014 05:03:13 AM JST
0xfff5
* Fri 24 Jan 2014 05:03:13 AM JST
0xfff6
* Fri 24 Jan 2014 05:03:14 AM JST
0xfff7
* Fri 24 Jan 2014 05:03:14 AM JST
0xfff8
* Fri 24 Jan 2014 05:03:14 AM JST
0xfff9
* Fri 24 Jan 2014 05:03:14 AM JST
0xfffa
* Fri 24 Jan 2014 05:03:14 AM JST
0x1002800  /* U+2800 BRAILLE PATTERN BLANK */
* Fri 24 Jan 2014 05:03:14 AM JST
0x1002801  /* U+2801 BRAILLE PATTERN DOTS-1 */
* Fri 24 Jan 2014 05:03:14 AM JST
0x1002802  /* U+2802 BRAILLE PATTERN DOTS-2 */
* Fri 24 Jan 2014 05:03:15 AM JST
0x1002803  /* U+2803 BRAILLE PATTERN DOTS-12 */
* Fri 24 Jan 2014 05:03:15 AM JST
0x1002804  /* U+2804 BRAILLE PATTERN DOTS-3 */
* Fri 24 Jan 2014 05:03:15 AM JST
0x1002805  /* U+2805 BRAILLE PATTERN DOTS-13 */
* Fri 24 Jan 2014 05:03:15 AM JST
0x1002806  /* U+2806 BRAILLE PATTERN DOTS-23 */
* Fri 24 Jan 2014 05:03:15 AM JST
0x1002807  /* U+2807 BRAILLE PATTERN DOTS-123 */
* Fri 24 Jan 2014 05:03:15 AM JST
0x1002808  /* U+2808 BRAILLE PATTERN DOTS-4 */
* Fri 24 Jan 2014 05:03:16 AM JST
0x1002809  /* U+2809 BRAILLE PATTERN DOTS-14 */
* Fri 24 Jan 2014 05:03:16 AM JST
0x100280a  /* U+280a BRAILLE PATTERN DOTS-24 */
* Fri 24 Jan 2014 05:03:16 AM JST
0x100280b  /* U+280b BRAILLE PATTERN DOTS-124 */
* Fri 24 Jan 2014 05:03:16 AM JST
0x100280c  /* U+280c BRAILLE PATTERN DOTS-34 */
* Fri 24 Jan 2014 05:03:16 AM JST
0x100280d  /* U+280d BRAILLE PATTERN DOTS-134 */
* Fri 24 Jan 2014 05:03:17 AM JST
0x100280e  /* U+280e BRAILLE PATTERN DOTS-234 */
* Fri 24 Jan 2014 05:03:17 AM JST
0x100280f  /* U+280f BRAILLE PATTERN DOTS-1234 */
* Fri 24 Jan 2014 05:03:17 AM JST
0x1002810  /* U+2810 BRAILLE PATTERN DOTS-5 */
* Fri 24 Jan 2014 05:03:17 AM JST
0x1002811  /* U+2811 BRAILLE PATTERN DOTS-15 */
* Fri 24 Jan 2014 05:03:17 AM JST
0x1002812  /* U+2812 BRAILLE PATTERN DOTS-25 */
* Fri 24 Jan 2014 05:03:18 AM JST
0x1002813  /* U+2813 BRAILLE PATTERN DOTS-125 */
* Fri 24 Jan 2014 05:03:18 AM JST
0x1002814  /* U+2814 BRAILLE PATTERN DOTS-35 */
* Fri 24 Jan 2014 05:03:18 AM JST
0x1002815  /* U+2815 BRAILLE PATTERN DOTS-135 */
* Fri 24 Jan 2014 05:03:18 AM JST
0x1002816  /* U+2816 BRAILLE PATTERN DOTS-235 */
* Fri 24 Jan 2014 05:03:18 AM JST
0x1002817  /* U+2817 BRAILLE PATTERN DOTS-1235 */
* Fri 24 Jan 2014 05:03:18 AM JST
0x1002818  /* U+2818 BRAILLE PATTERN DOTS-45 */
* Fri 24 Jan 2014 05:03:18 AM JST
0x1002819  /* U+2819 BRAILLE PATTERN DOTS-145 */
* Fri 24 Jan 2014 05:03:19 AM JST
0x100281a  /* U+281a BRAILLE PATTERN DOTS-245 */
* Fri 24 Jan 2014 05:03:19 AM JST
0x100281b  /* U+281b BRAILLE PATTERN DOTS-1245 */
* Fri 24 Jan 2014 05:03:19 AM JST
0x100281c  /* U+281c BRAILLE PATTERN DOTS-345 */
* Fri 24 Jan 2014 05:03:19 AM JST
0x100281d  /* U+281d BRAILLE PATTERN DOTS-1345 */
* Fri 24 Jan 2014 05:03:19 AM JST
0x100281e  /* U+281e BRAILLE PATTERN DOTS-2345 */
* Fri 24 Jan 2014 05:03:20 AM JST
0x100281f  /* U+281f BRAILLE PATTERN DOTS-12345 */
* Fri 24 Jan 2014 05:03:20 AM JST
0x1002820  /* U+2820 BRAILLE PATTERN DOTS-6 */
* Fri 24 Jan 2014 05:03:20 AM JST
0x1002821  /* U+2821 BRAILLE PATTERN DOTS-16 */
* Fri 24 Jan 2014 05:03:20 AM JST
0x1002822  /* U+2822 BRAILLE PATTERN DOTS-26 */
* Fri 24 Jan 2014 05:03:21 AM JST
0x1002823  /* U+2823 BRAILLE PATTERN DOTS-126 */
* Fri 24 Jan 2014 05:03:21 AM JST
0x1002824  /* U+2824 BRAILLE PATTERN DOTS-36 */
* Fri 24 Jan 2014 05:03:21 AM JST
0x1002825  /* U+2825 BRAILLE PATTERN DOTS-136 */
* Fri 24 Jan 2014 05:03:21 AM JST
0x1002826  /* U+2826 BRAILLE PATTERN DOTS-236 */
* Fri 24 Jan 2014 05:03:22 AM JST
0x1002827  /* U+2827 BRAILLE PATTERN DOTS-1236 */
* Fri 24 Jan 2014 05:03:22 AM JST
0x1002828  /* U+2828 BRAILLE PATTERN DOTS-46 */
* Fri 24 Jan 2014 05:03:22 AM JST
0x1002829  /* U+2829 BRAILLE PATTERN DOTS-146 */
* Fri 24 Jan 2014 05:03:22 AM JST
0x100282a  /* U+282a BRAILLE PATTERN DOTS-246 */
* Fri 24 Jan 2014 05:03:23 AM JST
0x100282b  /* U+282b BRAILLE PATTERN DOTS-1246 */
* Fri 24 Jan 2014 05:03:23 AM JST
0x100282c  /* U+282c BRAILLE PATTERN DOTS-346 */
* Fri 24 Jan 2014 05:03:23 AM JST
0x100282d  /* U+282d BRAILLE PATTERN DOTS-1346 */
* Fri 24 Jan 2014 05:03:23 AM JST
0x100282e  /* U+282e BRAILLE PATTERN DOTS-2346 */
* Fri 24 Jan 2014 05:03:24 AM JST
0x100282f  /* U+282f BRAILLE PATTERN DOTS-12346 */
* Fri 24 Jan 2014 05:03:24 AM JST
0x1002830  /* U+2830 BRAILLE PATTERN DOTS-56 */
* Fri 24 Jan 2014 05:03:24 AM JST
0x1002831  /* U+2831 BRAILLE PATTERN DOTS-156 */
* Fri 24 Jan 2014 05:03:24 AM JST
0x1002832  /* U+2832 BRAILLE PATTERN DOTS-256 */
* Fri 24 Jan 2014 05:03:24 AM JST
0x1002833  /* U+2833 BRAILLE PATTERN DOTS-1256 */
* Fri 24 Jan 2014 05:03:24 AM JST
0x1002834  /* U+2834 BRAILLE PATTERN DOTS-356 */
* Fri 24 Jan 2014 05:03:25 AM JST
0x1002835  /* U+2835 BRAILLE PATTERN DOTS-1356 */
* Fri 24 Jan 2014 05:03:25 AM JST
0x1002836  /* U+2836 BRAILLE PATTERN DOTS-2356 */
* Fri 24 Jan 2014 05:03:25 AM JST
0x1002837  /* U+2837 BRAILLE PATTERN DOTS-12356 */
* Fri 24 Jan 2014 05:03:25 AM JST
0x1002838  /* U+2838 BRAILLE PATTERN DOTS-456 */
* Fri 24 Jan 2014 05:03:25 AM JST
0x1002839  /* U+2839 BRAILLE PATTERN DOTS-1456 */
* Fri 24 Jan 2014 05:03:25 AM JST
0x100283a  /* U+283a BRAILLE PATTERN DOTS-2456 */
* Fri 24 Jan 2014 05:03:26 AM JST
0x100283b  /* U+283b BRAILLE PATTERN DOTS-12456 */
* Fri 24 Jan 2014 05:03:26 AM JST
0x100283c  /* U+283c BRAILLE PATTERN DOTS-3456 */
* Fri 24 Jan 2014 05:03:26 AM JST
0x100283d  /* U+283d BRAILLE PATTERN DOTS-13456 */
* Fri 24 Jan 2014 05:03:26 AM JST
0x100283e  /* U+283e BRAILLE PATTERN DOTS-23456 */
* Fri 24 Jan 2014 05:03:26 AM JST
0x100283f  /* U+283f BRAILLE PATTERN DOTS-123456 */
* Fri 24 Jan 2014 05:03:26 AM JST
0x1002840  /* U+2840 BRAILLE PATTERN DOTS-7 */
* Fri 24 Jan 2014 05:03:27 AM JST
0x1002841  /* U+2841 BRAILLE PATTERN DOTS-17 */
* Fri 24 Jan 2014 05:03:27 AM JST
0x1002842  /* U+2842 BRAILLE PATTERN DOTS-27 */
* Fri 24 Jan 2014 05:03:27 AM JST
0x1002843  /* U+2843 BRAILLE PATTERN DOTS-127 */
* Fri 24 Jan 2014 05:03:27 AM JST
0x1002844  /* U+2844 BRAILLE PATTERN DOTS-37 */
* Fri 24 Jan 2014 05:03:27 AM JST
0x1002845  /* U+2845 BRAILLE PATTERN DOTS-137 */
* Fri 24 Jan 2014 05:03:28 AM JST
0x1002846  /* U+2846 BRAILLE PATTERN DOTS-237 */
* Fri 24 Jan 2014 05:03:28 AM JST
0x1002847  /* U+2847 BRAILLE PATTERN DOTS-1237 */
* Fri 24 Jan 2014 05:03:28 AM JST
0x1002848  /* U+2848 BRAILLE PATTERN DOTS-47 */
* Fri 24 Jan 2014 05:03:28 AM JST
0x1002849  /* U+2849 BRAILLE PATTERN DOTS-147 */
* Fri 24 Jan 2014 05:03:28 AM JST
0x100284a  /* U+284a BRAILLE PATTERN DOTS-247 */
* Fri 24 Jan 2014 05:03:28 AM JST
0x100284b  /* U+284b BRAILLE PATTERN DOTS-1247 */
* Fri 24 Jan 2014 05:03:29 AM JST
0x100284c  /* U+284c BRAILLE PATTERN DOTS-347 */
* Fri 24 Jan 2014 05:03:29 AM JST
0x100284d  /* U+284d BRAILLE PATTERN DOTS-1347 */
* Fri 24 Jan 2014 05:03:29 AM JST
0x100284e  /* U+284e BRAILLE PATTERN DOTS-2347 */
* Fri 24 Jan 2014 05:03:29 AM JST
0x100284f  /* U+284f BRAILLE PATTERN DOTS-12347 */
* Fri 24 Jan 2014 05:03:29 AM JST
0x1002850  /* U+2850 BRAILLE PATTERN DOTS-57 */
* Fri 24 Jan 2014 05:03:29 AM JST
0x1002851  /* U+2851 BRAILLE PATTERN DOTS-157 */
* Fri 24 Jan 2014 05:03:30 AM JST
0x1002852  /* U+2852 BRAILLE PATTERN DOTS-257 */
* Fri 24 Jan 2014 05:03:30 AM JST
0x1002853  /* U+2853 BRAILLE PATTERN DOTS-1257 */
* Fri 24 Jan 2014 05:03:30 AM JST
0x1002854  /* U+2854 BRAILLE PATTERN DOTS-357 */
* Fri 24 Jan 2014 05:03:30 AM JST
0x1002855  /* U+2855 BRAILLE PATTERN DOTS-1357 */
* Fri 24 Jan 2014 05:03:30 AM JST
0x1002856  /* U+2856 BRAILLE PATTERN DOTS-2357 */
* Fri 24 Jan 2014 05:03:31 AM JST
0x1002857  /* U+2857 BRAILLE PATTERN DOTS-12357 */
* Fri 24 Jan 2014 05:03:31 AM JST
0x1002858  /* U+2858 BRAILLE PATTERN DOTS-457 */
* Fri 24 Jan 2014 05:03:31 AM JST
0x1002859  /* U+2859 BRAILLE PATTERN DOTS-1457 */
* Fri 24 Jan 2014 05:03:31 AM JST
0x100285a  /* U+285a BRAILLE PATTERN DOTS-2457 */
* Fri 24 Jan 2014 05:03:31 AM JST
0x100285b  /* U+285b BRAILLE PATTERN DOTS-12457 */
* Fri 24 Jan 2014 05:03:31 AM JST
0x100285c  /* U+285c BRAILLE PATTERN DOTS-3457 */
* Fri 24 Jan 2014 05:03:32 AM JST
0x100285d  /* U+285d BRAILLE PATTERN DOTS-13457 */
* Fri 24 Jan 2014 05:03:32 AM JST
0x100285e  /* U+285e BRAILLE PATTERN DOTS-23457 */
* Fri 24 Jan 2014 05:03:32 AM JST
0x100285f  /* U+285f BRAILLE PATTERN DOTS-123457 */
* Fri 24 Jan 2014 05:03:32 AM JST
0x1002860  /* U+2860 BRAILLE PATTERN DOTS-67 */
* Fri 24 Jan 2014 05:03:33 AM JST
0x1002861  /* U+2861 BRAILLE PATTERN DOTS-167 */
* Fri 24 Jan 2014 05:03:33 AM JST
0x1002862  /* U+2862 BRAILLE PATTERN DOTS-267 */
* Fri 24 Jan 2014 05:03:33 AM JST
0x1002863  /* U+2863 BRAILLE PATTERN DOTS-1267 */
* Fri 24 Jan 2014 05:03:33 AM JST
0x1002864  /* U+2864 BRAILLE PATTERN DOTS-367 */
* Fri 24 Jan 2014 05:03:33 AM JST
0x1002865  /* U+2865 BRAILLE PATTERN DOTS-1367 */
* Fri 24 Jan 2014 05:03:34 AM JST
0x1002866  /* U+2866 BRAILLE PATTERN DOTS-2367 */
* Fri 24 Jan 2014 05:03:35 AM JST
0x1002867  /* U+2867 BRAILLE PATTERN DOTS-12367 */
* Fri 24 Jan 2014 05:03:35 AM JST
0x1002868  /* U+2868 BRAILLE PATTERN DOTS-467 */
* Fri 24 Jan 2014 05:03:35 AM JST
0x1002869  /* U+2869 BRAILLE PATTERN DOTS-1467 */
* Fri 24 Jan 2014 05:03:35 AM JST
0x100286a  /* U+286a BRAILLE PATTERN DOTS-2467 */
* Fri 24 Jan 2014 05:03:35 AM JST
0x100286b  /* U+286b BRAILLE PATTERN DOTS-12467 */
* Fri 24 Jan 2014 05:03:35 AM JST
0x100286c  /* U+286c BRAILLE PATTERN DOTS-3467 */
* Fri 24 Jan 2014 05:03:35 AM JST
0x100286d  /* U+286d BRAILLE PATTERN DOTS-13467 */
* Fri 24 Jan 2014 05:03:36 AM JST
0x100286e  /* U+286e BRAILLE PATTERN DOTS-23467 */
* Fri 24 Jan 2014 05:03:36 AM JST
0x100286f  /* U+286f BRAILLE PATTERN DOTS-123467 */
* Fri 24 Jan 2014 05:03:36 AM JST
0x1002870  /* U+2870 BRAILLE PATTERN DOTS-567 */
* Fri 24 Jan 2014 05:03:36 AM JST
0x1002871  /* U+2871 BRAILLE PATTERN DOTS-1567 */
* Fri 24 Jan 2014 05:03:36 AM JST
0x1002872  /* U+2872 BRAILLE PATTERN DOTS-2567 */
* Fri 24 Jan 2014 05:03:36 AM JST
0x1002873  /* U+2873 BRAILLE PATTERN DOTS-12567 */
* Fri 24 Jan 2014 05:03:37 AM JST
0x1002874  /* U+2874 BRAILLE PATTERN DOTS-3567 */
* Fri 24 Jan 2014 05:03:37 AM JST
0x1002875  /* U+2875 BRAILLE PATTERN DOTS-13567 */
* Fri 24 Jan 2014 05:03:37 AM JST
0x1002876  /* U+2876 BRAILLE PATTERN DOTS-23567 */
* Fri 24 Jan 2014 05:03:37 AM JST
0x1002877  /* U+2877 BRAILLE PATTERN DOTS-123567 */
* Fri 24 Jan 2014 05:03:37 AM JST
0x1002878  /* U+2878 BRAILLE PATTERN DOTS-4567 */
* Fri 24 Jan 2014 05:03:37 AM JST
0x1002879  /* U+2879 BRAILLE PATTERN DOTS-14567 */
* Fri 24 Jan 2014 05:03:38 AM JST
0x100287a  /* U+287a BRAILLE PATTERN DOTS-24567 */
* Fri 24 Jan 2014 05:03:38 AM JST
0x100287b  /* U+287b BRAILLE PATTERN DOTS-124567 */
* Fri 24 Jan 2014 05:03:38 AM JST
0x100287c  /* U+287c BRAILLE PATTERN DOTS-34567 */
* Fri 24 Jan 2014 05:03:38 AM JST
0x100287d  /* U+287d BRAILLE PATTERN DOTS-134567 */
* Fri 24 Jan 2014 05:03:39 AM JST
0x100287e  /* U+287e BRAILLE PATTERN DOTS-234567 */
* Fri 24 Jan 2014 05:03:39 AM JST
0x100287f  /* U+287f BRAILLE PATTERN DOTS-1234567 */
* Fri 24 Jan 2014 05:03:39 AM JST
0x1002880  /* U+2880 BRAILLE PATTERN DOTS-8 */
* Fri 24 Jan 2014 05:03:39 AM JST
0x1002881  /* U+2881 BRAILLE PATTERN DOTS-18 */
* Fri 24 Jan 2014 05:03:40 AM JST
0x1002882  /* U+2882 BRAILLE PATTERN DOTS-28 */
* Fri 24 Jan 2014 05:03:40 AM JST
0x1002883  /* U+2883 BRAILLE PATTERN DOTS-128 */
* Fri 24 Jan 2014 05:03:40 AM JST
0x1002884  /* U+2884 BRAILLE PATTERN DOTS-38 */
* Fri 24 Jan 2014 05:03:40 AM JST
0x1002885  /* U+2885 BRAILLE PATTERN DOTS-138 */
* Fri 24 Jan 2014 05:03:41 AM JST
0x1002886  /* U+2886 BRAILLE PATTERN DOTS-238 */
* Fri 24 Jan 2014 05:03:42 AM JST
0x1002887  /* U+2887 BRAILLE PATTERN DOTS-1238 */
* Fri 24 Jan 2014 05:03:42 AM JST
0x1002888  /* U+2888 BRAILLE PATTERN DOTS-48 */
* Fri 24 Jan 2014 05:03:42 AM JST
0x1002889  /* U+2889 BRAILLE PATTERN DOTS-148 */
* Fri 24 Jan 2014 05:03:42 AM JST
0x100288a  /* U+288a BRAILLE PATTERN DOTS-248 */
* Fri 24 Jan 2014 05:03:42 AM JST
0x100288b  /* U+288b BRAILLE PATTERN DOTS-1248 */
* Fri 24 Jan 2014 05:03:42 AM JST
0x100288c  /* U+288c BRAILLE PATTERN DOTS-348 */
* Fri 24 Jan 2014 05:03:42 AM JST
0x100288d  /* U+288d BRAILLE PATTERN DOTS-1348 */
* Fri 24 Jan 2014 05:03:43 AM JST
0x100288e  /* U+288e BRAILLE PATTERN DOTS-2348 */
* Fri 24 Jan 2014 05:03:43 AM JST
0x100288f  /* U+288f BRAILLE PATTERN DOTS-12348 */
* Fri 24 Jan 2014 05:03:43 AM JST
0x1002890  /* U+2890 BRAILLE PATTERN DOTS-58 */
* Fri 24 Jan 2014 05:03:43 AM JST
0x1002891  /* U+2891 BRAILLE PATTERN DOTS-158 */
* Fri 24 Jan 2014 05:03:43 AM JST
0x1002892  /* U+2892 BRAILLE PATTERN DOTS-258 */
* Fri 24 Jan 2014 05:03:43 AM JST
0x1002893  /* U+2893 BRAILLE PATTERN DOTS-1258 */
* Fri 24 Jan 2014 05:03:43 AM JST
0x1002894  /* U+2894 BRAILLE PATTERN DOTS-358 */
* Fri 24 Jan 2014 05:03:44 AM JST
0x1002895  /* U+2895 BRAILLE PATTERN DOTS-1358 */
* Fri 24 Jan 2014 05:03:44 AM JST
0x1002896  /* U+2896 BRAILLE PATTERN DOTS-2358 */
* Fri 24 Jan 2014 05:03:44 AM JST
0x1002897  /* U+2897 BRAILLE PATTERN DOTS-12358 */
* Fri 24 Jan 2014 05:03:45 AM JST
0x1002898  /* U+2898 BRAILLE PATTERN DOTS-458 */
* Fri 24 Jan 2014 05:03:45 AM JST
0x1002899  /* U+2899 BRAILLE PATTERN DOTS-1458 */
* Fri 24 Jan 2014 05:03:46 AM JST
0x100289a  /* U+289a BRAILLE PATTERN DOTS-2458 */
* Fri 24 Jan 2014 05:03:46 AM JST
0x100289b  /* U+289b BRAILLE PATTERN DOTS-12458 */
* Fri 24 Jan 2014 05:03:46 AM JST
0x100289c  /* U+289c BRAILLE PATTERN DOTS-3458 */
* Fri 24 Jan 2014 05:03:47 AM JST
0x100289d  /* U+289d BRAILLE PATTERN DOTS-13458 */
* Fri 24 Jan 2014 05:03:47 AM JST
0x100289e  /* U+289e BRAILLE PATTERN DOTS-23458 */
* Fri 24 Jan 2014 05:03:47 AM JST
0x100289f  /* U+289f BRAILLE PATTERN DOTS-123458 */
* Fri 24 Jan 2014 05:03:48 AM JST
0x10028a0  /* U+28a0 BRAILLE PATTERN DOTS-68 */
* Fri 24 Jan 2014 05:03:48 AM JST
0x10028a1  /* U+28a1 BRAILLE PATTERN DOTS-168 */
* Fri 24 Jan 2014 05:03:48 AM JST
0x10028a2  /* U+28a2 BRAILLE PATTERN DOTS-268 */
* Fri 24 Jan 2014 05:03:49 AM JST
0x10028a3  /* U+28a3 BRAILLE PATTERN DOTS-1268 */
* Fri 24 Jan 2014 05:03:49 AM JST
0x10028a4  /* U+28a4 BRAILLE PATTERN DOTS-368 */
* Fri 24 Jan 2014 05:03:49 AM JST
0x10028a5  /* U+28a5 BRAILLE PATTERN DOTS-1368 */
* Fri 24 Jan 2014 05:03:49 AM JST
0x10028a6  /* U+28a6 BRAILLE PATTERN DOTS-2368 */
* Fri 24 Jan 2014 05:03:49 AM JST
0x10028a7  /* U+28a7 BRAILLE PATTERN DOTS-12368 */
* Fri 24 Jan 2014 05:03:49 AM JST
0x10028a8  /* U+28a8 BRAILLE PATTERN DOTS-468 */
* Fri 24 Jan 2014 05:03:50 AM JST
0x10028a9  /* U+28a9 BRAILLE PATTERN DOTS-1468 */
* Fri 24 Jan 2014 05:03:50 AM JST
0x10028aa  /* U+28aa BRAILLE PATTERN DOTS-2468 */
* Fri 24 Jan 2014 05:03:50 AM JST
0x10028ab  /* U+28ab BRAILLE PATTERN DOTS-12468 */
* Fri 24 Jan 2014 05:03:50 AM JST
0x10028ac  /* U+28ac BRAILLE PATTERN DOTS-3468 */
* Fri 24 Jan 2014 05:03:50 AM JST
0x10028ad  /* U+28ad BRAILLE PATTERN DOTS-13468 */
* Fri 24 Jan 2014 05:03:51 AM JST
0x10028ae  /* U+28ae BRAILLE PATTERN DOTS-23468 */
* Fri 24 Jan 2014 05:03:51 AM JST
0x10028af  /* U+28af BRAILLE PATTERN DOTS-123468 */
* Fri 24 Jan 2014 05:03:51 AM JST
0x10028b0  /* U+28b0 BRAILLE PATTERN DOTS-568 */
* Fri 24 Jan 2014 05:03:51 AM JST
0x10028b1  /* U+28b1 BRAILLE PATTERN DOTS-1568 */
* Fri 24 Jan 2014 05:03:51 AM JST
0x10028b2  /* U+28b2 BRAILLE PATTERN DOTS-2568 */
* Fri 24 Jan 2014 05:03:51 AM JST
0x10028b3  /* U+28b3 BRAILLE PATTERN DOTS-12568 */
* Fri 24 Jan 2014 05:03:51 AM JST
0x10028b4  /* U+28b4 BRAILLE PATTERN DOTS-3568 */
* Fri 24 Jan 2014 05:03:52 AM JST
0x10028b5  /* U+28b5 BRAILLE PATTERN DOTS-13568 */
* Fri 24 Jan 2014 05:03:52 AM JST
0x10028b6  /* U+28b6 BRAILLE PATTERN DOTS-23568 */
* Fri 24 Jan 2014 05:03:52 AM JST
0x10028b7  /* U+28b7 BRAILLE PATTERN DOTS-123568 */
* Fri 24 Jan 2014 05:03:53 AM JST
0x10028b8  /* U+28b8 BRAILLE PATTERN DOTS-4568 */
* Fri 24 Jan 2014 05:03:53 AM JST
0x10028b9  /* U+28b9 BRAILLE PATTERN DOTS-14568 */
* Fri 24 Jan 2014 05:03:53 AM JST
0x10028ba  /* U+28ba BRAILLE PATTERN DOTS-24568 */
* Fri 24 Jan 2014 05:03:54 AM JST
0x10028bb  /* U+28bb BRAILLE PATTERN DOTS-124568 */
* Fri 24 Jan 2014 05:03:54 AM JST
0x10028bc  /* U+28bc BRAILLE PATTERN DOTS-34568 */
* Fri 24 Jan 2014 05:03:54 AM JST
0x10028bd  /* U+28bd BRAILLE PATTERN DOTS-134568 */
* Fri 24 Jan 2014 05:03:55 AM JST
0x10028be  /* U+28be BRAILLE PATTERN DOTS-234568 */
* Fri 24 Jan 2014 05:03:55 AM JST
0x10028bf  /* U+28bf BRAILLE PATTERN DOTS-1234568 */
* Fri 24 Jan 2014 05:03:55 AM JST
0x10028c0  /* U+28c0 BRAILLE PATTERN DOTS-78 */
* Fri 24 Jan 2014 05:03:55 AM JST
0x10028c1  /* U+28c1 BRAILLE PATTERN DOTS-178 */
* Fri 24 Jan 2014 05:03:56 AM JST
0x10028c2  /* U+28c2 BRAILLE PATTERN DOTS-278 */
* Fri 24 Jan 2014 05:03:56 AM JST
0x10028c3  /* U+28c3 BRAILLE PATTERN DOTS-1278 */
* Fri 24 Jan 2014 05:03:56 AM JST
0x10028c4  /* U+28c4 BRAILLE PATTERN DOTS-378 */
* Fri 24 Jan 2014 05:03:56 AM JST
0x10028c5  /* U+28c5 BRAILLE PATTERN DOTS-1378 */
* Fri 24 Jan 2014 05:03:56 AM JST
0x10028c6  /* U+28c6 BRAILLE PATTERN DOTS-2378 */
* Fri 24 Jan 2014 05:03:56 AM JST
0x10028c7  /* U+28c7 BRAILLE PATTERN DOTS-12378 */
* Fri 24 Jan 2014 05:03:57 AM JST
0x10028c8  /* U+28c8 BRAILLE PATTERN DOTS-478 */
* Fri 24 Jan 2014 05:03:57 AM JST
0x10028c9  /* U+28c9 BRAILLE PATTERN DOTS-1478 */
* Fri 24 Jan 2014 05:03:57 AM JST
0x10028ca  /* U+28ca BRAILLE PATTERN DOTS-2478 */
* Fri 24 Jan 2014 05:03:57 AM JST
0x10028cb  /* U+28cb BRAILLE PATTERN DOTS-12478 */
* Fri 24 Jan 2014 05:03:57 AM JST
0x10028cc  /* U+28cc BRAILLE PATTERN DOTS-3478 */
* Fri 24 Jan 2014 05:03:57 AM JST
0x10028cd  /* U+28cd BRAILLE PATTERN DOTS-13478 */
* Fri 24 Jan 2014 05:03:57 AM JST
0x10028ce  /* U+28ce BRAILLE PATTERN DOTS-23478 */
* Fri 24 Jan 2014 05:03:58 AM JST
0x10028cf  /* U+28cf BRAILLE PATTERN DOTS-123478 */
* Fri 24 Jan 2014 05:03:58 AM JST
0x10028d0  /* U+28d0 BRAILLE PATTERN DOTS-578 */
* Fri 24 Jan 2014 05:03:58 AM JST
0x10028d1  /* U+28d1 BRAILLE PATTERN DOTS-1578 */
* Fri 24 Jan 2014 05:03:58 AM JST
0x10028d2  /* U+28d2 BRAILLE PATTERN DOTS-2578 */
* Fri 24 Jan 2014 05:03:58 AM JST
0x10028d3  /* U+28d3 BRAILLE PATTERN DOTS-12578 */
* Fri 24 Jan 2014 05:03:59 AM JST
0x10028d4  /* U+28d4 BRAILLE PATTERN DOTS-3578 */
* Fri 24 Jan 2014 05:03:59 AM JST
0x10028d5  /* U+28d5 BRAILLE PATTERN DOTS-13578 */
* Fri 24 Jan 2014 05:04:00 AM JST
0x10028d6  /* U+28d6 BRAILLE PATTERN DOTS-23578 */
* Fri 24 Jan 2014 05:04:00 AM JST
0x10028d7  /* U+28d7 BRAILLE PATTERN DOTS-123578 */
* Fri 24 Jan 2014 05:04:00 AM JST
0x10028d8  /* U+28d8 BRAILLE PATTERN DOTS-4578 */
* Fri 24 Jan 2014 05:04:00 AM JST
0x10028d9  /* U+28d9 BRAILLE PATTERN DOTS-14578 */
* Fri 24 Jan 2014 05:04:01 AM JST
0x10028da  /* U+28da BRAILLE PATTERN DOTS-24578 */
* Fri 24 Jan 2014 05:04:01 AM JST
0x10028db  /* U+28db BRAILLE PATTERN DOTS-124578 */
* Fri 24 Jan 2014 05:04:01 AM JST
0x10028dc  /* U+28dc BRAILLE PATTERN DOTS-34578 */
* Fri 24 Jan 2014 05:04:01 AM JST
0x10028dd  /* U+28dd BRAILLE PATTERN DOTS-134578 */
* Fri 24 Jan 2014 05:04:02 AM JST
0x10028de  /* U+28de BRAILLE PATTERN DOTS-234578 */
* Fri 24 Jan 2014 05:04:02 AM JST
0x10028df  /* U+28df BRAILLE PATTERN DOTS-1234578 */
* Fri 24 Jan 2014 05:04:02 AM JST
0x10028e0  /* U+28e0 BRAILLE PATTERN DOTS-678 */
* Fri 24 Jan 2014 05:04:02 AM JST
0x10028e1  /* U+28e1 BRAILLE PATTERN DOTS-1678 */
* Fri 24 Jan 2014 05:04:03 AM JST
0x10028e2  /* U+28e2 BRAILLE PATTERN DOTS-2678 */
* Fri 24 Jan 2014 05:04:03 AM JST
0x10028e3  /* U+28e3 BRAILLE PATTERN DOTS-12678 */
* Fri 24 Jan 2014 05:04:03 AM JST
0x10028e4  /* U+28e4 BRAILLE PATTERN DOTS-3678 */
* Fri 24 Jan 2014 05:04:03 AM JST
0x10028e5  /* U+28e5 BRAILLE PATTERN DOTS-13678 */
* Fri 24 Jan 2014 05:04:03 AM JST
0x10028e6  /* U+28e6 BRAILLE PATTERN DOTS-23678 */
* Fri 24 Jan 2014 05:04:04 AM JST
0x10028e7  /* U+28e7 BRAILLE PATTERN DOTS-123678 */
* Fri 24 Jan 2014 05:04:04 AM JST
0x10028e8  /* U+28e8 BRAILLE PATTERN DOTS-4678 */
* Fri 24 Jan 2014 05:04:04 AM JST
0x10028e9  /* U+28e9 BRAILLE PATTERN DOTS-14678 */
* Fri 24 Jan 2014 05:04:04 AM JST
0x10028ea  /* U+28ea BRAILLE PATTERN DOTS-24678 */
* Fri 24 Jan 2014 05:04:04 AM JST
0x10028eb  /* U+28eb BRAILLE PATTERN DOTS-124678 */
* Fri 24 Jan 2014 05:04:04 AM JST
0x10028ec  /* U+28ec BRAILLE PATTERN DOTS-34678 */
* Fri 24 Jan 2014 05:04:05 AM JST
0x10028ed  /* U+28ed BRAILLE PATTERN DOTS-134678 */
* Fri 24 Jan 2014 05:04:05 AM JST
0x10028ee  /* U+28ee BRAILLE PATTERN DOTS-234678 */
* Fri 24 Jan 2014 05:04:05 AM JST
0x10028ef  /* U+28ef BRAILLE PATTERN DOTS-1234678 */
* Fri 24 Jan 2014 05:04:05 AM JST
0x10028f0  /* U+28f0 BRAILLE PATTERN DOTS-5678 */
* Fri 24 Jan 2014 05:04:06 AM JST
0x10028f1  /* U+28f1 BRAILLE PATTERN DOTS-15678 */
* Fri 24 Jan 2014 05:04:06 AM JST
0x10028f2  /* U+28f2 BRAILLE PATTERN DOTS-25678 */
* Fri 24 Jan 2014 05:04:07 AM JST
0x10028f3  /* U+28f3 BRAILLE PATTERN DOTS-125678 */
* Fri 24 Jan 2014 05:04:07 AM JST
0x10028f4  /* U+28f4 BRAILLE PATTERN DOTS-35678 */
* Fri 24 Jan 2014 05:04:07 AM JST
0x10028f5  /* U+28f5 BRAILLE PATTERN DOTS-135678 */
* Fri 24 Jan 2014 05:04:08 AM JST
0x10028f6  /* U+28f6 BRAILLE PATTERN DOTS-235678 */
* Fri 24 Jan 2014 05:04:08 AM JST
0x10028f7  /* U+28f7 BRAILLE PATTERN DOTS-1235678 */
* Fri 24 Jan 2014 05:04:08 AM JST
0x10028f8  /* U+28f8 BRAILLE PATTERN DOTS-45678 */
* Fri 24 Jan 2014 05:04:08 AM JST
0x10028f9  /* U+28f9 BRAILLE PATTERN DOTS-145678 */
* Fri 24 Jan 2014 05:04:09 AM JST
0x10028fa  /* U+28fa BRAILLE PATTERN DOTS-245678 */
* Fri 24 Jan 2014 05:04:09 AM JST
0x10028fb  /* U+28fb BRAILLE PATTERN DOTS-1245678 */
* Fri 24 Jan 2014 05:04:09 AM JST
0x10028fc  /* U+28fc BRAILLE PATTERN DOTS-345678 */
* Fri 24 Jan 2014 05:04:10 AM JST
0x10028fd  /* U+28fd BRAILLE PATTERN DOTS-1345678 */
* Fri 24 Jan 2014 05:04:10 AM JST
0x10028fe  /* U+28fe BRAILLE PATTERN DOTS-2345678 */
* Fri 24 Jan 2014 05:04:10 AM JST
0x10028ff  /* U+28ff BRAILLE PATTERN DOTS-12345678 */
* Fri 24 Jan 2014 05:04:10 AM JST
*/
* Fri 24 Jan 2014 05:04:10 AM JST
 XK_Sinh_ng            0x1000d82  /* U+0D82 SINHALA ANUSVARAYA */

* Fri 24 Jan 2014 05:04:10 AM JST
0x1000d83  /* U+0D83 SINHALA VISARGAYA */
* Fri 24 Jan 2014 05:04:11 AM JST
0x1000d85  /* U+0D85 SINHALA AYANNA */
* Fri 24 Jan 2014 05:04:11 AM JST
0x1000d86  /* U+0D86 SINHALA AAYANNA */
* Fri 24 Jan 2014 05:04:11 AM JST
0x1000d87  /* U+0D87 SINHALA AEYANNA */
* Fri 24 Jan 2014 05:04:11 AM JST
0x1000d88  /* U+0D88 SINHALA AEEYANNA */
* Fri 24 Jan 2014 05:04:11 AM JST
0x1000d89  /* U+0D89 SINHALA IYANNA */
* Fri 24 Jan 2014 05:04:12 AM JST
0x1000d8a  /* U+0D8A SINHALA IIYANNA */
* Fri 24 Jan 2014 05:04:12 AM JST
0x1000d8b  /* U+0D8B SINHALA UYANNA */
* Fri 24 Jan 2014 05:04:12 AM JST
0x1000d8c  /* U+0D8C SINHALA UUYANNA */
* Fri 24 Jan 2014 05:04:12 AM JST
0x1000d8d  /* U+0D8D SINHALA IRUYANNA */
* Fri 24 Jan 2014 05:04:13 AM JST
0x1000d8e  /* U+0D8E SINHALA IRUUYANNA */
* Fri 24 Jan 2014 05:04:13 AM JST
0x1000d8f  /* U+0D8F SINHALA ILUYANNA */
* Fri 24 Jan 2014 05:04:13 AM JST
0x1000d90  /* U+0D90 SINHALA ILUUYANNA */
* Fri 24 Jan 2014 05:04:13 AM JST
0x1000d91  /* U+0D91 SINHALA EYANNA */
* Fri 24 Jan 2014 05:04:13 AM JST
0x1000d92  /* U+0D92 SINHALA EEYANNA */
* Fri 24 Jan 2014 05:04:14 AM JST
0x1000d93  /* U+0D93 SINHALA AIYANNA */
* Fri 24 Jan 2014 05:04:14 AM JST
0x1000d94  /* U+0D94 SINHALA OYANNA */
* Fri 24 Jan 2014 05:04:14 AM JST
0x1000d95  /* U+0D95 SINHALA OOYANNA */
* Fri 24 Jan 2014 05:04:14 AM JST
0x1000d96  /* U+0D96 SINHALA AUYANNA */
* Fri 24 Jan 2014 05:04:14 AM JST
0x1000d9a  /* U+0D9A SINHALA KAYANNA */
* Fri 24 Jan 2014 05:04:14 AM JST
0x1000d9b  /* U+0D9B SINHALA MAHA. KAYANNA */
* Fri 24 Jan 2014 05:04:15 AM JST
0x1000d9c  /* U+0D9C SINHALA GAYANNA */
* Fri 24 Jan 2014 05:04:15 AM JST
0x1000d9d  /* U+0D9D SINHALA MAHA. GAYANNA */
* Fri 24 Jan 2014 05:04:15 AM JST
0x1000d9e  /* U+0D9E SINHALA KANTAJA NAASIKYAYA */
* Fri 24 Jan 2014 05:04:15 AM JST
0x1000d9f  /* U+0D9F SINHALA SANYAKA GAYANNA */
* Fri 24 Jan 2014 05:04:15 AM JST
0x1000da0  /* U+0DA0 SINHALA CAYANNA */
* Fri 24 Jan 2014 05:04:15 AM JST
0x1000da1  /* U+0DA1 SINHALA MAHA. CAYANNA */
* Fri 24 Jan 2014 05:04:16 AM JST
0x1000da2  /* U+0DA2 SINHALA JAYANNA */
* Fri 24 Jan 2014 05:04:16 AM JST
0x1000da3  /* U+0DA3 SINHALA MAHA. JAYANNA */
* Fri 24 Jan 2014 05:04:16 AM JST
0x1000da4  /* U+0DA4 SINHALA TAALUJA NAASIKYAYA */
* Fri 24 Jan 2014 05:04:16 AM JST
0x1000da5  /* U+0DA5 SINHALA TAALUJA SANYOOGA NAASIKYAYA */
* Fri 24 Jan 2014 05:04:16 AM JST
0x1000da6  /* U+0DA6 SINHALA SANYAKA JAYANNA */
* Fri 24 Jan 2014 05:04:17 AM JST
0x1000da7  /* U+0DA7 SINHALA TTAYANNA */
* Fri 24 Jan 2014 05:04:17 AM JST
0x1000da8  /* U+0DA8 SINHALA MAHA. TTAYANNA */
* Fri 24 Jan 2014 05:04:17 AM JST
0x1000da9  /* U+0DA9 SINHALA DDAYANNA */
* Fri 24 Jan 2014 05:04:17 AM JST
0x1000daa  /* U+0DAA SINHALA MAHA. DDAYANNA */
* Fri 24 Jan 2014 05:04:17 AM JST
0x1000dab  /* U+0DAB SINHALA MUURDHAJA NAYANNA */
* Fri 24 Jan 2014 05:04:17 AM JST
0x1000dac  /* U+0DAC SINHALA SANYAKA DDAYANNA */
* Fri 24 Jan 2014 05:04:18 AM JST
0x1000dad  /* U+0DAD SINHALA TAYANNA */
* Fri 24 Jan 2014 05:04:18 AM JST
0x1000dae  /* U+0DAE SINHALA MAHA. TAYANNA */
* Fri 24 Jan 2014 05:04:18 AM JST
0x1000daf  /* U+0DAF SINHALA DAYANNA */
* Fri 24 Jan 2014 05:04:18 AM JST
0x1000db0  /* U+0DB0 SINHALA MAHA. DAYANNA */
* Fri 24 Jan 2014 05:04:18 AM JST
0x1000db1  /* U+0DB1 SINHALA DANTAJA NAYANNA */
* Fri 24 Jan 2014 05:04:19 AM JST
0x1000db3  /* U+0DB3 SINHALA SANYAKA DAYANNA */
* Fri 24 Jan 2014 05:04:19 AM JST
0x1000db4  /* U+0DB4 SINHALA PAYANNA */
* Fri 24 Jan 2014 05:04:19 AM JST
0x1000db5  /* U+0DB5 SINHALA MAHA. PAYANNA */
* Fri 24 Jan 2014 05:04:19 AM JST
0x1000db6  /* U+0DB6 SINHALA BAYANNA */
* Fri 24 Jan 2014 05:04:20 AM JST
0x1000db7  /* U+0DB7 SINHALA MAHA. BAYANNA */
* Fri 24 Jan 2014 05:04:20 AM JST
0x1000db8  /* U+0DB8 SINHALA MAYANNA */
* Fri 24 Jan 2014 05:04:20 AM JST
0x1000db9  /* U+0DB9 SINHALA AMBA BAYANNA */
* Fri 24 Jan 2014 05:04:20 AM JST
0x1000dba  /* U+0DBA SINHALA YAYANNA */
* Fri 24 Jan 2014 05:04:20 AM JST
0x1000dbb  /* U+0DBB SINHALA RAYANNA */
* Fri 24 Jan 2014 05:04:20 AM JST
0x1000dbd  /* U+0DBD SINHALA DANTAJA LAYANNA */
* Fri 24 Jan 2014 05:04:21 AM JST
0x1000dc0  /* U+0DC0 SINHALA VAYANNA */
* Fri 24 Jan 2014 05:04:21 AM JST
0x1000dc1  /* U+0DC1 SINHALA TAALUJA SAYANNA */
* Fri 24 Jan 2014 05:04:21 AM JST
0x1000dc2  /* U+0DC2 SINHALA MUURDHAJA SAYANNA */
* Fri 24 Jan 2014 05:04:21 AM JST
0x1000dc3  /* U+0DC3 SINHALA DANTAJA SAYANNA */
* Fri 24 Jan 2014 05:04:21 AM JST
0x1000dc4  /* U+0DC4 SINHALA HAYANNA */
* Fri 24 Jan 2014 05:04:21 AM JST
0x1000dc5  /* U+0DC5 SINHALA MUURDHAJA LAYANNA */
* Fri 24 Jan 2014 05:04:22 AM JST
0x1000dc6  /* U+0DC6 SINHALA FAYANNA */
* Fri 24 Jan 2014 05:04:22 AM JST
0x1000dca  /* U+0DCA SINHALA AL-LAKUNA */
* Fri 24 Jan 2014 05:04:22 AM JST
0x1000dcf  /* U+0DCF SINHALA AELA-PILLA */
* Fri 24 Jan 2014 05:04:22 AM JST
0x1000dd0  /* U+0DD0 SINHALA AEDA-PILLA */
* Fri 24 Jan 2014 05:04:22 AM JST
0x1000dd1  /* U+0DD1 SINHALA DIGA AEDA-PILLA */
* Fri 24 Jan 2014 05:04:22 AM JST
0x1000dd2  /* U+0DD2 SINHALA IS-PILLA */
* Fri 24 Jan 2014 05:04:23 AM JST
0x1000dd3  /* U+0DD3 SINHALA DIGA IS-PILLA */
* Fri 24 Jan 2014 05:04:23 AM JST
0x1000dd4  /* U+0DD4 SINHALA PAA-PILLA */
* Fri 24 Jan 2014 05:04:23 AM JST
0x1000dd6  /* U+0DD6 SINHALA DIGA PAA-PILLA */
* Fri 24 Jan 2014 05:04:23 AM JST
0x1000dd8  /* U+0DD8 SINHALA GAETTA-PILLA */
* Fri 24 Jan 2014 05:04:24 AM JST
0x1000dd9  /* U+0DD9 SINHALA KOMBUVA */
* Fri 24 Jan 2014 05:04:24 AM JST
0x1000dda  /* U+0DDA SINHALA DIGA KOMBUVA */
* Fri 24 Jan 2014 05:04:24 AM JST
0x1000ddb  /* U+0DDB SINHALA KOMBU DEKA */
* Fri 24 Jan 2014 05:04:24 AM JST
0x1000ddc  /* U+0DDC SINHALA KOMBUVA HAA AELA-PILLA*/
* Fri 24 Jan 2014 05:04:24 AM JST
0x1000ddd  /* U+0DDD SINHALA KOMBUVA HAA DIGA AELA-PILLA*/
* Fri 24 Jan 2014 05:04:24 AM JST
0x1000dde  /* U+0DDE SINHALA KOMBUVA HAA GAYANUKITTA */
* Fri 24 Jan 2014 05:04:25 AM JST
0x1000ddf  /* U+0DDF SINHALA GAYANUKITTA */
* Fri 24 Jan 2014 05:04:25 AM JST
0x1000df2  /* U+0DF2 SINHALA DIGA GAETTA-PILLA */
* Fri 24 Jan 2014 05:04:25 AM JST
0x1000df3  /* U+0DF3 SINHALA DIGA GAYANUKITTA */
* Fri 24 Jan 2014 05:04:25 AM JST
0x1000df4  /* U+0DF4 SINHALA KUNDDALIYA */
* Fri 24 Jan 2014 05:04:55 AM JST

* Fri 24 Jan 2014 05:04:55 AM JST

* Fri 24 Jan 2014 05:04:55 AM JST
#endif /* XK_VIETNAMESE 

* Fri 24 Jan 2014 05:04:58 AM JST

* Fri 24 Jan 2014 05:04:58 AM JST

* Fri 24 Jan 2014 05:04:59 AM JST
#endif /* XK_CURRENCY 

* Fri 24 Jan 2014 05:05:03 AM JST

* Fri 24 Jan 2014 05:05:03 AM JST

* Fri 24 Jan 2014 05:05:03 AM JST
#endif /* XK_MATHEMATICAL 

* Fri 24 Jan 2014 05:05:04 AM JST

* Fri 24 Jan 2014 05:05:04 AM JST

* Fri 24 Jan 2014 05:05:04 AM JST
#ifdef XK_BRAILLE

* Fri 24 Jan 2014 05:05:56 AM JST
Page_Up
* Fri 24 Jan 2014 05:07:19 AM JST
  
* Fri 24 Jan 2014 05:07:20 AM JST
  
* Fri 24 Jan 2014 05:11:28 AM JST
XK_Undo
* Fri 24 Jan 2014 05:11:44 AM JST

* Fri 24 Jan 2014 06:02:55 AM JST
XTestFakeKeyEvent
* Fri 24 Jan 2014 06:12:41 AM JST
#ifndef X_HAVE_UTF8_STRING
    g_print("Compiled without Unicode support!");
#endif

* Fri 24 Jan 2014 06:12:57 AM JST
g_
* Fri 24 Jan 2014 06:18:43 AM JST
XSendEvent
* Fri 24 Jan 2014 06:18:59 AM JST
XKeyEvent
* Fri 24 Jan 2014 06:31:42 AM JST
X_HAVE_UTF8_STRING
* Fri 24 Jan 2014 06:32:12 AM JST
X_HAVE_UTF8_STRING
* Fri 24 Jan 2014 06:50:05 AM JST
http://sourcecodebrowser.com/xautomation/1.02/xte_8c_source.html#nav-path
* Fri 24 Jan 2014 04:21:59 PM JST
D 
* Fri 24 Jan 2014 04:25:29 PM JST
.info
* Fri 24 Jan 2014 04:27:38 PM JST
shade()
* Fri 24 Jan 2014 04:30:52 PM JST
terminal')
* Fri 24 Jan 2014 04:30:52 PM JST
xfce4-terminal')
* Fri 24 Jan 2014 04:30:52 PM JST
search_for_window('xfce4-terminal')
* Fri 24 Jan 2014 04:30:52 PM JST
window.search_for_window('xfce4-terminal')
* Fri 24 Jan 2014 04:33:16 PM JST
resize()
* Fri 24 Jan 2014 04:39:28 PM JST
http://sourcecodebrowser.com/xautomation/1.02/xte_8c_source.html#nav-path
* Fri 24 Jan 2014 04:41:13 PM JST
keysym_to_keycode_map
* Fri 24 Jan 2014 04:44:28 PM JST
XKeysymToKeycode(display, XStringToKeysym(key))
* Fri 24 Jan 2014 04:45:31 PM JST
KeyCode ToKeycode(Display *display, char *key)
{
  return XKeysymToKeycode(display, XStringToKeysym(key));
}

* Fri 24 Jan 2014 04:45:45 PM JST
char
* Fri 24 Jan 2014 04:46:42 PM JST
To
* Fri 24 Jan 2014 04:47:44 PM JST
KeyCode GetKeycode(Display *display, char *key)
{
  return XKeysymToKeycode(display, XStringToKeysym(key));
}

* Fri 24 Jan 2014 04:47:51 PM JST
key
* Fri 24 Jan 2014 04:47:53 PM JST
char 
* Fri 24 Jan 2014 04:48:15 PM JST
int
* Fri 24 Jan 2014 04:48:48 PM JST
int
* Fri 24 Jan 2014 04:50:01 PM JST
KeyCode keycode = GetKeycode(display, key);
* Fri 24 Jan 2014 05:20:21 PM JST
class
* Fri 24 Jan 2014 05:20:38 PM JST
char
* Fri 24 Jan 2014 05:22:30 PM JST
XStringToKeysym(key)
* Fri 24 Jan 2014 05:22:35 PM JST

* Fri 24 Jan 2014 05:22:42 PM JST
"a"
* Fri 24 Jan 2014 05:22:55 PM JST

* Fri 24 Jan 2014 05:22:55 PM JST

* Fri 24 Jan 2014 05:22:56 PM JST
  SendKey(display, win, winRoot, (char *)"a", modifires);

* Fri 24 Jan 2014 05:23:53 PM JST
XKeysymToKeycode(display, XStringToKeysym(key))
* Fri 24 Jan 2014 05:24:06 PM JST
key
* Fri 24 Jan 2014 05:31:57 PM JST

* Fri 24 Jan 2014 05:31:57 PM JST

* Fri 24 Jan 2014 05:31:57 PM JST
  // KeyCode keycode = XKeysymToKeycode(display, XStringToKeysym(key));

* Fri 24 Jan 2014 05:32:00 PM JST

* Fri 24 Jan 2014 05:32:00 PM JST

* Fri 24 Jan 2014 05:32:00 PM JST
  // KeyCode keycode = XKeysymToKeycode(display, XStringToKeysym(key));

* Fri 24 Jan 2014 05:32:28 PM JST

* Fri 24 Jan 2014 05:32:28 PM JST

* Fri 24 Jan 2014 05:32:28 PM JST
  // KeyCode keycode = XKeysymToKeycode(display, XStringToKeysym(key));

* Fri 24 Jan 2014 05:32:54 PM JST

* Fri 24 Jan 2014 05:32:54 PM JST

* Fri 24 Jan 2014 05:32:54 PM JST
  // KeyCode keycode = XKeysymToKeycode(display, XStringToKeysym(key));

* Fri 24 Jan 2014 05:32:56 PM JST

* Fri 24 Jan 2014 05:32:56 PM JST

* Fri 24 Jan 2014 05:32:56 PM JST
  // KeyCode keycode = XKeysymToKeycode(display, XStringToKeysym(key));

* Fri 24 Jan 2014 05:38:07 PM JST

* Fri 24 Jan 2014 05:38:07 PM JST

* Fri 24 Jan 2014 05:38:07 PM JST
std::cout << "DEBUG-7-sendkey.cc"

* Fri 24 Jan 2014 05:45:21 PM JST
int SendKey (Display *display, Window &win, Window &winRoot,
             T_key key, int modifiers)
* Fri 24 Jan 2014 05:47:53 PM JST
template<typename T_key>
* Fri 24 Jan 2014 05:48:06 PM JST
modifiers
* Fri 24 Jan 2014 05:51:26 PM JST
KeyCode GetKeycode(Display *display, KeySym keysym)
{
  return XKeysymToKeycode(display, keysym);
}

* Fri 24 Jan 2014 05:51:30 PM JST
KeySym
* Fri 24 Jan 2014 05:51:36 PM JST
keysym
* Fri 24 Jan 2014 05:52:13 PM JST
XKeysymToKeycode(display, XStringToKeysym(key));
* Fri 24 Jan 2014 05:52:25 PM JST
key
* Fri 24 Jan 2014 05:57:06 PM JST
strchr
* Fri 24 Jan 2014 11:23:34 PM JST
*end_pos = '\0';
* Fri 24 Jan 2014 11:23:41 PM JST

* Fri 24 Jan 2014 11:23:41 PM JST

* Fri 24 Jan 2014 11:23:41 PM JST
            std::cout << end_pos << std::endl;

* Fri 24 Jan 2014 11:25:45 PM JST
*end_pos = '}';
* Fri 24 Jan 2014 11:30:22 PM JST

* Fri 24 Jan 2014 11:30:22 PM JST

* Fri 24 Jan 2014 11:30:23 PM JST
            std::cout << "DEBUG-7-sendkey.cc" << std::endl;

* Fri 24 Jan 2014 11:30:27 PM JST

* Fri 24 Jan 2014 11:30:27 PM JST

* Fri 24 Jan 2014 11:30:27 PM JST
            std::cout << "DEBUG-8-sendkey.cc" << std::endl;

* Fri 24 Jan 2014 11:30:27 PM JST
            std::cout << "DEBUG-8-sendkey.cc" << std::endl;

* Fri 24 Jan 2014 11:30:27 PM JST
            std::cout << "DEBUG-8-sendkey.cc" << std::endl;
            --end_pos;

* Fri 24 Jan 2014 11:30:27 PM JST
            std::cout << "DEBUG-8-sendkey.cc" << std::endl;
            --end_pos;

* Fri 24 Jan 2014 11:30:27 PM JST
            std::cout << "DEBUG-8-sendkey.cc" << std::endl;
            --end_pos;
            std::cout << "DEBUG-9-sendkey.cc" << std::endl;

* Fri 24 Jan 2014 11:30:28 PM JST
            std::cout << "DEBUG-8-sendkey.cc" << std::endl;
            --end_pos;
            std::cout << "DEBUG-9-sendkey.cc" << std::endl;

* Fri 24 Jan 2014 11:30:28 PM JST
            std::cout << "DEBUG-8-sendkey.cc" << std::endl;
            --end_pos;
            std::cout << "DEBUG-9-sendkey.cc" << std::endl;
            std::cout << end_pos << std::endl;

* Fri 24 Jan 2014 11:58:41 PM JST
include <>
* Fri 24 Jan 2014 11:59:19 PM JST
<< keys 
* Sat 25 Jan 2014 12:12:10 AM JST
terminator
* Sat 25 Jan 2014 12:12:27 AM JST
terminator
* Sat 25 Jan 2014 12:52:10 AM JST
\0
* Sat 25 Jan 2014 01:39:28 AM JST
another
* Sat 25 Jan 2014 01:39:33 AM JST
c++ 
* Sat 25 Jan 2014 01:56:48 AM JST

* Sat 25 Jan 2014 01:56:48 AM JST

* Sat 25 Jan 2014 01:56:48 AM JST
            std::cout << "DEBUG-8-sendkey.cc" << std::endl;

* Sat 25 Jan 2014 01:56:51 AM JST

* Sat 25 Jan 2014 01:56:51 AM JST

* Sat 25 Jan 2014 01:56:51 AM JST
            // *end_pos = '}'; // undo temporary termination

* Sat 25 Jan 2014 01:59:55 AM JST
*end_pos = '}';
* Sat 25 Jan 2014 02:01:02 AM JST
world
* Sat 25 Jan 2014 02:02:42 AM JST
Left
* Sat 25 Jan 2014 02:17:44 AM JST

* Sat 25 Jan 2014 02:17:47 AM JST
hello{
* Sat 25 Jan 2014 02:17:50 AM JST
world
* Sat 25 Jan 2014 02:18:21 AM JST

* Sat 25 Jan 2014 02:18:26 AM JST
teschar
* Sat 25 Jan 2014 02:22:47 AM JST
XStringToKeysym(key)
* Sat 25 Jan 2014 02:23:03 AM JST
key
* Sat 25 Jan 2014 02:23:59 AM JST
  
* Sat 25 Jan 2014 02:24:01 AM JST
teschar
* Sat 25 Jan 2014 02:24:18 AM JST
teschar
* Sat 25 Jan 2014 02:26:40 AM JST
XKeysymToString
* Sat 25 Jan 2014 02:26:45 AM JST
  
* Sat 25 Jan 2014 02:33:11 AM JST
XKeysymToString
* Sat 25 Jan 2014 02:33:31 AM JST

* Sat 25 Jan 2014 02:33:42 AM JST
XKeysymToString
* Sat 25 Jan 2014 03:14:06 AM JST
XKeysymToString
* Sat 25 Jan 2014 05:27:31 AM JST
keysym_to_keycode_map
* Sat 25 Jan 2014 05:43:43 AM JST
XGetKeyboardMapping
* Sat 25 Jan 2014 04:44:25 PM JST
/etc/X11/
* Sat 25 Jan 2014 09:09:37 PM JST
list(ChromeBMParse(folder_name)
* Sat 25 Jan 2014 09:11:12 PM JST
sort
* Sat 25 Jan 2014 09:11:23 PM JST
sort
* Sat 25 Jan 2014 09:11:26 PM JST
sort
* Sat 25 Jan 2014 09:11:30 PM JST
sort
* Sat 25 Jan 2014 09:30:43 PM JST
void load_keycodes( Display *d ) {
  int min_keycode,max_keycode,keysyms_per_keycode,keycode_index,wrap_key_index,num_modifiers;
  char *str;
  KeySym *keysyms, keysym;
  KeyCode keycode;

  XDisplayKeycodes( d, &min_keycode, &max_keycode);
  keysyms = XGetKeyboardMapping( d,
    (KeyCode)min_keycode, max_keycode + 1 - min_keycode,
    &keysyms_per_keycode );

  /* Clear tables */
  for( keysym=0; keysym<MAX_KEYSYM; keysym++ ) {
    keysym_to_modifier_map[keysym]=-1;
    keysym_to_keycode_map[keysym]=0;
  }

  if( keysyms_per_keycode < NUM_KEY_MODIFIERS*2 ) {
    num_modifiers = keysyms_per_keycode;
  } else {
    num_modifiers = NUM_KEY_MODIFIERS*2;
  }

  for( keycode_index = 0; keycode_index < ( max_keycode + 1 - min_keycode ); keycode_index++ ) {
    keycode = keycode_index + min_keycode;
    for( wrap_key_index = 0; wrap_key_index < num_modifiers; wrap_key_index++ ) {
      str = XKeysymToString( keysyms[ keycode_index * keysyms_per_keycode + wrap_key_index ] );
      if( str != NULL ) {
        keysym = XStringToKeysym( str );
        dmsg( 2, "keycode=%d + mod=%d => %s (keysym %lld)\n",
            keycode, wrap_key_index,
            str,(long long int)keysym );
  
        if( keysym < MAX_KEYSYM &&
            keysym_to_modifier_map[ keysym ] == -1 ) {
          keysym_to_modifier_map[ keysym ] = wrap_key_index;
          keysym_to_keycode_map[ keysym ] = keycode;
        }
      }
    }
  }
  
  /* Free storage */
  XFree(keysyms);
}
* Sat 25 Jan 2014 09:32:05 PM JST
keysym_to_keycode_map
* Sat 25 Jan 2014 09:34:15 PM JST
#define MAX_KEYSYM 65536
// this maps what keysyms need a modifier pushed
int keysym_to_modifier_map[ MAX_KEYSYM ];
KeyCode keysym_to_keycode_map[ MAX_KEYSYM ];

* Sat 25 Jan 2014 09:34:49 PM JST
void load_keycodes( Display *d ) {
  int min_keycode,max_keycode,keysyms_per_keycode,keycode_index,wrap_key_index,num_modifiers;
  char *str;
  KeySym *keysyms, keysym;
  KeyCode keycode;

  XDisplayKeycodes( d, &min_keycode, &max_keycode);
  keysyms = XGetKeyboardMapping( d,
    (KeyCode)min_keycode, max_keycode + 1 - min_keycode,
    &keysyms_per_keycode );

  /* Clear tables */
  for( keysym=0; keysym<MAX_KEYSYM; keysym++ ) {
    keysym_to_modifier_map[keysym]=-1;
    keysym_to_keycode_map[keysym]=0;
  }

  if( keysyms_per_keycode < NUM_KEY_MODIFIERS*2 ) {
    num_modifiers = keysyms_per_keycode;
  } else {
    num_modifiers = NUM_KEY_MODIFIERS*2;
  }

  for( keycode_index = 0; keycode_index < ( max_keycode + 1 - min_keycode ); keycode_index++ ) {
    keycode = keycode_index + min_keycode;
    for( wrap_key_index = 0; wrap_key_index < num_modifiers; wrap_key_index++ ) {
      str = XKeysymToString( keysyms[ keycode_index * keysyms_per_keycode + wrap_key_index ] );
      if( str != NULL ) {
        keysym = XStringToKeysym( str );
        dmsg( 2, "keycode=%d + mod=%d => %s (keysym %lld)\n",
            keycode, wrap_key_index,
            str,(long long int)keysym );
  
        if( keysym < MAX_KEYSYM &&
            keysym_to_modifier_map[ keysym ] == -1 ) {
          keysym_to_modifier_map[ keysym ] = wrap_key_index;
          keysym_to_keycode_map[ keysym ] = keycode;
        }
      }
    }
  }
  
  /* Free storage */
  XFree(keysyms);
}

* Sat 25 Jan 2014 09:34:54 PM JST

* Sat 25 Jan 2014 09:34:54 PM JST

* Sat 25 Jan 2014 09:34:54 PM JST
        dmsg( 2, "keycode=%d + mod=%d => %s (keysym %lld)\n",

* Sat 25 Jan 2014 09:35:17 PM JST
#define NUM_KEY_MODIFIERS 3
* Sat 25 Jan 2014 09:35:46 PM JST

* Sat 25 Jan 2014 09:35:46 PM JST

* Sat 25 Jan 2014 09:35:46 PM JST
              keycode, wrap_key_index,

* Sat 25 Jan 2014 09:35:46 PM JST
              keycode, wrap_key_index,

* Sat 25 Jan 2014 09:35:46 PM JST
              keycode, wrap_key_index,
              str,(long long int)keysym );

* Sat 25 Jan 2014 09:45:40 PM JST
Previous
* Sat 25 Jan 2014 09:54:30 PM JST
XKeysymToKeycode(dpy, c)
* Sat 25 Jan 2014 10:13:03 PM JST
load_keycodes
* Sat 25 Jan 2014 10:13:57 PM JST

* Sat 25 Jan 2014 10:13:57 PM JST

* Sat 25 Jan 2014 10:13:57 PM JST
  load_keycodes(display);

* Sat 25 Jan 2014 10:14:08 PM JST
SendKey(display, win, winRoot, teschar, modifires);
* Sat 25 Jan 2014 10:15:38 PM JST
int
* Sat 25 Jan 2014 10:43:57 PM JST
XStringToKeysym
* Sat 25 Jan 2014 10:48:29 PM JST
    case 'B':
      return XK_B;

* Sat 25 Jan 2014 10:48:45 PM JST
    case '$1':
      return XK_$1;

* Sat 25 Jan 2014 10:49:08 PM JST
      
* Sat 25 Jan 2014 10:57:59 PM JST
XK
* Sat 25 Jan 2014 10:58:00 PM JST
XK_exclam
* Sat 25 Jan 2014 10:58:08 PM JST
XK_
* Sat 25 Jan 2014 11:31:35 PM JST
SendKeyEvent
* Sat 25 Jan 2014 11:34:34 PM JST
XK_backslash
* Sat 25 Jan 2014 11:34:44 PM JST
XK_
* Sat 25 Jan 2014 11:35:02 PM JST
underscore
* Sat 25 Jan 2014 11:35:33 PM JST
XK_grave
* Sat 25 Jan 2014 11:45:12 PM JST
asciicircum
* Sat 25 Jan 2014 11:45:49 PM JST
grave
* Sat 25 Jan 2014 11:48:46 PM JST
braceleft
* Sat 25 Jan 2014 11:54:34 PM JST
XKeysymToString
* Sat 25 Jan 2014 11:55:00 PM JST
XK_braceleft
* Sat 25 Jan 2014 11:55:17 PM JST
  
* Sat 25 Jan 2014 11:55:22 PM JST
XK_bar
* Sat 25 Jan 2014 11:58:54 PM JST
XK_bar
* Sat 25 Jan 2014 11:59:07 PM JST
SendKey(display, win, winRoot, teschar, modifires);
* Sat 25 Jan 2014 11:59:12 PM JST
XK_braceleft
* Sat 25 Jan 2014 11:59:21 PM JST
XK_bar
* Sat 25 Jan 2014 11:59:23 PM JST

* Sun 26 Jan 2014 12:02:43 AM JST
XK_asciitilde
* Sun 26 Jan 2014 12:07:12 AM JST
keycode
* Sun 26 Jan 2014 12:08:31 AM JST
XK_asciicircum
* Sun 26 Jan 2014 12:08:52 AM JST

* Sun 26 Jan 2014 12:22:45 AM JST
XKeysymToKeycode
* Sun 26 Jan 2014 01:35:18 AM JST
          
* Sun 26 Jan 2014 01:35:26 AM JST
          
* Sun 26 Jan 2014 01:37:41 AM JST
SendKey(display, win, winRoot, single_char, modifiers);
* Sun 26 Jan 2014 01:37:47 AM JST
          single_char[0] = *keys;
          SendKey(display, win, winRoot, single_char, modifiers);

* Sun 26 Jan 2014 01:37:59 AM JST
modifiers |= ShiftMask;
* Sun 26 Jan 2014 02:20:21 AM JST
SendKeyEvent
* Sun 26 Jan 2014 05:46:56 AM JST
XSendEvent
* Sun 26 Jan 2014 05:54:37 AM JST
SyncHandle
* Sun 26 Jan 2014 05:58:37 AM JST
SendKey(display, win, winRoot, single_char, modifiers);
          modifiers = 0;
* Sun 26 Jan 2014 06:02:56 AM JST
          SendKey(display, win, winRoot, "space", modifiers);
          modifiers = 0;
          break;

* Sun 26 Jan 2014 06:03:18 AM JST
minus
* Sun 26 Jan 2014 06:04:00 AM JST
exclam
* Sun 26 Jan 2014 06:04:11 AM JST
        case '-':
          SendKey(display, win, winRoot, "minus", modifiers);
          modifiers = 0;
          break;

* Sun 26 Jan 2014 06:04:21 AM JST
minus
* Sun 26 Jan 2014 06:05:41 AM JST
include 
* Sun 26 Jan 2014 06:06:29 AM JST
percent
* Sun 26 Jan 2014 06:06:43 AM JST
ampersand
* Sun 26 Jan 2014 06:06:52 AM JST
apostrophe
* Sun 26 Jan 2014 06:08:17 AM JST
quoteright
* Sun 26 Jan 2014 06:08:32 AM JST
apostrophe
* Sun 26 Jan 2014 06:08:57 AM JST
apostrophe
* Sun 26 Jan 2014 06:09:05 AM JST
quoteright
* Sun 26 Jan 2014 06:09:21 AM JST
parenleft
* Sun 26 Jan 2014 06:11:06 AM JST
parenright
* Sun 26 Jan 2014 06:11:27 AM JST
modifiers = 0;
* Sun 26 Jan 2014 06:11:41 AM JST
modifiers |= ShiftMask;
* Sun 26 Jan 2014 06:12:54 AM JST
asterisk
* Sun 26 Jan 2014 06:13:10 AM JST
plus
* Sun 26 Jan 2014 06:13:42 AM JST
comma
* Sun 26 Jan 2014 06:14:30 AM JST
        case '.':
          SendKey(display, win, winRoot, "period", modifiers);
          modifiers = 0;
          break;

* Sun 26 Jan 2014 06:14:46 AM JST
slash
* Sun 26 Jan 2014 06:15:02 AM JST
colon
* Sun 26 Jan 2014 06:15:11 AM JST
semicolon
* Sun 26 Jan 2014 06:15:21 AM JST
less
* Sun 26 Jan 2014 06:15:35 AM JST
equal
* Sun 26 Jan 2014 06:16:03 AM JST
question
* Sun 26 Jan 2014 06:16:09 AM JST
at
* Sun 26 Jan 2014 06:16:21 AM JST
bracketleft
* Sun 26 Jan 2014 06:17:04 AM JST
backslash
* Sun 26 Jan 2014 06:17:17 AM JST
bracketright
* Sun 26 Jan 2014 06:17:39 AM JST
asciicircum
* Sun 26 Jan 2014 06:18:02 AM JST
underscore
* Sun 26 Jan 2014 06:18:10 AM JST
grave
* Sun 26 Jan 2014 06:18:42 AM JST
braceleft
* Sun 26 Jan 2014 06:18:57 AM JST
bar
* Sun 26 Jan 2014 06:19:08 AM JST
braceright
* Sun 26 Jan 2014 06:19:42 AM JST
asciitilde
* Sun 26 Jan 2014 06:25:40 AM JST
SendKey(display, win, winRoot, "dollar", modifiers);
* Sun 26 Jan 2014 06:25:50 AM JST
SendKey(display, win, winRoot, "percent", modifiers);
* Sun 26 Jan 2014 06:25:55 AM JST
SendKey(display, win, winRoot, "ampersand", modifiers);
* Sun 26 Jan 2014 06:25:59 AM JST
SendKey(display, win, winRoot, "apostrophe", modifiers);
* Sun 26 Jan 2014 06:26:05 AM JST
SendKey(display, win, winRoot, "parenleft", modifiers);
* Sun 26 Jan 2014 06:26:09 AM JST
SendKey(display, win, winRoot, "parenright", modifiers);
* Sun 26 Jan 2014 06:26:14 AM JST
SendKey(display, win, winRoot, "asterisk", modifiers);
* Sun 26 Jan 2014 06:26:20 AM JST
SendKey(display, win, winRoot, "comma", modifiers);
* Sun 26 Jan 2014 06:26:24 AM JST
SendKey(display, win, winRoot, "minus", modifiers);
* Sun 26 Jan 2014 06:26:30 AM JST
SendKey(display, win, winRoot, "period", modifiers);
* Sun 26 Jan 2014 06:26:35 AM JST
SendKey(display, win, winRoot, "slash", modifiers);
* Sun 26 Jan 2014 06:26:39 AM JST
SendKey(display, win, winRoot, "colon", modifiers);
* Sun 26 Jan 2014 06:26:44 AM JST
SendKey(display, win, winRoot, "semicolon", modifiers);
* Sun 26 Jan 2014 06:26:49 AM JST
SendKey(display, win, winRoot, "less", modifiers);
* Sun 26 Jan 2014 06:26:55 AM JST
SendKey(display, win, winRoot, "equal", modifiers);
* Sun 26 Jan 2014 06:27:00 AM JST
SendKey(display, win, winRoot, "greater", modifiers);
* Sun 26 Jan 2014 06:31:45 AM JST
4
* Sun 26 Jan 2014 06:39:59 AM JST
SendKeyEvent
* Sun 26 Jan 2014 06:44:25 AM JST

* Sun 26 Jan 2014 06:44:25 AM JST

* Sun 26 Jan 2014 06:44:25 AM JST
  SendKeyEvent(display, win, winRoot, True, 119, modifires);

* Sun 26 Jan 2014 06:45:16 AM JST
modifiers |= ShiftMask;
* Sun 26 Jan 2014 06:53:25 AM JST
        //   SendKey(display, win, winRoot, "plus", modifiers);
        //   modifiers = 0;
        //   break;

* Sun 26 Jan 2014 06:54:01 AM JST

* Sun 26 Jan 2014 06:54:02 AM JST

* Sun 26 Jan 2014 06:54:02 AM JST
            SendKey(display, win, winRoot, keys + 1, modifiers);

* Sun 26 Jan 2014 06:54:19 AM JST
modifiers |= ShiftMask;
* Sun 26 Jan 2014 06:54:52 AM JST
        // case '!':
        //   SendKey(display, win, winRoot, "exclam", modifiers);
        //   modifiers = 0;
        //   break;

* Sun 26 Jan 2014 06:55:14 AM JST
modifiers |= ShiftMask;
* Sun 26 Jan 2014 06:55:30 AM JST
        // case '^':
        //   SendKey(display, win, winRoot, "asciicircum", modifiers);
        //   modifiers = 0;
        //   break;

* Sun 26 Jan 2014 06:55:48 AM JST
modifiers |= ShiftMask;
* Sun 26 Jan 2014 06:56:10 AM JST
        // case '#':
        //   SendKey(display, win, winRoot, "numbersign", modifiers);
        //   modifiers = 0;
        //   break;

* Sun 26 Jan 2014 06:56:25 AM JST
modifiers |= ShiftMask;
* Sun 26 Jan 2014 06:56:53 AM JST
        // case '{':
        //   SendKey(display, win, winRoot, "braceleft", modifiers);
        //   modifiers = 0;
        //   break;

* Sun 26 Jan 2014 06:57:10 AM JST
                modifiers |= ShiftMask;
* Sun 26 Jan 2014 06:57:24 AM JST
        // case '}':
        //   SendKey(display, win, winRoot, "braceright", modifiers);
        //   modifiers = 0;
        //   break;

* Sun 26 Jan 2014 06:57:37 AM JST
                modifiers |= ShiftMask;
* Sun 26 Jan 2014 06:58:01 AM JST

* Sun 26 Jan 2014 06:58:01 AM JST

* Sun 26 Jan 2014 06:58:01 AM JST
                modifiers = 0;

* Sun 26 Jan 2014 06:58:04 AM JST

* Sun 26 Jan 2014 06:58:04 AM JST

* Sun 26 Jan 2014 06:58:04 AM JST
                modifiers = 0;

* Sun 26 Jan 2014 06:58:06 AM JST

* Sun 26 Jan 2014 06:58:06 AM JST

* Sun 26 Jan 2014 06:58:06 AM JST
                modifiers = 0;

* Sun 26 Jan 2014 06:58:07 AM JST

* Sun 26 Jan 2014 06:58:07 AM JST

* Sun 26 Jan 2014 06:58:07 AM JST
                modifiers = 0;

* Sun 26 Jan 2014 06:58:09 AM JST

* Sun 26 Jan 2014 06:58:09 AM JST

* Sun 26 Jan 2014 06:58:09 AM JST
                modifiers = 0;

* Sun 26 Jan 2014 06:58:11 AM JST

* Sun 26 Jan 2014 06:58:11 AM JST

* Sun 26 Jan 2014 06:58:11 AM JST
                modifiers = 0;

* Sun 26 Jan 2014 05:18:41 PM JST
plus
* Sun 26 Jan 2014 05:25:34 PM JST
plus
* Sun 26 Jan 2014 05:34:13 PM JST
*end_pos + 1
* Sun 26 Jan 2014 05:46:42 PM JST

* Sun 26 Jan 2014 05:46:42 PM JST

* Sun 26 Jan 2014 05:46:42 PM JST
              break;

* Sun 26 Jan 2014 05:46:53 PM JST
end_pos
* Sun 26 Jan 2014 05:47:35 PM JST

* Sun 26 Jan 2014 05:47:35 PM JST

* Sun 26 Jan 2014 05:47:35 PM JST
              ++end_pos;

* Sun 26 Jan 2014 05:49:35 PM JST

* Sun 26 Jan 2014 05:49:35 PM JST

* Sun 26 Jan 2014 05:49:35 PM JST
              std::cout << "DEBUG-38-sendkey.cc" << std::endl;

* Sun 26 Jan 2014 10:08:53 PM JST
LOG.error(err)
* Sun 26 Jan 2014 10:09:01 PM JST
target
* Sun 26 Jan 2014 10:09:25 PM JST
/root/.local/share/Trash/
* Sun 26 Jan 2014 10:11:38 PM JST
path
* Sun 26 Jan 2014 10:11:39 PM JST
os.path
* Sun 26 Jan 2014 10:12:35 PM JST
join(trashpath, file_)
* Sun 26 Jan 2014 10:13:16 PM JST
shutil
* Sun 26 Jan 2014 11:04:38 PM JST
replace('{', ' { ').replace('}', ' } ').split()
* Mon 27 Jan 2014 12:12:40 AM JST
braceleft
* Mon 27 Jan 2014 12:12:51 AM JST
braceright
* Mon 27 Jan 2014 02:45:40 AM JST
'hello{+}world{braceright}yahoo{braceleft}google'
* Mon 27 Jan 2014 02:48:40 AM JST
result
* Mon 27 Jan 2014 02:50:21 AM JST
str_ = []
result = []
inbrace = False
for s in tes2:
    if not inbrace:
        result.append(s)
        continue
    if inbrace:
        str_.append(s)
    if s == '{':
        inbrace = True
    if s == '}':
        inbrace = False
        if str_:
            result.append(''.join(str_))
            str_ = []

* Mon 27 Jan 2014 02:51:16 AM JST

* Mon 27 Jan 2014 02:51:16 AM JST

* Mon 27 Jan 2014 02:51:16 AM JST
return result
* Mon 27 Jan 2014 02:51:27 AM JST
tes2 = 'hello{+}world{braceright}yahoo{braceleft}google'

str_ = []
result = []
inbrace = False

* Mon 27 Jan 2014 02:51:32 AM JST
for s in tes2:
* Mon 27 Jan 2014 02:51:37 AM JST
    if not inbrace:
* Mon 27 Jan 2014 02:51:42 AM JST
        result.append(s)
* Mon 27 Jan 2014 02:51:46 AM JST
        continue
* Mon 27 Jan 2014 02:51:56 AM JST
    if inbrace:
* Mon 27 Jan 2014 02:52:00 AM JST
        str_.append(s)
* Mon 27 Jan 2014 02:52:06 AM JST
    if s == '{':
* Mon 27 Jan 2014 02:52:11 AM JST
        inbrace = True
* Mon 27 Jan 2014 02:52:15 AM JST
    if s == '}':
* Mon 27 Jan 2014 02:52:19 AM JST
        inbrace = False
* Mon 27 Jan 2014 02:52:23 AM JST
        if str_:
* Mon 27 Jan 2014 02:52:26 AM JST
            result.append(''.join(str_))
* Mon 27 Jan 2014 02:52:30 AM JST
            str_ = []
* Mon 27 Jan 2014 02:52:46 AM JST
for s in tes2:
    if not inbrace:
        result.append(s)
        continue
    if inbrace:
        str_.append(s)
    if s == '{':
        inbrace = True
    if s == '}':
        inbrace = False
        if str_:
            result.append(''.join(str_))
            str_ = []

* Mon 27 Jan 2014 03:01:08 AM JST
''.join(str_)
* Mon 27 Jan 2014 03:03:42 AM JST

* Mon 27 Jan 2014 03:03:42 AM JST

* Mon 27 Jan 2014 03:03:42 AM JST
    print('DEBUG-1-2014-01-26-230413.junk.py')

* Mon 27 Jan 2014 03:06:02 AM JST

* Mon 27 Jan 2014 03:06:02 AM JST

* Mon 27 Jan 2014 03:06:02 AM JST
        print('DEBUG-3-2014-01-26-230413.junk.py')

* Mon 27 Jan 2014 03:06:03 AM JST
    if s == '{':
        inbrace = True

* Mon 27 Jan 2014 03:06:10 AM JST

* Mon 27 Jan 2014 03:06:10 AM JST

* Mon 27 Jan 2014 03:06:10 AM JST
    print(repr(s))

* Mon 27 Jan 2014 03:06:13 AM JST

* Mon 27 Jan 2014 03:06:13 AM JST

* Mon 27 Jan 2014 03:06:13 AM JST
            print('DEBUG-2-2014-01-26-230413.junk.py')

* Mon 27 Jan 2014 03:06:13 AM JST
            print('DEBUG-2-2014-01-26-230413.junk.py')

* Mon 27 Jan 2014 03:06:13 AM JST
            print('DEBUG-2-2014-01-26-230413.junk.py')
            print(''.join(str_))

* Mon 27 Jan 2014 03:09:01 AM JST

* Mon 27 Jan 2014 03:09:01 AM JST

* Mon 27 Jan 2014 03:09:01 AM JST
        continue

* Mon 27 Jan 2014 03:10:03 AM JST
.split()
* Mon 27 Jan 2014 03:10:41 AM JST
braceright
* Mon 27 Jan 2014 03:10:48 AM JST
braceleft
* Mon 27 Jan 2014 03:12:10 AM JST
'{braceright}'
* Mon 27 Jan 2014 03:12:20 AM JST
{}}
* Mon 27 Jan 2014 03:12:26 AM JST
'{braceleft}'
* Mon 27 Jan 2014 03:12:58 AM JST
.replace('{{}', '{braceright}').replace('{}}', '{braceleft}')
* Mon 27 Jan 2014 03:14:24 AM JST
[('{{}', '{braceright}'), ('{}}', '{braceleft}')]
* Mon 27 Jan 2014 03:14:27 AM JST

* Mon 27 Jan 2014 03:14:27 AM JST

* Mon 27 Jan 2014 03:14:27 AM JST
replace_pair = 

* Mon 27 Jan 2014 03:23:06 AM JST
http://www-inst.eecs.berkeley.edu/~cs61a/sp12/book/calc.py
* Mon 27 Jan 2014 03:35:10 AM JST
line
* Mon 27 Jan 2014 03:35:57 AM JST
    for target, rename in [('{{}', '{braceright}'), ('{}}', '{braceleft}')]:
        line = line.replace(target, rename)
    return line

* Mon 27 Jan 2014 03:36:26 AM JST

* Mon 27 Jan 2014 03:36:26 AM JST

* Mon 27 Jan 2014 03:36:26 AM JST
print(result)

* Mon 27 Jan 2014 03:37:50 AM JST
tes2
* Mon 27 Jan 2014 03:54:38 AM JST

* Mon 27 Jan 2014 03:54:38 AM JST

* Mon 27 Jan 2014 03:54:38 AM JST
    # tes2 = 'hello{+}world{braceright}yahoo{braceleft}google'

* Mon 27 Jan 2014 04:20:25 AM JST
        if s == '}':
            inbrace = False
            if str_:
                result.append(''.join(str_))
                str_ = []

* Mon 27 Jan 2014 04:21:24 AM JST
        if inbrace:
            str_.append(s)

* Mon 27 Jan 2014 04:21:56 AM JST
        if inbrace:
            str_.append(s)
        else:
            result.append(s)
            continue

* Mon 27 Jan 2014 05:11:41 AM JST
result = []
* Mon 27 Jan 2014 05:45:30 AM JST

* Mon 27 Jan 2014 05:45:30 AM JST

* Mon 27 Jan 2014 05:45:30 AM JST
            string = ''

* Mon 27 Jan 2014 05:49:49 AM JST
[('{{', '{braceright'), ('{}}', '{braceleft}')]
* Mon 27 Jan 2014 05:50:08 AM JST
[('{{', '{braceright'), ('{}}', '{braceleft}')]
* Mon 27 Jan 2014 05:51:03 AM JST
exclam
* Mon 27 Jan 2014 05:53:15 AM JST
asciicircum
* Mon 27 Jan 2014 05:53:51 AM JST
linereplace
* Mon 27 Jan 2014 05:55:41 AM JST
linereplace
* Mon 27 Jan 2014 05:56:55 AM JST
world
* Mon 27 Jan 2014 05:59:03 AM JST
                
* Mon 27 Jan 2014 05:59:11 AM JST
replacer = 
* Mon 27 Jan 2014 05:59:23 AM JST

* Mon 27 Jan 2014 05:59:36 AM JST
                
* Mon 27 Jan 2014 05:59:48 AM JST
                
* Mon 27 Jan 2014 06:00:08 AM JST
                
* Mon 27 Jan 2014 06:00:21 AM JST
                
* Mon 27 Jan 2014 06:02:26 AM JST
    replacer = [('{{', '{braceleft'),
                ('\\{', '{braceleft}'),
                ('{}}', '{braceright}'),
                ('\\}', '{braceright}'),
                ('{+', '{plus'),
                ('\\+', '{plus}'),
                ('{!', '{exclam'),
                ('\\!', '{exclam'),
                ('{#', '{numbersign'),
                ('\\#', '{numbersign}'),
                ('{^', 'asciicircum'),
                ('\\^', 'asciicircum'),
                ]

* Mon 27 Jan 2014 06:03:31 AM JST
'hello{+}world{braceright}yahoo{braceleft}google{{}bing{}}test\{'
* Mon 27 Jan 2014 06:06:03 AM JST

* Mon 27 Jan 2014 06:06:03 AM JST

* Mon 27 Jan 2014 06:06:03 AM JST
# tes2 = 'hello{+}world{braceright}yahoo{braceleft}google{{}bing{}}test\{you\}'

* Mon 27 Jan 2014 06:12:13 AM JST
'hello{+}world{braceright}yahoo{braceleft}google{{}bing{}}test\\{you\\}'
* Mon 27 Jan 2014 06:13:42 AM JST
#include <boost/algorithm/string/replace.hpp>
* Mon 27 Jan 2014 06:13:52 AM JST
s.replace(
* Mon 27 Jan 2014 06:16:03 AM JST
std::string output 
* Mon 27 Jan 2014 06:16:09 AM JST
output
* Mon 27 Jan 2014 06:17:26 AM JST
to
* Mon 27 Jan 2014 06:21:14 AM JST

* Mon 27 Jan 2014 06:21:14 AM JST

* Mon 27 Jan 2014 06:21:14 AM JST
#include <pair>

* Mon 27 Jan 2014 06:37:23 AM JST
world
* Mon 27 Jan 2014 06:37:29 AM JST
google
* Mon 27 Jan 2014 06:37:37 AM JST
yahoo
* Mon 27 Jan 2014 06:37:50 AM JST
('{{', '{braceleft'),
            ('\\{', '{braceleft}'),
            ('{}}', '{braceright}'),
            ('\\}', '{braceright}'),
            ('{+', '{plus'),
            ('\\+', '{plus}'),
            ('{!', '{exclam'),
            ('\\!', '{exclam'),
            ('{#', '{numbersign'),
            ('\\#', '{numbersign}'),
            ('{^', 'asciicircum'),
            ('\\^', 'asciicircum'),
* Mon 27 Jan 2014 06:39:40 AM JST
exclam
* Mon 27 Jan 2014 06:40:24 AM JST
numbersign
* Mon 27 Jan 2014 06:40:56 AM JST
asciicircum
* Mon 27 Jan 2014 06:41:23 AM JST
{braceleft
* Mon 27 Jan 2014 06:42:24 AM JST
                                                            
* Mon 27 Jan 2014 06:42:27 AM JST
                                                            
* Mon 27 Jan 2014 06:43:18 AM JST
("{#", "{numbersign"),
                                                        ("{^", "{asciicircum"),
                                                        ("{{", "{braceleft")
* Mon 27 Jan 2014 06:51:23 AM JST
list
* Mon 27 Jan 2014 06:52:51 AM JST
list
* Mon 27 Jan 2014 06:55:04 AM JST
10, 
* Mon 27 Jan 2014 06:55:42 AM JST
include <>
* Mon 27 Jan 2014 06:56:05 AM JST
('{{', '{braceleft'),
            ('\\{', '{braceleft}'),
            ('{}}', '{braceright}'),
            ('\\}', '{braceright}'),
            ('{+', '{plus'),
            ('\\+', '{plus}'),
            ('{!', '{exclam'),
            ('\\!', '{exclam'),
            ('{#', '{numbersign'),
            ('\\#', '{numbersign}'),
            ('{^', 'asciicircum'),
            ('\\^', 'asciicircum'),
* Mon 27 Jan 2014 06:56:12 AM JST
{numbersign
* Mon 27 Jan 2014 07:01:32 AM JST
lin
* Mon 27 Jan 2014 07:01:32 AM JST
parse_lin
* Mon 27 Jan 2014 07:02:04 AM JST
std::list<std::pair<std::string,std::string> > replaces
* Mon 27 Jan 2014 07:02:24 AM JST
vector
* Mon 27 Jan 2014 07:03:48 AM JST
  
* Mon 27 Jan 2014 07:03:54 AM JST
plus
* Mon 27 Jan 2014 07:04:00 AM JST
  
* Mon 27 Jan 2014 07:04:13 AM JST
include <>
* Mon 27 Jan 2014 07:04:15 AM JST
exclam
* Mon 27 Jan 2014 07:04:22 AM JST
  
* Mon 27 Jan 2014 07:04:34 AM JST
asciicircum
* Mon 27 Jan 2014 07:07:36 AM JST
11
* Mon 27 Jan 2014 07:08:36 AM JST
make_
* Mon 27 Jan 2014 07:10:58 AM JST
INIT
* Mon 27 Jan 2014 07:12:28 AM JST
first
* Mon 27 Jan 2014 07:12:28 AM JST
it->first
* Mon 27 Jan 2014 07:12:50 AM JST
    
* Mon 27 Jan 2014 07:12:52 AM JST
first
* Mon 27 Jan 2014 07:15:59 AM JST
std::list<std::pair<std::string,std::string> >
* Mon 27 Jan 2014 07:16:39 AM JST
StringPairs
* Mon 27 Jan 2014 07:17:26 AM JST
  
* Mon 27 Jan 2014 07:17:53 AM JST
{}}
* Mon 27 Jan 2014 07:18:01 AM JST
braceright
* Mon 27 Jan 2014 07:18:16 AM JST
{{
* Mon 27 Jan 2014 07:18:18 AM JST
  
* Mon 27 Jan 2014 07:18:33 AM JST
{braceleft
* Mon 27 Jan 2014 07:18:44 AM JST
\\{
* Mon 27 Jan 2014 07:18:45 AM JST
  
* Mon 27 Jan 2014 07:19:02 AM JST
\\}
* Mon 27 Jan 2014 07:19:04 AM JST
  
* Mon 27 Jan 2014 07:19:19 AM JST
\\+
* Mon 27 Jan 2014 07:19:24 AM JST
  
* Mon 27 Jan 2014 07:19:39 AM JST
\\!
* Mon 27 Jan 2014 07:19:41 AM JST
  
* Mon 27 Jan 2014 07:19:50 AM JST
plus
* Mon 27 Jan 2014 07:19:53 AM JST
exclam
* Mon 27 Jan 2014 07:20:02 AM JST
\\#
* Mon 27 Jan 2014 07:20:05 AM JST
  
* Mon 27 Jan 2014 07:20:13 AM JST
numbersign
* Mon 27 Jan 2014 07:20:46 AM JST
\\^
* Mon 27 Jan 2014 07:20:49 AM JST
  
* Mon 27 Jan 2014 07:22:37 AM JST
void
* Mon 27 Jan 2014 07:22:48 AM JST
void
* Mon 27 Jan 2014 07:22:58 AM JST
std::string
* Mon 27 Jan 2014 07:24:12 AM JST

* Mon 27 Jan 2014 07:24:12 AM JST

* Mon 27 Jan 2014 07:24:12 AM JST
    std::cout << it->first << std::endl;

* Mon 27 Jan 2014 07:24:13 AM JST
    std::cout << it->first << std::endl;

* Mon 27 Jan 2014 07:24:13 AM JST
    std::cout << it->first << std::endl;
    std::cout << it->second << std::endl;

* Mon 27 Jan 2014 07:25:33 AM JST
p.print(s)
* Mon 27 Jan 2014 07:26:49 AM JST
print
* Mon 27 Jan 2014 07:27:04 AM JST
print
* Mon 27 Jan 2014 07:27:31 AM JST
print
* Mon 27 Jan 2014 07:40:45 AM JST
string
* Mon 27 Jan 2014 07:41:34 AM JST
virtual 
* Mon 27 Jan 2014 07:41:49 AM JST
std::list<std::string>
* Mon 27 Jan 2014 07:42:08 AM JST
(std::string str)
* Mon 27 Jan 2014 07:43:22 AM JST
std::list<std::string>
* Mon 27 Jan 2014 07:44:24 AM JST
std::string 
* Mon 27 Jan 2014 07:46:15 AM JST

* Mon 27 Jan 2014 07:46:15 AM JST

* Mon 27 Jan 2014 07:46:15 AM JST
  std::cout << "DEBUG-1-2014-01-27-061138.junk.cc" << std::endl;

* Mon 27 Jan 2014 07:46:49 AM JST
"hello{+}world{{}google\\{"
* Mon 27 Jan 2014 07:48:54 AM JST
hello{plus}world{braceleft}google{braceleft}
* Mon 27 Jan 2014 07:49:17 AM JST
size
* Mon 27 Jan 2014 07:51:30 AM JST
++i
* Mon 27 Jan 2014 07:53:50 AM JST
 << std::endl
* Mon 27 Jan 2014 07:55:01 AM JST
'hello{plus}world{braceleft}google{braceleft}'
* Mon 27 Jan 2014 08:00:37 AM JST
special_str
* Mon 27 Jan 2014 08:02:26 AM JST
it != str.end()
* Mon 27 Jan 2014 08:03:37 AM JST
while (*it != '}' && it != str.end()) {
        
      }
* Mon 27 Jan 2014 08:04:28 AM JST
special_str = special_str + *it;
* Mon 27 Jan 2014 08:05:21 AM JST
it != str.end()
* Mon 27 Jan 2014 08:05:34 AM JST
it != str.end();
* Mon 27 Jan 2014 08:07:53 AM JST
str
* Mon 27 Jan 2014 08:07:53 AM JST
special_str
* Mon 27 Jan 2014 08:08:44 AM JST
stringlist
* Mon 27 Jan 2014 08:10:26 AM JST
it.
* Mon 27 Jan 2014 08:11:31 AM JST
  
* Mon 27 Jan 2014 08:11:32 AM JST
stringlist
* Mon 27 Jan 2014 08:11:38 AM JST
std::list<
* Mon 27 Jan 2014 08:12:45 AM JST

* Mon 27 Jan 2014 08:12:45 AM JST

* Mon 27 Jan 2014 08:12:45 AM JST
  std::cout << std::endl;

* Mon 27 Jan 2014 08:12:47 AM JST
  std::cout << std::endl;

* Mon 27 Jan 2014 08:12:47 AM JST
  std::cout << std::endl;
  // std::cout << str << std::endl;

* Mon 27 Jan 2014 08:12:47 AM JST
  std::cout << std::endl;
  // std::cout << str << std::endl;

* Mon 27 Jan 2014 08:12:47 AM JST
  std::cout << std::endl;
  // std::cout << str << std::endl;
  // std::cout << str.length() << std::endl;

* Mon 27 Jan 2014 08:13:16 AM JST
std::list<std::string>
* Mon 27 Jan 2014 08:14:36 AM JST
<std::string>
* Mon 27 Jan 2014 08:15:42 AM JST

* Mon 27 Jan 2014 08:15:42 AM JST

* Mon 27 Jan 2014 08:15:42 AM JST
  }

* Mon 27 Jan 2014 08:17:43 AM JST
          ++it;
          if (it == str.end()) {
            break;
          }

* Mon 27 Jan 2014 08:23:23 AM JST
std::string::iterator
* Mon 27 Jan 2014 08:23:39 AM JST
it == str.end()
* Mon 27 Jan 2014 08:24:51 AM JST
          // if (it == str.end()) {
            // break;
          // }

* Mon 27 Jan 2014 08:24:55 AM JST
break
* Mon 27 Jan 2014 08:25:52 AM JST
return 
* Mon 27 Jan 2014 08:28:21 AM JST
Similar
* Mon 27 Jan 2014 08:34:31 AM JST
getc
* Mon 27 Jan 2014 08:36:48 AM JST
iterator
* Mon 27 Jan 2014 04:39:23 PM JST
int 
* Mon 27 Jan 2014 04:41:01 PM JST
stringlist
* Mon 27 Jan 2014 04:42:38 PM JST
int 
* Mon 27 Jan 2014 04:43:02 PM JST
unsigned long
* Mon 27 Jan 2014 04:44:16 PM JST

* Mon 27 Jan 2014 04:44:16 PM JST

* Mon 27 Jan 2014 04:44:16 PM JST
  std::string tmp = "";

* Mon 27 Jan 2014 04:46:48 PM JST
stringlist;
* Mon 27 Jan 2014 04:53:21 PM JST

* Mon 27 Jan 2014 04:53:21 PM JST

* Mon 27 Jan 2014 04:53:21 PM JST
      std::string tmp = "";

* Mon 27 Jan 2014 04:54:45 PM JST
i]""
* Mon 27 Jan 2014 04:54:46 PM JST
str[i]""
* Mon 27 Jan 2014 04:58:49 PM JST

* Mon 27 Jan 2014 04:58:49 PM JST

* Mon 27 Jan 2014 04:58:50 PM JST
  std::cout << s.substr(2, 2 - 1) << std::endl;

* Mon 27 Jan 2014 05:05:04 PM JST

* Mon 27 Jan 2014 05:05:04 PM JST

* Mon 27 Jan 2014 05:05:04 PM JST
  s = boost::replace_all_copy(s, "{+", "{plus");

* Mon 27 Jan 2014 05:05:58 PM JST
p(s)
* Mon 27 Jan 2014 05:13:40 PM JST
unsigned long int
* Mon 27 Jan 2014 05:15:00 PM JST
size_t
* Mon 27 Jan 2014 05:19:24 PM JST
calc
* Mon 27 Jan 2014 05:19:39 PM JST
Cachedv
* Mon 27 Jan 2014 05:22:13 PM JST
VEC
* Mon 27 Jan 2014 05:22:33 PM JST
STRINGVECTOR
* Mon 27 Jan 2014 05:23:51 PM JST
Similar
* Mon 27 Jan 2014 05:26:03 PM JST
STRING
* Mon 27 Jan 2014 05:26:26 PM JST
CHARVECTOR
* Mon 27 Jan 2014 05:28:17 PM JST
length
* Mon 27 Jan 2014 05:35:31 PM JST
string
* Mon 27 Jan 2014 05:36:07 PM JST
      char buf[255];
      std::size_t length = str.copy(buf, i, k);
      buf[length] = '\0';
      results.push_back(buf);
      i = k + 1;

* Mon 27 Jan 2014 05:40:46 PM JST
str.substr(i, k)
* Mon 27 Jan 2014 05:41:03 PM JST
tmp
* Mon 27 Jan 2014 05:41:10 PM JST
std::string tmp = str.substr(i, k);
* Mon 27 Jan 2014 05:42:18 PM JST
calc
* Mon 27 Jan 2014 05:46:55 PM JST
int
* Mon 27 Jan 2014 05:48:43 PM JST
std::cout << tmp << std::endl;
* Mon 27 Jan 2014 05:49:07 PM JST
Code
* Mon 27 Jan 2014 05:54:27 PM JST

* Mon 27 Jan 2014 05:54:27 PM JST

* Mon 27 Jan 2014 05:54:27 PM JST
  // std::cout << p(s) << std::endl;

* Mon 27 Jan 2014 05:54:55 PM JST
std::
* Mon 27 Jan 2014 05:55:46 PM JST
STRINGVECTOR results;
* Mon 27 Jan 2014 05:56:10 PM JST
s.substr(0, 2)
* Mon 27 Jan 2014 05:56:18 PM JST
  
* Mon 27 Jan 2014 05:56:45 PM JST
  // for (std::size_t i=0; i<lis.size(); ++i) {
  //   std::cout << lis[i] << std::endl;
  // }

* Mon 27 Jan 2014 05:56:53 PM JST
lis
* Mon 27 Jan 2014 05:56:59 PM JST
lis
* Mon 27 Jan 2014 06:00:28 PM JST
count
* Mon 27 Jan 2014 06:01:27 PM JST
counter
* Mon 27 Jan 2014 06:03:01 PM JST

* Mon 27 Jan 2014 06:03:01 PM JST

* Mon 27 Jan 2014 06:03:01 PM JST
      std::cout << tmp << std::endl;

* Mon 27 Jan 2014 06:03:03 PM JST

* Mon 27 Jan 2014 06:03:03 PM JST

* Mon 27 Jan 2014 06:03:03 PM JST
      std::cout << tmp << std::endl;

* Mon 27 Jan 2014 06:03:11 PM JST
str.substr(i, counter)
* Mon 27 Jan 2014 06:03:16 PM JST

* Mon 27 Jan 2014 06:03:16 PM JST

* Mon 27 Jan 2014 06:03:17 PM JST
      std::string tmp = str.substr(i, counter);

* Mon 27 Jan 2014 06:03:21 PM JST
str.substr(i, 1)
* Mon 27 Jan 2014 06:03:23 PM JST

* Mon 27 Jan 2014 06:03:24 PM JST

* Mon 27 Jan 2014 06:03:24 PM JST
      std::string tmp = str.substr(i, 1);

* Mon 27 Jan 2014 06:04:53 PM JST

* Mon 27 Jan 2014 06:04:53 PM JST

* Mon 27 Jan 2014 06:04:53 PM JST
  std::cout << str << std::endl;

* Mon 27 Jan 2014 06:05:06 PM JST
  for (std::size_t i=0; i<lis.size(); ++i) {
    std::cout << lis[i] << std::endl;
  }

* Mon 27 Jan 2014 06:11:21 PM JST
ParseLine
* Mon 27 Jan 2014 06:12:06 PM JST
parser
* Mon 27 Jan 2014 06:15:53 PM JST
class LineReplacer
{
private:
  StringPairs replaces;
public:
  LineReplacer();
  virtual ~LineReplacer();
  std::string operator()(std::string s);
};

LineReplacer::LineReplacer()
{
  replaces.push_back(std::make_pair("{+", "{plus"));
  replaces.push_back(std::make_pair("\\+", "{plus}"));
  replaces.push_back(std::make_pair("{!", "{exclam"));
  replaces.push_back(std::make_pair("\\!", "{exclam}"));
  replaces.push_back(std::make_pair("{#", "{numbersign"));
  replaces.push_back(std::make_pair("\\#", "{numbersign}"));
  replaces.push_back(std::make_pair("{^", "{asciicircum"));
  replaces.push_back(std::make_pair("\\^", "{asciicircum}"));
  replaces.push_back(std::make_pair("{}}", "{braceright}"));
  replaces.push_back(std::make_pair("{{", "{braceleft"));
  replaces.push_back(std::make_pair("\\{", "{braceleft}"));
  replaces.push_back(std::make_pair("\\}", "{braceright}"));
  
}

LineReplacer::~LineReplacer() {};

std::string LineReplacer::operator()(std::string s)
{
  for (StringPairs::iterator
         it = replaces.begin(); it != replaces.end(); it++) {
    s = boost::replace_all_copy(s, it->first, it->second);
  }
  return s;
}

* Mon 27 Jan 2014 06:16:11 PM JST

* Mon 27 Jan 2014 06:16:11 PM JST

* Mon 27 Jan 2014 06:16:11 PM JST
typedef std::list<std::pair<std::string,std::string> > StringPairs;

* Mon 27 Jan 2014 06:16:43 PM JST

* Mon 27 Jan 2014 06:16:43 PM JST

* Mon 27 Jan 2014 06:16:43 PM JST
#include <list>

* Mon 27 Jan 2014 06:16:49 PM JST
list
* Mon 27 Jan 2014 06:17:15 PM JST
typedef std::vector<std::pair<std::string,std::string> > StringPairs;
* Mon 27 Jan 2014 06:17:22 PM JST
#include <vector>
* Mon 27 Jan 2014 06:17:33 PM JST
#include <boost/algorithm/string/replace.hpp>
* Mon 27 Jan 2014 06:17:42 PM JST

* Mon 27 Jan 2014 06:17:43 PM JST

* Mon 27 Jan 2014 06:17:43 PM JST
#include <iostream>

* Mon 27 Jan 2014 06:17:44 PM JST

* Mon 27 Jan 2014 06:17:44 PM JST

* Mon 27 Jan 2014 06:17:44 PM JST
#include <cstdlib>

* Mon 27 Jan 2014 06:18:21 PM JST
class LineReplacer
{
private:
  StringPairs replaces;
public:
  LineReplacer();
  virtual ~LineReplacer();
  std::string operator()(std::string s);
};

* Mon 27 Jan 2014 06:18:29 PM JST
typedef std::vector<std::pair<std::string,std::string> > StringPairs;
* Mon 27 Jan 2014 06:19:12 PM JST
#include <vector>
* Mon 27 Jan 2014 06:19:35 PM JST
#include <string>
* Mon 27 Jan 2014 06:22:32 PM JST
class Tokenize
{
private:
  LineReplacer replacer;
  
public:
  Tokenize(){};
  ~Tokenize(){};
  STRINGVECTOR operator() (std::string str);
};

* Mon 27 Jan 2014 06:23:31 PM JST
typedef std::vector<std::string> STRINGVECTOR;
* Mon 27 Jan 2014 06:24:06 PM JST
STRINGVECTOR Tokenize::operator() (std::string str)
{
  STRINGVECTOR results;
  str = replacer(str);
  std::size_t maxlen = str.length();
  std::size_t k;
  for (std::size_t i=0; i<=maxlen;) {
    if (str[i] == '{') {
      ++i;
      k = i;
      std::size_t counter = 0; // for string len
      // move k to '}' point
      while (str[k] != '}' && k != maxlen) {
        ++counter;
        ++k;
      }
      if (k == maxlen) {
        break;
      }
      results.push_back(str.substr(i, counter));
      i = k + 1;
    } else {
      results.push_back(str.substr(i, 1));
      ++i;
    } 
  }
  return results;
}

* Mon 27 Jan 2014 06:24:25 PM JST

* Mon 27 Jan 2014 06:24:25 PM JST

* Mon 27 Jan 2014 06:24:25 PM JST
#include <iostream>

* Mon 27 Jan 2014 06:25:59 PM JST
std::string s = "hello{+}world{{}google\\{";
* Mon 27 Jan 2014 06:26:06 PM JST
Tokenize token;
* Mon 27 Jan 2014 06:26:10 PM JST
  Tokenize token;
  STRINGVECTOR lis = token(s);
  for (STRINGVECTOR::iterator it=lis.begin(); it!=lis.end(); ++it) {
    std::cout << *it << std::endl;
  }

* Mon 27 Jan 2014 06:27:35 PM JST
ld returned 1 exit status
* Mon 27 Jan 2014 10:23:54 PM JST
int SendKeys(Display *display, Window &win, Window &winRoot, char *keys)
* Mon 27 Jan 2014 10:24:21 PM JST
keys
* Mon 27 Jan 2014 10:24:22 PM JST
char *keys
* Mon 27 Jan 2014 10:29:38 PM JST
  for (STRINGVECTOR::iterator it=lis.begin(); it!=lis.end(); ++it) {
    std::cout << *it << std::endl;
  }

* Mon 27 Jan 2014 10:29:45 PM JST
it
* Mon 27 Jan 2014 10:29:54 PM JST
lis
* Mon 27 Jan 2014 10:29:58 PM JST
lis
* Mon 27 Jan 2014 10:31:03 PM JST

* Mon 27 Jan 2014 10:31:03 PM JST

* Mon 27 Jan 2014 10:31:03 PM JST
    std::cout << *it << std::endl;

* Mon 27 Jan 2014 10:33:14 PM JST

* Mon 27 Jan 2014 10:33:14 PM JST

* Mon 27 Jan 2014 10:33:14 PM JST
unsigned 

* Mon 27 Jan 2014 10:33:42 PM JST
*it << std::endl;
* Mon 27 Jan 2014 10:33:44 PM JST

* Mon 27 Jan 2014 10:33:44 PM JST

* Mon 27 Jan 2014 10:33:44 PM JST
      std::cout << 

* Mon 27 Jan 2014 10:34:51 PM JST
SendKeys
* Mon 27 Jan 2014 10:35:17 PM JST
"hello{}}world"
* Mon 27 Jan 2014 10:46:39 PM JST
GetKeycode
* Mon 27 Jan 2014 10:48:39 PM JST
KeyCode GetKeycode
* Mon 27 Jan 2014 10:49:08 PM JST
Display *display, char *key
* Mon 27 Jan 2014 10:49:31 PM JST
  
* Mon 27 Jan 2014 10:49:37 PM JST
Display *display, KeySym keysym
* Mon 27 Jan 2014 10:49:47 PM JST
KeyCode GetKeycode(Display *display, std::string keystring)
* Mon 27 Jan 2014 10:50:17 PM JST
XKeyEvent createKeyEvent(Display *display, Window &win,
                         Window &winRoot, bool press,
                         int keycode, int modifiers)
* Mon 27 Jan 2014 10:50:56 PM JST
Display *display, Window &win, Window &winRoot,
                 bool press, KeyCode keycode, int modifiers
* Mon 27 Jan 2014 10:51:44 PM JST
                           
* Mon 27 Jan 2014 10:54:32 PM JST
Window &win, Window &winRoot,
             T_key key, int modifiers
* Mon 27 Jan 2014 10:54:35 PM JST
              
* Mon 27 Jan 2014 10:56:07 PM JST
template<typename T_key>
* Mon 27 Jan 2014 10:58:06 PM JST
int SendKey (Window &win, Window &winRoot, char *key, int modifiers)
* Mon 27 Jan 2014 10:58:28 PM JST
int SendKey (Window &winRoot, char *key, int modifiers)
* Mon 27 Jan 2014 10:58:40 PM JST
int SendKey (char *key, int modifiers)
* Mon 27 Jan 2014 11:00:15 PM JST
Window &win, Window &winRoot, char *keys
* Mon 27 Jan 2014 11:02:53 PM JST
Display *display
* Mon 27 Jan 2014 11:09:48 PM JST
Sendkey::Sendkey(Display *display) :
  modifiers(0)
{
  if (display == NULL) 
    display = XOpenDisplay(NULL);
  // TODO: (Atami) [2014/01/27]
  // if (display == NULL) {
  //   return -1;
  // }
  
}

* Mon 27 Jan 2014 11:09:56 PM JST
Sendkey::Sendkey(Display *display) :
  modifiers(0)
{
  if (display == NULL) 
    display = XOpenDisplay(NULL);
  // TODO: (Atami) [2014/01/27]
  // if (display == NULL) {
  //   return -1;
  // }
  
}

* Mon 27 Jan 2014 11:10:41 PM JST
Sendkey(Display *display);
* Mon 27 Jan 2014 11:11:28 PM JST
display
* Mon 27 Jan 2014 11:11:32 PM JST
Dsipaly
* Mon 27 Jan 2014 11:11:54 PM JST
Sendkey::Sendkey(Display *display=Null)
* Mon 27 Jan 2014 11:12:25 PM JST
Display *display=NULL
* Mon 27 Jan 2014 11:21:21 PM JST

* Mon 27 Jan 2014 11:21:21 PM JST

* Mon 27 Jan 2014 11:21:21 PM JST
  Sendkey(Display *display=NULL);

* Mon 27 Jan 2014 11:22:06 PM JST
display
* Mon 27 Jan 2014 11:22:27 PM JST
display
* Mon 27 Jan 2014 11:22:54 PM JST
  
* Mon 27 Jan 2014 11:23:11 PM JST
: modifiers(0)
* Mon 27 Jan 2014 11:29:46 PM JST
return XKeysymToKeycode(display, XStringToKeysym(key));
* Mon 27 Jan 2014 11:31:28 PM JST
KeyCode Sendkey::GetKeycode(char *key)
{
  return XKeysymToKeycode(display, XStringToKeysym(key));
}

* Mon 27 Jan 2014 11:31:32 PM JST
key
* Mon 27 Jan 2014 11:31:38 PM JST
display, 
* Mon 27 Jan 2014 11:31:51 PM JST
char
* Mon 27 Jan 2014 11:32:18 PM JST
XKeysymToKeycode(display, keysym);
* Mon 27 Jan 2014 11:32:45 PM JST
KeyCode Sendkey::GetKeycode(KeySym keysym)
{
  return XKeysymToKeycode(display, keysym);
}

* Mon 27 Jan 2014 11:32:52 PM JST
std::string keystring
* Mon 27 Jan 2014 11:33:13 PM JST
return XKeysymToKeycode(display, XStringToKeysym(keystring.c_str()));
* Mon 27 Jan 2014 11:35:02 PM JST
  XKeyEvent createKeyEvent(Window &win, Window &winRoot, bool press,
                           int keycode, int modifiers);

* Mon 27 Jan 2014 11:36:06 PM JST
  XKeyEvent event;
  event.display     = display;
  event.window      = win;
  event.root        = winRoot;
  event.subwindow   = None;
  event.time        = CurrentTime;
  event.x           = 1;
  event.y           = 1;
  event.x_root      = 1;
  event.y_root      = 1;
  event.same_screen = True;
  event.keycode     = keycode;
  event.state       = modifiers;
  event.type        = press ? KeyPress : KeyRelease;
  return event;

* Mon 27 Jan 2014 11:38:30 PM JST
int SendKeyEvent(Display *display, Window &win, Window &winRoot,
                 bool press, KeyCode keycode, int modifiers)
{
  LockDisplay(display);
  XKeyEvent event = createKeyEvent(display, win, winRoot, press,
                                   keycode, modifiers);
  XSendEvent(event.display, event.window, True,
             KeyPressMask|KeyReleaseMask, (XEvent *)&event);
  UnlockDisplay(display);
  XFlush(display);
  return 1;
}

* Mon 27 Jan 2014 11:39:35 PM JST
int SendKeyEvent(Display *display, Window &win, Window &winRoot,
                 bool press, KeyCode keycode, int modifiers)
* Mon 27 Jan 2014 11:40:20 PM JST
  LockDisplay(display);
  XKeyEvent event = createKeyEvent(display, win, winRoot, press,
                                   keycode, modifiers);
  XSendEvent(event.display, event.window, True,
             KeyPressMask|KeyReleaseMask, (XEvent *)&event);
  UnlockDisplay(display);
  XFlush(display);
  return 1;
* Mon 27 Jan 2014 11:41:30 PM JST
                           
* Mon 27 Jan 2014 11:41:47 PM JST
                                  
* Mon 27 Jan 2014 11:42:17 PM JST
                                   
* Mon 27 Jan 2014 11:45:51 PM JST

* Mon 27 Jan 2014 11:45:51 PM JST

* Mon 27 Jan 2014 11:45:51 PM JST
  int modifiers;

* Mon 27 Jan 2014 11:45:58 PM JST
 : modifiers(0)
* Mon 27 Jan 2014 11:46:18 PM JST
display, 
* Mon 27 Jan 2014 11:46:20 PM JST
                                   
* Mon 27 Jan 2014 11:49:20 PM JST
Window &win, Window &winRoot,
             T_key key, int modifiers
* Mon 27 Jan 2014 11:49:24 PM JST
                      
* Mon 27 Jan 2014 11:49:35 PM JST
template<typename T_key>
* Mon 27 Jan 2014 11:50:00 PM JST
  KeyCode keycode = GetKeycode(display, key);
  // std::cout << "DEBUG-7-sendkey.cc" << keycode << std::endl;
  printf("%d\n", keycode);
  SendKeyEvent(display, win, winRoot, PressKey, keycode, modifiers);
  SendKeyEvent(display, win, winRoot, ReleaseKey, keycode, modifiers);
  return 1;
* Mon 27 Jan 2014 11:50:03 PM JST

* Mon 27 Jan 2014 11:50:03 PM JST

* Mon 27 Jan 2014 11:50:03 PM JST
  printf("%d\n", keycode);

* Mon 27 Jan 2014 11:50:04 PM JST

* Mon 27 Jan 2014 11:50:04 PM JST

* Mon 27 Jan 2014 11:50:04 PM JST
  // std::cout << "DEBUG-7-sendkey.cc" << keycode << std::endl;

* Mon 27 Jan 2014 11:50:14 PM JST
display, 
* Mon 27 Jan 2014 11:50:16 PM JST
display, 
* Mon 27 Jan 2014 11:51:43 PM JST

* Mon 27 Jan 2014 11:51:43 PM JST

* Mon 27 Jan 2014 11:51:43 PM JST
  int sendKey(Window &win, Window &winRoot, char *key, int modifiers);

* Mon 27 Jan 2014 11:52:38 PM JST
int Sendkey::sendKey (Window &win, Window &winRoot, T_key key, int modifiers)
{
  KeyCode keycode = GetKeycode(display, key);
  SendKeyEvent(win, winRoot, PressKey, keycode, modifiers);
  SendKeyEvent(win, winRoot, ReleaseKey, keycode, modifiers);
  return 1;
}

* Mon 27 Jan 2014 11:52:42 PM JST
template<typename T_key>
* Mon 27 Jan 2014 11:52:57 PM JST
template<typename T_key>
* Mon 27 Jan 2014 11:53:10 PM JST
T_key
* Mon 27 Jan 2014 11:53:32 PM JST
template<typename T_key>
* Mon 27 Jan 2014 11:53:36 PM JST
T_key
* Mon 27 Jan 2014 11:55:05 PM JST
XGetInputFocus(display, &win, &revert);
* Mon 27 Jan 2014 11:55:12 PM JST
  Window win;
  int revert;

* Mon 27 Jan 2014 11:57:13 PM JST
template<typename T_key>
* Mon 27 Jan 2014 11:58:24 PM JST
  Window win;
  int revert;

* Mon 27 Jan 2014 11:58:30 PM JST
XGetInputFocus(display, &win, &revert);
* Mon 27 Jan 2014 11:58:44 PM JST
  Window winRoot = XDefaultRootWindow(display);
  KeyCode keycode = GetKeycode(display, key);

* Mon 27 Jan 2014 11:58:48 PM JST
  Window winRoot = XDefaultRootWindow(display);
  KeyCode keycode = GetKeycode(display, key);
  SendKeyEvent(display, win, winRoot, PressKey, keycode, modifiers);
  SendKeyEvent(display, win, winRoot, ReleaseKey, keycode, modifiers);

* Mon 27 Jan 2014 11:59:00 PM JST
display, 
* Mon 27 Jan 2014 11:59:02 PM JST
display, 
* Tue 28 Jan 2014 12:16:55 AM JST
int SendKeys(Display *display, Window &win, Window &winRoot, std::string str)
{
  Tokenize tokenizer;
  STRINGVECTOR tokens = tokenizer(str);
  for (STRINGVECTOR::iterator it=tokens.begin(); it!=tokens.end(); ++it) {
    if (it->length() == 1) {
      std::cout << "one char " << *it << std::endl;
    } else {
        std::cout << "string " << *it << std::endl;
      }
  }
  return 1;
}

* Tue 28 Jan 2014 12:17:23 AM JST

* Tue 28 Jan 2014 12:17:23 AM JST

* Tue 28 Jan 2014 12:17:23 AM JST
  Tokenize tokenizer;

* Tue 28 Jan 2014 12:21:45 AM JST
int modifiers = 0;
* Tue 28 Jan 2014 12:31:13 AM JST
ShiftMask
* Tue 28 Jan 2014 12:32:48 AM JST
ControlMask
* Tue 28 Jan 2014 12:33:05 AM JST
        case '^':
          modifiers |= ShiftMask;
          break;

* Tue 28 Jan 2014 12:33:18 AM JST
        case '#':
          std::cout << "#" << keys << std::endl;
          modifiers |= SuperMask;
          break;

* Tue 28 Jan 2014 12:33:24 AM JST

* Tue 28 Jan 2014 12:33:24 AM JST

* Tue 28 Jan 2014 12:33:24 AM JST
          std::cout << "#" << keys << std::endl;

* Tue 28 Jan 2014 12:34:04 AM JST
        case ' ':
          std::cout << "DEBUG-8-sendkey.cc" << std::endl;
          
          SendKey(display, win, winRoot, XK_space, modifiers);
          modifiers = 0;
          break;

* Tue 28 Jan 2014 12:34:09 AM JST

* Tue 28 Jan 2014 12:34:09 AM JST

* Tue 28 Jan 2014 12:34:09 AM JST
          std::cout << "DEBUG-8-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 12:59:07 AM JST
        case ' ':
          std::cout << "DEBUG-8-sendkey.cc" << std::endl;
          
          SendKey(display, win, winRoot, XK_space, modifiers);
          modifiers = 0;
          break;

* Tue 28 Jan 2014 12:59:15 AM JST

* Tue 28 Jan 2014 12:59:15 AM JST

* Tue 28 Jan 2014 12:59:15 AM JST
          std::cout << "DEBUG-8-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 12:59:31 AM JST
display, 
* Tue 28 Jan 2014 12:59:43 AM JST
        // case '!':
        //   SendKey(display, win, winRoot, "exclam", modifiers);
        //   modifiers = 0;
        //   break;

* Tue 28 Jan 2014 12:59:52 AM JST
        case '"':
          std::cout << "DEBUG-9-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_quotedbl, modifiers);
          modifiers = 0;
          break;

* Tue 28 Jan 2014 12:59:56 AM JST

* Tue 28 Jan 2014 12:59:56 AM JST

* Tue 28 Jan 2014 12:59:56 AM JST
          std::cout << "DEBUG-9-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:00:03 AM JST
display, 
* Tue 28 Jan 2014 01:00:16 AM JST
        case '$':
          std::cout << "DEBUG-10-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_dollar, modifiers);
          modifiers = 0;
          break;

* Tue 28 Jan 2014 01:00:23 AM JST

* Tue 28 Jan 2014 01:00:23 AM JST

* Tue 28 Jan 2014 01:00:23 AM JST
          std::cout << "DEBUG-10-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:00:27 AM JST
display, 
* Tue 28 Jan 2014 01:00:33 AM JST
        case '%':
          std::cout << "DEBUG-11-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_percent, modifiers);
          modifiers = 0;
          break;

* Tue 28 Jan 2014 01:00:36 AM JST

* Tue 28 Jan 2014 01:00:36 AM JST

* Tue 28 Jan 2014 01:00:36 AM JST
          std::cout << "DEBUG-11-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:00:42 AM JST
display, 
* Tue 28 Jan 2014 01:00:49 AM JST
        case '&':
          std::cout << "DEBUG-12-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_ampersand, modifiers);
          modifiers = 0;
          break;

* Tue 28 Jan 2014 01:00:53 AM JST

* Tue 28 Jan 2014 01:00:53 AM JST

* Tue 28 Jan 2014 01:00:53 AM JST
          std::cout << "DEBUG-12-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:01:01 AM JST
display, 
* Tue 28 Jan 2014 01:01:49 AM JST
        case '\'':
          std::cout << "DEBUG-13-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_apostrophe, modifiers); // quoteright
          modifiers = 0;
          break;
        case '(':
          std::cout << "DEBUG-14-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_parenleft, modifiers);
          modifiers = 0;
          break;
        case ')':
          std::cout << "DEBUG-15-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_parenright, modifiers);
          modifiers = 0;
          break;
        case '*':
          std::cout << "DEBUG-16-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_asterisk, modifiers);
          modifiers = 0;
          break;
        // case '+':
        //   SendKey(display, win, winRoot, "plus", modifiers);
        //   modifiers = 0;
        //   break;
        case ',':
          std::cout << "DEBUG-17-sendkey.cc" << std::endl;
          SendKey(display, win, winRoot, XK_comma, modifiers);
          modifiers = 0;
          break;
        case '-':
          std::cout << "DEBUG-18-sendkey.cc" << std::endl;
          SendKey(display, win, winRoot, XK_minus, modifiers);
          modifiers = 0;
          break;
        case '.':
          std::cout << "DEBUG-19-sendkey.cc" << std::endl;
          SendKey(display, win, winRoot, XK_period, modifiers);
          modifiers = 0;
          break;
        case '/':
          std::cout << "DEBUG-20-sendkey.cc" << std::endl;
          SendKey(display, win, winRoot, XK_slash, modifiers);
          modifiers = 0;
          break;
        case ':':
          std::cout << "DEBUG-21-sendkey.cc" << std::endl;
          SendKey(display, win, winRoot, XK_colon, modifiers);
          modifiers = 0;
          break;
        case ';':
          std::cout << "DEBUG-22-sendkey.cc" << std::endl;
          SendKey(display, win, winRoot, XK_semicolon, modifiers);
          modifiers = 0;
          break;
        case '<':
          std::cout << "DEBUG-23-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_less, modifiers);
          modifiers = 0;
          break;
        case '=':
          std::cout << "DEBUG-24-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_equal, modifiers);
          modifiers = 0;
          break;
        case '>':
          std::cout << "DEBUG-25-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_greater, modifiers);
          modifiers = 0;
          break;
        case '?':
          std::cout << "DEBUG-26-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_question, modifiers);
          modifiers = 0;
          break;
        case '@':
          std::cout << "DEBUG-27-sendkey.cc" << std::endl;
          SendKey(display, win, winRoot, XK_at, modifiers);
          modifiers = 0;
          break;
        case '[':
          std::cout << "DEBUG-28-sendkey.cc" << std::endl;
          SendKey(display, win, winRoot, XK_bracketleft, modifiers);
          modifiers = 0;
          break;
        case '\\':
          std::cout << "DEBUG-29-sendkey.cc" << std::endl;
          SendKey(display, win, winRoot, XK_backslash, modifiers);
          modifiers = 0;
          break;
        case ']':
          std::cout << "DEBUG-30-sendkey.cc" << std::endl;
          SendKey(display, win, winRoot, XK_bracketright, modifiers);
          modifiers = 0;
          break;
        // case '^':
        //   SendKey(display, win, winRoot, "asciicircum", modifiers);
        //   modifiers = 0;
        //   break;
        case '_':
          std::cout << "DEBUG-31-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_underscore, modifiers);
          modifiers = 0;
          break;
        case '`':
          std::cout << "DEBUG-32-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_grave, modifiers); // quoteleft `
          modifiers = 0;
          break;
        // case '{':
        //   SendKey(display, win, winRoot, "braceleft", modifiers);
        //   modifiers = 0;
        //   break;
        case '|':
          std::cout << "DEBUG-33-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_bar, modifiers);
          modifiers = 0;
          break;
        // case '}':
        //   SendKey(display, win, winRoot, "braceright", modifiers);
        //   modifiers = 0;
        //   break;
        case '~':
          std::cout << "DEBUG-34-sendkey.cc" << std::endl;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, XK_asciitilde, modifiers);
          modifiers = 0;
          break;
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
          single_char[0] = *keys;
          modifiers |= ShiftMask;
          SendKey(display, win, winRoot, single_char, modifiers);
          modifiers = 0;
          break;

* Tue 28 Jan 2014 01:02:20 AM JST

* Tue 28 Jan 2014 01:02:20 AM JST

* Tue 28 Jan 2014 01:02:20 AM JST
          std::cout << "DEBUG-13-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:02:25 AM JST
display, 
* Tue 28 Jan 2014 01:02:29 AM JST

* Tue 28 Jan 2014 01:02:29 AM JST

* Tue 28 Jan 2014 01:02:29 AM JST
          std::cout << "DEBUG-14-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:02:35 AM JST
display, 
* Tue 28 Jan 2014 01:02:38 AM JST

* Tue 28 Jan 2014 01:02:38 AM JST

* Tue 28 Jan 2014 01:02:38 AM JST
          std::cout << "DEBUG-15-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:02:45 AM JST
display, 
* Tue 28 Jan 2014 01:02:48 AM JST

* Tue 28 Jan 2014 01:02:48 AM JST

* Tue 28 Jan 2014 01:02:48 AM JST
          std::cout << "DEBUG-16-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:02:53 AM JST
display, 
* Tue 28 Jan 2014 01:02:56 AM JST

* Tue 28 Jan 2014 01:02:56 AM JST

* Tue 28 Jan 2014 01:02:56 AM JST
          std::cout << "DEBUG-17-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:03:01 AM JST
display, 
* Tue 28 Jan 2014 01:03:03 AM JST

* Tue 28 Jan 2014 01:03:03 AM JST

* Tue 28 Jan 2014 01:03:03 AM JST
          std::cout << "DEBUG-18-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:03:08 AM JST
display, 
* Tue 28 Jan 2014 01:03:10 AM JST

* Tue 28 Jan 2014 01:03:10 AM JST

* Tue 28 Jan 2014 01:03:10 AM JST
          std::cout << "DEBUG-19-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:03:15 AM JST
display, 
* Tue 28 Jan 2014 01:03:18 AM JST

* Tue 28 Jan 2014 01:03:18 AM JST

* Tue 28 Jan 2014 01:03:18 AM JST
          std::cout << "DEBUG-20-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:03:24 AM JST
display, 
* Tue 28 Jan 2014 01:03:26 AM JST

* Tue 28 Jan 2014 01:03:26 AM JST

* Tue 28 Jan 2014 01:03:26 AM JST
          std::cout << "DEBUG-21-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:03:30 AM JST
display, 
* Tue 28 Jan 2014 01:03:32 AM JST

* Tue 28 Jan 2014 01:03:32 AM JST

* Tue 28 Jan 2014 01:03:32 AM JST
          std::cout << "DEBUG-22-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:03:37 AM JST
display, 
* Tue 28 Jan 2014 01:03:40 AM JST

* Tue 28 Jan 2014 01:03:40 AM JST

* Tue 28 Jan 2014 01:03:40 AM JST
          std::cout << "DEBUG-23-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:03:45 AM JST
display, 
* Tue 28 Jan 2014 01:03:47 AM JST

* Tue 28 Jan 2014 01:03:47 AM JST

* Tue 28 Jan 2014 01:03:48 AM JST
          std::cout << "DEBUG-24-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:03:53 AM JST
display, 
* Tue 28 Jan 2014 01:03:54 AM JST

* Tue 28 Jan 2014 01:03:54 AM JST

* Tue 28 Jan 2014 01:03:54 AM JST
          std::cout << "DEBUG-25-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:03:59 AM JST
display, 
* Tue 28 Jan 2014 01:04:01 AM JST

* Tue 28 Jan 2014 01:04:01 AM JST

* Tue 28 Jan 2014 01:04:01 AM JST
          std::cout << "DEBUG-26-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:04:07 AM JST
display, 
* Tue 28 Jan 2014 01:04:09 AM JST

* Tue 28 Jan 2014 01:04:09 AM JST

* Tue 28 Jan 2014 01:04:10 AM JST
          std::cout << "DEBUG-27-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:04:13 AM JST
display, 
* Tue 28 Jan 2014 01:04:15 AM JST

* Tue 28 Jan 2014 01:04:15 AM JST

* Tue 28 Jan 2014 01:04:15 AM JST
          std::cout << "DEBUG-28-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:04:19 AM JST
display, 
* Tue 28 Jan 2014 01:04:21 AM JST

* Tue 28 Jan 2014 01:04:21 AM JST

* Tue 28 Jan 2014 01:04:21 AM JST
          std::cout << "DEBUG-29-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:04:25 AM JST
display, 
* Tue 28 Jan 2014 01:04:27 AM JST

* Tue 28 Jan 2014 01:04:27 AM JST

* Tue 28 Jan 2014 01:04:27 AM JST
          std::cout << "DEBUG-30-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:04:31 AM JST
display, 
* Tue 28 Jan 2014 01:04:33 AM JST

* Tue 28 Jan 2014 01:04:33 AM JST

* Tue 28 Jan 2014 01:04:33 AM JST
          std::cout << "DEBUG-31-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:04:39 AM JST
display, 
* Tue 28 Jan 2014 01:04:41 AM JST

* Tue 28 Jan 2014 01:04:41 AM JST

* Tue 28 Jan 2014 01:04:42 AM JST
          std::cout << "DEBUG-32-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:04:47 AM JST
display, 
* Tue 28 Jan 2014 01:04:50 AM JST

* Tue 28 Jan 2014 01:04:50 AM JST

* Tue 28 Jan 2014 01:04:50 AM JST
          std::cout << "DEBUG-33-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:04:57 AM JST
display, 
* Tue 28 Jan 2014 01:04:59 AM JST

* Tue 28 Jan 2014 01:04:59 AM JST

* Tue 28 Jan 2014 01:04:59 AM JST
          std::cout << "DEBUG-34-sendkey.cc" << std::endl;

* Tue 28 Jan 2014 01:05:04 AM JST
display, 
* Tue 28 Jan 2014 01:05:31 AM JST

* Tue 28 Jan 2014 01:05:32 AM JST

* Tue 28 Jan 2014 01:05:32 AM JST
          single_char[0] = *keys;

* Tue 28 Jan 2014 01:05:36 AM JST
display, 
* Tue 28 Jan 2014 01:13:13 AM JST
SendKey(display, win, winRoot, single_char, modifiers);
* Tue 28 Jan 2014 01:13:20 AM JST
display, 
* Tue 28 Jan 2014 01:14:02 AM JST

* Tue 28 Jan 2014 01:14:02 AM JST

* Tue 28 Jan 2014 01:14:02 AM JST
      std::cout << "one char " << *it << std::endl;

* Tue 28 Jan 2014 01:15:51 AM JST

* Tue 28 Jan 2014 01:15:51 AM JST

* Tue 28 Jan 2014 01:15:51 AM JST
      std::cout << "string " << *it << std::endl;

* Tue 28 Jan 2014 01:16:41 AM JST
display,
* Tue 28 Jan 2014 01:17:19 AM JST
display, 
* Tue 28 Jan 2014 01:17:25 AM JST
display, 
* Tue 28 Jan 2014 01:28:59 AM JST

* Tue 28 Jan 2014 01:28:59 AM JST

* Tue 28 Jan 2014 01:28:59 AM JST
  Sendkey sendkey(display);

* Tue 28 Jan 2014 01:30:23 AM JST
~Sendkey()
* Tue 28 Jan 2014 02:17:51 AM JST
  if (dpy == NULL) {
    dpy = XOpenDisplay(NULL);
  }
  display = dpy;

* Tue 28 Jan 2014 02:19:52 AM JST

* Tue 28 Jan 2014 02:19:52 AM JST

* Tue 28 Jan 2014 02:19:52 AM JST
  int modifiers;

* Tue 28 Jan 2014 02:19:59 AM JST

* Tue 28 Jan 2014 02:19:59 AM JST

* Tue 28 Jan 2014 02:19:59 AM JST
  int modifiers;

* Tue 28 Jan 2014 03:02:56 AM JST
look_modifiers
* Tue 28 Jan 2014 03:09:08 AM JST

* Tue 28 Jan 2014 03:09:08 AM JST

* Tue 28 Jan 2014 03:09:08 AM JST
  bool lock_modifiers;

* Tue 28 Jan 2014 03:16:04 AM JST
  KeyCode GetKeycode(char *key);
  KeyCode GetKeycode(KeySym keysym);
  KeyCode GetKeycode(std::string keystring);
  XKeyEvent createKeyEvent(Window &win, Window &winRoot, bool press,
                           int keycode, int modifiers);

* Tue 28 Jan 2014 03:16:28 AM JST
  Tokenize tokenizer;
* Tue 28 Jan 2014 03:23:42 AM JST
template<typename T_key>
* Tue 28 Jan 2014 03:24:09 AM JST
template<typename T_key>
* Tue 28 Jan 2014 03:28:53 AM JST
KeyCode Sendkeys::GetKeycode(char *key)
{
  return XKeysymToKeycode(display, XStringToKeysym(key));
}

KeyCode Sendkeys::GetKeycode(KeySym keysym)
{
  return XKeysymToKeycode(display, keysym);
}

KeyCode Sendkeys::GetKeycode(std::string keystring)
{
  return XKeysymToKeycode(display, XStringToKeysym(keystring.c_str()));
}

* Tue 28 Jan 2014 03:30:42 AM JST
XKeyEvent Sendkeys::createKeyEvent(Window &win, Window &winRoot, bool press,
                                  int keycode, int modifiers)
{
  XKeyEvent event;
  event.display     = display;
  event.window      = win;
  event.root        = winRoot;
  event.subwindow   = None;
  event.time        = CurrentTime;
  event.x           = 1;
  event.y           = 1;
  event.x_root      = 1;
  event.y_root      = 1;
  event.same_screen = True;
  event.keycode     = keycode;
  event.state       = modifiers;
  event.type        = press ? KeyPress : KeyRelease;
  return event;
};

* Tue 28 Jan 2014 03:31:42 AM JST
Window &win, Window &winRoot, bool press,
                          KeyCode keycode, int modifiers
* Tue 28 Jan 2014 03:32:05 AM JST
int Sendkeys::SendKeyEvent(Window &win, Window &winRoot, bool press,
                          KeyCode keycode, int modifiers)
{
  LockDisplay(display);
  XKeyEvent event = createKeyEvent(win, winRoot, press, keycode, modifiers);
  XSendEvent(event.display, event.window, True,
             KeyPressMask|KeyReleaseMask, (XEvent *)&event);
  UnlockDisplay(display);
  XFlush(display);
  return 1;  
}

* Tue 28 Jan 2014 03:33:47 AM JST
template<typename T_key>
int Sendkeys::sendKey (Window &win, Window &winRoot, T_key key, int modifiers)
{
  KeyCode keycode = GetKeycode(key);
  SendKeyEvent(win, winRoot, PressKey, keycode, modifiers);
  SendKeyEvent(win, winRoot, ReleaseKey, keycode, modifiers);
  return 1;
}

template<typename T_key>
int Sendkeys::sendKey (Window &winRoot, T_key key, int modifiers)
{
  Window win;
  int revert;
  XGetInputFocus(display, &win, &revert);
  KeyCode keycode = GetKeycode(key);
  SendKeyEvent(win, winRoot, PressKey, keycode, modifiers);
  SendKeyEvent(win, winRoot, ReleaseKey, keycode, modifiers);
  return 1;
}

template<typename T_key>
int Sendkeys::sendKey(T_key key, int modifiers)
{
  Window win;
  int revert;
  XGetInputFocus(display, &win, &revert);
  Window winRoot = XDefaultRootWindow(display);
  KeyCode keycode = GetKeycode(key);
  SendKeyEvent(win, winRoot, PressKey, keycode, modifiers);
  SendKeyEvent(win, winRoot, ReleaseKey, keycode, modifiers);
  return 1;
}

* Tue 28 Jan 2014 03:34:02 AM JST
sendKey 
* Tue 28 Jan 2014 03:34:11 AM JST
sendKey 
* Tue 28 Jan 2014 03:34:20 AM JST
sendKey
* Tue 28 Jan 2014 03:34:44 AM JST
  template<typename T_key>
  int sendKey(Window &win, Window &winRoot, T_key key, int modifiers);
  template<typename T_key>
  int sendKey(Window &winRoot, T_key key, int modifiers);
  template<typename T_key>
  int sendKey(T_key key, int modifiers);

* Tue 28 Jan 2014 03:35:00 AM JST
sendKey
* Tue 28 Jan 2014 03:35:07 AM JST
operator()
* Tue 28 Jan 2014 03:39:07 AM JST
~Sendkey
* Tue 28 Jan 2014 03:44:30 AM JST
Display *display;
* Tue 28 Jan 2014 03:46:33 AM JST
  if (dpy == NULL) {
    dpy = XOpenDisplay(NULL);
  }
  display = dpy;

* Tue 28 Jan 2014 03:47:39 AM JST
  if (dpy == NULL) {
    dpy = XOpenDisplay(NULL);
  }
  display = dpy;

* Tue 28 Jan 2014 03:51:47 AM JST

* Tue 28 Jan 2014 03:51:48 AM JST

* Tue 28 Jan 2014 03:51:48 AM JST
  sendkey(display);

* Tue 28 Jan 2014 03:54:55 AM JST

* Tue 28 Jan 2014 03:54:55 AM JST

* Tue 28 Jan 2014 03:54:55 AM JST
  Display *display;

* Tue 28 Jan 2014 03:55:00 AM JST

* Tue 28 Jan 2014 03:55:00 AM JST

* Tue 28 Jan 2014 03:55:00 AM JST
  display = dpy;

* Tue 28 Jan 2014 03:55:53 AM JST
virtual 
* Tue 28 Jan 2014 03:57:28 AM JST
send
* Tue 28 Jan 2014 03:57:29 AM JST
int send
* Tue 28 Jan 2014 03:57:38 AM JST
  
* Tue 28 Jan 2014 03:57:40 AM JST
  
* Tue 28 Jan 2014 03:57:43 AM JST
 {}
* Tue 28 Jan 2014 03:57:53 AM JST
Window &win, Window &winRoot, std::string keys
* Tue 28 Jan 2014 03:58:58 AM JST
Window &win, Window &winRoot, std::string keys
* Tue 28 Jan 2014 04:00:02 AM JST
STRINGVECTOR tokens = tokenizer(str);
* Tue 28 Jan 2014 04:00:42 AM JST
Tokenize tokenizer;
* Tue 28 Jan 2014 04:00:53 AM JST
str
* Tue 28 Jan 2014 04:01:11 AM JST
STRINGVECTOR tokens = tokenizer(str);
* Tue 28 Jan 2014 04:01:57 AM JST
  for (STRINGVECTOR::iterator it=tokens.begin(); it!=tokens.end(); ++it) {

* Tue 28 Jan 2014 04:02:56 AM JST
sendKey(win, winRoot, XK_quotedbl, modifiers);
* Tue 28 Jan 2014 04:03:12 AM JST
sendKey(win, winRoot, *it, modifiers);
* Tue 28 Jan 2014 04:04:02 AM JST

* Tue 28 Jan 2014 04:04:02 AM JST

* Tue 28 Jan 2014 04:04:02 AM JST
  for (STRINGVECTOR::iterator it=tokens.begin(); it!=tokens.end(); ++it) {

* Tue 28 Jan 2014 04:05:55 AM JST
TesSendkeys
* Tue 28 Jan 2014 04:06:49 AM JST
sendkey
* Tue 28 Jan 2014 04:06:59 AM JST
win, winRoot, tesstring
* Tue 28 Jan 2014 04:10:56 AM JST

* Tue 28 Jan 2014 04:10:56 AM JST

* Tue 28 Jan 2014 04:10:56 AM JST
  Tokenize tokenizer;

* Tue 28 Jan 2014 04:14:45 AM JST
                           
* Tue 28 Jan 2014 04:20:03 AM JST
modifiers |= modif;
* Tue 28 Jan 2014 04:20:18 AM JST
  if (!lock_modifiers) {
    modifiers = 0;
  }

* Tue 28 Jan 2014 04:20:29 AM JST
  modifiers |= modif;
* Tue 28 Jan 2014 04:20:45 AM JST
  if (!lock_modifiers) {
    modifiers = 0;
  }

* Tue 28 Jan 2014 04:20:57 AM JST
  modifiers |= modif;
* Tue 28 Jan 2014 04:21:09 AM JST
  if (!lock_modifiers) {
    modifiers = 0;
  }

* Tue 28 Jan 2014 04:21:41 AM JST

* Tue 28 Jan 2014 04:21:41 AM JST

* Tue 28 Jan 2014 04:21:41 AM JST
  modifiers |= modif;

* Tue 28 Jan 2014 04:56:28 AM JST
static const std::vector<std::string> validValues {"foo", "bar", "baz"};
* Tue 28 Jan 2014 04:58:45 AM JST
 {"foo", "bar", "baz"}
* Tue 28 Jan 2014 05:00:21 AM JST
  
* Tue 28 Jan 2014 05:02:48 AM JST
static const 
* Tue 28 Jan 2014 05:02:57 AM JST
  
* Tue 28 Jan 2014 05:03:11 AM JST
  
* Tue 28 Jan 2014 05:03:22 AM JST
  
* Tue 28 Jan 2014 05:03:27 AM JST
  
* Tue 28 Jan 2014 05:05:19 AM JST
shift_keys_string("")
* Tue 28 Jan 2014 05:05:41 AM JST
include <>
* Tue 28 Jan 2014 05:07:16 AM JST
shift_keys_string
* Tue 28 Jan 2014 05:08:19 AM JST
shift_keys_string.begin()
* Tue 28 Jan 2014 05:08:29 AM JST
begin
* Tue 28 Jan 2014 05:11:51 AM JST
int
* Tue 28 Jan 2014 05:25:19 AM JST
sstream
* Tue 28 Jan 2014 05:34:49 AM JST
shift_keys_string.at(i)
* Tue 28 Jan 2014 05:35:59 AM JST
exclam
* Tue 28 Jan 2014 05:36:06 AM JST
quotedbl
* Tue 28 Jan 2014 05:36:14 AM JST
numbersign
* Tue 28 Jan 2014 05:36:19 AM JST
dollar
* Tue 28 Jan 2014 05:36:25 AM JST
percent
* Tue 28 Jan 2014 05:36:29 AM JST
  
* Tue 28 Jan 2014 05:36:32 AM JST
ampersand
* Tue 28 Jan 2014 05:36:38 AM JST
shift_keys.push_back("ampersand");
* Tue 28 Jan 2014 05:36:45 AM JST
  
* Tue 28 Jan 2014 05:36:59 AM JST
apostrophe
* Tue 28 Jan 2014 05:37:05 AM JST
quoteright
* Tue 28 Jan 2014 05:37:24 AM JST
parenleft
* Tue 28 Jan 2014 05:38:10 AM JST
parenleft
* Tue 28 Jan 2014 05:38:17 AM JST
parenright
* Tue 28 Jan 2014 05:38:22 AM JST
asterisk
* Tue 28 Jan 2014 05:38:47 AM JST
underscore
* Tue 28 Jan 2014 05:39:13 AM JST
asciitilde
* Tue 28 Jan 2014 05:39:25 AM JST
bar
* Tue 28 Jan 2014 05:39:56 AM JST
quoteleft
* Tue 28 Jan 2014 05:40:11 AM JST
bracketleft
* Tue 28 Jan 2014 05:40:20 AM JST
bracketright
* Tue 28 Jan 2014 05:41:53 AM JST
equal
* Tue 28 Jan 2014 05:42:23 AM JST
greater
* Tue 28 Jan 2014 05:42:30 AM JST
less
* Tue 28 Jan 2014 05:42:48 AM JST
question
* Tue 28 Jan 2014 05:49:25 AM JST
shift_keys
* Tue 28 Jan 2014 05:50:47 AM JST
else
* Tue 28 Jan 2014 05:52:14 AM JST
ShiftMask
* Tue 28 Jan 2014 05:58:17 AM JST
bool Sendkey::isNeedShift(std::string str)
* Tue 28 Jan 2014 05:58:30 AM JST
bool Sendkey::
* Tue 28 Jan 2014 05:58:32 AM JST
Sendkey::
* Tue 28 Jan 2014 05:58:35 AM JST
string
* Tue 28 Jan 2014 05:58:36 AM JST
std::string
* Tue 28 Jan 2014 05:58:55 AM JST
bool Sendkey::isNeedShift(std::string str)
{
  if (std::find(shift_keys.begin(), shift_keys.end(), str) != shift_keys.end()) {
    modifiers |= ShiftMask;
    return True;
  }
  return False;
}

* Tue 28 Jan 2014 05:59:29 AM JST
strea
* Tue 28 Jan 2014 05:59:35 AM JST
sstrea
* Tue 28 Jan 2014 06:00:36 AM JST
converter
* Tue 28 Jan 2014 06:06:04 AM JST
isNeedShift(key);
* Tue 28 Jan 2014 06:06:28 AM JST
  isNeedShift(key);
* Tue 28 Jan 2014 06:15:46 AM JST
ampersand
* Tue 28 Jan 2014 06:21:27 AM JST
  
* Tue 28 Jan 2014 06:25:51 AM JST
apostrophe
* Tue 28 Jan 2014 06:29:31 AM JST
quoteright
* Tue 28 Jan 2014 06:29:51 AM JST

* Tue 28 Jan 2014 06:29:51 AM JST

* Tue 28 Jan 2014 06:29:51 AM JST
  shift_keys.push_back("quoteright");   // '''

* Tue 28 Jan 2014 06:31:47 AM JST
braceright
* Tue 28 Jan 2014 06:31:50 AM JST
dollar
* Tue 28 Jan 2014 06:31:59 AM JST
 
* Tue 28 Jan 2014 06:32:09 AM JST
percent
* Tue 28 Jan 2014 06:32:21 AM JST
 
* Tue 28 Jan 2014 06:33:11 AM JST
ampersand
* Tue 28 Jan 2014 06:33:26 AM JST
apostrophe
* Tue 28 Jan 2014 06:33:38 AM JST
quoteleft
* Tue 28 Jan 2014 06:33:47 AM JST
parenleft
* Tue 28 Jan 2014 06:34:04 AM JST
parenright
* Tue 28 Jan 2014 06:34:11 AM JST
underscore
* Tue 28 Jan 2014 06:34:25 AM JST
asciitilde
* Tue 28 Jan 2014 06:34:34 AM JST
bar
* Tue 28 Jan 2014 06:34:42 AM JST
bracketleft
* Tue 28 Jan 2014 06:34:49 AM JST
equal
* Tue 28 Jan 2014 06:35:00 AM JST
asterisk
* Tue 28 Jan 2014 06:35:09 AM JST
less
* Tue 28 Jan 2014 06:35:17 AM JST
greater
* Tue 28 Jan 2014 06:35:24 AM JST
question
* Tue 28 Jan 2014 06:36:58 AM JST
comma
* Tue 28 Jan 2014 06:37:16 AM JST
period
* Tue 28 Jan 2014 06:37:27 AM JST
slash
* Tue 28 Jan 2014 06:38:03 AM JST
at
* Tue 28 Jan 2014 06:40:21 AM JST
colon
* Tue 28 Jan 2014 06:47:19 AM JST

* Tue 28 Jan 2014 06:47:24 AM JST
apostrophe
* Tue 28 Jan 2014 06:47:55 AM JST
grave
* Tue 28 Jan 2014 06:48:02 AM JST
  
* Tue 28 Jan 2014 06:52:13 AM JST
 !\"#$%&'()_+~|`{=*}<>?
* Tue 28 Jan 2014 06:57:24 AM JST
quotedbl
* Tue 28 Jan 2014 07:00:49 AM JST
bracketleft
* Tue 28 Jan 2014 07:01:05 AM JST
bracketright
* Tue 28 Jan 2014 07:01:24 AM JST
backslash
* Tue 28 Jan 2014 07:02:47 AM JST
braceleft
* Tue 28 Jan 2014 07:04:26 AM JST
bracketleft
* Tue 28 Jan 2014 07:05:20 AM JST
bracketleft
* Tue 28 Jan 2014 07:05:27 AM JST
bracketright
* Tue 28 Jan 2014 07:05:35 AM JST
bracketleft
* Tue 28 Jan 2014 07:05:51 AM JST
bracketright
* Tue 28 Jan 2014 07:08:48 AM JST
ABCDEFGHIJKLMNOPQRSTUVWXYZ
* Tue 28 Jan 2014 07:09:53 AM JST
converter.str()
* Tue 28 Jan 2014 07:15:33 AM JST
printing
* Tue 28 Jan 2014 07:17:54 AM JST
converter.str()
* Tue 28 Jan 2014 07:24:00 AM JST
std::string
* Tue 28 Jan 2014 07:24:08 AM JST
std::stringstream
* Tue 28 Jan 2014 07:24:32 AM JST

* Tue 28 Jan 2014 07:24:32 AM JST

* Tue 28 Jan 2014 07:24:32 AM JST
  std::string tmp;

* Tue 28 Jan 2014 07:37:22 AM JST
shift_keys_string
* Tue 28 Jan 2014 07:39:18 AM JST
tmp
* Tue 28 Jan 2014 07:41:33 AM JST
 length
* Tue 28 Jan 2014 07:42:27 AM JST

* Tue 28 Jan 2014 07:42:28 AM JST

* Tue 28 Jan 2014 07:42:28 AM JST
  std::stringstream converter;

* Tue 28 Jan 2014 07:43:02 AM JST

* Tue 28 Jan 2014 07:43:02 AM JST

* Tue 28 Jan 2014 07:43:02 AM JST
  std::stringstream converter;

* Tue 28 Jan 2014 07:44:07 AM JST

* Tue 28 Jan 2014 07:44:07 AM JST

* Tue 28 Jan 2014 07:44:07 AM JST
    std::cout << converter.str() << std::endl;

* Tue 28 Jan 2014 07:44:39 AM JST

* Tue 28 Jan 2014 07:44:39 AM JST

* Tue 28 Jan 2014 07:44:39 AM JST
  // shift_keys.push_back("space");        // ' '

* Tue 28 Jan 2014 07:53:41 AM JST
if (it->length() == 1) {
* Tue 28 Jan 2014 07:53:58 AM JST
switch (it->at(0))
* Tue 28 Jan 2014 07:54:34 AM JST
      
* Tue 28 Jan 2014 07:54:56 AM JST
modifiers |= ShiftMask;
* Tue 28 Jan 2014 07:55:17 AM JST
        case '+':
          modifiers |= ShiftMask;
          break;
        case '!':
          modifiers |= ControlMask;
          break;
        case '#':
          modifiers |= SuperMask;
          break;

* Tue 28 Jan 2014 07:55:39 AM JST
        case ' ':
          sendKey(win, winRoot, XK_space, modifiers);
          modifiers = 0;
          break;

* Tue 28 Jan 2014 07:57:26 AM JST
sendKey(win, winRoot, it->at(0), modifiers);
* Tue 28 Jan 2014 08:00:06 AM JST
win, winRoot, it->at(0), modifiers
* Tue 28 Jan 2014 08:00:24 AM JST

* Tue 28 Jan 2014 08:00:24 AM JST

* Tue 28 Jan 2014 08:00:24 AM JST
    sendkey(win, winRoot, *it, modifiers);

* Tue 28 Jan 2014 08:03:42 AM JST
  
* Tue 28 Jan 2014 08:03:48 AM JST
bool isNeedShift(char str);
* Tue 28 Jan 2014 08:04:13 AM JST
bool Sendkey::isNeedShift(char *c)
{
  std::stringstream converter;
  converter << c;
  if (std::find(shift_keys.begin(),
                shift_keys.end(), converter.str()) != shift_keys.end()) {
    modifiers |= ShiftMask;
    return True;
  }
  return False;
}

* Tue 28 Jan 2014 08:04:58 AM JST
  std::string tesstring = " \"$%&'()_~|`=*<>?-:;@[],./{bracketleft}{{}ABCDEFGHIJKLMNOPQRSTUVWXYZ";
* Tue 28 Jan 2014 08:06:05 AM JST
ControlMask
* Tue 28 Jan 2014 08:16:28 AM JST

* Tue 28 Jan 2014 08:16:28 AM JST

* Tue 28 Jan 2014 08:16:28 AM JST
  std::cout << str << std::endl;

* Tue 28 Jan 2014 08:19:14 AM JST
~SendKeys
* Tue 28 Jan 2014 08:21:39 AM JST
  
* Tue 28 Jan 2014 08:22:15 AM JST
int operator()(Window &win, Window &winRoot, char *keys);
* Tue 28 Jan 2014 08:23:26 AM JST
coneverter
* Tue 28 Jan 2014 08:24:25 AM JST
teschar
* Tue 28 Jan 2014 08:24:58 AM JST
teschar
* Tue 28 Jan 2014 08:26:06 AM JST
tesstring
* Tue 28 Jan 2014 08:50:43 AM JST
Sen
* Tue 28 Jan 2014 08:51:14 AM JST
Key
* Tue 28 Jan 2014 08:51:24 AM JST
XKeyEvent event;
* Tue 28 Jan 2014 08:52:04 AM JST
HandleKeyEvent
* Tue 28 Jan 2014 08:57:14 AM JST
Display *dpy
* Tue 28 Jan 2014 08:57:48 AM JST
Display *dpy
* Tue 28 Jan 2014 08:58:55 AM JST
SendKey::SendKey(Display *dpy, bool lock) :
  shift_keys_string("!\"#$%&'()_+~|`{=*}<>?ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
  modifiers(0)
{
  if (dpy == NULL) {
    dpy = XOpenDisplay(NULL);
  }
  display = dpy;
  lock_modifiers = lock;
  for (std::size_t i=0; i<=shift_keys_string.length()-1; ++i) {
    std::stringstream converter;
    converter << shift_keys_string[i];
    shift_keys.push_back(converter.str());
  }
  shift_keys.push_back("exclam");       // '!'
  shift_keys.push_back("quotedbl");     // '"'
  shift_keys.push_back("numbersign");   // '#'
  shift_keys.push_back("dollar");       // '$'
  shift_keys.push_back("percent");      // '%'
  shift_keys.push_back("ampersand");    // '&'
  shift_keys.push_back("apostrophe");   // '''
  shift_keys.push_back("quoteright");   // '''
  shift_keys.push_back("grave");        // '`'
  shift_keys.push_back("quoteleft");    // '`'
  shift_keys.push_back("parenleft");    // '('
  shift_keys.push_back("parenright");   // ')'
  shift_keys.push_back("underscore");   // '_'
  shift_keys.push_back("plus");         // '+'
  shift_keys.push_back("asciitilde");   // '~'
  shift_keys.push_back("bar");          // '|'
  shift_keys.push_back("bracketleft");  // '{'
  shift_keys.push_back("bracketright"); // '}'
  shift_keys.push_back("equal");        // '='
  shift_keys.push_back("asterisk");     // '*'
  shift_keys.push_back("less");         // '>'
  shift_keys.push_back("greater");      // '<'
  shift_keys.push_back("question");     // '?'
}

* Tue 28 Jan 2014 08:59:10 AM JST

* Tue 28 Jan 2014 08:59:10 AM JST

* Tue 28 Jan 2014 08:59:10 AM JST
SendKey::~SendKey() {}

* Tue 28 Jan 2014 09:01:46 AM JST
if (dpy == NULL) {
    dpy = XOpenDisplay(NULL);
* Tue 28 Jan 2014 09:02:30 AM JST
  event.display     = display;
  event.window      = win;
  event.root        = winRoot;
  event.subwindow   = None;
  event.time        = CurrentTime;
  event.x           = 1;
  event.y           = 1;
  event.x_root      = 1;
  event.y_root      = 1;
  event.same_screen = True;
  event.keycode     = keycode;
  event.state       = modifiers;
  event.type        = press ? KeyPress : KeyRelease;

* Tue 28 Jan 2014 09:02:44 AM JST
displ
* Tue 28 Jan 2014 09:03:06 AM JST
Window win;
* Tue 28 Jan 2014 09:03:18 AM JST
int revert;
* Tue 28 Jan 2014 09:03:27 AM JST
XGetInputFocus(display, &win, &revert);
* Tue 28 Jan 2014 09:03:32 AM JST
display
* Tue 28 Jan 2014 09:03:50 AM JST
Window winRoot = XDefaultRootWindow(display);
* Tue 28 Jan 2014 09:04:00 AM JST
display
* Tue 28 Jan 2014 09:04:16 AM JST
keycode
* Tue 28 Jan 2014 09:04:45 AM JST
press ? 
* Tue 28 Jan 2014 09:09:30 AM JST
LockDisplay(display);
* Tue 28 Jan 2014 09:09:58 AM JST
XSendEvent(event.display, event.window, True,
             KeyPressMask|KeyReleaseMask, (XEvent *)&event);
* Tue 28 Jan 2014 09:10:20 AM JST
UnlockDisplay(display);
* Tue 28 Jan 2014 09:10:24 AM JST
XFlush(display);
* Tue 28 Jan 2014 09:10:31 AM JST
event.display
* Tue 28 Jan 2014 09:12:14 AM JST
Window &win, Window &winRoot, bool press,
                           KeyCode keycode
* Tue 28 Jan 2014 09:12:33 AM JST
                   
* Tue 28 Jan 2014 09:15:44 AM JST
event.keycode     = 0;
* Tue 28 Jan 2014 09:20:29 AM JST
int HandleKeyEvent::sendKeyEvent(Window &win, Window &winRoot,
                                   bool press, KeyCode keycode)
{
  event.window  = win;
  event.root    = winRoot;
  event.type    = press ? KeyPress : KeyRelease;
  event.keycode = keycode;
  return operator()();
}

* Tue 28 Jan 2014 09:20:39 AM JST
                                 
* Tue 28 Jan 2014 09:21:16 AM JST
bool press
* Tue 28 Jan 2014 09:21:20 AM JST
KeyCode keycode
* Tue 28 Jan 2014 09:21:30 AM JST
KeyCode keycode, bool press
* Tue 28 Jan 2014 09:22:25 AM JST
bool press, 
* Tue 28 Jan 2014 09:23:18 AM JST
bool press, 
* Tue 28 Jan 2014 09:23:25 AM JST
                                 
* Tue 28 Jan 2014 09:23:36 AM JST

* Tue 28 Jan 2014 09:23:36 AM JST

* Tue 28 Jan 2014 09:23:36 AM JST
  event.window  = win;

* Tue 28 Jan 2014 09:23:36 AM JST
  event.window  = win;

* Tue 28 Jan 2014 09:23:36 AM JST
  event.window  = win;
  event.root    = winRoot;

* Tue 28 Jan 2014 09:24:15 AM JST
sendKeyEvent(KeyCode keycode, bool press)
* Tue 28 Jan 2014 09:25:01 AM JST
int HandleKeyEvent::sendKeyEvent(KeyCode keycode, bool press)
{
  event.keycode = keycode;
  event.type    = press ? KeyPress : KeyRelease;
  return operator()();
}

* Tue 28 Jan 2014 09:25:24 AM JST
event.window  = win;
* Tue 28 Jan 2014 09:26:27 AM JST
~HandleKeyEvent
* Tue 28 Jan 2014 09:31:45 AM JST
HandleKeyEvent
* Tue 28 Jan 2014 09:34:40 AM JST
sendKeyEvent
* Tue 28 Jan 2014 09:35:16 AM JST
PressKey,
* Tue 28 Jan 2014 09:38:08 AM JST
winRoot, 
* Tue 28 Jan 2014 09:38:08 AM JST
win, winRoot, 
* Tue 28 Jan 2014 09:46:36 AM JST
sendKeyEvent
* Tue 28 Jan 2014 09:47:04 AM JST
ReleaseKey
* Tue 28 Jan 2014 09:48:09 AM JST
sendKeyEvent.send
* Tue 28 Jan 2014 09:48:30 AM JST
PressKey,
* Tue 28 Jan 2014 09:48:38 AM JST
ReleaseKey
* Tue 28 Jan 2014 09:49:57 AM JST
sendKeyEvent.send
* Tue 28 Jan 2014 09:50:06 AM JST
PressKey
* Tue 28 Jan 2014 09:50:13 AM JST
ReleaseKey
* Tue 28 Jan 2014 09:52:04 AM JST

* Tue 28 Jan 2014 09:52:04 AM JST

* Tue 28 Jan 2014 09:52:04 AM JST
 *

* Tue 28 Jan 2014 09:52:26 AM JST
SendKeys
* Tue 28 Jan 2014 09:52:41 AM JST
/*
 * SendKeys
 */

* Tue 28 Jan 2014 09:55:55 AM JST
KeyCode SendKey::GetKeycode(char *key)
{
  return XKeysymToKeycode(display, XStringToKeysym(key));
}

KeyCode SendKey::GetKeycode(KeySym keysym)
{
  return XKeysymToKeycode(display, keysym);
}

KeyCode SendKey::GetKeycode(std::string keystring)
{
  return XKeysymToKeycode(display, XStringToKeysym(keystring.c_str()));
}


* Tue 28 Jan 2014 09:58:12 AM JST
template
* Tue 28 Jan 2014 10:07:10 AM JST
int modifiers
* Tue 28 Jan 2014 10:08:44 AM JST
event.state       = 0;
* Tue 28 Jan 2014 10:09:01 AM JST
event.state   = modifiers;
* Tue 28 Jan 2014 10:09:40 AM JST
modifiers,
* Tue 28 Jan 2014 10:09:48 AM JST
modifiers, 
* Tue 28 Jan 2014 10:11:29 AM JST

* Tue 28 Jan 2014 10:11:29 AM JST

* Tue 28 Jan 2014 10:11:30 AM JST
  // int SendKeyEvent(Window &win, Window &winRoot, bool press, KeyCode keycode);

* Tue 28 Jan 2014 10:11:32 AM JST

* Tue 28 Jan 2014 10:11:32 AM JST

* Tue 28 Jan 2014 10:11:32 AM JST
  // XKeyEvent createKeyEvent(Window &win, Window &winRoot, bool press, int keycode);

* Tue 28 Jan 2014 10:17:39 AM JST
KeyCode keycode
* Tue 28 Jan 2014 10:17:56 AM JST
int operator()(T_key key, int modif);
* Tue 28 Jan 2014 10:19:01 AM JST
keycode
* Tue 28 Jan 2014 10:19:47 AM JST
KeyCode 
* Tue 28 Jan 2014 10:20:49 AM JST
  Window win;
  int revert;

* Tue 28 Jan 2014 10:22:01 AM JST
sendKeyEvent
* Tue 28 Jan 2014 10:22:29 AM JST
PressKey
* Tue 28 Jan 2014 10:23:21 AM JST
sendKeyEvent.event.type = PressKey;
* Tue 28 Jan 2014 10:23:24 AM JST
PressKey
* Tue 28 Jan 2014 10:23:34 AM JST
sendKeyEvent();
* Tue 28 Jan 2014 10:24:00 AM JST
int SendKey::operator()()
{
  sendKeyEvent.event.type = PressKey;
  sendKeyEvent();
  sendKeyEvent.event.type = ReleaseKey;
  sendKeyEvent();
  return 1;
}


* Tue 28 Jan 2014 10:27:35 AM JST

* Tue 28 Jan 2014 10:27:35 AM JST

* Tue 28 Jan 2014 10:27:35 AM JST
  Window win;

* Tue 28 Jan 2014 10:27:36 AM JST
  Window win;

* Tue 28 Jan 2014 10:27:36 AM JST
  Window win;
  int revert;

* Tue 28 Jan 2014 10:27:39 AM JST
  Window win;
  int revert;

* Tue 28 Jan 2014 10:27:40 AM JST
  Window win;
  int revert;
  KeyCode keycode;

* Tue 28 Jan 2014 10:31:31 AM JST
shift
* Tue 28 Jan 2014 10:31:32 AM JST
shift_uped_keys
* Tue 28 Jan 2014 05:51:21 PM JST
iostream
* Tue 28 Jan 2014 05:59:02 PM JST
string 
* Tue 28 Jan 2014 06:11:54 PM JST
calc
* Tue 28 Jan 2014 06:15:24 PM JST
int
* Tue 28 Jan 2014 06:17:08 PM JST
str
* Tue 28 Jan 2014 06:21:25 PM JST
std::stringstream converter;
* Tue 28 Jan 2014 06:23:44 PM JST
 : std::string(s)
* Tue 28 Jan 2014 06:32:54 PM JST
std::stringstream converter;
* Tue 28 Jan 2014 06:32:58 PM JST
converter << this->at(pos);
* Tue 28 Jan 2014 06:40:16 PM JST
return converter.str();
* Tue 28 Jan 2014 06:41:59 PM JST
#include <typeinfo>
* Tue 28 Jan 2014 06:42:15 PM JST
typeid(a).name()
* Tue 28 Jan 2014 06:42:28 PM JST
testRun[0]
* Tue 28 Jan 2014 06:49:27 PM JST
typeid(T) == typeid(double)
* Tue 28 Jan 2014 06:49:47 PM JST
testRun[0]
* Tue 28 Jan 2014 06:49:52 PM JST
double
* Tue 28 Jan 2014 06:50:15 PM JST
string
* Tue 28 Jan 2014 06:50:16 PM JST
std::string
* Tue 28 Jan 2014 06:52:59 PM JST
int
* Tue 28 Jan 2014 10:31:35 PM JST
std::string::at
* Tue 28 Jan 2014 10:33:00 PM JST

* Tue 28 Jan 2014 10:33:00 PM JST

* Tue 28 Jan 2014 10:33:00 PM JST
#include <iostream>

* Tue 28 Jan 2014 10:33:00 PM JST
#include <iostream>

* Tue 28 Jan 2014 10:33:00 PM JST
#include <iostream>
#include <typeinfo>

* Tue 28 Jan 2014 10:33:05 PM JST

* Tue 28 Jan 2014 10:33:05 PM JST

* Tue 28 Jan 2014 10:33:05 PM JST
#include <cstdlib>

* Tue 28 Jan 2014 10:36:02 PM JST
#include <string>
#include <sstream>

class stringRet : public std::string
{
public:
  stringRet(std::string s) : std::string(s) {};
  virtual ~stringRet();
  virtual std::string at(size_t pos);
  virtual std::string operator[](size_t pos);
  
};

* Tue 28 Jan 2014 10:39:15 PM JST
shift_uped_keys[i]
* Tue 28 Jan 2014 10:39:26 PM JST

* Tue 28 Jan 2014 10:47:48 PM JST
TOKEN
* Tue 28 Jan 2014 10:47:56 PM JST
PARSR
* Tue 28 Jan 2014 10:48:40 PM JST
ParseString
* Tue 28 Jan 2014 10:49:38 PM JST
ParseLine
* Tue 28 Jan 2014 10:50:08 PM JST

* Tue 28 Jan 2014 10:50:08 PM JST

* Tue 28 Jan 2014 10:50:08 PM JST
#include <iostream>

* Tue 28 Jan 2014 10:52:06 PM JST
 parse
* Tue 28 Jan 2014 10:53:16 PM JST
token
* Tue 28 Jan 2014 10:57:55 PM JST
KeyCode
* Tue 28 Jan 2014 10:59:48 PM JST
std::
* Wed 29 Jan 2014 12:19:06 AM JST
So
* Wed 29 Jan 2014 12:19:06 AM JST
215/So
* Wed 29 Jan 2014 12:19:06 AM JST
0.215/So
* Wed 29 Jan 2014 12:19:07 AM JST
AutoHotkey-0.215/So
* Wed 29 Jan 2014 12:35:22 AM JST
x11proto-core-dev
* Wed 29 Jan 2014 12:43:19 AM JST
        static char *window_id_format = "0x%lx";
        int main(void)
        {
        unsigned int numkids, i,mapped,scrn;
        Window r, p, *kids;
        XWindowAttributes attr;
        Window root;
        Display *dipsy;
        char *win_name;
        dipsy = XOpenDisplay(0);
        scrn = DefaultScreen(dipsy);
        root = RootWindow(dipsy, scrn);
       
        mapped = 0;
        XQueryTree(dipsy, root, &r, &p, &kids, &numkids);
       
        for (i = 0; i < numkids; ++i)
        {
        XGetWindowAttributes(dipsy, kids[i], &attr);
        if (attr.map_state == IsViewable) {
        ++mapped;
        printf(window_id_format, kids[i]);
        int i = XFetchName(dipsy, kids[i], &win_name
        printf("%s",win_name);
        } }
* Wed 29 Jan 2014 12:47:10 AM JST
get 
* Wed 29 Jan 2014 12:50:26 AM JST
#include <X11/Xlib.h>
#include <stdio.h>

int main(int argc, char *argv[]) {
  Display *display;
  Window focus;
  char *window_name;
  int revert;

  display = XOpenDisplay(NULL);
  XGetInputFocus(display, &focus, &revert);
  XFetchName(display, focus, &window_name);

  printf("%s\n", window_name);

  return 0;
}

* Wed 29 Jan 2014 12:50:48 AM JST
window_name
* Wed 29 Jan 2014 12:53:20 AM JST
xdotool getwindowfocus
* Wed 29 Jan 2014 12:54:17 AM JST
60817430
* Wed 29 Jan 2014 01:00:34 AM JST
XGetWindowProperty
* Wed 29 Jan 2014 01:12:21 AM JST
53451040
* Wed 29 Jan 2014 02:29:44 AM JST
54536841
* Wed 29 Jan 2014 04:37:12 AM JST
XA_WM_NAME
* Wed 29 Jan 2014 05:03:16 AM JST
~/work/xlibcpp/x11-utils-7.7~1/xprop/
* Wed 29 Jan 2014 06:18:13 AM JST
Searchx
* Wed 29 Jan 2014 06:22:41 AM JST
git clone git://anongit.freedesktop.org/xorg/app/twm
* Wed 29 Jan 2014 06:47:18 AM JST

* Wed 29 Jan 2014 06:47:18 AM JST

* Wed 29 Jan 2014 06:47:18 AM JST
  static SingleDisplay &getInstance();

* Wed 29 Jan 2014 06:47:20 AM JST

* Wed 29 Jan 2014 06:47:20 AM JST

* Wed 29 Jan 2014 06:47:20 AM JST
  SingleDisplay();

* Wed 29 Jan 2014 06:50:29 AM JST
Display *dpy=NULL
* Wed 29 Jan 2014 06:50:42 AM JST
  if (dpy == NULL) {
    dpy = XOpenDisplay(NULL);
  }

* Wed 29 Jan 2014 06:52:20 AM JST
Display *dpy=NULL
* Wed 29 Jan 2014 06:53:11 AM JST
XCloseDisplay(display);
* Wed 29 Jan 2014 06:55:15 AM JST
exit(EXIT_FAILURE);
* Wed 29 Jan 2014 06:56:05 AM JST
display = dpy;
* Wed 29 Jan 2014 06:56:31 AM JST
if
* Wed 29 Jan 2014 06:58:47 AM JST
         struct MyException : public std::exception                            
         {                                                                     
            std::string s;                                                     
            MyException(std::string ss) : s(ss) {}                             
            ~MyException() throw () {} // Updated                              
            const char* what() const throw() { return s.c_str(); }             
         };                                                                    

* Wed 29 Jan 2014 06:58:57 AM JST
M
* Wed 29 Jan 2014 06:59:23 AM JST
DisplayError
* Wed 29 Jan 2014 07:00:20 AM JST
Couldn't open display.
* Wed 29 Jan 2014 07:00:31 AM JST

* Wed 29 Jan 2014 07:00:31 AM JST

* Wed 29 Jan 2014 07:00:31 AM JST
    // display = dpy;

* Wed 29 Jan 2014 07:00:39 AM JST

* Wed 29 Jan 2014 07:00:39 AM JST

* Wed 29 Jan 2014 07:00:39 AM JST
    display = dpy;

* Wed 29 Jan 2014 07:00:41 AM JST

* Wed 29 Jan 2014 07:00:41 AM JST

* Wed 29 Jan 2014 07:00:42 AM JST
    throw DisplayError("Couldn't open display.");

* Wed 29 Jan 2014 07:12:26 AM JST
Singleton &singleton = Singleton::getInstance();
* Wed 29 Jan 2014 07:13:06 AM JST
  
* Wed 29 Jan 2014 07:13:34 AM JST

* Wed 29 Jan 2014 07:13:34 AM JST

* Wed 29 Jan 2014 07:13:34 AM JST
  Display *disp1 = XOpenDisplay(NULL);

* Wed 29 Jan 2014 07:13:34 AM JST
  Display *disp1 = XOpenDisplay(NULL);

* Wed 29 Jan 2014 07:13:34 AM JST
  Display *disp1 = XOpenDisplay(NULL);
  Display *disp2 = XOpenDisplay(NULL);

* Wed 29 Jan 2014 07:14:23 AM JST
SingleDisplay::getInstance()
* Wed 29 Jan 2014 07:16:35 AM JST
Single
* Wed 29 Jan 2014 07:16:44 AM JST
get
* Wed 29 Jan 2014 07:17:26 AM JST
SingleDisplay::getInstance().display
* Wed 29 Jan 2014 07:21:14 AM JST

* Wed 29 Jan 2014 07:21:14 AM JST

* Wed 29 Jan 2014 07:21:14 AM JST
  static Display *operator()();

* Wed 29 Jan 2014 07:27:06 AM JST
struct DisplayError : public std::exception                            
{                                                                     
  std::string s;                                                     
  DisplayError(std::string ss) : s(ss) {}                             
  ~DisplayError() throw () {} // Updated                              
  const char* what() const throw() { return s.c_str(); }             
};                                                                    

class SingleDisplay
{
private:
  SingleDisplay(Display *dpy=NULL);
  SingleDisplay(const SingleDisplay &other){};
  SingleDisplay &operator=(const SingleDisplay &other){};
  
public:
  static SingleDisplay &getInstance();
  static Display *getDisplay();
  virtual ~SingleDisplay();
  Display *display;
};

* Wed 29 Jan 2014 07:27:13 AM JST
#include <string>
#include <X11/Xlib.h>


* Wed 29 Jan 2014 07:27:50 AM JST
SingleDisplay::SingleDisplay(Display *dpy)
{
  if (dpy == NULL) {
    dpy = XOpenDisplay(NULL);
  }
  if (dpy) {
    display = dpy;
  } else {
    throw DisplayError("Couldn't open display.");
  }
}

SingleDisplay::~SingleDisplay()
{
  XCloseDisplay(display);
}

SingleDisplay &SingleDisplay::getInstance()
{
  static SingleDisplay instance;
  return instance;
}

Display *SingleDisplay::getDisplay()
{
  return getInstance().display;
}


// int main(int argc, char **argv)
// {
//   SingleDisplay &dis1 = SingleDisplay::getInstance();
//   SingleDisplay &dis2 = SingleDisplay::getInstance();
//   Display *dis3 = SingleDisplay::getInstance().display;
//   Display *dis4 = SingleDisplay::getDisplay();
  
//   if (dis1.display == dis2.display) {
//     if (dis2.display == dis3) {
//       std::cout << "DEBUG-1-global.cc" << std::endl;
//     } 
//   } else {
//     std::cout << "DEBUG-2-global.cc" << std::endl;
//   }
  
//   if (dis3 == dis4) {
//     std::cout << "DEBUG-3-global.cc" << std::endl;
//   }
  
//   return EXIT_SUCCESS;
// }

* Wed 29 Jan 2014 07:29:24 AM JST
SingleDisplay
* Wed 29 Jan 2014 07:40:38 AM JST
class SingleDisplay
{
private:
  SingleDisplay(Display *dpy=NULL);
  SingleDisplay(const SingleDisplay &other){};
  SingleDisplay &operator=(const SingleDisplay &other){};
  
public:
  static SingleDisplay &getInstance();
  static Display *getDisplay();
  virtual ~SingleDisplay();
  Display *display;
};

* Wed 29 Jan 2014 07:40:57 AM JST
template <class U>
* Wed 29 Jan 2014 07:42:52 AM JST
Singleton
* Wed 29 Jan 2014 07:43:23 AM JST
virtual 
* Wed 29 Jan 2014 07:43:48 AM JST

* Wed 29 Jan 2014 07:43:48 AM JST

* Wed 29 Jan 2014 07:43:48 AM JST
  static Display *getDisplay();

* Wed 29 Jan 2014 07:44:00 AM JST
Singleton
* Wed 29 Jan 2014 07:44:04 AM JST

* Wed 29 Jan 2014 07:44:04 AM JST

* Wed 29 Jan 2014 07:44:04 AM JST
  Display *display;

* Wed 29 Jan 2014 07:45:51 AM JST
template <class T>
class Singleton
{
private:
  Singleton(){};
  Singleton(const T &other){};
  Singleton &operator=(const T &other){};
  
public:
  static T &getInstance()
  {
    static T instance;
    return &instance;
  }
  virtual ~Singleton(){};
};

* Wed 29 Jan 2014 07:46:43 AM JST
SingleDisplay
* Wed 29 Jan 2014 07:47:21 AM JST

* Wed 29 Jan 2014 07:47:21 AM JST

* Wed 29 Jan 2014 07:47:21 AM JST
  static SingleDisplay &getInstance();

* Wed 29 Jan 2014 07:48:10 AM JST

* Wed 29 Jan 2014 07:48:10 AM JST

* Wed 29 Jan 2014 07:48:10 AM JST
  // SingleDisplay(const SingleDisplay &other){};

* Wed 29 Jan 2014 07:48:10 AM JST
  // SingleDisplay(const SingleDisplay &other){};

* Wed 29 Jan 2014 07:48:10 AM JST
  // SingleDisplay(const SingleDisplay &other){};
  // SingleDisplay &operator=(const SingleDisplay &other){};

* Wed 29 Jan 2014 07:49:29 AM JST

* Wed 29 Jan 2014 07:49:29 AM JST

* Wed 29 Jan 2014 07:49:29 AM JST
  Singleton(){};

* Wed 29 Jan 2014 07:49:31 AM JST

* Wed 29 Jan 2014 07:49:31 AM JST

* Wed 29 Jan 2014 07:49:31 AM JST
  Singleton(){};

* Wed 29 Jan 2014 07:50:40 AM JST

* Wed 29 Jan 2014 07:50:40 AM JST

* Wed 29 Jan 2014 07:50:40 AM JST
  Singleton(){};

* Wed 29 Jan 2014 07:52:08 AM JST
publi
* Wed 29 Jan 2014 07:52:08 AM JST
dpy) : publi
* Wed 29 Jan 2014 07:53:19 AM JST
  if (dpy == NULL) {
    dpy = XOpenDisplay(NULL);
  }
  if (dpy) {
    display = dpy;
  } else {
    throw DisplayError("Couldn't open display.");
  }
* Wed 29 Jan 2014 07:55:26 AM JST
private
* Wed 29 Jan 2014 07:57:33 AM JST

* Wed 29 Jan 2014 07:57:33 AM JST

* Wed 29 Jan 2014 07:57:33 AM JST
  SingleDisplay(Display *dpy=NULL);

* Wed 29 Jan 2014 07:57:37 AM JST

* Wed 29 Jan 2014 07:57:37 AM JST

* Wed 29 Jan 2014 07:57:38 AM JST
private:

* Wed 29 Jan 2014 07:58:35 AM JST
  if (dpy == NULL) {
    dpy = XOpenDisplay(NULL);
  }
  if (dpy) {
    display = dpy;
  } else {
    throw DisplayError("Couldn't open display.");
  }

* Wed 29 Jan 2014 08:51:22 AM JST
template
* Thu 30 Jan 2014 12:14:44 AM JST
http://download.xnview.com/XnViewMP-linux.deb
* Thu 30 Jan 2014 12:27:29 AM JST
sh.dpkg('-i', path,  _iter=True)
* Thu 30 Jan 2014 12:29:10 AM JST
line
* Thu 30 Jan 2014 12:29:12 AM JST

* Thu 30 Jan 2014 12:29:12 AM JST

* Thu 30 Jan 2014 12:29:12 AM JST
        print()

* Thu 30 Jan 2014 12:33:23 AM JST
import 
* Thu 30 Jan 2014 12:33:48 AM JST
raise
* Thu 30 Jan 2014 12:34:13 AM JST
import 
* Thu 30 Jan 2014 12:35:44 AM JST

* Thu 30 Jan 2014 12:35:45 AM JST

* Thu 30 Jan 2014 12:35:45 AM JST
        sys.stdout.write(line)

* Thu 30 Jan 2014 05:08:10 AM JST
XGetWMName
* Thu 30 Jan 2014 05:10:03 AM JST
         Display *display = NULL;                                                
                                                                                 
         while(true)                                                             
         {                                                                       
             Window window = None;                                               
             XTextProperty wmName;                                               
             if(display == NULL)                                                 
                 display = XOpenDisplay(NULL);                                   
                                                                                 
         int revert = 0;                                                         
         if(XGetInputFocus(display, &window, &revert))                           
         {                                                                       
             int status = XGetWMName(display, window, &wmName);                  
             if (status && wmName.value && wmName.nitems)                        
up vote      {                                                                   
0 down           int i;                                                          
vote             char **list;                                                    
favorite         status = XmbTextPropertyToTextList(display, &wmName, &list, &i);
                 if (status >= Success && i && *list)                            
                 {                                                               
                     cout << "Found window with name:" << (char*) *list << endl; 
                 }                                                               
             }                                                                   

         }                                                                       
         if(window == None)                                                      
             cout << "active window is none.";                                   

* Thu 30 Jan 2014 05:10:29 AM JST
Display *display = NULL;                                                
                                                                                 
while(true)                                                             
  {                                                                       
    Window window = None;                                               
    XTextProperty wmName;                                               
    if(display == NULL)                                                 
      display = XOpenDisplay(NULL);                                   
                                                                                 
    int revert = 0;                                                         
    if(XGetInputFocus(display, &window, &revert))                           
      {                                                                       
        int status = XGetWMName(display, window, &wmName);                  
        if (status && wmName.value && wmName.nitems)                        
          up vote      {                                                                   
            0 down           int i;                                                          
            vote             char **list;                                                    
            favorite         status = XmbTextPropertyToTextList(display, &wmName, &list, &i);
            if (status >= Success && i && *list)                            
              {                                                               
                cout << "Found window with name:" << (char*) *list << endl; 
              }                                                               
          }                                                                   

      }                                                                       
    if(window == None)                                                      
      cout << "active window is none.";                                   



* Thu 30 Jan 2014 05:14:22 AM JST
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xatom.h>
static char *window_id_format = "0x%lx";
int main(void)
{
 unsigned int numkids, i, mapped, scrn;
 Window r, p, *kids;
 XWindowAttributes attr;
 Window root;
 Display *dispsy;
 char *win_name;
 XTextProperty text_prop;
 dispsy = XOpenDisplay(0);

 scrn = DefaultScreen(dispsy);
 root = RootWindow(dispsy, scrn);

 mapped = 0;
 XQueryTree(dispsy, root, &r, &p, &kids, &numkids);
 for(i = 0; i < numkids; ++i)
 {
  XGetWindowAttributes(dispsy, kids[i], &attr);
  if(attr.map_state == IsViewable)
  {
   ++mapped;
   printf(window_id_format, kids[i]);
   status = XGetWMName(dispsy, kids[i], &text_prop);
   if(!status || !text_prop.value || !text_prop.nitems)
   {
    printf("GetWMName error\n");
 //   return -1;
   }
   if(!XFetchName(dispsy, kids[i], &win_name))
   {
    printf("(has no name)\n");
    printf(" \n");
   }
   else if(win_name)
   {
    printf("win_name =  %s \n", win_name);
    XFree(win_name);
   }
  }
 }
}

* Thu 30 Jan 2014 05:17:03 AM JST
'0x%lx'
* Thu 30 Jan 2014 05:17:47 AM JST
Status
* Thu 30 Jan 2014 06:31:54 AM JST
include <>
* Thu 30 Jan 2014 06:32:09 AM JST

* Thu 30 Jan 2014 06:32:19 AM JST

* Thu 30 Jan 2014 06:32:57 AM JST
// 
* Thu 30 Jan 2014 06:38:38 AM JST
Display
* Thu 30 Jan 2014 06:39:02 AM JST
Display
* Thu 30 Jan 2014 06:39:05 AM JST
dpy
* Thu 30 Jan 2014 06:40:05 AM JST
throw DisplayError("Couldn't open display.");
* Thu 30 Jan 2014 07:00:47 AM JST
// #include <iostream>
// #include <cstdlib>

// int main(int argc, char **argv)
// {
//   SingleDisplay &dis1 = SingleDisplay::getInstance();
//   SingleDisplay &dis2 = SingleDisplay::getInstance();
//   Display *dis3 = SingleDisplay::getInstance().display;
//   Display *dis4 = SingleDisplay::getDisplay();
  
//   if (dis1.display == dis2.display) {
//     if (dis2.display == dis3) {
//       std::cout << "OK" << std::endl;
//     } 
//   } else {
//     std::cout << "FAILED" << std::endl;
//   }
  
//   if (dis3 == dis4) {
//     std::cout << "OK" << std::endl;
//   }
//   std::cout << DefaultScreen(dis4) << std::endl;
  
  
//   return EXIT_SUCCESS;
// }

* Thu 30 Jan 2014 07:21:12 AM JST
DisplayWidth
* Thu 30 Jan 2014 07:23:16 AM JST
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xatom.h>

* Thu 30 Jan 2014 07:23:36 AM JST
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xos.h>
#include <X11/Xatom.h>

* Thu 30 Jan 2014 07:23:46 AM JST

* Thu 30 Jan 2014 07:23:46 AM JST

* Thu 30 Jan 2014 07:23:46 AM JST
#include <X11/Xlib.h>

* Thu 30 Jan 2014 07:24:41 AM JST
#include <X11/Xutil.h>
#include <X11/Xos.h>
#include <X11/Xatom.h>

#include <cstdlib>
#include <iostream>

int main(int argc, char **argv)
{
  Display *display = XOpenDisplay(NULL);
  int screen_num;
  // unsigned int display_width, display_height;

  screen_num = DefaultScreen(display);
  std::cout << DisplayWidth(display) << std::endl;
  
  
  
  XCloseDisplay(display);
  return EXIT_SUCCESS;
}

* Thu 30 Jan 2014 07:25:49 AM JST
  
* Thu 30 Jan 2014 07:27:28 AM JST

* Thu 30 Jan 2014 07:27:28 AM JST

* Thu 30 Jan 2014 07:27:28 AM JST
  std::cout << "DEBUG-1-getgeometory.cc" << std::endl;

* Thu 30 Jan 2014 07:30:18 AM JST
ERROR
* Thu 30 Jan 2014 07:30:31 AM JST
EXIT_
* Thu 30 Jan 2014 07:30:57 AM JST
"display width:  "
* Thu 30 Jan 2014 07:31:09 AM JST
  
* Thu 30 Jan 2014 07:31:10 AM JST
width
* Thu 30 Jan 2014 07:31:31 AM JST
width
* Thu 30 Jan 2014 07:31:41 AM JST
  
* Thu 30 Jan 2014 07:31:50 AM JST
  
* Thu 30 Jan 2014 07:31:52 AM JST
height
* Thu 30 Jan 2014 07:31:57 AM JST
height
* Thu 30 Jan 2014 07:32:13 AM JST
  
* Thu 30 Jan 2014 07:32:18 AM JST
width
* Thu 30 Jan 2014 07:32:24 AM JST
width
* Thu 30 Jan 2014 07:32:28 AM JST
  
* Thu 30 Jan 2014 07:38:59 AM JST
  std::cout << "XGetGeometry" << std::endl;
  std::cout << "display x:  " << x << std::endl;
  std::cout << "display y:  " << y << std::endl;
  std::cout << "display height:  " << height << std::endl;
  std::cout << "display width:  " << width << std::endl;
  std::cout << "display border_width:  " << border_width << std::endl;
  std::cout << "display depth:  " << border_width << std::endl;

* Thu 30 Jan 2014 07:39:05 AM JST

* Thu 30 Jan 2014 07:39:05 AM JST

* Thu 30 Jan 2014 07:39:05 AM JST
  std::cout << "XGetGeometry" << std::endl;

* Thu 30 Jan 2014 07:39:20 AM JST
windowattr
* Thu 30 Jan 2014 09:02:48 PM JST
from Xlib.display import Display
* Thu 30 Jan 2014 09:03:19 PM JST
display=':0.0'
* Fri 31 Jan 2014 06:26:00 PM JST
XGetWMProperties