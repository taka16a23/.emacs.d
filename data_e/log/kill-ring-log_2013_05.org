
* Thu 02 May 2013 04:46:11 AM JST
hcmcertext.lawson.com:443
173.193.200.199-static.reverse.softlayer.com:3128
server.komatsus.com:8080
211.195.207.62:8080
www8331ui.sakura.ne.jp:3128
173.193.200.199-static.reverse.softlayer.com:8089
69.197.132.68:3128
115.25.216.6:80
192.110.163.22:8089
116.228.55.217:80
114.80.101.151:8000
202.107.226.175:80
173.193.200.199-static.reverse.softlayer.com:7808
74.221.211.12:3128
9005.hostingsharedbox.com:7808
204.12.235.10:7808
209.90.238.251:3128
218.108.242.124:8080
178.18.17.250:8089
178.18.17.211:3128
www8351ui.sakura.ne.jp:3128
67.215.228.129:3128
67.215.228.129:7808
86.96.229.68:80
86.96.229.123:8888
host-93-190-1-197.tmvm.hu:80
86.96.229.123:8088
115.182.10.144:80
218.188.13.237:8888
123.125.21.123:3129
ec2-54-248-89-183.ap-northeast-1.compute.amazonaws.com:3128
extranet.digicelgroup.com:8080
123.125.21.123:80
186.92.65.156:8080
219.232.47.153:80
202.98.223.74:80
ec2-54-245-171-43.us-west-2.compute.amazonaws.com:8080
dhcp-135-93.hongo.wide.ad.jp:80
117.239.105.146:9090
201.85.50.249:80
202.146.237.70:8013
125.64.18.18:80
122.154.97.126:8080
* Thu 02 May 2013 06:04:41 AM JST
211.195.207.62:8080
115.25.216.6:80
74.221.211.12:3128
204.12.235.10:7808
110.77.236.161:8080
178.18.17.211:3128
115.85.65.172:8080
hcmcertext.lawson.com:443
173.193.200.199-static.reverse.softlayer.com:3128
server.komatsus.com:8080
173.193.200.199-static.reverse.softlayer.com:8089
69.197.132.68:3128
ec2-54-248-227-9.ap-northeast-1.compute.amazonaws.com:80
218.203.105.26:80
192.110.163.22:8089
116.228.55.217:80
202.107.226.175:80
173.193.200.199-static.reverse.softlayer.com:7808
9005.hostingsharedbox.com:7808
202.173.214.158:8080
180.250.208.12:8080
180.250.208.10:80
80.80.173.86:8080
178.18.17.250:8089
www8351ui.sakura.ne.jp:3128
67.215.228.129:3128
110.77.197.189:8080
67.215.228.129:7808
203.217.170.188:8080
ip253c171.banglalionwimax.com:8080
* Thu 02 May 2013 07:49:09 AM JST
ocs.lawson.com:80
www8351ui.sakura.ne.jp:3128
115.25.216.6:80
218.188.13.237:8888
219.117.232.133.static.zoot.jp:3128
acv.co.jp:3128
www8331ui.sakura.ne.jp:3128
ec2-184-169-138-163.us-west-1.compute.amazonaws.com:3128
199.231.93.180:3128
211.24.233.29:8080
74.221.211.12:3128
218.94.1.166:82
static-71-188-63-88.cmdnnj.fios.verizon.net:3128
69.197.132.68:3128
extranet.digicelgroup.com:8080
hcmcertext.lawson.com:443
173.193.200.199-static.reverse.softlayer.com:3128
211.195.207.62:8080
125.216.144.199:8080
stm.kacst.edu.sa:8080
122.154.97.126:8080
218.2.129.5:80
216-230-230-57-cloud-server.oplink.net:3128
204.12.235.10:3128
178.18.17.211:3128
202.107.226.175:80
115.182.10.144:80
118.140.81.50:3128
202.146.237.70:8013
recruitment.kacst.edu.sa:8080
* Fri 03 May 2013 02:30:39 AM JST
cryptsetup --cipher "aes-cbc-essiv:sha256" --key-size 256 --verify-passphrase luksFormat /dev/sda5
* Fri 03 May 2013 02:30:50 AM JST
cryptsetup --cipher "aes-cbc-essiv:sha256" --key-size 256 --verify-passphrase luksFormat
* Fri 03 May 2013 06:16:14 AM JST
9016a4ca-f21a-4591-bc24-447ec4989340
* Fri 03 May 2013 11:10:29 PM JST
136.0.16.108:7808
119.233.255.50:81
www30189ue.sakura.ne.jp:80
199.30.136.117:7808
208.68.37.137:7808
219.117.232.133.static.zoot.jp:3128
199.30.136.116:3128
202.171.253.108:80
115.25.216.6:80
199.30.136.116:7808
199.231.93.180:7808
199.231.93.102:8089
67.215.228.129:7808
199.231.93.102:7808
extranet.digicelgroup.com:8080
74.221.211.12:8089
li539-128.members.linode.com:3128
208.68.37.137:8089
119.233.255.50:80
199.231.93.181:8089
199.231.93.181:3128
199.231.93.180:8089
69.197.132.68:7808
74.221.211.12:3128
74.221.211.12:7808
218.249.86.131:553
77.94.48.4.satgate.net:80
91.230.54.60:8080
109-237-1-204.koenig.ru:8080
static-72-64-146-136.tampfl.fios.verizon.net:3128

* Tue 07 May 2013 03:17:49 AM JST
link
* Tue 07 May 2013 03:18:23 AM JST
symbolic
* Tue 07 May 2013 08:37:51 AM JST
svn: Repository UUID '88205c09-0ec9-4a6c-b82b-32d0de1704f6' doesn't match expected UUID 'eecdb16d-1cb2-40cf-89f2-a3b1c1f041a6'
* Tue 07 May 2013 09:05:40 AM JST
# check 
* Tue 07 May 2013 09:06:21 AM JST
directory
* Tue 07 May 2013 09:13:12 AM JST
class CmdError(Exception):
    pass

* Tue 07 May 2013 09:13:16 AM JST
    
* Tue 07 May 2013 09:13:26 AM JST
Standard
* Tue 07 May 2013 09:13:42 AM JST
Cmd
* Tue 07 May 2013 09:14:41 AM JST
/google_feeling_lucky
* Tue 07 May 2013 09:14:42 AM JST
~/.zsh/scripts//google_feeling_lucky
* Tue 07 May 2013 09:15:47 AM JST
            
* Tue 07 May 2013 09:16:57 AM JST
Command
* Tue 07 May 2013 09:18:19 AM JST
print(PRINTFORMAT % ('Wake On Lan', 'Sending Packet...'))
* Tue 07 May 2013 09:18:28 AM JST
Lan
* Tue 07 May 2013 09:18:28 AM JST
On Lan
* Tue 07 May 2013 09:18:28 AM JST
Wake On Lan
* Tue 07 May 2013 09:19:44 AM JST
'Halt OK!!'
* Tue 07 May 2013 09:19:58 AM JST

* Tue 07 May 2013 09:19:58 AM JST

* Tue 07 May 2013 09:19:58 AM JST
                    print()

* Tue 07 May 2013 09:20:23 AM JST
print(PRINTFORMAT % (self._ip, 'Halt OK!!'))
* Tue 07 May 2013 09:20:31 AM JST
'Already Downed.'
* Tue 07 May 2013 09:20:35 AM JST

* Tue 07 May 2013 09:20:35 AM JST

* Tue 07 May 2013 09:20:35 AM JST
                print('Already Downed.')

* Tue 07 May 2013 09:31:27 AM JST
rsync
* Tue 07 May 2013 09:39:15 AM JST
backup 
* Tue 07 May 2013 09:39:27 AM JST
Max
* Tue 07 May 2013 09:39:27 AM JST
check Max
* Tue 07 May 2013 09:40:27 AM JST

* Tue 07 May 2013 09:40:28 AM JST

* Tue 07 May 2013 09:40:28 AM JST
## tar latest directory

* Tue 07 May 2013 09:58:35 AM JST

* Tue 07 May 2013 09:58:35 AM JST

* Tue 07 May 2013 09:58:35 AM JST
# define full backup name as full_`date`

* Tue 07 May 2013 09:58:47 AM JST
# 
* Tue 07 May 2013 11:46:21 AM JST
# define log file name
# define log file path

# define backup dir

## check backup dir or decrypt disk
#
# check mounted cryptdisk and exists backup dir
    # cd backup dir
    # if not exists logging failed. backup with "not crypted disk or not exists directory." message


## lotate
#
# if incremental backup has larger than MAX
    # remove oldest incremental backup



    
## backup
#
# define full backup name as full
# define incremental backup name as `date`

# if not exist full directory
    # rsync full backup
    # logging Success full backup

# if exists full directory
    # if not exists "latest" symbolic link
        # set link-dest = full directory
    # elif
        # set link-dest = "latest" directory
    # rsync incremental backup
    # logging Success incremental backup & directory name




# if exists "latest" symbolic link
    # tar latest directory
    # remove "latest" symbolic link

# make symbolic link latest backup

* Tue 07 May 2013 12:19:34 PM JST

* Tue 07 May 2013 12:19:35 PM JST

* Tue 07 May 2013 12:19:35 PM JST
    # cd backup dir

* Tue 07 May 2013 12:47:24 PM JST

* Tue 07 May 2013 12:47:24 PM JST

* Tue 07 May 2013 12:47:24 PM JST
import ANSI

* Tue 07 May 2013 01:03:29 PM JST
DATE = 
* Tue 07 May 2013 01:04:01 PM JST
'%Y%m%d'
* Tue 07 May 2013 01:05:33 PM JST
# TODO: (Atami) [2013/05/07]
# check disk usage


* Tue 07 May 2013 01:08:26 PM JST
datetime.date.today()
* Tue 07 May 2013 01:08:44 PM JST
.strftime(_DATE_FORMAT)
* Tue 07 May 2013 01:08:47 PM JST
datetime.date.today().strftime(_DATE_FORMAT)
* Tue 07 May 2013 01:08:50 PM JST
_today = 
* Tue 07 May 2013 01:10:08 PM JST
full'
* Tue 07 May 2013 01:11:14 PM JST
DATE + FULL_EXT
* Tue 07 May 2013 01:13:35 PM JST
# define incremental backup name as `date`
INCR_BACK_NAME = DATE + INCR_EXT
DEST_DIR = os.path.join(BACKUP_DIR, INCR_BACK_NAME)

* Tue 07 May 2013 01:19:47 PM JST
import glob
* Tue 07 May 2013 01:25:37 PM JST
FULL_BACK_NAME
* Tue 07 May 2013 01:28:52 PM JST
not 
* Tue 07 May 2013 01:29:52 PM JST
if glob('*' + FULL_EXT):
* Tue 07 May 2013 01:29:59 PM JST

* Tue 07 May 2013 01:29:59 PM JST

* Tue 07 May 2013 01:29:59 PM JST
LATEST = 'latest'

* Tue 07 May 2013 01:32:35 PM JST
QU /root# rsync -av -e ssh --delete --force /data/* ki_backup_ni:/data/
* Tue 07 May 2013 01:32:51 PM JST
/backup
/data
/lost+found
/sys/*
/dev/*
/media/*
/proc/*
/tmp/*
/run/*
/mnt
/lib/udev/devices/console
/lib/udev/devices/loop0
/lib/udev/devices/null
/lib/udev/devices/ppp
/lib/udev/devices/net/tun
/etc/fstab
/etc/crypttab
/var/run/*
/var/lock/*
/lib/modules/*/volatile/.mounted
/var/cache/apt/archive/*
/home/*/.mozilla/firefox/*.default/Cache/*
/home/*/.cache/google-chrome/Default/*
/root/.mozilla/firefox/*.default/Cache/*
/root/.cache/google-chrome/Default/*

* Tue 07 May 2013 01:33:49 PM JST
                 
* Tue 07 May 2013 01:35:06 PM JST
RSYNC_EXCLUDE = ['/backup', 
                 '/data/*', 
                 '/lost+found', 
                 '/sys/*', 
                 '/dev/*', 
                 '/media/*', 
                 '/proc/*', 
                 '/tmp/*', 
                 '/run/*', 
                 '/mnt', 
                 '/lib/udev/devices/console', 
                 '/lib/udev/devices/loop0', 
                 '/lib/udev/devices/null', 
                 '/lib/udev/devices/ppp', 
                 '/lib/udev/devices/net/tun', 
                 '/etc/fstab', 
                 '/etc/crypttab', 
                 '/var/run/*', 
                 '/var/lock/*', 
                 '/lib/modules/*/volatile/.mounted', 
                 '/var/cache/apt/archive/*', 
                 '/home/*/.mozilla/firefox/*.default/Cache/*', 
                 '/home/*/.cache/google-chrome/Default/*', 
                 '/root/.mozilla/firefox/*.default/Cache/*', 
                 '/root/.cache/google-chrome/Default/*',]

* Tue 07 May 2013 01:46:05 PM JST

* Tue 07 May 2013 01:46:05 PM JST

* Tue 07 May 2013 01:46:06 PM JST
RSYNC_CMD = '/usr/bin/rsync'

* Tue 07 May 2013 01:49:18 PM JST
RSYNC_LINK_DEST
* Tue 07 May 2013 01:51:59 PM JST
RSYNC_OPT
* Tue 07 May 2013 01:55:49 PM JST
                    
* Tue 07 May 2013 01:56:05 PM JST
' '.join(
        [RSYNC_CMD, RSYNC_OPT, ['--exclude=' + x for x in RSYNC_EXCLUDES]]) 
* Tue 07 May 2013 01:57:27 PM JST
        
* Tue 07 May 2013 02:00:59 PM JST
DEST_DIR
* Tue 07 May 2013 02:01:26 PM JST
a '
* Tue 07 May 2013 02:03:17 PM JST
# define full backup name as full
FULL_BACK_NAME = DATE + FULL_EXT
DEST_DIR = os.path.join(BACKUP_DIR, FULL_BACK_NAME)

* Tue 07 May 2013 02:03:57 PM JST
pass
* Tue 07 May 2013 02:03:58 PM JST
        pass
* Tue 07 May 2013 02:04:38 PM JST
# define full backup name as full
_FULL_BACK_NAME = DATE + FULL_EXT
DEST_DIR = os.path.join(BACKUP_DIR, _FULL_BACK_NAME)

* Tue 07 May 2013 02:05:09 PM JST
RSYNC_CMD = '/usr/bin/rsync'

RSYNC_OPT = '-a'

RSYNC_EXCLUDES = ['/backup', 
                 '/data/*', 
                 '/lost+found', 
                 '/sys/*', 
                 '/dev/*', 
                 '/media/*', 
                 '/proc/*', 
                 '/tmp/*', 
                 '/run/*', 
                 '/mnt', 
                 '/lib/udev/devices/console', 
                 '/lib/udev/devices/loop0', 
                 '/lib/udev/devices/null', 
                 '/lib/udev/devices/ppp', 
                 '/lib/udev/devices/net/tun', 
                 '/etc/fstab', 
                 '/etc/crypttab', 
                 '/var/run/*', 
                 '/var/lock/*', 
                 '/lib/modules/*/volatile/.mounted', 
                 '/var/cache/apt/archive/*', 
                 '/home/*/.mozilla/firefox/*.default/Cache/*', 
                 '/home/*/.cache/google-chrome/Default/*', 
                 '/root/.mozilla/firefox/*.default/Cache/*', 
                 '/root/.cache/google-chrome/Default/*',]

RSYNC_LINK_DEST = '--link-dest='

* Tue 07 May 2013 02:14:40 PM JST
# define incremental backup name as `date`
_INCR_BACK_NAME = DATE + INCR_EXT
DEST_DIR = os.path.join(BACKUP_DIR, _INCR_BACK_NAME)

* Tue 07 May 2013 02:17:09 PM JST
COLLECTION
* Tue 07 May 2013 02:17:50 PM JST
RSYNC_LINK_DEST
* Tue 07 May 2013 02:20:13 PM JST
    # define incremental backup name as `date`
    _INCR_BACK_NAME = DATE + INCR_EXT
    DEST_DIR = os.path.join(BACKUP_DIR, _INCR_BACK_NAME)

* Tue 07 May 2013 02:24:33 PM JST
rm
* Tue 07 May 2013 02:24:33 PM JST
os.rm
* Tue 07 May 2013 02:28:00 PM JST

* Tue 07 May 2013 02:29:29 PM JST

* Tue 07 May 2013 02:29:29 PM JST

* Tue 07 May 2013 02:29:29 PM JST
BACKUP_PARENT_DIR = '/media/Data/MYTEMP/data/.backup'

* Tue 07 May 2013 02:29:38 PM JST

* Tue 07 May 2013 02:29:38 PM JST

* Tue 07 May 2013 02:29:38 PM JST
    # cd backup dir

* Tue 07 May 2013 02:47:00 PM JST
glob('*' + INCR_EXT)
* Tue 07 May 2013 02:59:36 PM JST
fs = sorted(os.listdir(os.getcwd()), key=os.path.getctime)
* Tue 07 May 2013 03:14:43 PM JST
FULL_EXT = '.full'
INCR_EXT = '.incr'


* Tue 07 May 2013 03:16:56 PM JST
hello
* Tue 07 May 2013 05:32:16 PM JST
'ln -s %s %s'.format(DEST_DIR, LATEST)
* Tue 07 May 2013 05:32:24 PM JST
DEST_DIR
* Tue 07 May 2013 05:32:29 PM JST
LATEST
* Tue 07 May 2013 11:16:27 PM JST
pass
* Tue 07 May 2013 11:21:34 PM JST

* Tue 07 May 2013 11:21:35 PM JST

* Tue 07 May 2013 11:21:35 PM JST
        import pdb; pdb.set_trace()

* Tue 07 May 2013 11:30:18 PM JST
OSError
* Tue 07 May 2013 11:54:15 PM JST
os.chdir(BACKUP_PARENT_DIR)
* Wed 08 May 2013 12:22:50 AM JST
check_call
* Wed 08 May 2013 12:22:52 AM JST
subprocess.check_call
* Wed 08 May 2013 12:22:55 AM JST
True
* Wed 08 May 2013 12:52:38 AM JST
OSError
* Wed 08 May 2013 01:05:17 AM JST
os.path.realpath(LATEST)
* Wed 08 May 2013 01:06:03 AM JST
os.path.join(BACKUP_DIR, LATEST)
* Wed 08 May 2013 01:10:10 AM JST
RSYNC_LINK_DEST_OPT + 
* Wed 08 May 2013 01:17:06 AM JST
os.system('/bin/ln -s {0} {1}'.format(DEST_DIR, LATEST))
* Wed 08 May 2013 04:04:31 AM JST

* Wed 08 May 2013 04:04:31 AM JST

* Wed 08 May 2013 04:04:31 AM JST
        print('DEBUG-5-backup_ki.py')

* Wed 08 May 2013 04:04:33 AM JST

* Wed 08 May 2013 04:04:34 AM JST

* Wed 08 May 2013 04:04:34 AM JST
        print('DEBUG-4-backup_ki.py')

* Wed 08 May 2013 04:04:36 AM JST

* Wed 08 May 2013 04:04:36 AM JST

* Wed 08 May 2013 04:04:36 AM JST
    print('DEBUG-3-backup_ki.py')

* Wed 08 May 2013 04:04:40 AM JST

* Wed 08 May 2013 04:04:40 AM JST

* Wed 08 May 2013 04:04:40 AM JST
        print(cmd)

* Wed 08 May 2013 04:04:47 AM JST

* Wed 08 May 2013 04:04:47 AM JST

* Wed 08 May 2013 04:04:47 AM JST
    print('DEBUG-2-backup_ki.py')

* Wed 08 May 2013 04:04:51 AM JST

* Wed 08 May 2013 04:04:51 AM JST

* Wed 08 May 2013 04:04:52 AM JST
        print('DEBUG-1-backup_ki.py')

* Wed 08 May 2013 05:25:50 AM JST

* Wed 08 May 2013 05:25:50 AM JST

* Wed 08 May 2013 05:25:50 AM JST
# define log file path

* Wed 08 May 2013 05:25:52 AM JST

* Wed 08 May 2013 05:25:52 AM JST

* Wed 08 May 2013 05:25:53 AM JST
# define log file path

* Wed 08 May 2013 05:26:50 AM JST

* Wed 08 May 2013 05:26:50 AM JST

* Wed 08 May 2013 05:26:50 AM JST
# check mounted cryptdisk and exists backup dir

* Wed 08 May 2013 05:27:22 AM JST
FULL_EXT = '.full'
INCR_EXT = '.incr'

* Wed 08 May 2013 05:28:39 AM JST

* Wed 08 May 2013 05:28:39 AM JST

* Wed 08 May 2013 05:28:39 AM JST
    # remove oldest incremental backup

* Wed 08 May 2013 05:28:59 AM JST
has 
* Wed 08 May 2013 05:29:00 AM JST
backup has 
* Wed 08 May 2013 05:29:00 AM JST
incremental backup has 
* Wed 08 May 2013 05:37:20 AM JST
def is_incr_dir(x):
    """SUMMARY

    @Arguments:
    - `x`:

    @Return:
    """
    return os.path.isdir(x) and x.endswith(INCR_EXT)
* Wed 08 May 2013 05:51:15 AM JST
pass
* Wed 08 May 2013 05:52:08 AM JST
not crypted disk or not exists directory.
* Wed 08 May 2013 05:52:20 AM JST

* Wed 08 May 2013 05:52:20 AM JST

* Wed 08 May 2013 05:52:20 AM JST
    # if not exists logging failed. backup with "not crypted disk or not exists directory." message

* Wed 08 May 2013 05:54:09 AM JST

* Wed 08 May 2013 05:54:09 AM JST

* Wed 08 May 2013 05:54:09 AM JST
    # logging Success full backup

* Wed 08 May 2013 05:54:19 AM JST
logging.log(10, 'Success: Full Backup.')
* Wed 08 May 2013 05:54:26 AM JST
logging.log(10, 'Success: Full Backup.')
* Wed 08 May 2013 05:54:33 AM JST
Success
* Wed 08 May 2013 05:55:26 AM JST
logging.log(10, 'Success: Full Backup.')
* Wed 08 May 2013 05:55:30 AM JST
Full
* Wed 08 May 2013 05:55:43 AM JST
print('Failed')
* Wed 08 May 2013 05:55:46 AM JST
logging.log(10, 'Success: Full Backup.')
* Wed 08 May 2013 05:55:51 AM JST
Success
* Wed 08 May 2013 05:55:56 AM JST
Full
* Wed 08 May 2013 05:56:01 AM JST

* Wed 08 May 2013 05:56:01 AM JST

* Wed 08 May 2013 05:56:01 AM JST
    # logging Success incremental backup & directory name

* Wed 08 May 2013 05:59:18 AM JST

* Wed 08 May 2013 05:59:18 AM JST

* Wed 08 May 2013 05:59:18 AM JST
    # remove "latest" symbolic link

* Wed 08 May 2013 06:01:17 AM JST

* Wed 08 May 2013 06:01:17 AM JST

* Wed 08 May 2013 06:01:17 AM JST
# remove latest symbolic link 

* Wed 08 May 2013 06:03:20 AM JST

* Wed 08 May 2013 06:03:20 AM JST

* Wed 08 May 2013 06:03:20 AM JST
    # define incremental backup name as `date`

* Wed 08 May 2013 06:03:28 AM JST

* Wed 08 May 2013 06:03:28 AM JST

* Wed 08 May 2013 06:03:29 AM JST
    # elif

* Wed 08 May 2013 06:03:31 AM JST

* Wed 08 May 2013 06:03:31 AM JST

* Wed 08 May 2013 06:03:31 AM JST
        # set link-dest = "latest" directory

* Wed 08 May 2013 06:03:32 AM JST

* Wed 08 May 2013 06:03:32 AM JST

* Wed 08 May 2013 06:03:32 AM JST
        # set link-dest = full directory

* Wed 08 May 2013 06:04:51 AM JST

* Wed 08 May 2013 06:04:51 AM JST

* Wed 08 May 2013 06:04:51 AM JST
# if exists full directory

* Wed 08 May 2013 06:06:06 AM JST

* Wed 08 May 2013 06:06:06 AM JST

* Wed 08 May 2013 06:06:06 AM JST
    print(os.getcwd())

* Wed 08 May 2013 06:06:15 AM JST

* Wed 08 May 2013 06:06:15 AM JST

* Wed 08 May 2013 06:06:15 AM JST
    # define full backup name as full

* Wed 08 May 2013 06:06:27 AM JST

* Wed 08 May 2013 06:06:27 AM JST

* Wed 08 May 2013 06:06:28 AM JST
# if not exist full directory

* Wed 08 May 2013 06:11:01 AM JST
RSYNC_CMD = '/usr/bin/rsync'

RSYNC_OPT = '-a'

RSYNC_EXCLUDES = ['/backup',
                  '/share/*',
                 '/data/*',
                 '/lost+found',
                 '/sys/*',
                 '/dev/*',
                 '/media/*',
                 '/proc/*',
                 '/tmp/*',
                 '/run/*',
                 '/mnt',
                 '/lib/udev/devices/console',
                 '/lib/udev/devices/loop0',
                 '/lib/udev/devices/null',
                 '/lib/udev/devices/ppp',
                 '/lib/udev/devices/net/tun',
                 '/etc/fstab',
                 '/etc/crypttab',
                 '/var/run/*',
                 '/var/lock/*',
                 '/lib/modules/*/volatile/.mounted',
                 '/var/cache/apt/archive/*',
                 '/home/*/.mozilla/firefox/*.default/Cache/*',
                 '/home/*/.cache/google-chrome/Default/*',
                 '/root/.mozilla/firefox/*.default/Cache/*',
                 '/root/.cache/google-chrome/Default/*',]

RSYNC_LINK_DEST_OPT = '--link-dest='


* Wed 08 May 2013 06:14:49 AM JST
BACKUP_NAME
* Wed 08 May 2013 06:27:42 AM JST
king
* Wed 08 May 2013 06:28:27 AM JST
ナイト
* Wed 08 May 2013 06:28:29 AM JST
Knight   
* Wed 08 May 2013 06:28:33 AM JST
night
* Wed 08 May 2013 10:15:22 AM JST

* Wed 08 May 2013 10:15:23 AM JST

* Wed 08 May 2013 10:15:23 AM JST
import argparse

* Wed 08 May 2013 10:20:28 AM JST
'/var/log'
* Wed 08 May 2013 10:20:39 AM JST
LOG_BASE_DIR = '/var/log'
LOG_PATH = os.path.join(LOG_BASE_DIR, LOG_NAME)

* Wed 08 May 2013 10:21:33 AM JST
FULL_EXT = '.full'
INCR_EXT = '.incr'

* Wed 08 May 2013 10:22:00 AM JST
_DATE_FORMAT = '%Y%m%d'
DATE = datetime.date.today().strftime(_DATE_FORMAT)

* Wed 08 May 2013 10:25:54 AM JST
# define Max incremental backup
MAX = 30


* Wed 08 May 2013 10:26:23 AM JST
# define Max incremental backup
MAX = 30

* Wed 08 May 2013 10:26:26 AM JST
# define Max incremental backup
MAX = 30

* Wed 08 May 2013 10:26:48 AM JST
# define Max incremental backup
MAX = 30


* Wed 08 May 2013 10:26:57 AM JST

* Wed 08 May 2013 10:26:57 AM JST

* Wed 08 May 2013 10:26:58 AM JST
import argparse

* Wed 08 May 2013 10:27:55 AM JST
## backup
#
_DATE_FORMAT = '%Y%m%d'
DATE = datetime.date.today().strftime(_DATE_FORMAT)


* Wed 08 May 2013 10:28:01 AM JST

* Wed 08 May 2013 10:28:01 AM JST

* Wed 08 May 2013 10:28:01 AM JST
## backup

* Wed 08 May 2013 10:28:02 AM JST
## backup

* Wed 08 May 2013 10:28:02 AM JST
## backup
#

* Wed 08 May 2013 10:28:44 AM JST
# for symbolic link
LATEST = 'latest'

* Wed 08 May 2013 10:28:54 AM JST
# for symbolic link
LATEST = 'latest'

* Wed 08 May 2013 10:30:02 AM JST

* Wed 08 May 2013 10:30:02 AM JST

* Wed 08 May 2013 10:30:02 AM JST
    elif 'posix' == _os.name:

* Wed 08 May 2013 10:30:44 AM JST
if 'nt' == _os.name:
    print('Not support WindowsNT.')
    sys.exit(1)

* Wed 08 May 2013 10:33:05 AM JST
'Not support WindowsNT.'
* Wed 08 May 2013 10:33:08 AM JST

* Wed 08 May 2013 10:33:08 AM JST

* Wed 08 May 2013 10:33:08 AM JST
    print()

* Wed 08 May 2013 10:34:17 AM JST

* Wed 08 May 2013 10:34:18 AM JST

* Wed 08 May 2013 10:34:18 AM JST
# binding: "keybinding"

* Wed 08 May 2013 10:34:19 AM JST
# binding: "keybinding"

* Wed 08 May 2013 10:34:19 AM JST
# binding: "keybinding"
# expand-env: ((some-var some-value))

* Wed 08 May 2013 10:34:55 AM JST
'Script must be run as root.'
* Wed 08 May 2013 10:35:18 AM JST
# check platform
* Wed 08 May 2013 10:35:27 AM JST
'Not support WindowsNT.'
* Wed 08 May 2013 10:35:28 AM JST

* Wed 08 May 2013 10:35:28 AM JST

* Wed 08 May 2013 10:35:29 AM JST
    print('Not support WindowsNT.')

* Thu 09 May 2013 01:15:35 AM JST
wine start /unix 
* Fri 10 May 2013 04:54:07 PM JST
/usr/local/bin/
* Fri 10 May 2013 05:01:07 PM JST
PRINTFORMAT % ('Waiting', '%-2d secunds')
* Fri 10 May 2013 05:01:21 PM JST
'Halt OK!!'
* Fri 10 May 2013 05:01:27 PM JST
Waiting
* Fri 10 May 2013 05:02:00 PM JST
Active
* Fri 10 May 2013 05:02:05 PM JST

* Fri 10 May 2013 05:02:05 PM JST

* Fri 10 May 2013 05:02:05 PM JST
                    print('Halt OK!!')

* Fri 10 May 2013 05:02:19 PM JST
print(PRINTFORMAT % ('Halting', 'Halt OK!!'))
* Fri 10 May 2013 05:02:27 PM JST
'Already Downed.'
* Fri 10 May 2013 05:02:30 PM JST

* Fri 10 May 2013 05:02:30 PM JST

* Fri 10 May 2013 05:02:30 PM JST
                print()

* Fri 10 May 2013 05:03:22 PM JST

* Fri 10 May 2013 05:03:23 PM JST

* Fri 10 May 2013 05:03:23 PM JST
    """

* Fri 10 May 2013 05:03:23 PM JST

* Fri 10 May 2013 05:03:23 PM JST

* Fri 10 May 2013 05:03:23 PM JST
    """

* Fri 10 May 2013 05:03:43 PM JST
StandardError
* Fri 10 May 2013 05:04:21 PM JST

* Fri 10 May 2013 05:04:21 PM JST

* Fri 10 May 2013 05:04:21 PM JST
            print()

* Fri 10 May 2013 05:08:14 PM JST

* Fri 10 May 2013 05:08:14 PM JST

* Fri 10 May 2013 05:08:14 PM JST
import os as _os

* Sat 11 May 2013 04:32:59 AM JST
/usr/share/man/man1/
* Sat 11 May 2013 04:33:56 AM JST
'/backup',
                  '/share/*',
                  '/data/*',
                  '/lost+found',
                  '/sys/*',
                  '/dev/*',
                  '/media/*',
                  '/proc/*',
                  '/tmp/*',
                  '/run/*',
                  '/mnt',
                  '/lib/udev/devices/console',
                  '/lib/udev/devices/loop0',
                  '/lib/udev/devices/null',
                  '/lib/udev/devices/ppp',
                  '/lib/udev/devices/net/tun',
                  '/etc/fstab',
                  '/etc/crypttab',
                  '/var/run/*',
                  '/var/lock/*',
                  '/lib/modules/*/volatile/.mounted',
                  '/var/cache/apt/archive/*',
                  '/home/*/.mozilla/firefox/*.default/Cache/*',
                  '/home/*/.cache/google-chrome/Default/*',
                  '/root/.mozilla/firefox/*.default/Cache/*',
                  '/root/.cache/google-chrome/Default/*'
* Sat 11 May 2013 04:35:08 AM JST
'/backup'
'/share/*'
'/data/*'
'/lost+found'
'/sys/*'
'/dev/*'
'/media/*'
'/proc/*'
'/tmp/*'
'/run/*'
'/mnt'
'/lib/udev/devices/console'
'/lib/udev/devices/loop0'
'/lib/udev/devices/null'
'/lib/udev/devices/ppp'
'/lib/udev/devices/net/tun'
'/etc/fstab'
'/etc/crypttab'
'/var/run/*'
'/var/lock/*'
'/lib/modules/*/volatile/.mounted'
'/var/cache/apt/archive/*'
'/home/*/.mozilla/firefox/*.default/Cache/*'
'/home/*/.cache/google-chrome/Default/*'
'/root/.mozilla/firefox/*.default/Cache/*'
'/root/.cache/google-chrome/Default/*
* Sat 11 May 2013 08:55:56 AM JST

* Sat 11 May 2013 08:55:56 AM JST

* Sat 11 May 2013 08:55:56 AM JST
RSYNC_LINK_DEST_OPT = '--link-dest='

* Sat 11 May 2013 10:40:23 AM JST
_FULL_BACK_NAME = DATE + FULL_EXT
* Sat 11 May 2013 10:58:49 AM JST
# check platform
if 'nt' == os.name:
    sys.exit('Not support WindowsNT.')

# check root
if not os.geteuid() == 0:
    sys.exit('Script must be run as root.')


* Sat 11 May 2013 10:59:42 AM JST
## check backup dir or decrypt disk
#
# check king active and pave
# check decrypt disk
if os.path.exists(backup_base_dir):
    if not os.path.exists(backup_path):
        os.mkdir(backup_path)
    os.chdir(backup_path)
else:
    logging.log(10, 'Failed: not decrypted disk or not exists directory.')

* Sat 11 May 2013 02:24:39 PM JST
verbose=args.verbose
* Sat 11 May 2013 03:05:35 PM JST
halt
* Sat 11 May 2013 03:05:35 PM JST
sudo halt
* Sat 11 May 2013 03:34:46 PM JST

* Sat 11 May 2013 03:34:46 PM JST

* Sat 11 May 2013 03:34:46 PM JST
            # import pdb; pdb.set_trace()

* Sat 11 May 2013 03:37:09 PM JST
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
wol.py

Wake On Lan my Server and Decrypt disk.
"""
import argparse
import king

def _options_maker():
    parser = argparse.ArgumentParser(description="""Wake On Lan.""")

    parser.add_argument('-s', '--silent',
                        dest='silent',
                        action='store_false',
                        default=True,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='No verbosly')

    parser.add_argument('--no-decrypt',
                        dest='no_decrypt',
                        action='store_false',
                        default=True,
                        required=False,
                        help='No decrypt flag.')

    parser.add_argument('-a', '--check-active',
                        dest='isactive',
                        action='store_true',
                        default=False,
                        required=False,
                        help='Check running server.')

    # (yas/expand-link "argparse_add_argument" t)
    return parser.parse_args()


def _main():
    args = _options_maker()
    ki = king.King(verbose=args.silent)
    if args.isactive:
        if ki.isactive():
            print('ACTIVE')
        else:
            print('DOWN')
    else:
        ki.pave(decrypt=args.no_decrypt)


if __name__ == '__main__':
    _main()

* Sat 11 May 2013 03:37:35 PM JST
Lan.
* Sat 11 May 2013 03:37:35 PM JST
On Lan.
* Sat 11 May 2013 03:37:35 PM JST
Wake On Lan.
* Sat 11 May 2013 03:38:00 PM JST

* Sat 11 May 2013 03:38:00 PM JST

* Sat 11 May 2013 03:38:00 PM JST
    if args.isactive:

* Sat 11 May 2013 03:40:18 PM JST
SUMMARY
* Sat 11 May 2013 03:40:56 PM JST
class PasswordError(Exception):
    pass


class CMDError(Exception):
    pass



* Sat 11 May 2013 03:51:48 PM JST
 # wait shutdown
* Sun 12 May 2013 03:18:46 AM JST
class _AttributeHolder(object):
    """
    """

    def __repr__(self):
        type_name = type(self).__name__
        attr_strings = []
        for name, value in self._get_attr():
            attr_strings.append('%s=%r' % (name, value))
        return '%s(%s)' % (type_name, ', '.join(attr_strings))

    def _get_attr(self):
        return sorted(self.__dict__.items())


* Mon 13 May 2013 12:00:06 PM JST

* Mon 13 May 2013 12:00:06 PM JST

* Mon 13 May 2013 12:00:07 PM JST
    """

* Mon 13 May 2013 12:00:07 PM JST
    """

* Mon 13 May 2013 12:00:07 PM JST
    """
    """

* Mon 13 May 2013 12:00:08 PM JST

* Mon 13 May 2013 12:00:08 PM JST

* Mon 13 May 2013 12:00:08 PM JST
    """

* Mon 13 May 2013 12:00:08 PM JST
    """

* Mon 13 May 2013 12:00:08 PM JST
    """
    """

* Mon 13 May 2013 12:00:10 PM JST

* Mon 13 May 2013 12:00:10 PM JST

* Mon 13 May 2013 12:00:10 PM JST
    """

* Mon 13 May 2013 12:00:10 PM JST
    """

* Mon 13 May 2013 12:00:10 PM JST
    """
    """

* Mon 13 May 2013 12:00:22 PM JST
SUMMARY
* Mon 13 May 2013 12:00:41 PM JST
SUMMARY
* Mon 13 May 2013 12:00:53 PM JST
        
* Mon 13 May 2013 12:12:51 PM JST
    
* Mon 13 May 2013 03:46:44 PM JST
2013/
* Tue 14 May 2013 04:37:55 AM JST
無効
* Tue 14 May 2013 04:38:05 AM JST
       # tu
* Tue 14 May 2013 06:10:13 AM JST
console.log("hello world");
* Tue 14 May 2013 08:22:20 PM JST
java -jar /media/portable/system/FRDPortable/App/FreeRapidDownloader/frd.jar&
* Tue 14 May 2013 08:39:28 PM JST
python -c "import easygui;easygui.msgbox('not mounted', title='Error')"
* Tue 14 May 2013 08:40:26 PM JST
#!/bin/sh
* Tue 14 May 2013 08:41:18 PM JST
import easygui
* Tue 14 May 2013 08:41:22 PM JST
python -c "
* Tue 14 May 2013 08:46:02 PM JST
'http://www.cybersyndrome.net/pla5.html'
* Tue 14 May 2013 08:46:19 PM JST
'http://www.cybersyndrome.net/plr5.html'
* Tue 14 May 2013 08:47:03 PM JST
    with open(proxy_file, 'w') as f:
        f.write('\n'.join(lis))

* Tue 14 May 2013 08:48:28 PM JST
QU /usr/local/bin# 
* Tue 14 May 2013 08:48:28 PM JST
QU /usr/local/bin#
* Tue 14 May 2013 08:49:12 PM JST
/media/portable/system/FRDPortable/App/FreeRapidDownloader/
* Tue 14 May 2013 08:50:25 PM JST
    easygui.msgbox('not mounted', title='Error')
    sys.exit(1)

* Wed 15 May 2013 01:26:56 PM JST
        
* Wed 15 May 2013 07:56:43 PM JST
impor
* Wed 15 May 2013 07:57:27 PM JST
abstract.
* Wed 15 May 2013 07:57:29 PM JST
 as Verbose
* Wed 15 May 2013 07:57:42 PM JST
super(King, self).__init__(verbose=verbose)
* Wed 15 May 2013 07:58:18 PM JST
verbose
* Wed 15 May 2013 07:58:34 PM JST

* Wed 15 May 2013 07:58:34 PM JST

* Wed 15 May 2013 07:58:34 PM JST
        super(King, self).__init__(verbose=verbose)

* Wed 15 May 2013 07:59:41 PM JST
super(King, self).__init__(verbose=verbose)
* Wed 15 May 2013 07:59:44 PM JST
King
* Wed 15 May 2013 08:01:48 PM JST
verbose:
* Wed 15 May 2013 08:08:27 PM JST
object, 
* Fri 17 May 2013 08:04:32 AM JST
pcm_slave.slavej {
  pcm "hw:0"
  channels 2
  rate 44100
}
pcm.plugj {
  type plug
  slave slavej
}
* Fri 17 May 2013 08:17:13 AM JST
pcm_slave.slavej {
  pcm "hw:0"
  channels 2
  rate 44100
}
pcm.plugj {
  type plug
  slave slavej
}
* Fri 17 May 2013 08:38:11 AM JST
                
* Fri 17 May 2013 08:38:23 AM JST
hw
* Fri 17 May 2013 08:38:27 AM JST
1
* Fri 17 May 2013 08:38:28 AM JST
card 1
* Fri 17 May 2013 08:39:33 AM JST
pcm.dsp0 {
    type plug
    slave.pcm "dmix"
}

ctl.mixer0 {
    type hw
    card 0
}

pcm.!default {
    type plug
    slave.pcm "dmix"
}
* Fri 17 May 2013 08:45:13 AM JST
pcm.dmixer {
        type dmix
        ipc_key 1024
        ipc_key_add_uid 0
        ipc_perm 0660
}
pcm.dsp {
        type plug
        slave.pcm "dmix"
}
* Fri 17 May 2013 08:50:05 AM JST
pcm.!default {
type hw
card 1
}

ctl.!default {

type hw

card 1

}

* Fri 17 May 2013 09:06:03 AM JST
hw
* Fri 17 May 2013 09:06:04 AM JST
type hw
* Fri 17 May 2013 09:06:21 AM JST
card 1
* Fri 17 May 2013 09:08:08 AM JST
pcm.dsp0 {
    type plug
    slave.pcm "dmix"
    # A hint is required for listing the device in some GUIs, e.g. Phonon configuration.
    hint {
         show on
         description "My dmix dsp0"
    }
}
# mixer0 can stay unchanged, because
# it isn't used anyway, I guess ;)
ctl.mixer0 {
    type hw
    card 0
}
* Fri 17 May 2013 09:10:17 AM JST
pcm.!default{
        type plug
        slave.pcm "usbdac_dmix"
}

pcm.usbdac {
           type hw # USB DAC device
           card 2     # check these value by "aplay -l" output!! something like "card 2: Device [USB PnP Sound Device], device 0"
           device 0  # check these value by "aplay -l" output!!
}
pcm.onboard {
            type hw
            card 0     # check these value by "aplay -l" output!! card 0: SB [HDA ATI SB], device 0: CONEXANT Analog [CONEXANT Analog]
            device 0  # check these value by "aplay -l" output!!
}
pcm.usbdac_dmix {
                type dmix
                ipc_key 1026 # must be unique!
                slave {
                        pcm "usbdac"  
 ## all following in this dmix section should be set according to your hardware. If you're not sure, don't try to add them!
                        period_time 0
                        period_size 1024
                        buffer_size 8192
                        rate 48000  # Fireye 2 support up to 48000Hz, please refer to your hardware spec.
                      }
}
pcm.onboard_dmix {
type dmix
ipc_key 1025 # must be unique!
slave {
        pcm "onboard"
 ## all following in this dmix section should be set according to your hardware. If you're not sure, don't try to add them!
        period_time 0
        period_size 1024
        buffer_size 8192
        rate 44100
      }
}
* Fri 17 May 2013 09:13:55 AM JST
pcm.!default {
type hw
card 1
}

ctl.!default {

type hw

card 1

}

* Sat 18 May 2013 04:52:00 PM JST
javascript:(function(){var url=location.href;if(url.search(/hl=en/)!=-1){document.location.href=url.replace("hl=en", "hl=ja")}if(url.search(/hl=ja/)!=-1){document.location.href=url.replace("hl=ja", "hl=en")}})();
* Sat 18 May 2013 04:55:10 PM JST
javascript:(function(){var url=location.href;
                       if(url.search(/hl=en/)!=-1){document.location.href=url.replace("hl=en", "hl=ja")}if(url.search(/hl=ja/)!=-1){document.location.href=url.replace("hl=ja", "hl=en")}})();
* Sat 18 May 2013 04:55:13 PM JST
javascript:(function(){var url=location.href;if(url.search(/hl=en/)!=-1){document.location.href=url.replace("hl=en", "hl=ja")}if(url.search(/hl=ja/)!=-1){document.location.href=url.replace("hl=ja", "hl=en")}})();
* Sat 18 May 2013 04:55:55 PM JST
&lr=lang_
* Sat 18 May 2013 04:56:04 PM JST
en
* Sat 18 May 2013 05:03:29 PM JST
&lr=lang_en
* Sat 18 May 2013 05:05:40 PM JST
&lr=lang_en
* Sat 18 May 2013 05:06:53 PM JST
url.replace("hl=en", "hl=ja").replace("&lr=lang_en", "&lr=lang_ja")
* Sat 18 May 2013 05:08:09 PM JST
"hl=ja"
* Sat 18 May 2013 05:08:25 PM JST
"&lr=lang_"
* Sat 18 May 2013 05:09:54 PM JST
    
* Sat 18 May 2013 05:16:47 PM JST
    
* Sat 18 May 2013 05:16:48 PM JST
    
* Sat 18 May 2013 05:16:51 PM JST
    
* Sat 18 May 2013 05:16:53 PM JST
    
* Sat 18 May 2013 05:16:55 PM JST
    
* Sat 18 May 2013 05:17:00 PM JST
    
* Sat 18 May 2013 05:17:03 PM JST
    
* Sat 18 May 2013 05:17:05 PM JST
        
* Sat 18 May 2013 05:17:07 PM JST
        
* Sat 18 May 2013 05:17:08 PM JST
        
* Sat 18 May 2013 05:17:11 PM JST
        
* Sat 18 May 2013 05:17:15 PM JST
    
* Sat 18 May 2013 05:17:18 PM JST
javascript:(function(){var url=location.href; var en="hl=en"; var ja="hl=ja"; var lr="&lr=lang_"; var lren=lr + "en"; var lrja=lr + "ja"; if(url.search(en)!=-1 || url.search(lren)!=-1){var tmp=url.replace("hl=en", "hl=ja"); var tmp=tmp.replace("&lr=lang_en", "&lr=lang_ja"); if(tmp.search(lr)==-1){var tmp=tmp + lrja} document.location.href=tmp} if(url.search(/hl=ja/)!=-1){document.location.href=url.replace("hl=ja", "hl=en")}})();
* Sat 18 May 2013 05:19:00 PM JST

* Sat 18 May 2013 05:19:00 PM JST

* Sat 18 May 2013 05:19:00 PM JST
        var t

* Sat 18 May 2013 05:19:03 PM JST
        var tmp=url.replace("hl=en", "hl=ja");
* Sat 18 May 2013 05:19:47 PM JST
ja/
* Sat 18 May 2013 05:20:01 PM JST
var tmp=tmp.replace(lren, lrja);
* Sat 18 May 2013 05:20:21 PM JST
        
* Sat 18 May 2013 05:20:22 PM JST
        
* Sat 18 May 2013 05:20:26 PM JST
        
* Sat 18 May 2013 05:20:28 PM JST
    
* Sat 18 May 2013 05:20:45 PM JST
    
* Sat 18 May 2013 05:20:56 PM JST
javascript:(function(){var url=location.href;var en="hl=en";var ja="hl=ja";var lr="&lr=lang_";var lren=lr + "en";var lrja=lr + "ja"; if(url.search(en)!=-1 || url.search(lren)!=-1){var tmp=url.replace(en, ja);var tmp=tmp.replace(lren, lrja);if(tmp.search(lr)==-1){var tmp=tmp + lrja}document.location.href=tmp} if(url.search(ja)!=-1){var tmp=url.replace(ja, en);var tmp=tmp.replace(lrja, lren);document.location.href=url.replace(ja, en)}})();
* Sat 18 May 2013 05:29:01 PM JST
javascript:(function(){var url=location.href;var en="hl=en";var ja="hl=ja";var lr="&lr=lang_";var lren=lr + "en";var lrja=lr + "ja"; if(url.search(en)!=-1 || url.search(lren)!=-1){var tmp=url.replace(en, ja);var tmp=tmp.replace(lren, lrja);if(tmp.search(lr)==-1){var tmp=tmp + lrja}document.location.href=tmp} if(url.search(ja)!=-1){var tmp=url.replace(ja, en);var tmp=tmp.replace(lrja, lren);document.location.href=tmp}})();
* Sat 18 May 2013 07:08:31 PM JST
ki = king.King(verbose=args.silent)
* Sat 18 May 2013 07:08:35 PM JST
silent
* Sat 18 May 2013 07:08:35 PM JST
args.silent
* Sat 18 May 2013 07:11:11 PM JST

* Sat 18 May 2013 07:11:11 PM JST

* Sat 18 May 2013 07:11:11 PM JST
# check king active and pave

* Sat 18 May 2013 07:11:11 PM JST
# check king active and pave

* Sat 18 May 2013 07:11:11 PM JST
# check king active and pave
# check decrypt disk

* Sat 18 May 2013 07:12:47 PM JST
except subprocess.CalledProcessError:
* Sat 18 May 2013 07:13:19 PM JST
pass
* Sat 18 May 2013 07:18:58 PM JST
ki = king.King(verbose=True)
* Sat 18 May 2013 07:25:42 PM JST
stdin, stdout, stderr = self.cmd(cmd)
* Sat 18 May 2013 07:35:47 PM JST

* Sat 18 May 2013 07:35:47 PM JST

* Sat 18 May 2013 07:35:47 PM JST
if ki.cmd('ls /data/.backup/knight/*.full'):

* Sat 18 May 2013 07:38:02 PM JST

* Sat 18 May 2013 07:38:02 PM JST

* Sat 18 May 2013 07:38:02 PM JST
# prompt rsync

* Sat 18 May 2013 07:38:02 PM JST
# prompt rsync

* Sat 18 May 2013 07:38:02 PM JST
# prompt rsync
# rsync local to king

* Sat 18 May 2013 07:46:11 PM JST
subprocess.call('/bin/umount /data')
* Sat 18 May 2013 07:46:30 PM JST
call
* Sat 18 May 2013 07:46:30 PM JST
subprocess.call
* Sat 18 May 2013 07:46:37 PM JST
os.system('/bin/umount /data')
* Sat 18 May 2013 07:48:00 PM JST
call
* Sat 18 May 2013 07:53:46 PM JST
'Failed: not decrypted disk or not exists directory.'
* Sat 18 May 2013 07:56:19 PM JST

* Sat 18 May 2013 07:56:19 PM JST

* Sat 18 May 2013 07:56:19 PM JST
print(os.listdir(backup_base_dir))

* Sat 18 May 2013 08:08:29 PM JST
print(cmd)
* Sat 18 May 2013 08:08:39 PM JST

* Sat 18 May 2013 08:08:39 PM JST

* Sat 18 May 2013 08:08:39 PM JST
        print(cmd)

* Sat 18 May 2013 08:08:44 PM JST

* Sat 18 May 2013 08:08:44 PM JST

* Sat 18 May 2013 08:08:44 PM JST
        print(cmd)

* Sat 18 May 2013 08:11:54 PM JST
javascript:(function(){var get=window.getSelection().toString();var nodes=document.getElementsByTagName("a");var n=0;for(i=0;i<nodes.length;i++){if(get!=""){if(get==nodes[i].innerText){n=1;window.open("http://alexa.com/data/details/main?url="+nodes[i]);window.open("http://toolbar.netcraft.com/site_report?url="+nodes[i]);window.open("http://www.aguse.jp/?m=w&url="+nodes[i]);break;}}}if(n==0){if(get.match(/[.]/)){window.open("http://alexa.com/data/details/main?url="+get);window.open("http://toolbar.netcraft.com/site_report?url="+get);window.open("http://www.aguse.jp/?m=w&url="+get);}}if(get==""){window.open("http://alexa.com/data/details/main?url="+document.URL);window.open("http://builtwith.com?"+location.href);window.open("http://toolbar.netcraft.com/site_report?url="+document.URL);window.open("http://www.aguse.jp/?m=w&url="+document.URL);}})();
* Sat 18 May 2013 08:12:43 PM JST
        
* Sat 18 May 2013 08:12:44 PM JST
        
* Sat 18 May 2013 08:13:42 PM JST
javascript:(function(){var url=location.href;var en="hl=en";var ja="hl=ja";var lr="&lr=lang_";var lren=lr + "en";var lrja=lr + "ja"; if(url.search(en)!=-1 || url.search(lren)!=-1){var tmp=url.replace(en, ja);var tmp=tmp.replace(lren, lrja);if(tmp.search(lr)==-1){var tmp=tmp + lrja}document.location.href=tmp} if(url.search(ja)!=-1){var tmp=url.replace(ja, en);var tmp=tmp.replace(lrja, lren);document.location.href=tmp}})();
* Sat 18 May 2013 08:14:49 PM JST
var 
* Sat 18 May 2013 08:15:00 PM JST
var 
* Sat 18 May 2013 08:15:05 PM JST
var 
* Sat 18 May 2013 08:16:46 PM JST
javascript:(function(){var url=location.href;var en="hl=en";var ja="hl=ja";var lr="&lr=lang_";var lren=lr + "en";var lrja=lr + "ja";if(url.search(en)!=-1 || url.search(lren)!=-1){var tmp=url.replace(en, ja);tmp=tmp.replace(lren, lrja);if(tmp.search(lr)==-1){tmp=tmp + lrja}document.location.href=tmp} if(url.search(ja)!=-1){var tmp=url.replace(ja, en);tmp=tmp.replace(lrja, lren);document.location.href=tmp}})();
* Sat 18 May 2013 08:18:39 PM JST
"http://alexa.com/data/details/main?url="
* Sat 18 May 2013 08:18:58 PM JST
"http://toolbar.netcraft.com/site_report?url="
* Sat 18 May 2013 08:19:21 PM JST
"http://www.aguse.jp/?m=w&url="
* Sat 18 May 2013 08:19:31 PM JST
"http://alexa.com/data/details/main?url="
* Sat 18 May 2013 08:19:48 PM JST
"http://toolbar.netcraft.com/site_report?url="
* Sat 18 May 2013 08:20:02 PM JST
"http://www.aguse.jp/?m=w&url="
* Sat 18 May 2013 08:22:03 PM JST
http://builtwith.com
* Sat 18 May 2013 08:34:07 PM JST
'_blank'
* Sat 18 May 2013 08:34:59 PM JST
javascript:(function(){var get=window.getSelection().toString();var nodes=document.getElementsByTagName("a");var n=0;var alexa="http://alexa.com/data/details/main?url=";var netcraft="http://toolbar.netcraft.com/site_report?url=";var aguse="http://www.aguse.jp/?m=w&url=";for(i=0; i<nodes.length; i++){if(get!=""){if(get==nodes[i].innerText){n=1;window.open(alexa+nodes[i], '_blank');window.open(netcraft+nodes[i], '_blank');window.open(aguse+nodes[i], '_blank');break;}}}if(n==0){if(get.match(/[.]/)){window.open(alexa+get, '_blank');window.open(netcraft+get, '_blank');window.open(aguse+get, '_blank');}}if(get==""){window.open(alexa+document.URL, '_blank');window.open("http://builtwith.com?"+location.href, '_blank');window.open(netcraft+document.URL, '_blank');window.open(aguse+document.URL, '_blank');}})();
* Sat 18 May 2013 08:40:01 PM JST
gBrowser.addTab
* Sat 18 May 2013 08:40:26 PM JST
javascript:(function(){var get=window.getSelection().toString();var nodes=document.getElementsByTagName("a");var n=0;var alexa="http://alexa.com/data/details/main?url=";var netcraft="http://toolbar.netcraft.com/site_report?url=";var aguse="http://www.aguse.jp/?m=w&url=";for(i=0; i<nodes.length; i++){if(get!=""){if(get==nodes[i].innerText){n=1;window.open(alexa+nodes[i], '_blank');window.open(netcraft+nodes[i], '_blank');window.open(aguse+nodes[i], '_blank');break;}}}if(n==0){if(get.match(/[.]/)){window.open(alexa+get, '_blank');window.open(netcraft+get, '_blank');window.open(aguse+get, '_blank');}}if(get==""){gBrowser.addTab(alexa+document.URL, '_blank');gBrowser.addTab("http://builtwith.com?"+location.href, '_blank');gBrowser.addTab(netcraft+document.URL, '_blank');gBrowser.addTab(aguse+document.URL, '_blank');}})();
* Sat 18 May 2013 08:41:33 PM JST
javascript:(function(){var get=window.getSelection().toString();var nodes=document.getElementsByTagName("a");var n=0;var alexa="http://alexa.com/data/details/main?url=";var netcraft="http://toolbar.netcraft.com/site_report?url=";var aguse="http://www.aguse.jp/?m=w&url=";for(i=0; i<nodes.length; i++){if(get!=""){if(get==nodes[i].innerText){n=1;window.open(alexa+nodes[i]);window.open(netcraft+nodes[i]);window.open(aguse+nodes[i]);break;}}}if(n==0){if(get.match(/[.]/)){window.open(alexa+get);window.open(netcraft+get);window.open(aguse+get);}}if(get==""){gBrowser.addTab(alexa+document.URL);gBrowser.addTab("http://builtwith.com?"+location.href);gBrowser.addTab(netcraft+document.URL);gBrowser.addTab(aguse+document.URL);}})();
* Sat 18 May 2013 08:44:05 PM JST
javascript:(function(){var get=window.getSelection().toString();var nodes=document.getElementsByTagName("a");var n=0;var alexa="http://alexa.com/data/details/main?url=";var netcraft="http://toolbar.netcraft.com/site_report?url=";var aguse="http://www.aguse.jp/?m=w&url=";for(i=0; i<nodes.length; i++){if(get!=""){if(get==nodes[i].innerText){n=1;window.open(alexa+nodes[i], '_blank');window.open(netcraft+nodes[i], '_blank');window.open(aguse+nodes[i], '_blank');break;}}}if(n==0){if(get.match(/[.]/)){window.open(alexa+get, '_blank');window.open(netcraft+get, '_blank');window.open(aguse+get, '_blank');}}if(get==""){var w=window.open(alexa+document.URL, '_blank');w.forcus();window.open("http://builtwith.com?"+location.href, '_blank');window.open(netcraft+document.URL, '_blank');window.open(aguse+document.URL, '_blank');}})();
* Sat 18 May 2013 08:49:49 PM JST
javascript:(function(){var get=window.getSelection().toString();var nodes=document.getElementsByTagName("a");var n=0;var alexa="http://alexa.com/data/details/main?url=";var netcraft="http://toolbar.netcraft.com/site_report?url=";var aguse="http://www.aguse.jp/?m=w&url=";for(i=0; i<nodes.length; i++){if(get!=""){if(get==nodes[i].innerText){n=1;window.open(alexa+nodes[i], "_blank");window.open(netcraft+nodes[i], "_blank");window.open(aguse+nodes[i], "_blank");break;}}}if(n==0){if(get.match(/[.]/)){window.open(alexa+get, "_blank");window.open(netcraft+get, "_blank");window.open(aguse+get, "_blank");}}if(get==""){window.open(alexa+document.URL, "_blank");window.open("http://builtwith.com?"+location.href, "_blank");window.open(netcraft+document.URL, "_blank");window.open(aguse+document.URL, "_blank");}})();
* Sat 18 May 2013 08:54:00 PM JST
javascript:(function(){var get=window.getSelection().toString();var nodes=document.getElementsByTagName("a");var n=0;var alexa="http://alexa.com/data/details/main?url=";var netcraft="http://toolbar.netcraft.com/site_report?url=";var aguse="http://www.aguse.jp/?m=w&url=";function open_new_tab(url){var win=window.open(url, "_blank");win.focus();}for(i=0;i<nodes.length;i++){if(get!=""){if(get==nodes[i].innerText){n=1;window.open(alexa+nodes[i], "_blank");window.open(netcraft+nodes[i], "_blank");window.open(aguse+nodes[i], "_blank");break;}}}if(n==0){if(get.match(/[.]/)){window.open(alexa+get, "_blank");window.open(netcraft+get, "_blank");window.open(aguse+get, "_blank");}}if(get==""){open_new_tab(alexa+document.URL);open_new_tab("http://builtwith.com?"+location.href);window.open(netcraft+document.URL, "_blank");window.open(aguse+document.URL, "_blank");}})();
* Sat 18 May 2013 08:56:58 PM JST
javascript:(function(){var get=window.getSelection().toString();var nodes=document.getElementsByTagName("a");var n=0;for(i=0;i<nodes.length;i++){if(get!=""){if(get==nodes[i].innerText){n=1;window.open("http://www.aguse.jp/?m=w&url="+nodes[i]);break;}}}if(n==0){if(get.match(/[.]/)){window.open("http://www.aguse.jp/?m=w&url="+get);}}if(get==""){window.open("http://www.aguse.jp/?m=w&url="+document.URL);}})();
* Sat 18 May 2013 08:58:38 PM JST
window.open("http://www.aguse.jp/?m=w&url="+document.URL);
* Sat 18 May 2013 08:58:58 PM JST
                    
* Sat 18 May 2013 08:59:26 PM JST
window.open("http://www.google.com"
* Sat 18 May 2013 08:59:53 PM JST
javascript:(function(){var get=window.getSelection().toString();var nodes=document.getElementsByTagName("a");var n=0;for(i=0;i<nodes.length;i++){if(get!=""){if(get==nodes[i].innerText){n=1;window.open("http://www.aguse.jp/?m=w&url="+nodes[i]);window.open("http://www.google.com"break;}}}if(n==0){if(get.match(/[.]/)){window.open("http://www.aguse.jp/?m=w&url="+get);window.open("http://www.google.com");}}if(get==""){window.open("http://www.aguse.jp/?m=w&url="+document.URL);window.open("http://www.aguse.jp/?m=w&url="+document.URL);}})();
* Sat 18 May 2013 09:01:26 PM JST
javascript:(function(){var get=window.getSelection().toString();var nodes=document.getElementsByTagName("a");var n=0;for(i=0;i<nodes.length;i++){if(get!=""){if(get==nodes[i].innerText){n=1;window.open("http://www.aguse.jp/?m=w&url="+nodes[i]);window.open("http://www.google.com");break;}}}if(n==0){if(get.match(/[.]/)){window.open("http://www.aguse.jp/?m=w&url="+get);window.open("http://www.google.com");}}if(get==""){window.open("http://www.aguse.jp/?m=w&url="+document.URL);window.open("http://www.aguse.jp/?m=w&url="+document.URL);}})();
* Sat 18 May 2013 09:07:49 PM JST
javascript:(function(){var get=window.getSelection().toString();var nodes=document.getElementsByTagName("a");var n=0;var alexa="http://alexa.com/data/details/main?url=";var netcraft="http://toolbar.netcraft.com/site_report?url=";var aguse="http://www.aguse.jp/?m=w&url=";for(i=0;i<nodes.length;i++){if(get!=""){if(get==nodes[i].innerText){n=1;window.open(alexa+nodes[i]);window.open(netcraft+nodes[i]);window.open(aguse+nodes[i]);break;}}}if(n==0){if(get.match(/[.]/)){window.open(alexa+get);window.open(netcraft+get);window.open(aguse+get);}}if(get==""){window.open(alexa+document.URL);window.open("http://builtwith.com?"+location.href);window.open(netcraft+document.URL);window.open(aguse+document.URL);}})();
* Sat 18 May 2013 09:37:27 PM JST
/usr/bin/rsync -a --rsync-path="sudo rsync" --exclude=/backup --exclude=/share/* --exclude=/data/* --exclude=/lost+found --exclude=/sys/* --exclude=/dev/* --exclude=/media/* --exclude=/proc/* --exclude=/tmp/* --exclude=/run/* --exclude=/mnt --exclude=/lib/udev/devices/console --exclude=/lib/udev/devices/loop0 --exclude=/lib/udev/devices/null --exclude=/lib/udev/devices/ppp --exclude=/lib/udev/devices/net/tun --exclude=/etc/fstab --exclude=/etc/crypttab --exclude=/var/run/* --exclude=/var/lock/* --exclude=/lib/modules/*/volatile/.mounted --exclude=/var/cache/apt/archive/* --exclude=/home/*/.mozilla/firefox/*.default/Cache/* --exclude=/home/*/.cache/google-chrome/Default/* --exclude=/root/.mozilla/firefox/*.default/Cache/* --exclude=/root/.cache/google-chrome/Default/* --link-dest=/data/.backup/knight/20130511.incr / /data/.backup/knight/20130518.incr

* Sat 18 May 2013 09:37:44 PM JST
rsync -avz --rsync-path="sudo rsync" --exclude-from=/root/.zsh/ni_rsync_exclude.list --link-dest=/data/.backup/knight/20130511.incr / ki:/data/.backup/knight/`date +%Y%m%d`.incr
* Sat 18 May 2013 09:37:56 PM JST
/usr/bin/rsync -a --rsync-path="sudo rsync" --exclude=/backup --exclude=/share/* --exclude=/data/* --exclude=/lost+found --exclude=/sys/* --exclude=/dev/* --exclude=/media/* --exclude=/proc/* --exclude=/tmp/* --exclude=/run/* --exclude=/mnt --exclude=/lib/udev/devices/console --exclude=/lib/udev/devices/loop0 --exclude=/lib/udev/devices/null --exclude=/lib/udev/devices/ppp --exclude=/lib/udev/devices/net/tun --exclude=/etc/fstab --exclude=/etc/crypttab --exclude=/var/run/* --exclude=/var/lock/* --exclude=/lib/modules/*/volatile/.mounted --exclude=/var/cache/apt/archive/* --exclude=/home/*/.mozilla/firefox/*.default/Cache/* --exclude=/home/*/.cache/google-chrome/Default/* --exclude=/root/.mozilla/firefox/*.default/Cache/* --exclude=/root/.cache/google-chrome/Default/* --link-dest=/data/.backup/knight/20130511.incr / /data/.backup/knight/20130518.incr


rsync -avz --rsync-path="sudo rsync" --exclude-from=/root/.zsh/ni_rsync_exclude.list --link-dest=/data/.backup/knight/20130511.incr / ki:/data/.backup/knight/`date +%Y%m%d`.incr
* Mon 20 May 2013 06:31:59 PM JST
■環境スクリーンとプロジェクター　［EF890440--］
プロジェクターについている地球儀にピンを刺すと、スクリーンにその景色が映し出される。
* Mon 20 May 2013 06:32:05 PM JST
環境スクリーンとプロジェクター
* Tue 21 May 2013 07:43:30 PM JST
service postgresql start && service metasploit start
* Wed 22 May 2013 04:47:29 PM JST
http://www.cybersyndrome.net/plr5.html
* Wed 22 May 2013 04:49:15 PM JST
lis
* Wed 22 May 2013 04:49:19 PM JST
lis2
* Wed 22 May 2013 04:49:38 PM JST
http://www.cybersyndrome.net/pla5.html
* Wed 22 May 2013 04:50:17 PM JST
speed = proxylist.trim_proxy_from_html('http://www.cybersyndrome.net/plr5.html')
* Wed 22 May 2013 04:50:20 PM JST
anonimous = proxylist.trim_proxy_from_html('http://www.cybersyndrome.net/pla5.html')
* Wed 22 May 2013 07:25:47 PM JST
        cd /opt/google/chrome/
        hexedit chrome

* Wed 22 May 2013 07:26:03 PM JST
        3- you will see hex editor program press Tab to switch to ascii
        4-press ctrl+s to search for "geteuid" and modify it to "getppid"
        5- ctrl+X to exit then press y for saving changes

* Wed 22 May 2013 07:26:15 PM JST
3- you will see hex editor program 
* Wed 22 May 2013 07:26:28 PM JST
4-
* Wed 22 May 2013 07:26:36 PM JST
5- 
* Wed 22 May 2013 07:26:42 PM JST
for saving changes
* Thu 23 May 2013 06:51:07 PM JST
http://depositfiles.com/files/7o4yazfx7   111DNHDTA212.part01.rar 
http://depositfiles.com/files/vf4ep610z   111DNHDTA212.part02.rar 
http://depositfiles.com/files/kxs4lcj5q   111DNHDTA212.part03.rar 
http://depositfiles.com/files/kduvsfpm5   111DNHDTA212.part04.rar 
http://depositfiles.com/files/0asft5qdo   111DNHDTA212.part05.rar 
http://depositfiles.com/files/8yn8mro44   111DNHDTA212.part06.rar 
http://depositfiles.com/files/3x392t5r3   111DNHDTA212.part07.rar 
http://depositfiles.com/files/r11u2sx8r   111DNHDTA212.part08.rar 
http://depositfiles.com/files/eb5lsh6fc   111DNHDTA212.part09.rar 
http://depositfiles.com/files/n5hifviid   111DNHDTA212.part10.rar 
http://depositfiles.com/files/b30slm0h8   111DNHDTA212.part11.rar 
http://depositfiles.com/files/diec1j64c   111DNHDTA212.part12.rar 
http://depositfiles.com/files/frqs58ue0   111DNHDTA212.part13.rar 
http://depositfiles.com/files/8sl1k5j9t   111DNHDTA212.part14.rar 
http://depositfiles.com/files/wtsxmf4qk   111DNHDTA212.part15.rar
* Thu 23 May 2013 06:51:25 PM JST
http://depositfiles.com/files/7o4yazfx7/111DNHDTA212.part01.rar 
* Thu 23 May 2013 06:52:01 PM JST
http://depositfiles.com/files/7o4yazfx7111DNHDTA212.part01.rar 
http://depositfiles.com/files/vf4ep610z111DNHDTA212.part02.rar 
http://depositfiles.com/files/kxs4lcj5q111DNHDTA212.part03.rar 
http://depositfiles.com/files/kduvsfpm5111DNHDTA212.part04.rar 
http://depositfiles.com/files/0asft5qdo111DNHDTA212.part05.rar 
http://depositfiles.com/files/8yn8mro44111DNHDTA212.part06.rar 
http://depositfiles.com/files/3x392t5r3111DNHDTA212.part07.rar 
http://depositfiles.com/files/r11u2sx8r111DNHDTA212.part08.rar 
http://depositfiles.com/files/eb5lsh6fc111DNHDTA212.part09.rar 
http://depositfiles.com/files/n5hifviid111DNHDTA212.part10.rar 
http://depositfiles.com/files/b30slm0h8111DNHDTA212.part11.rar 
http://depositfiles.com/files/diec1j64c111DNHDTA212.part12.rar 
http://depositfiles.com/files/frqs58ue0111DNHDTA212.part13.rar 
http://depositfiles.com/files/8sl1k5j9t111DNHDTA212.part14.rar 
http://depositfiles.com/files/wtsxmf4qk111DNHDTA212.part15.rar
* Sat 25 May 2013 03:19:05 PM JST
os.path.realpath(latest)
* Sat 25 May 2013 03:20:10 PM JST
    print(os.path.realpath(latest))
    link_dest = rsync_link_dest_opt + os.path.realpath(latest)

* Sat 25 May 2013 03:20:16 PM JST

* Sat 25 May 2013 03:20:16 PM JST

* Sat 25 May 2013 03:20:16 PM JST
    src = '/'

* Sat 25 May 2013 03:20:34 PM JST

* Sat 25 May 2013 03:20:34 PM JST

* Sat 25 May 2013 03:20:34 PM JST
    import pdb; pdb.set_trace()

* Sat 25 May 2013 03:21:08 PM JST

* Sat 25 May 2013 03:21:08 PM JST

* Sat 25 May 2013 03:21:08 PM JST
    incr_backup_name = date + incr_ext

* Sat 25 May 2013 03:27:08 PM JST

* Sat 25 May 2013 03:27:08 PM JST

* Sat 25 May 2013 03:27:08 PM JST
    print(os.path.realpath(latest))

* Sat 25 May 2013 03:27:09 PM JST

* Sat 25 May 2013 03:27:09 PM JST

* Sat 25 May 2013 03:27:09 PM JST
    print(link_dest)

* Sat 25 May 2013 03:28:48 PM JST
ki:' +
* Thu 30 May 2013 01:19:22 PM JST
javascript:void((function(){var sir=document.createElement('script');sir.setAttribute('src','http://cdnjs.cloudflare.com/ajax/libs/require.js/0.26.0/require.min.js');sir.setAttribute('type','text/javascript');document.getElementsByTagName('head')[0].appendChild(sir);var sib=document.createElement('script');sib.setAttribute('src','http://jarred.github.com/src-img/js/app/bookmarklet.js?version=0.66');sib.setAttribute('type','text/javascript');document.getElementsByTagName('head')[0].appendChild(sib);})());
* Thu 30 May 2013 01:19:29 PM JST
cloudflare.com
* Fri 31 May 2013 05:57:21 PM JST
                                 
* Fri 31 May 2013 06:01:12 PM JST
                      
* Fri 31 May 2013 06:01:15 PM JST
                      
* Fri 31 May 2013 06:09:43 PM JST

* Fri 31 May 2013 06:09:43 PM JST

* Fri 31 May 2013 06:09:43 PM JST
                print('\n***** ')
