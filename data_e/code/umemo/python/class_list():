* List comprehensions
>>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

and it’s equivalent to:

>>> combs = []
>>> for x in [1,2,3]:
...     for y in [3,1,4]:
...         if x != y:
...             combs.append((x, y))
...
>>> combs
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

>>> [(x, x**2) for x in range(6)]
[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]

>>> vec = [[1,2,3], [4,5,6], [7,8,9]]
>>> [num for elem in vec for num in elem]
[1, 2, 3, 4, 5, 6, 7, 8, 9]

>>> [[row[i] for row in matrix] for i in range(4)]
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

** timeit
>>> matrix = [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12],]
>>> timeit -n 100000 zip(*matrix)
100000 loops, best of 3: 1.9 µs per loop

>>> timeit -n 100000 [[row[i] for row in matrix] for i in range(4)]
100000 loops, best of 3: 4.97 µs per loop

* --- DATAHOLDER ---
* collections.deque : (“first-in, first-out”)
>>> from collections import deque
>>> queue = deque(["Eric", "John", "Michael"])
>>> queue.append("Terry")           # Terry arrives
>>> queue.append("Graham")          # Graham arrives
>>> queue.popleft()                 # The first to arrive now leaves
'Eric'
>>> queue.popleft()                 # The second to arrive now leaves
'John'
>>> queue                           # Remaining queue in order of arrival
deque(['Michael', 'Terry', 'Graham'])

** rotate
>>> d = collections.deque(xrange(10))
>>> d
deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> d.rotate(2)
>>> d
deque([8, 9, 0, 1, 2, 3, 4, 5, 6, 7])
>>> d.rotate(5)
>>> d
deque([3, 4, 5, 6, 7, 8, 9, 0, 1, 2])

* collections.OrderedDict : no sorted dictionary
>>> from collections import OrderedDict
>>> d = OrderedDict([('tes', 'hello'), ('world', 'yahoo'), ('google', 'bing')])
>>> for k, v in d.iteritems():
....:     print(k + ": " + v)
tes: hello
world: yahoo
google: bing

# default
>>> d = dict(tes='hello', world='yahoo', google='bing')
{'google': 'bing', 'tes': 'hello', 'world': 'yahoo'}
>>> for k, v in d.iteritems():
....:     print(k + ": " + v)
world: yahoo
google: bing
tes: hello

# alternate example
>>> d = collections.OrderedDict()
>>> d['a'] = 'A'
>>> d['b'] = 'B'
>>> d['c'] = 'C'
>>> for k, v in d.items():
...     print k, v
a A
c C
b B

# default
>>> d = {}
>>> d['a'] = 'A'
>>> d['b'] = 'B'
>>> d['c'] = 'C'
>>> for k, v in d.items():
...         print k, v
b B
a A
c C

# compare
>>> d1 = collections.OrderedDict()
>>> d1['a'] = 'A'
>>> d1['b'] = 'B'
>>> d1['c'] = 'C'
>>> d2 = collections.OrderedDict()
>>> d2['c'] = 'C'
>>> d2['b'] = 'B'
>>> d2['a'] = 'A'
>>> d1==d2
False

>>> d1 = {}
>>> d1['a'] = 'A'
>>> d1['b'] = 'B'
>>> d1['c'] = 'C'
>>> d2 = {}
>>> d2['c'] = 'C'
>>> d2['b'] = 'B'
>>> d2['a'] = 'A'
>>> print d1 == d2
>>> d1 == d2
True

* collections.defaultdict : no raise KeyError
>>> from collections import defaultdict
>>> d = defaultdict(lambda : 'default value', foo='bar')
>>> d['foo']
'bar'
>>> d['bar']
'default value'

* collections.namedtuple :
>>> from collections import namedtuple
>>> Person = namedtuple('Person', 'name age gender')
>>> bob = Person(name='Bob', age=30, gender='male')
>>> bob
Person(name='Bob', age=30, gender='male')

>>> jane = Person(name='Jane', age=29, gender='female')
>>> jane
Person(name='Jane', age=29, gender='female')

>>> bob.name
'Bob'

*alternate*
>>> with_class = collections.namedtuple(
...     'Person', 'name klass age gender',
...     rename=True)
...
>>> with_class._fields
('name', 'klass', 'age', 'gender')
>>> w = with_class('joe', 'world', 5, 'man')
>>> w
Person(name='joe', klass='world', age=5, gender='man')
* collections.Counter : count list (multisets)
>>> collections.Counter(['a', 'b', 'c', 'a', 'b', 'b'])
Counter({'b': 3, 'a': 2, 'c': 1})

>>> collections.Counter({'a':2, 'b':3, 'c':1})
Counter({'b': 3, 'a': 2, 'c': 1})

>>> c = collections.Counter(a=2, b=3, c=1)
Counter({'b': 3, 'a': 2, 'c': 1})
>>> c.update('abcdaab')
>>> c
Counter({'a': 5, 'b': 5, 'c': 2, 'd': 1})

>>> c.most_common(3)
[('a', 5), ('b', 5), ('c', 2)]
>>> c.most_common(1)
[('a', 5)]

*alternate*
>>> with open('/usr/share/dict/words', 'rt') as f:
...    for line in f:
...        c.update(line.rstrip().lower())
>>> c.most_common(3)

>>> c.elements()
<itertools.chain at 0x8f3110c>
>>> list(c.elements())
['a', 'a', 'a', 'a', 'a', 'c', 'c', 'b', 'b', 'b', 'b', 'b', 'd']

>>> c1 = collections.Counter(['a', 'b', 'c', 'a', 'b', 'b'])
>>> c2 = collections.Counter('alphabet')
>>> c1
Counter({'b': 3, 'a': 2, 'c': 1})
>>> c2
Counter({'a': 2, 'b': 1, 'e': 1, 'h': 1, 'l': 1, 'p': 1, 't': 1})

>>> c1 + c2
Counter({'a': 4, 'b': 4, 'c': 1, 'e': 1, 'h': 1, 'l': 1, 'p': 1, 't': 1})

>>> c1 - c2
Counter({'b': 2, 'c': 1})

>>> c1 & c2
Counter({'a': 2, 'b': 1})

>>> c1 | c2
Counter({'b': 3, 'a': 2, 'c': 1, 'e': 1, 'h': 1, 'l': 1, 'p': 1, 't': 1})

* set()
>>> a = set('abracadabra')
>>> b = set('alacazam')
>>> a                                  # unique letters in a
set(['a', 'r', 'b', 'c', 'd'])
>>> a - b                              # letters in a but not in b
set(['r', 'd', 'b'])
>>> a | b                              # letters in either a or b
set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'])
>>> a & b                              # letters in both a and b
set(['a', 'c'])
>>> a ^ b                              # letters in a or b but not both
set(['r', 'd', 'b', 'm', 'z', 'l'])

* bisect : manipulating sorted lists
>>> import bisect
>>> scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]
>>> bisect.insort(scores, (300, 'ruby'))
>>> scores
[(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]

* heapq : the sequence (seq[0]) is the smallest
>>> from heapq import heapify, heappop, heappush
>>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
>>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
>>> heapify(data)
>>> data
[0, 1, 2, 6, 3, 5, 4, 7, 8, 9]
>>> heappush(data, -5)
>>> data
[-5, 0, 2, 6, 1, 5, 4, 7, 8, 9, 3]
>>> heappush(data, -10)
>>> data
[-10, 0, -5, 6, 1, 2, 4, 7, 8, 9, 3, 5]
>>> heappush(data, 11)
>>> data
[-10, 0, -5, 6, 1, 2, 4, 7, 8, 9, 3, 5, 11]
