-*- coding: utf-8-unix;  -*-
* scratch
** Fri 02 Nov 2012 12:27:43 PM JST
(defun my-make-scratch (&optional arg)
  (interactive)
  (progn
    (set-buffer (get-buffer-create "*scratch*"))
    (funcall initial-major-mode)
    (erase-buffer)
    (when
	(and initial-scratch-message
	     (not inhibit-startup-message))
      (insert initial-scratch-message))
    (or arg (progn (setq arg 0)
                   (switch-to-buffer "*scratch*")))
    (cond ((= arg 0) (message "*scratch* is cleared up."))
          ((= arg 1) (message "another *scratch* is created")))))

(add-hook 'kill-buffer-query-functions
		  (lambda ()
			(if (string= "*scratch*" (buffer-name))
				(progn (my-make-scratch 0) nil)
			  t)))

(add-hook 'after-save-hook
		  (lambda ()
			(unless (member (get-buffer "*scratch*") (buffer-list))
			  (my-make-scratch 1))))

(clone-buffer (format-time-string "%y_%m_%d_%H%M%S.scratch.el"))
#<buffer *scratch*<2>>

(format-time-string "%y_%m_%d_%H%M%S.scratch.el")
"12_11_02_120657.scratch.el"

(current-time-string)
"Fri Nov  2 12:21:29 2012"

(format-time-string "%c")
"Fri 02 Nov 2012 12:22:30 PM JST"
(insert "** " (format-time-string "%c") "\n")

** Fri 02 Nov 2012 12:40:54 PM JST
before-save-hook
(rope-before-save-actions delete-trailing-whitespace check-misspell text-adjust-space-before-save-if-needed)


(delete-trailing-whitespace)







(delete-trailing-blank-lines)
nil

nil

** Fri 02 Nov 2012 11:21:42 PM JST
(symbol-file 'my)

(defvar dirs nil)
dirs
("/root/.emacs.d/" "/root/.emacs.d/")
(setq dirs nil)

(let (dirs
	  attrs
	  (pending (list my-emacs-dir)))
  ;; This loop does a breadth-first tree walk on DIR's subtree,
  ;; putting each subdir into DIRS as its contents are examined.
  (while pending
	(push (pop pending) dirs)
      (let* ((this-dir (car dirs))
			 (contents (directory-files this-dir))
	     (default-directory this-dir))
	  (dolist (file contents)
	    ;; The lower-case variants of RCS and CVS are for DOS/Windows.
	    (unless (member file '("." ".." "RCS" "CVS" "rcs" "cvs"))
	      (when (and (string-match "\\`[[:alnum:]]" file)
					 ;; Avoid doing a `stat' when it isn't necessary
					 ;; because that can cause trouble when an NFS server
					 ;; is down.
					 (not (string-match "\\.elc?\\'" file))
			 (file-directory-p file))
			(let ((expanded (expand-file-name file)))
		  (unless (file-exists-p (expand-file-name ".nosearch"
												   expanded))
		    (setq pending (nconc pending (list expanded))))))))))
  dirs)
("/root/.emacs.d/elisp/expand-region/features/support/vendor/python-el"
"/root/.emacs.d/elisp/expand-region/features/support/vendor"
"/root/.emacs.d/elisp/multiple-cursors/util/vendor"
"/root/.emacs.d/elisp/multiple-cursors/util/espuds"
"/root/.emacs.d/elisp/multiple-cursors/util/ecukes"
"/root/.emacs.d/elisp/multiple-cursors/features/support"
"/root/.emacs.d/elisp/multiple-cursors/features/step-definitions"
"/root/.emacs.d/elisp/expand-region/util/espuds"
"/root/.emacs.d/elisp/expand-region/util/ecukes"
"/root/.emacs.d/elisp/expand-region/features/support"
"/root/.emacs.d/elisp/expand-region/features/step-definitions"
"/root/.emacs.d/elisp/multiple-cursors/util"
"/root/.emacs.d/elisp/multiple-cursors/features"
"/root/.emacs.d/elisp/expand-region/util"
"/root/.emacs.d/elisp/expand-region/features"
"/root/.emacs.d/elisp/color-theme-6.6.0/themes"
"/root/.emacs.d/elisp/archives/marmalade"
"/root/.emacs.d/elisp/archives/gnu"
"/root/.emacs.d/init/plugin"
"/root/.emacs.d/init/mode"
"/root/.emacs.d/elisp/yasnippet"
"/root/.emacs.d/elisp/rainbow-delimiters-1.3.4"
"/root/.emacs.d/elisp/mylisp"
"/root/.emacs.d/elisp/multiple-cursors"
"/root/.emacs.d/elisp/mark-multiple"
"/root/.emacs.d/elisp/expand-region"
"/root/.emacs.d/elisp/color-theme-6.6.0"
"/root/.emacs.d/elisp/archives"
"/root/.emacs.d/init"
"/root/.emacs.d/elisp"
"/root/.emacs.d/")


nil
dirs
("/root/.emacs.d/")


nil

nil
(list my-emacs-dir)
("/root/.emacs.d/")

nil


nil
normal-top-level-add-subdirs-inode-list
((1261654 64768) (1261653 64768) (1261652 64768) (1261649 64768) (1261617 64768) (1094169 64768) (1094159 64768) (1254671 64768) (1254115 64768) (1253533 64768) (34094 64768) (34093 64768) ...)


(symbol-file 'update-directory-autoloads)
"/usr/share/emacs/23.2/lisp/emacs-lisp/autoload.elc"
(defun dirss (arg)
  arg)

(dirss (let (dirs
			 attrs
			 (pending (list my-emacs-dir)))
		 ;; This loop does a breadth-first tree walk on DIR's subtree,
		 ;; putting each subdir into DIRS as its contents are examined.
		 (while pending
		   (push (pop pending) dirs)
		   (let* ((this-dir (car dirs))
				  (contents (directory-files this-dir))
				  (default-directory this-dir))
			 (dolist (file contents)
			   ;; The lower-case variants of RCS and CVS are for DOS/Windows.
			   (unless (member file '("." ".." "RCS" "CVS" "rcs" "cvs"))
				 (when (and (string-match "\\`[[:alnum:]]" file)
							;; Avoid doing a `stat' when it isn't necessary
							;; because that can cause trouble when an NFS server
							;; is down.
							(not (string-match "\\.elc?\\'" file))
							(file-directory-p file))
				   (let ((expanded (expand-file-name file)))
					 (unless (file-exists-p (expand-file-name ".nosearch"
															  expanded))
					   (setq pending (nconc pending (list expanded))))))))))
		 dirs))
("/root/.emacs.d/elisp/expand-region/features/support/vendor/python-el" "/root/.emacs.d/elisp/expand-region/features/support/vendor" "/root/.emacs.d/elisp/multiple-cursors/util/vendor" "/root/.emacs.d/elisp/multiple-cursors/util/espuds" "/root/.emacs.d/elisp/multiple-cursors/util/ecukes" "/root/.emacs.d/elisp/multiple-cursors/features/support" "/root/.emacs.d/elisp/multiple-cursors/features/step-definitions" "/root/.emacs.d/elisp/expand-region/util/espuds" "/root/.emacs.d/elisp/expand-region/util/ecukes" "/root/.emacs.d/elisp/expand-region/features/support" "/root/.emacs.d/elisp/expand-region/features/step-definitions" "/root/.emacs.d/elisp/multiple-cursors/util" "/root/.emacs.d/elisp/multiple-cursors/features" "/root/.emacs.d/elisp/expand-region/util" "/root/.emacs.d/elisp/expand-region/features" "/root/.emacs.d/elisp/color-theme-6.6.0/themes" "/root/.emacs.d/elisp/archives/marmalade" "/root/.emacs.d/elisp/archives/gnu" "/root/.emacs.d/init/plugin" "/root/.emacs.d/init/mode" "/root/.emacs.d/elisp/yasnippet" "/root/.emacs.d/elisp/rainbow-delimiters-1.3.4" "/root/.emacs.d/elisp/mylisp" "/root/.emacs.d/elisp/multiple-cursors" "/root/.emacs.d/elisp/mark-multiple" "/root/.emacs.d/elisp/expand-region" "/root/.emacs.d/elisp/color-theme-6.6.0" "/root/.emacs.d/elisp/archives" "/root/.emacs.d/init" "/root/.emacs.d/elisp" "/root/.emacs.d/")

** Sat 03 Nov 2012 03:13:45 PM JST


(its-defrule "dhi" "でぃ")
** Sun 04 Nov 2012 10:56:46 PM JST
(symbol-file 'toggle-input-method)
"/usr/share/emacs/23.2/lisp/international/mule-cmds.elc"


(dolist (elt
		 '(max-lisp-eval-depth
		   max-specpdl-size
		   enable-local-variables
		   message-log-max
		   inhibit-startup-message
		   initial-scratch-message
		   tab-width
		   cua-mode t nil
		   echo-keystrokes
		   kill-whole-line
		   process-kill-without-query
		   w32-hide-mouse-on-key
		   bookmark-save-flag
		   view-read-only
		   visible-bell
		   delete-by-moving-to-trash
		   large-file-warning-threshold
		   use-file-dialog
		   auto-save-timeout
		   auto-save-interval
		   version-control
		   kept-old-versions
		   kept-new-versions
		   delete-old-versions
		   backup-by-copying
		   backup-by-copying-when-mismatch
		   vc-directory-exclusion-list
		   overflow-newline-into-fringe
		   thumbs-thumbsdir
		   savehist-file
		   bookmark-default-file
		   server-auth-dir
		   trash-directory
		   safe-local-variable-values
		   ))
  (unless (custom-variable-p elt)
	(message "%s" elt)))
nil
(custom-variable-p 'process-kill-without-query)
nil

(symbol-file 'custom-set-variables)
"/usr/share/emacs/23.2/lisp/custom.elc"

(get-file-buffer)

(defun get-start-conf-file ()
  (interactive)
  ""
  (cond ((eq major-mode 'org-mode)
		 (switch-or-find "10_org_mode_init.el" my-init-mode-dir))

))

(defsubst switch-or-find (bufname dir)
  (if (get-buffer bufname)
	  (switch-to-buffer bufname)
	(find-file (expand-file-name bufname dir))))

(global-set-key (kbd "s-s") 'get-start-conf-file)

(string-match "org-mode" "10_org-mode_init.el")



(global-set-key (kbd "s-s") 'iswitchb)

(symbol-file 'iswitchb)
nil

(get-file-buffer (expand-file-name "10_org_mode_init.el" my-init-mode-dir))
#<buffer 10_org_mode_init.el>

nil


(load "iswitchb")
t
(iswitchb-mode 1)

** Mon 05 Nov 2012 01:34:46 AM JST
(global-set-key (kbd "s-s") 'get-start-conf-file)
(defun get-start-conf-file ()
  (interactive)
  ""
  (let ((mj-name (replace-in-string (symbol-name major-mode) "-" "_")))
  (unless (switch-major-conf-buffer mj-name)
	(unless (find-major-conf-file mj-name my-init-mode-dir)
	  (find-file (concat my-init-mode-dir "10_" mj-name "_init.el"))))))

(defun switch-major-conf-buffer (mj-name)
  (let (done
		(bf-list (buffer-list)))
	(while (and bf-list (not done))
	  (if (string-match mj-name (buffer-name (car bf-list)))
		  (progn (switch-to-buffer (car bf-list))
				 (setq done t))
		(setq bf-list (cdr bf-list))))
	done))

(defun find-major-conf-file (mj-name dir)
  (let (done
		this-file
		(file-list (directory-files dir)))
	(while (and file-list (not done))
	  (setq this-file (car file-list))
	  (unless (member this-file '("." ".." "RCS" "CVS" "rcs" "cvs"))
		(when (and (not (file-directory-p this-file))
				   (string-match mj-name this-file)
				   (not (string-match "\\.elc?\\'" this-file)))
		  (find-file (expand-file-name this-file dir))
		  (setq done t)))
	  (setq file-list (cdr file-list)))
	done))

(switch-major-setting-buffer)



(replace-string "-" "_")


nil

(replace-in-string "org-mode" "-" "_")
"org_mode"
(let ((mj-mode (replace-in-string major-mode "-" "_")))
(dolist (bf (buffer-list))
  ()))



(buffer-name (car (cdr (buffer-list))))
"scratch_log.org"

"*scratch*"


(string-match "" (buffer-file-name (car (buffer-list))))
(buffer-file-name (car (buffer-list)))
nil
(buffer-name)
"*scratch*"

nil

(global-set-key (kbd "s-s") 'tes)

(replace-in-string major-mode "-" "_")
(typep major-mode)
(type-of major-mode)
symbol
(stringp (car (list major-mode)))
nil
(symbol-name major-mode)
"lisp-interaction-mode"

lisp-interaction-mode

(lisp-interaction-mode)

(symbol-value 'major-mode)
(symbol)
lisp-interaction-mode
(sequencep major-mode)
nil

lisp-interaction-mode

(string-match "org-mode" "10_org-mode_init.el")
3


(global_set_key (kbd "s_s") 'get_start_conf_nil
nil
nil
file)

(buffer-list)
(#<buffer *scratch*> #<buffer subroutines_init.el> #<buffer *w3m*> #<buffer allinone.org> #<buffer  *Minibuf-1*> #<buffer scratch_log.org> #<buffer *Messages*> #<buffer memo.org> #<buffer *init log*> #<buffer  *Minibuf-0*> #<buffer  *code-conversion-work*> #<buffer  *Echo Area 0*> ...)

(#<buffer *scratch*> #<buffer scratch_log.org> #<buffer  *Minibuf-1*> #<buffer allinone.org> #<buffer *Backtrace*> #<buffer *Apropos*> #<buffer *Messages*> #<buffer memo.org> #<buffer *init log*> #<buffer  *Minibuf-0*> #<buffer  *code-conversion-work*> #<buffer  *Echo Area 0*> ...)
(switch-to-buffer (car (cdr (buffer-list))))
#<buffer subroutines_init.el>

#<buffer *scratch*>

"*scratch*"


#<buffer *scratch*>



(defsubst switch-or-find (bufname dir)
  (if (get-buffer bufname)
	  (switch-to-buffer bufname)
	(find-file (expand-file-name bufname dir))))

** Mon 05 Nov 2012 03:26:08 PM JST
(locate-file "linkd")




(global-set-key [C-mouse-5]
                '(lambda ()(interactive)(text-scale-increase -1)))
(global-set-key [C-mouse-4]
                '(lambda ()(interactive)(text-scale-increase 1)))
(global-set-key [C-mouse-2]
                '(lambda ()(interactive)(text-scale-increase 0)))




(define-key hs-minor-mode-map (kbd "M-i") 'hs-toggle-hiding)
** Tue 06 Nov 2012 10:13:40 PM JST
(symbol-file 'timestamp-insert)
"/root/.emacs.d/init/test_init.elc"

(number-to-string)
(daemonp)
nil

()
temp-bm-buffer



(defvar temp-bm-buffer nil)
(defun switch-temp-bm-buffer (&optional arg)
  (interactive "p")
  (if (eq arg 4) (setq temp-bm-buffer nil))
  (when (or (not temp-bm-buffer)
		  (not (get-buffer temp-bm-buffer)))
	  (setq temp-bm-buffer (current-buffer))
	  (minibuffer-message "Set tmp buf %s" (buffer-name (current-buffer))))
  (switch-to-buffer temp-bm-buffer))

(global-set-key (kbd "C-: C-u") 'switch-temp-bm-buffer)

(not temp-bm-buffer)
t

** Sun 11 Nov 2012 05:37:55 PM JST

(daemonp)
nil
most-positive-fixnum
(/ 536870911 1024 1024)
511
(buffer-modified-p)
t


(locate-library "everything")
nil
管理

(require 'deferred)
(deferred:$
(deferred:process "ps" "-p" (format "%d" (emacs-pid)) "-o")
)
(emacs-pid)
6671

** Mon 12 Nov 2012 12:03:17 PM JST
local-function-key-map
(keymap (backspace . [127])
 (kp-delete . [4])
 (delete . [4])
 keymap (S-iso-lefttab . [backtab])
 (iso-lefttab . [backtab])
 (M-escape . [134217755])
 (M-return . [134217741])
 (M-clear . [134217740])
 (M-linefeed . [134217738])
 (M-tab . [134217737])
 (M-delete . [134217855])
 (M-backspace . [134217855])
 keymap (C-tab . [134217737])
 (escape . [27])
 (return . [13])
 (clear . [12])
 (linefeed . [10])
 (tab . [9])
 (kp-equal . [61])
 (kp-divide . [47])
 (kp-decimal . [46])
 (kp-subtract . [45])
 (kp-separator . [44])
 (kp-add . [43])
 (kp-multiply . [42])
 (kp-enter . [13])
 (kp-tab . [9])
 (kp-space . [32])
 (kp-9 . [57])
 (kp-8 . [56])
 (kp-7 . [55])
 (kp-6 . [54])
 (kp-5 . [53])
 (kp-4 . [52])
 (kp-3 . [51])
 (kp-2 . [50])
 (kp-1 . [49])
 (kp-0 . [48])
 (24 keymap (64 keymap (99 . event-apply-control-modifier)
 (83 . event-apply-shift-modifier)
 (97 . event-apply-alt-modifier)
 (109 . event-apply-meta-modifier)
 (115 . event-apply-super-modifier)
 (104 . event-apply-hyper-modifier)
)
)
 (0 . [67108896])
 (C-S-kp-9 . [C-S-prior])
 (C-S-kp-8 . [C-S-up])
 (C-S-kp-7 . [C-S-home])
 (C-S-kp-6 . [C-S-right])
 (C-S-kp-4 . [C-S-left])
 (C-S-kp-3 . [C-S-next])
 (C-S-kp-2 . [C-S-down])
 (C-S-kp-1 . [C-S-end])
 (C-S-kp-prior . [C-S-prior])
 (C-S-kp-up . [C-S-up])
 (C-S-kp-home . [C-S-home])
 (C-S-kp-right . [C-S-right])
 (C-S-kp-left . [C-S-left])
 (C-S-kp-next . [C-S-next])
 (C-S-kp-down . [C-S-down])
 (C-S-kp-end . [C-S-end])
 (S-kp-prior . [S-prior])
 (S-kp-up . [S-up])
 (S-kp-home . [S-home])
 (S-kp-right . [S-right])
 (S-kp-left . [S-left])
 (S-kp-next . [S-next])
 (S-kp-down . [S-down])
 (S-kp-end . [S-end])
 (kp-delete . [127])
 (delete . [127])
 (backspace . [127])
 (kp-insert . [insert])
 (kp-begin . [begin])
 (kp-end . [end])
 (M-kp-next . [M-next])
 (kp-next . [next])
 (kp-prior . [prior])
 (kp-down . [down])
 (kp-right . [right])
 (kp-up . [up])
 (kp-left . [left])
 (kp-home . [home]))



(setq local-function-key-map (delq '(kp-tab . [9]) local-function-key-map))
(setq local-function-key-map (delq '(kp-enter . [13]) local-function-key-map))
(local-set-key (kbd "C-i") 'end-of-line)
(local-set-key [tab] 'tab-to-tab-stop)
(describe-unbound-keys 5)
"C-x z
C-x y
C-x x
C-x w
C-x v
C-x u
C-x t
C-x s
C-x r
C-x q
C-x p
C-x o
C-x n
C-x m
C-x l
C-x k
C-x j
C-x i
C-x h
C-x g
C-x f
C-x e
C-x d
C-x c
C-x b
C-x a
C-q z
C-q y
C-q x
C-q w
C-q v
C-q u
C-q t
C-q s
C-q r
C-q q
C-q p
C-q o
C-q n
C-q m
C-q l
C-q k
C-q j
C-q i
C-q h
C-q g
C-q f
C-q e
C-q d
C-q c
C-q b
C-q a
C-e z
C-e y
C-e x
C-e w
C-e v
C-e u
C-e t
C-e s
C-e r
C-e q
C-e p
C-e o
C-e n
C-e m
C-e l
C-e k
C-e j
C-e i
C-e h
C-e g
C-e f
C-e e
C-e d
C-e b
C-e a
C-c z
C-c y
C-c x
C-c w
C-c v
C-c u
C-c t
C-c s
C-c r
C-c q
C-c p
C-c o
C-c n
C-c m
C-c l
C-c k
C-c j
C-c i
C-c h
C-c g
C-c f
C-c e
C-c d
C-c c
C-c b
C-c a"

""

** Tue 13 Nov 2012 11:12:18 PM JST
(setq frame-title-format nil)

(require 'calendar)

(defun insdate-insert-current-date (&optional omit-day-of-week-p)
  "Insert today's date using the current locale.
  With a prefix argument, the date is inserted without the day of
  the week."
  (interactive "P*")
  (insert (calendar-date-string (calendar-current-date) nil
                  omit-day-of-week-p)))


(global-set-key (kbd "H-@") 'insdate-insert-current-date)

Tuesday, November 13, 2012
November 13, 2012
November 13, 2012
** Tue 13 Nov 2012 11:30:28 PM JST
(defun reverse-words (beg end)
  "Reverse the order of words in region."
  (interactive "*r")
  (apply
   'insert
   (reverse
	(split-string
	 (delete-and-extract-region beg end) "\\b"))))

(global-set-key (kbd "H-@") 'reverse-words)
yahoo world hello

  (defun my-insert-file-name (filename &optional args)
    "Insert name of file FILENAME into buffer after point.

  Prefixed with \\[universal-argument], expand the file name to
  its fully canocalized path.  See `expand-file-name'.

  Prefixed with \\[negative-argument], use relative path to file
  name from current directory, n`default-directory'.  See
  `file-relative-name'.

  The default with no prefix is to insert the file name exactly as
  it appears in the minibuffer prompt."
    ;; Based on insert-file in Emacs -- ashawley 20080926
    (interactive "*fInsert file name: \nP")
    (cond ((eq '- args)
           (insert (file-relative-name filename)))
          ((not (null args))
           (insert (expand-file-name filename)))
          (t
           (insert filename))))



(global-set-key (kbd "H-@") 'my-insert-file-name)

~/.emacs.d/init.el


/root/.emacs.d
** Wed 14 Nov 2012 05:47:48 PM JST
  M-x replace-regexp
  Replace regexp:  \(\w+\)
  Replace regexp with:  \,(capitalize \1)


0.Bogot á
1.Faberg é








1. fdsafdsa
2. fdsafds
3. fdsfdsa



    (defun renumber (&optional num)
      "Renumber the list items in the current paragraph,
    starting at point."
      (interactive "p")
      (setq num (or num 1))
      (let ((end (save-excursion
                   (forward-paragraph)
                   (point))))
        (while (re-search-forward "^[0-9]+" end t)
          (replace-match (number-to-string num))
          (setq num (1+ num)))))


    (defun renumber-list (start end &optional num)
      "Renumber the list items in the current START..END region.
    If optional prefix arg NUM is given, start numbering from that number
    instead of 1."
      (interactive "*r\np")
      (save-excursion
        (goto-char start)
        (setq num (or num 1))
        (save-match-data
          (while (re-search-forward "^[0-9]+" end t)
            (replace-match (number-to-string num))
            (setq num (1+ num))))))

** Wed 14 Nov 2012 06:48:24 PM JST
(defun esc-comment-end-of-line ()
  (interactive)
  (when (comment-search-forward (line-end-position) t)
    (goto-char (match-beginning 0))
    (skip-syntax-backward " " (line-beginning-position))))

(global-set-key (kbd "H-@") 'esc-comment-end-of-line)   ;; hello

(defun seq-esc-comment-end-of-line ()
  (interactive)
  (when (eq (point) (progn (esc-comment-end-of-line) (point)))
	(end-of-line)))

(global-set-key (kbd "H-@") 'tes) ;; www
(progn (esc-comment-end-of-line) (point))
400


(symbol-file 'comment-search-forward)
"/usr/share/emacs/23.2/lisp/newcomment.elc"

** Wed 14 Nov 2012 06:51:01 PM JST
    (defun cycle-word-capitalization ()
      "Change the capitalization of the current word.
    If the word under point is in lower case, capitalize it.  If it
    is in capitalized form, change it to upper case.  If it is in
    upper case, downcase it."
      (interactive "*")
      (let ((case-fold-search nil))
        (save-excursion
          (skip-syntax-backward "w")
          (cond
           ((looking-at-p "[[:lower:]]+")
            (capitalize-word 1))
           ((looking-at-p "[[:upper:]][[:lower:]]+")
            (upcase-word 1))
           ((looking-at-p "[[:upper:]]+")
            (downcase-word 1))
           (t
            (downcase-word 1))))))

(global-set-Key (kbd "H-@") 'cycle-word-capitalization)

** Fri 16 Nov 2012 09:46:57 AM JST
(describe- 'global-set-key)
#("global-set-key is an interactive compiled Lisp function.

(global-set-key KEY COMMAND)

Give KEY a global binding as COMMAND.
COMMAND is the command definition to use; usually it is
a symbol naming an interactively-callable function.
KEY is a key sequence; noninteractively, it is a string or vector
of characters or event types, and non-ASCII characters with codes
above 127 (such as ISO Latin-1) can be included if you use a vector.

Note that if KEY has a local binding in the current buffer,
that local binding will continue to shadow any global binding
that you make with this function." 74 77 (face help-argument-name) 78 85 (face help-argument-name) 93 96 (face help-argument-name) 117 124 (face help-argument-name) 126 133 (face help-argument-name) 234 237 (face help-argument-name) 449 452 (face help-argument-name))

"/usr/share/emacs/23.2/lisp/subr.elc"

#[(key command) "\302!\204 ;\204 \303\304\305D\"\210\306\307 	#\207" [key command vectorp signal wrong-type-argument arrayp define-key current-global-map] 4 2182721 "KSet key globally:
CSet key %s to command: "]

(global-set-key global-map )

"global-set-key"

** Sat 17 Nov 2012 01:24:22 AM JST
cons-cells-consed
59300428

59014160

58816069

floats-consed
485108

482907

471412

vector-cells-consed
8341152

8313219

8300144

symbols-consed
52655

52655

52655

string-chars-consed
105176974

104305150

104265570

misc-objects-consed
3298755

3294268

3292659

intervals-consed
207703

207291

206917

strings-consed
4977035

4939578

4938502

(garbage-collect)
((1165981 . 184319) (45056 . 68) (3444 . 7664) 4204669 1518766 (1010 . 1164) (14511 . 463) (351263 . 48661))

** Sun 18 Nov 2012 12:35:25 PM JST
(let_(())
     )

(let_(())
     )

(let_(())
     )

(let (())
     )

(let_((hello)))

(let(())
  )
(let(())
  )

(let ((hello world)))

(let (()))


(let_((
       )

(let_((
       )
(let-((
       )
      (let ((hello)))

(let* ((hello))
  )

(let ((hello)))
(let* (())
)
(defun  ()
  "Return
"
  (interactive)


)
(symbol-file 'hl-line-mode)
"/usr/share/emacs/23.2/lisp/hl-line.elc"

(global-set-key "\C-1" 'end-of-line)
(before-init-hook)
(after-init-hook)
find-file-hook
(yas/global-mode-check-buffers auto-insert global-auto-highlight-symbol-mode-check-buffers #[nil "\302\301!\210\303\304!8\211\207" [buffer-file-name auto-revert-tail-pos make-local-variable 7 file-attributes] 3] (lambda nil (interactive) (view-mode)) view-mode-by-default-setup flymake-find-file-hook global-linum-mode-check-buffers global-undo-tree-mode-check-buffers global-auto-complete-mode-check-buffers recentf-track-opened-file global-font-lock-mode-check-buffers epa-file-find-file-hook vc-find-file-hook tramp-set-auto-save save-place-find-file-hook)

find-file-hooks
(yas/global-mode-check-buffers auto-insert global-auto-highlight-symbol-mode-check-buffers #[nil "\302\301!\210\303\304!8\211\207" [buffer-file-name auto-revert-tail-pos make-local-variable 7 file-attributes] 3] (lambda nil (interactive) (view-mode)) view-mode-by-default-setup flymake-find-file-hook global-linum-mode-check-buffers global-undo-tree-mode-check-buffers global-auto-complete-mode-check-buffers recentf-track-opened-file global-font-lock-mode-check-buffers epa-file-find-file-hook vc-find-file-hook tramp-set-auto-save save-place-find-file-hook)

** Mon 19 Nov 2012 04:49:51 AM JST











(global-unset-key (kbd "\C-1"))

(read (format "[?\\C-1]"))
[67108913]


"[?\\C-1]"
(global-unset-key [?\C-1])
nil

;;;; Undefine control-digits.
;;
(let ((i ?0))
  (while (<= i ?9)
    (global-unset-key (read (format "[?\\C-%c]" i)))
    (setq i (1+ i))))

** Tue 20 Nov 2012 06:04:15 AM JST
** TODO duplicate-line を yasnippet で使える用にする
   line の行の変数値を snippet できるようにする。
   auto-complete で各行を呼べるとなお良い
   backward-sexp 関数のソースを読む


   (defun duplicate-line-tess (n dir)
   "Copy the Nth following line to point.
   If the last command was a duplication, replace the current line by the next
   line in direction DIR."
   (if (eq (car-safe last-command) 'duplicate-line)
   (progn
   (delete-region (point-at (beginning-of-line nil))
   (point-at (end-of-line nil)))
   (setq n (+ dir (cdr last-command))))
   (kill-region (point-at (beginning-of-line nil))
   (point-at (end-of-line nil))))
   (if (= n 0)
   (insert (current-kill 0))
   (setq dline (save-excursion
   (beginning-of-line (1+ n))
   (buffer-substring (point)
   (point-at (end-of-line nil)))))
   (setq dline (split-string dline " "))
   (make-yas/temp-template dline)
   (yas/expand-snippet result)
   (setq this-command (cons 'duplicate-line n))))

   (defun duplicate-previous-line-tes (n)
   "Copy the Nth previous line to point.
   If repeated, replace by the line preceding the one that was copied last time.
   This command can be interleaved with \\[duplicate-following-line]."
   (interactive "p")
   (duplicate-line-tess (- n) -1))
   (duplicate-line-tess} (-} ${3:n) ${4:-1)}

   (setq tes '("hello" "world"))
   (defun make-yas/temp-template (ll)
   (setq result nil)
   (let ((count 0))
   (while ll
   (cond
   ((equal "" (car ll)) (setq result (concat result cha)))
   ((equal "\t" (car ll)) (setq result (concat result cha)))
   (t (progn
   (setq count (1+ count))
   (if (eq count 1) (setq cha nil) (setq cha " "))
   (setq result (concat result cha (concat "${" (number-to-string count) ":" (car ll) "}"))))))
   (setq ll (cdr ll)))))

** Sat 24 Nov 2012 07:05:53 AM JST
(symbol-file 'hs-show-all)
"/usr/share/emacs/23.2/lisp/progmodes/hideshow.elc"

(defun eval-region-or-last-sexp (arg)
  "If region active `eval-region'. Else `eval-last-sexp'"
  (interactive "P")
  (if (and transient-mark-mode mark-active)
        (eval-region (mark) (point))
    (eval-last-sexp arg)))

(global-set-key (kbd "H-@") 'eval-region-or-last)

(symbol-file 'term-send-raw)
"/usr/share/emacs/23.2/lisp/term.elc"

"/usr/share/emacs/23.2/lisp/emacs-lisp/lisp-mode.elc"



lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
(get (car (get 'return 'event-symbol-elements)) 'ascii-character)
13

highlight-changes
(return)
(make-string 1 (get 'return 'ascii-character))
""
(formet-time-string "%Y-%m-%d" (current-time))
"2012-11-21"

line を切り捨て表示
truncate-lines
nil

visual-line-fringe-indicators
(nil nil)
(setq underline-minimum-offset 1)
1
x-underline-at-descent-line
nil

10

1

** Sun 25 Nov 2012 04:25:18 AM JST
(global-set-key "\C-d" '(lambda () (interactive) (insert-string "**** TODO [#C]

1) 結果

2) 背景 (問題点)

3) 対応方法

4) 優先順位の根拠

5) 備考

")))

** Tue 27 Nov 2012 10:44:45 AM JST



(init-loader--regexp-load-files
 "\\(?:^[[:digit:]]\\{2\\}\\)" "/root/.emacs.d/elisp/start.d/" t)
("20_auto-async-byte-compile_plugin_start.elc" "20_recentf_plugin_start.elc" "22_anything_plugin_start.elc" "22_auto-install_plugin_start.elc" "22_dsvn_plugin_start.elc" "22_multi-term_plugin_start.elc" "22_sudo-ext_plugin_start.elc" "30_auto-complete_plugin_start.elc" "30_dmacro_plugin_start.elc" "30_duplicate-line_plugin_start.elc" "30_ll-debug_plugin_start.elc" "30_point-undo_plugin_start.elc" "30_sequential-command_plugin_start.elc" "30_smartchr_plugin_start.elc" "30_undo_tree_plugin_start.elc" "40_col-highlight_plugin_start.elc" "40_grep_plugin_start.elc" "40_linum_plugin_start.elc" "40_text-adjust_plugin_start.elc" "40_yasnippet_plugin_start.elc" "50_ascii_plugin_start.elc" "50_auto-chmod-x_plugin_start.elc" "50_irfc_plugin_start.elc" "50_open-junk-file_plugin_start.elc" "50_sdic_plugin_start.elc" "50_usage-memo_plugin_start.elc" "60_c-includes_plugin_start.elc" "60_eldoc_plugin_start.elc" "60_fold-dwim_plugin_start.elc" "60_gccsense_plugin_start.elc" "60_key-chord_plugin_start.elc" "60_navi_plugin_start.elc" "60_popwin_plugin_start.elc" "61_tempbuf_plugin_start.elc" "70_Info_mode_start.elc" "70_apropos_mode_start.elc" "70_auto_insert_mode_start.elc" "70_cvs_mode_start.elc" "70_dired_mode_start.elc" "70_gdb_mode_start.elc" "70_isearch_mode_start.elc" "70_org_mode_start.elc" "70_svn_status_mode_start.elc" "70_term_mode_start.elc" "70_view_mode_start.elc" "70_woman_mode_start.elc" "80_asm_mode_start.elc" "80_c_mode_start.elc" "80_emacs_lisp_mode_start.elc" "80_javascript_mode_start.elc" "80_python_mode_start.elc" "80_shell_script_mode_start.elc" "80_text_mode_start.elc" "81_final_mode_start.elc")

("81_final_mode_start.elc" "80_text_mode_start.elc" "80_shell_script_mode_start.elc" "80_python_mode_start.elc" "80_javascript_mode_start.elc" "80_emacs_lisp_mode_start.elc" "80_c_mode_start.elc" "80_asm_mode_start.elc" "70_woman_mode_start.elc" "70_view_mode_start.elc" "70_term_mode_start.elc" "70_svn_status_mode_start.elc" ...)

** Tue 27 Nov 2012 03:49:05 PM JST
(load "81_final_mode_start.el")
(and linux-p (executable-find "w3m"))
"/usr/bin/w3m"





(save-excursion
  (goto-char (point-max))
  (replace-regexp ";; no-byte-compile: t\n" "" nil
                  (search-backward "\n\^L" (max (- (point-max) 3000) (point-min)))
                  (point-max)))
;; no-byte-compile: t







byte-compile-save-current-buffer
(byte-compile-save-current-buffer)


(emacs-lisp-byte-compile )

(replace-string)


(replace-)

** Tue 27 Nov 2012 06:34:52 PM JST
init-file-debug


(x-display-pixel-width)
1680
(x-display-pixel-height)
1050

(display-pixel-width)
1680
(display-pixel-height)
1050

(or left-fringe-width (nth 0 (window-fringes)) 0)
8
(or right-fringe-width (nth 1 (window-fringes)) 0)
8

(or (frame-parameter nil 'scroll-bar-width) 0)
0
(- 100 1 1 1 1)
96


(let ((scroll-bar (or (frame-parameter nil 'scroll-bar-width) 0))
      (left-fringe (or left-fringe-width (nth 0 (window-fringes)) 0))
      (right-fringe (or right-fringe-width (nth 1 (window-fringes)) 0)))
  (/ (- (display-pixel-width) scroll-bar left-fringe right-fringe)
  (frame-char-width)
  ))
208

1664


(frame-char-width)
8





(set-frame-size (selected-frame) 208 40)
nil

nil

** Wed 28 Nov 2012 05:52:49 AM JST
(getenv "INFOPATH")
nil

INFOPATH
exec-path
("/usr/local/rvm/gems/ruby-1.9.3-p194/bin" "/usr/local/rvm/gems/ruby-1.9.3-p194@global/bin" "/usr/local/rvm/rubies/ruby-1.9.3-p194/bin" "/usr/local/rvm/bin" "/usr/local/sbin" "/usr/local/bin" "/usr/sbin" "/usr/bin" "/sbin" "/bin" "/usr/games" "/root/.zsh/scripts" "/usr/lib/emacs/23.2/i486-linux-gnu")

("/usr/local/rvm/gems/ruby-1.9.3-p194/bin" "/usr/local/rvm/gems/ruby-1.9.3-p194@global/bin" "/usr/local/rvm/rubies/ruby-1.9.3-p194/bin" "/usr/local/rvm/bin" "/usr/local/sbin" "/usr/local/bin" "/usr/sbin" "/usr/bin" "/sbin" "/bin" "/usr/games" "/root/.zsh/scripts" "/usr/lib/emacs/23.2/i486-linux-gnu")


(dolist (path (split-string (getenv "PATH") ":"))
  (add-to-list 'exec-path path t))
nil

default-load-path
("/usr/share/emacs23/site-lisp/a2ps" "/etc/emacs23/site-start.d" "/etc/emacs/site-start.d" "/etc/emacs23" "/etc/emacs" "/usr/local/share/emacs/23.2/site-lisp" "/usr/local/share/emacs/site-lisp" "/usr/share/emacs23/site-lisp/flim" "/usr/share/emacs23/site-lisp/dictionaries-common" "/usr/share/emacs/site-lisp/autoconf" "/usr/share/emacs23/site-lisp/apel" "/usr/share/emacs/23.2/site-lisp" "/usr/share/emacs/23.2/site-lisp/a2ps" "/usr/share/emacs/23.2/site-lisp/apel" "/usr/share/emacs/23.2/site-lisp/dictionaries-common" "/usr/share/emacs/23.2/site-lisp/flim" "/usr/share/emacs/23.2/site-lisp/global" "/usr/share/emacs/23.2/site-lisp/pylint" "/usr/share/emacs/23.2/site-lisp/sdic" "/usr/share/emacs/23.2/site-lisp/w3m" "/usr/share/emacs/23.2/site-lisp/w3m/shimbun" "/usr/share/emacs/site-lisp" "/usr/share/emacs/23.2/leim" "/usr/share/emacs/23.2/lisp" "/usr/share/emacs/23.2/lisp/url" "/usr/share/emacs/23.2/lisp/textmodes" "/usr/share/emacs/23.2/lisp/progmodes" "/usr/share/emacs/23.2/lisp/play" "/usr/share/emacs/23.2/lisp/org" "/usr/share/emacs/23.2/lisp/nxml" "/usr/share/emacs/23.2/lisp/net" "/usr/share/emacs/23.2/lisp/mh-e" "/usr/share/emacs/23.2/lisp/mail" "/usr/share/emacs/23.2/lisp/language" "/usr/share/emacs/23.2/lisp/international" "/usr/share/emacs/23.2/lisp/gnus" "/usr/share/emacs/23.2/lisp/eshell" "/usr/share/emacs/23.2/lisp/erc" "/usr/share/emacs/23.2/lisp/emulation" "/usr/share/emacs/23.2/lisp/emacs-lisp" "/usr/share/emacs/23.2/lisp/cedet" "/usr/share/emacs/23.2/lisp/calendar" "/usr/share/emacs/23.2/lisp/calc" "/usr/share/emacs/23.2/lisp/obsolete" "/usr/share/emacs/23.2/leim" "/usr/share/emacs23/site-lisp/sdic")

** Wed 28 Nov 2012 09:45:09 AM JST
Info-default-directory-list
("/usr/local/share/info/" "/usr/local/info/" "/usr/local/gnu/info/" "/usr/local/gnu/lib/info/" "/usr/local/gnu/lib/emacs/info/" "/usr/local/emacs/info/" "/usr/local/lib/info/" "/usr/local/lib/emacs/info/" "/usr/share/info/emacs-23" "/usr/share/info/" "/usr/share/info/")

Info-directory-list
("/usr/local/info/" "/usr/share/info/emacs-23" "/usr/share/info/" "/usr/share/info/")


command-line-args
("emacs")
(setq command-line-args (cons (caar command-line-args) "--hello-world"))
("emacs" . "--hello-world")

(("emacs") . "--hello-world")

(("emacs") . "--hello-world")
(setq command-line-args (append command-line-args "--hello-world"))
command-line-args
("emacs" . "--hello-world")
(cdr command-line-args)
"--hello-world"

(("emacs") . "--hello-world")



(let ((args (cdr command-line-args))
      done)
  (while (and (not done) args)
    (let ((argi (pop args)))
      (when (string-match "\\`\\(--[^=]*\\)=" argi)
        (setq argval (substring argi (match-end 0))
              argi (match-string 1 argi)))
      ;; (message argi)
      (cond
       ((member argi '("--test-ttt"))
        (setq start-loader-profile-flag t))
       (t
        (push argi args)
        (setq done t)))))

    (and command-line-args
         (setcdr command-line-args args))

      )



command-switch-alist
nil



command-line-args-left
nil

** Wed 28 Nov 2012 04:00:25 PM JST
(display-multi-frame-p)
t
(get-other-frame )
(format-insert-file )

(get-process "emacs")
(process-list)
(#<process terminal<1>> #<process server>)
(process-name 1)


nil

(shell-command "ls" nil nil)
0

0

0


(symbol-file 'append-to-file)
"/usr/share/emacs/23.2/lisp/files.elc"




;; http://superuser.com/questions/297774/how-do-i-get-emacs-to-insert-text-into-an-arbitrary-file
(defun append-string-to-file (string filename)
  "Appends STRING to FILENAME."
  (interactive)
  (append-to-file string nil filename))

(append-string-to-file "hello" "/root/work/noexist.el")
nil

nil

(format-time-string "Emacs_%Y_%m.log" (current-time))
"Emacs_2012_11.log"


(defvar Emacs-log-format "Emacs_%Y_%m.log"
  "Emacs log file name.")

(defun Emacs-log-to-file (time start)
  (let* ((now time)
         (file-name (concat my-log-dir (format-time-string Emacs-log-format now))))
    (append-to-file (Emacs-log-make-string now start) nil file-name)
    ))

(defun Emacs-log-make-string (now start)

  (concat
   (format-time-string "%Y/%m/%d (%a) %H:%M:%S %Z" now)
   ","
   (prin1-to-string system-type)
   ","
   (user-login-name)
   ","
   (system-name)
   ","
   (if start "Start" "Exit")
   ","
   ;; debug, multi, default
   ","
   ;; loadtime
   "\n"
   ))

(Emacs-log-to-file t)
nil

nil

nil

(system-name)
"ni"



(format-time-string "%c" (current-time))




nil

"/root/.emacs.d/data_e/log/Emacs_2012_11.log"

"/root/.emacs.d/data_e/log//Emacs_2012_11.log"

(user-login-name)
"root"
(setq start-or-exit "Exit")
"Exit"
(setq s-or-e nil)

(concat (car system-type) "hello")


(string-equal system-type "gnu/linux")
t
(prin1-to-string system-type)
"gnu/linux"


(format-time-string
"
c=%c
Y=%Y
C=%C
G=%G
g=%g
m=%m
b=%b
h=%h
B=%B
d=%d
e=%e
u=%u
w=%w
a=%a
A=%A
U=%U
W=%W
V=%V
j=%j
H=%H
I=%I
k=%k
l=%l
p=%p
M=%M
S=%S
Z=%Z
z=%z
s=%s
x=%x
D=%D
R=%R
X=%X
"
(current-time))

%Y/%m/%d(%a)_%H-%M-%S_%Z
"
c=Wed 28 Nov 2012 01:42:14 PM JST
Y=2012
C=20
G=2012
g=12
m=11
b=Nov
h=Nov
B=November
d=28
e=28
u=3
w=3
a=Wed
A=Wednesday
U=48
W=48
V=48
j=333
H=13
I=01
k=13
l= 1
p=PM
M=42
S=14
Z=JST
z=+0900
s=1354077734
x=11/28/2012
D=11/28/12
R=13:42
X=01:42:14 PM
"

** Thu 29 Nov 2012 06:16:06 AM JST
(defun maio-main ()
  (with-current-buffer
      (find-file-noselect
       (maio-ensure-default-file (concat my-var-dir "all_in_one.el")))
    (search-forward ";;; Code:\n")
    (dolist (f (maio-file-list))
      (insert (concat ";;;; " (make-string 75 35) "\n")) ; 35 char is "#"
      (insert (concat ";;;; " (make-string 75 35) "\n"))
      (insert (concat ";;;; " (file-name-sans-extension file) "\n"))
      (insert-file f)
      (insert "\n\n"))
    (save-buffer)
    ))


(defun maio-file-list ()
  (let* ((fs (regexp-load-files
              "\\(?:^[[:digit:]]\\{2\\}\\|^Windows_\\|^Emacs\\|^Linux_\\|^NoWindow_\\|^Mac_\\)"
              my-start-dir t)))

    (dolist (el remain-start-files)
      (setq fs (append fs (list (expand-file-name el)))))

    (push (concat my-start-dir "subroutines_start.el") fs)
    (push (concat my-emacs-dir "init.el") fs)
    ))

(defun regexp-load-files (regexp dir &optional sort)
  "Return list of files in DIR by matches REGEXP.
If optional SORT then return sort of file list by `string<'."
  (let (files)
    (dolist (el (directory-files dir t))
      (when (and (string-match regexp (file-name-nondirectory el))
                 (string-match "el$" el))
        (setq files (cons el files))))
    (if sort (sort files 'string<) files)))



(setq fs (regexp-load-files
 "\\(?:^[[:digit:]]\\{2\\}\\|^Windows_\\|^Emacs\\|^Linux_\\|^NoWindow_\\|^Mac_\\)"
 my-start-dir t))







(defvar remain-start-files '("~/.emacs.d/elisp/start.d/w3m_mode_start.el"
                             "~/.emacs.d/elisp/start.d/test_start.el"))

(dolist (el remain-start-files)
   (append )
)

(expand-file-name remain-start-files)




(defun remain-set (fs remain)
  (dolist (el remain)
    (setq fs (append fs (expand-file-name el))))
  fs)

(remain-set fs remain-start-files)


(cons fs remain-start-files)

(append fs remain-start-files)




(push (concat my-emacs-dir "init.el") fs)

(make-string 75 35)
"###########################################################################"

;;;; ===========================================================================

(insert-file-contents "/root/.emacs.d/elisp/start.d/98_final_start.el")

** Thu 29 Nov 2012 02:42:26 PM JST
(defvar default-el-setting '(("ni" . t)
                             ("ki" . nil)
                             ("qu" . nil)
                             ))

(when (locate-library "default")
  (let ((predefine nil))
    (dolist (m default-el-setting)
      (when (string= (system-name) (car m))
        (setq inhibit-default-init (cdr m))
        (setq predefine t)))
    ;; if no predefine then prompt
    (unless predefine
      (default-el-prompt))
    ))

(defun default-el-prompt ()
  (save-window-excursion
    (let ((inhibit-read-only t)
          (buf (get-buffer-create "*default.el*")))
      (pop-to-buffer buf)
      (set (make-local-variable 'cursor-type) nil)
      (erase-buffer)
      (insert "--- Setting for default.el ---\n\n\
y  -- to load default.el
n  -- to ignore
Y  -- to load, and permanently load setting on this system.
N  -- to ignore, and permanently ignore setting on this system.
\n\n")
      (goto-char (point-min))
      (let ((cursor-in-echo-area t)
            (prompt "Please type y, n, Y, N, or C-v to scroll")
            (exit-chars '(?y ?n ?Y ?N ?\C-g))
            done)
        (while (not done)
          (message "%s" prompt)
          (setq char (read-event))
          (if (numberp char)
              (cond ((eq char ?\C-v)
                     (condition-case nil
                         (scroll-up)
                       (error (goto-char (point-min)))))
                    (t (setq done (memq char exit-chars))))))
        (kill-buffer buf)
        (cond ((= char ?y) (setq inhibit-default-init nil) (message "y"))
              ((= char ?n) (setq inhibit-default-init t) (message "n"))
              ((= char ?Y)
               (add-to-list 'default-el-setting (cons (system-name) nil))
               (default-el-update-var))
              ((= char ?N)
               (add-to-list 'default-el-setting (cons (system-name) t))
               (default-el-update-var)))))))



(defun default-el-update-var ()
  "update 09_check_default_start.el setting variables."
  (let ((before-save-hook nil))
    (with-current-buffer
        (find-file-noselect (concat my-start-dir "09_check_default_start.el"))
      (goto-char (point-min))
      (search-forward-regexp "^(defvar default-el-setting")
      (goto-char (match-beginning 0))
      (let ((start (point)))
        (delete-region start (save-excursion
                               (forward-list)
                               (point))))
      ;; insert var
      (insert "(defvar default-el-setting '(")
      (dolist (cn default-el-setting)
        (insert "(\"" (car cn) "\" . ")
        (insert (if (eq t (cdr cn)) "t" "nil"))
        (insert ")\n")
        )
      (insert "))\n")
      (let ((end (point)))
        (backward-list)
        (indent-region (point) end))
      )))


(add-to-list 'default-el-setting (cons (system-name) t))

(setq default-el-setting '(("ki" . nil)
                           ("qu" . nil)
                           ))
(("ki") ("qu"))

** Thu 29 Nov 2012 11:20:06 PM JST
(defun write-file-prompt-old-del (filename &optional confirm)
  "Write current buffer into file FILENAME.
This makes the buffer visit that file, and marks it as not modified.

If you specify just a directory name as FILENAME, that means to use
the default file name but in that directory.  You can also yank
the default file name into the minibuffer to edit it, using \\<minibuffer-local-map>\\[next-history-element].

If the buffer is not already visiting a file, the default file name
for the output file is the buffer name.

If optional second arg CONFIRM is non-nil, this function
asks for confirmation before overwriting an existing file.
Interactively, confirmation is required unless you supply a prefix argument."
;;  (interactive "FWrite file: ")
  (interactive
   (list (if buffer-file-name
	     (read-file-name "Write file: "
			     nil nil nil nil)
	   (read-file-name "Write file: " default-directory
			   (expand-file-name
			    (file-name-nondirectory (buffer-name))
			    default-directory)
			   nil nil))
	 (not current-prefix-arg)))
  (let ((oldbuf buffer-file-name))
    (or (null filename) (string-equal filename "")
        (progn
          ;; If arg is just a directory,
          ;; use the default file name, but in that directory.
          (if (file-directory-p filename)
              (setq filename (concat (file-name-as-directory filename)
                                     (file-name-nondirectory
                                      (or buffer-file-name (buffer-name))))))
          (and confirm
               (file-exists-p filename)
               (or (y-or-n-p (format "File `%s' exists; overwrite? " filename))
                   (error "Canceled")))
          (set-visited-file-name filename (not confirm))))
    (set-buffer-modified-p t)
    ;; Make buffer writable if file is writable.
    (and buffer-file-name
         (file-writable-p buffer-file-name)
         (setq buffer-read-only nil))
    ;; prompt delete old file.
    (if (y-or-n-p (format "Delete %s" oldbuf))
        (delete-file oldbuf))
    (save-buffer)
    ;; It's likely that the VC status at the new location is different from
    ;; the one at the old location.
    (vc-find-file-hook)
    ))

(global-set-key (kbd "C-x C-s") 'write-file-old-del)

(y-or-n-p (format "Delete %s" ))
t



(buffer-name)
"*scratch*"

** Fri 30 Nov 2012 03:14:56 AM JST
(symbol-file 'version-control)
"/usr/share/emacs/23.2/lisp/files.elc"

"/usr/share/emacs/23.2/lisp/files.elc"

"/usr/share/emacs/23.2/lisp/files.elc"

nil


(symbol-file)
(symbol-file)



before-change-functions
(t syntax-ppss-flush-cache)
after-change-functions
(jit-lock-after-change t)
first-change-hook
(backup-first-change)

nil

(defsubst backup-first-change ()
  "If first change after open file, backup file."
  (when (and (not buffer-backed-up) buffer-file-name)
      (backup-buffer)))

(add-hook 'first-change-hook 'backup-first-change)
(backup-first-change)
(setq first-change-hook nil)


(find-file-name-handler "/root/.emacs.d/backup_e/!root!work!test.el.~1~" 'find-backup-file-name)
nil

nil

nil

nil

nil

** Fri 30 Nov 2012 03:51:03 AM JST
(string-match ".*" "hello")
0

nil

0

0

0





backup-directory-alist
(defvar my-backup-etc-dir (concat my-backup-dir "etc"))
my-backup-etc-dir
"/root/.emacs.d/backup_e/etc"


(setq backup-directory-alist
      '(("^/etc/" . my-backup-etc-dir) ("" . my-backup-dir)))
(("^/etc/" . my-backup-etc-dir) ("" . my-backup-dir))

   backup

(setq backup-directory-alist
      (cons (cons "^/etc/" (concat my-backup-dir "etc"))
            (list (cons "" my-backup-dir))))
(("^/etc/" . "/root/.emacs.d/backup_e/etc") ("" . "/root/.emacs.d/backup_e/"))

(("^/etc/" . "/root/.emacs.d/backup_e/etc") ("" . "/root/.emacs.d/backup_e/"))

(("^/etc/" . "/root/.emacs.d/backup_e/etc") "" . "/root/.emacs.d/backup_e/")

** Fri 30 Nov 2012 03:47:16 PM JST
(make-backup-file-name-1 "/root/work/tes.el")
"/root/.emacs.d/backup_e/!root!work!tes.el"

(elt (file-attributes "/root/work/tes.el") 8)
"-rw-r--r--"


(length "!root!work!test.el.~")
20

9

8

(substring "!root!work!test.el.~1~" 20 -1)
"1"

"oot!work!test.el.~1"

"root!work!test.el.~1"



(length (file-name-all-completions "!root!work!test.el" "/root/.emacs.d/backup_e"))
8

(nthcdr -10 '("!root!work!test.el.~23~" "!root!work!test.el.~1~" "!root!work!test.el.~20~" "!root!work!test.el.~3~" "!root!work!test.el.~24~" "!root!work!test.el.~21~" "!root!work!test.el.~2~" "!root!work!test.el.~22~"))
("!root!work!test.el.~23~" "!root!work!test.el.~1~" "!root!work!test.el.~20~" "!root!work!test.el.~3~" "!root!work!test.el.~24~" "!root!work!test.el.~21~" "!root!work!test.el.~2~" "!root!work!test.el.~22~")

("!root!work!test.el.~23~" "!root!work!test.el.~1~" "!root!work!test.el.~20~" "!root!work!test.el.~3~" "!root!work!test.el.~24~" "!root!work!test.el.~21~" "!root!work!test.el.~2~" "!root!work!test.el.~22~")

("!root!work!test.el.~23~" "!root!work!test.el.~1~" "!root!work!test.el.~20~" "!root!work!test.el.~3~" "!root!work!test.el.~24~" "!root!work!test.el.~21~" "!root!work!test.el.~2~" "!root!work!test.el.~22~")



(length '("!root!work!test.el.~23~" "!root!work!test.el.~1~" "!root!work!test.el.~20~" "!root!work!test.el.~3~" "!root!work!test.el.~24~" "!root!work!test.el.~21~" "!root!work!test.el.~2~" "!root!work!test.el.~22~"))
8



nil

("test.el")

(nthcdr 0 '(1 2 3 4))
(1 2 3 4)

(1 2 3 4)
(find-backup-file-name "/root/work/tes.el")
("/root/.emacs.d/backup_e/!root!work!tes.el.~20~" "/root/.emacs.d/backup_e/!root!work!tes.el.~15~")

 (file-name-directory "/root/work/tes.el"))
nil

nil
inhibit-redisplay

inhibit-splash-screen

inhibit-startup-buffer-menu

inhibit-startup-echo-area-message

inhibit-startup-hooks

inhibit-startup-message

inhibit-startup-screen

(- 5 1 2)
2


before-save-hook
(force-backup-of-buffer
 delete-trailing-blank-lines
 delete-trailing-whitespace
 check-misspell
 text-adjust-space-before-save-if-needed)


(defun make-backup-old-dir ()
  (let (dir tmp)
    (dolist (el backup-directory-alist)
      (setq dir (concat (cdr el) "old"))
      (push (cons (car el) dir) tmp)
      (if (and dir (not (file-exists-p dir)))
          (condition-case nil
              (make-directory dir 'parents)
            (file-error (message "IO error in: %s" dir)))))
    (reverse tmp)))
make-old


(make-old)
(("^/etc/" . "/root/.emacs.d/backup_e/etc/old") ("" . "/root/.emacs.d/backup_e/old"))

(("^/etc/" . "/root/.emacs.d/backup_e/etc/old") ("" . "/root/.emacs.d/backup_e/old"))

nil

nil


nil

nil


nil

nil




/root/.emacs.d/backup_e/etc/root/.emacs.d/backup_e/nil
backup-directory-alist
(("^/etc/" . "/root/.emacs.d/backup_e/etc/") ("" . "/root/.emacs.d/backup_e/"))

(("^/etc/" . "/root/.emacs.d/backup_e/etc/") ("" . "/root/.emacs.d/backup_e/"))

(("^/etc/" . "/root/.emacs.d/backup_e/etc/oldold") ("" . "/root/.emacs.d/backup_e/oldold"))

(("^/etc/" . "/root/.emacs.d/backup_e/etc/old") ("" . "/root/.emacs.d/backup_e/old"))

(("^/etc/" . "/root/.emacs.d/backup_e/etc/old") ("" . "/root/.emacs.d/backup_e/old"))

(("^/etc/" . "/root/.emacs.d/backup_e/etc/") ("" . "/root/.emacs.d/backup_e/"))

(("^/etc/" . "/root/.emacs.d/backup_e/etc/oldold") ("" . "/root/.emacs.d/backup_e/oldold"))

(("^/etc/" . "/root/.emacs.d/backup_e/etc") ("" . "/root/.emacs.d/backup_e/"))

(setq backup-directory-alist
      (cons (cons       "^/etc/" my-bk-etc-dir)
            (list (cons       "" my-backup-dir))))







(defun update-header-file-name ()
  (interactive)
  (replace-regexp "^;;; .+ --- " (concat ";;; " (file-name-nondirectory buffer-file-name) " --- ")))
(buffer-file-name (current-buffer))
nil

nil

** Sun 02 Dec 2012 02:38:07 PM JST
(kbd "C-:")
[67108922]

** Sun 02 Dec 2012 03:43:37 PM JST
(string-match "hello" "wwwhelloworld")
3


(find-file-string-match-tes "recover" "/root/.emacs.d/elisp/mylisp" "\\.elc?\\'")

nil

nil

nil

nil

nil

(defun find-file-string-match-tes (str dir &optional exclude)
  "Find first matched file in directory.
EXCUDE is exclude regexp to match file name"
  (let (done
        this-file
        (file-list (directory-files dir)))
    (while (and file-list (not done))
      (setq this-file (car file-list))
      (unless (member this-file '("." ".." "RCS" "CVS" "rcs" "cvs"))
        (when (and (not (file-directory-p this-file))
                   (string-match str this-file)
                   (if exclude
                       (not (string-match exclude this-file))
                     t))
          (setq done (expand-file-name this-file dir))))
      (setq file-list (cdr file-list)))
    done))

** Sun 02 Dec 2012 07:27:00 PM JST


(global-set-key (kbd "C-: 0") 'end-of-line)
(define-key ctl-colon-map [8] 'end-of-line)

(format "\"%d\" 'launch-or-switch-term" 1)
"\"1\" 'launch-or-switch-term"



"\"\" 'launch-or-switch-term"



(read (format " \"%c\" 'launch-or-switch-term" 1))
""

** Sun 02 Dec 2012 09:28:01 PM JST
(last-buffer)
#<buffer *Quail Completions*>

#<buffer *Quail Completions*>

compilation-last-buffer
nil



(defvar last-killed-file nil)

(defun set-last-killed-file ()
  (when (buffer-file-name)
    (setq last-killed-file (expand-file-name (buffer-file-name)))))

(defun get-last-killed-file ()
  (interactive)
  (unless (null last-killed-file)
    (find-file last-killed-file)))

(add-hook 'kill-buffer-hook 'set-last-killed-file)

(global-set-key (kbd "C-M-/") 'get-last-killed-file)

** Mon 03 Dec 2012 06:59:12 PM JST
(symbol-file 'kill-new)
"/usr/share/emacs/23.2/lisp/simple.elc"
kill-ring-max
60

(defun tes (args)
  (message args))
tes


(tes "hello")
"helloworld"

"hello"

"hello"

"hello"

(defadvice tes (before cn activate)
  (setq args (concat args "world"))
  )



(defvar kill-ring-log-file (concat my-log-dir "kill-ring-log_%Y_%m.org"))
(defadvice kill-new (before kill-ring-log activate)
  (write-region (concat "\n* " (format-time-string "%c") "\n"
                        string)
                nil (format-time-string kill-ring-log-file (current-time)) t 'silent))


(symbol-file 'append-to-file)
"/usr/share/emacs/23.2/lisp/files.elc"

kill-ring-log-file
"/root/.emacs.d/data_e/kill-ring-log.org"


(setq kill-ring-log-file (concat my-log-dir "kill-ring-log_%Y_%m.org"))
** Tue 04 Dec 2012 04:25:29 PM JST
Yes

yes

YES

(setq rotate-text-rotations
  '(("true" "false")
    ("True" "False")
    ("TRUE" "FALSE")
    ("yes"  "no")
    ("Yes"  "No")
    ("YES"  "NO")
    ("width" "height")
    ("start" "end")
    ("left" "right")
    ("top" "down")
    ("t"    "nil")))


(defalias 'tab-to-space 'untabify)
(defalias 'space-to-tab 'tabify)

nil


t


(symbol-file 'untabify)
"/usr/share/emacs/23.2/lisp/tabify.elc"

(symbol-file 'self-insert-command)
nil

nil

(defun right-parentheses-indent ()
  "Insert right-parentheses then indent."
  (interactive)
  (self-insert-command 1)
  (indent-for-tab-command)
  )

(define-key lisp-interaction-mode-map ")" 'right-parentheses-indent)

(with-syntax-table

;;;; hello
;;   =====



;;;; hello
;;   =====

** Tue 04 Dec 2012 11:50:39 PM JST


(setq make-header-hook '(
                         header-mode-line
                         header-title
                         header-blank
                         ;;
                         header-copyright
                         header-blank
                         ;; header-file-name
                         ;; header-description
                         ;;header-status
                         header-author
                         header-maintainer
                         header-version
                         header-creation-date
                         header-modification-date
                         ;;header-rcs-id
                         ;;header-sccs
                         ;; header-modification-author
                         ;; header-update-count
                         ;; header-blank
                         header-free-software
                         header-blank
                         ;;
                         ;; header-url
                         ;; header-doc-url
                         header-commentary
                         header-under-line
                         ;; header-keywords
                         ;; header-compatibility
                         header-blank
                         header-lib-requires
                         ;; header-end-line
                         ;; header-blank
                         ;; header-blank
                         ;; header-blank
                         ;; header-end-line
                         header-history
                         header-underline
                         ;; header-blank
                         ;; header-blank
                         ;; header-rcs-log
                         ;; header-end-line
                         header-code
                         ;; header-eof
                         ))



(setq header-free-software
      "\
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
This file is part of Emacs.                                                 ;;
                                                                            ;;
This file is free software: you can redistribute it and/or modify it under  ;;
the terms of the GNU General Public License as published by the Free        ;;
Software Foundation, either version 3 of the License, or (at your option)   ;;
any later version.                                                          ;;
                                                                            ;;
This program is distributed in the hope that it will be useful, but WITHOUT ;;
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       ;;
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for   ;;
more details.                                                               ;;
                                                                            ;;
You should have received a copy of the GNU General Public License along     ;;
with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;")

(setq header-copyright-notice
      (concat "Copyright (C) " (format-time-string "%Y " (current-time)) user-full-name) "\n")

(insert (concat (section-comment-start) "Commentary: \n"))

;Commentary:
nil

(section-comment-start)
"
;"
(header-end-line)

(let ((header-multiline  "hello
world
yahoo"))
    (header-multiline))

(defun header-mode-line ()
  "Insert a \" -*- Mode: \" line."
  (let* ((mode-declaration  (concat " -*- Mode: " (true-mode-name)
                                    (if (assoc 'c-style (buffer-local-variables))
                                        (concat "; C-Style: " (symbol-name c-style))
                                      "")
                                    " -*- \n"))
         (md-length         (length mode-declaration)))
    (insert (cond ((and comment-start (= 1 (length comment-start)))
                   ;; Assume comment start char is also fill char.
                   (concat comment-start comment-start
                           mode-declaration))
                  (comment-start-p      ; Assume spaces fill the gaps.
                   (concat comment-start
                           mode-declaration))
                  (t                    ; No comment-start.  Assume Lisp.
                   (concat ";;"
                           mode-declaration
                           )))
            "\n")))


comment-end
""

(defun header-multiline ()
  "Insert multiline comment.  The comment text is in `header-multiline'."
  (let ((lineno  1)
        beg end nb-lines)
    (beginning-of-line)
    (if comment-end-p
        (insert "\n" comment-start)
      (header-blank)
      (insert header-prefix-string))
    (setq beg  (point))
    (insert header-multiline)
    (setq end       (point-marker)
          nb-lines  (count-lines beg end))
    (goto-char beg)
    (forward-line 1)
    (while (< lineno nb-lines)
      (insert header-prefix-string)
      (forward-line 1)
      (setq lineno  (1+ lineno)))
    (goto-char end)
    (when comment-end-p (insert "\n"))
    (insert comment-end)
    (insert "\n")
    ;; (unless comment-end-p
    ;;   (header-blank)
    ;;   (header-end-line))
    ))



(defsubst header-commentary ()
  "Insert \"Commentary: \" line."
  (insert (concat (section-comment-start) "Commentary:\n")))


(defun header-make-string (str)
  ""
  (let (start end)
    (save-excursion
      (forward-line -1)
      (beginning-of-line)
      (skip-chars-forward (concat comment-start " "))
      (setq start (current-column))
      (search-forward ":" nil t)
      (setq end (current-column)))
    (insert (concat header-prefix-string " " (make-string (- end start) str) "\n"))
    ))

(defun header-underline ()
  ""
  (header-make-string ?=))

comment-start
";"



(make-string 4 ?=)
"===="

(defsubst header-eof ()
  "Insert comment indicating end of file."
  (goto-char (point-max))
  (insert "\n")
  ;; (unless comment-end-p (header-end-line))
  (insert
   ;; Local variables
   "\n\n"
   ";; For Emacs\n"
   ";; Local Variables:\n"
   ";; coding: utf-8\n"
   (if (y-or-n-p "Local Variables: byte compile this file?") "" ";; no-byte-compile: t\n")
   ";; End:\n"
   comment-start
   (concat (and (= 1 (length comment-start)) header-prefix-string)
           (if (buffer-file-name)
               (file-name-nondirectory (buffer-file-name))
             (buffer-name))
           " ends here"
           (if comment-end-p comment-end "\n"))))

** Wed 05 Dec 2012 05:49:14 PM JST
(let ((inhibit-read-only t))
(dolist (f (directory-files "/root/.emacs.d/elisp/start.d" t "\\.el\\'"))
  (with-current-buffer
      (find-file-noselect f)
    (progn
      (widen)
      (goto-char (point-min))
      (update-header-footer)
      (save-buffer)
      (kill-buffer)
      ))))
nil

nil




(directory-files "/tmp/tes/" t "\\.el\\'")
("/tmp/tes/02_base_start.el" "/tmp/tes/04_bindings_start.el" "/tmp/tes/06_loaddefs_start.el" "/tmp/tes/08_simple_start.el" "/tmp/tes/09_check_default_start.el" "/tmp/tes/20_auto-async-byte-compile_plugin_start.el" "/tmp/tes/20_auto-recover_plugin_start.el" "/tmp/tes/20_filecache_start.el" "/tmp/tes/20_recentf_plugin_start.el" "/tmp/tes/22_anything_plugin_start.el" "/tmp/tes/22_auto-install_plugin_start.el" "/tmp/tes/22_dsvn_plugin_start.el" ...)

** Wed 05 Dec 2012 09:22:17 PM JST
(defun rotate-utf-8-text ()
  (let ((inhibit-read-only t))
    (goto-char (point-min))
    (skip-chars-forward " \t\n")
    (when (when (save-excursion (re-search-forward "-\\*-.+-\\*-" nil t))
            ;; delete utf-8
            (save-restriction
              (narrow-to-region (match-beginning 0) (match-end 0))
              (if (search-forward "coding: utf-8")
                  (progn
                    (delete-region (match-beginning 0) (match-end 0))
                    (when (looking-at ";")
                      (delete-char 1))
                    (fixup-whitespace)
                    t)
                nil)))
      ;; insert utf-8 on tail
      (progn
        (goto-char (point-max))
        (search-backward "\n^L" (max (- (point-max) 3000) (point-min)) 'move)
        (when (search-forward "Local Variables:")
          (insert "\n;; coding: utf-8"))))))




(progn
  (goto-char (point-max))
  (search-backward "\n^L" (max (- (point-max) 3000) (point-min)) 'move)
  (when (search-forward "Local Variables:")
    (insert "\n;; coding: utf-8")
    ))



(with-current-buffer
    (current-buffer)
  (message "hello")
  (message "world")
)
"world"








(defun do-directory-files (dir func &optional regexp)
  (dolist (f (directory-files (file-name-as-directory (expand-file-name dir)) t regexp))
    (unless (and (file-directory-p f)
                 (member (file-name-nondirectory f) '("." "..")))
      (with-current-buffer
          (find-file-noselect f)
        (funcall func)
        (save-buffer)
        (kill-buffer)))))

(defun tes ()
  (let ((inhibit-read-only t))
    (insert "hello")))
tes

(let ((inhibit-read-only t))
  (do-directory-files "/tmp/tes/" 'tes))
nil



(file-name-nondirectory "/tmp/tes/.")
"."



(file-directory-p "/tmp/tes/")
t


nil
(file-name-as-directory (expand-file-name "/tmp/tes/"))
"/tmp/tes/"


maintain





(do-directory-files "~/.emacs.d/elisp/mylisp/" 'rotate-utf-8-text "\\.el\\'")
nil
g
nil

nil

** Thu 06 Dec 2012 02:03:01 AM JST
(symbol-plist 'w3m-search)
(autoload ("w3m-search" ("/usr/share/emacs23/site-lisp/w3m/w3m.elc" . 1628) t nil) event-symbol-element-mask (w3m-search 0) event-symbol-elements (w3m-search) modifier-cache ((0 . w3m-search)))

(autoload ("w3m-search" ("/usr/share/emacs23/site-lisp/w3m/w3m.elc" . 1628) t nil) event-symbol-element-mask (w3m-search 0) event-symbol-elements (w3m-search) modifier-cache ((0 . w3m-search)))

(autoload ("w3m-search" ("/root/.emacs.d/elisp/start.d/w3m_mode_start.elc" . 3071) t nil) event-symbol-element-mask (w3m-search 0) event-symbol-elements (w3m-search) modifier-cache ((0 . w3m-search)))

nil

(symbol-plist 'my-backward-seq)
(event-symbol-element-mask (my-backward-seq 0) event-symbol-elements (my-backward-seq) modifier-cache ((0 . my-backward-seq)))








(unintern 'ace-jump-move)
t

t

t


(defvar purge-package-list '("5x5"
                             "animate"
                             "blackbox"
                             "bruce"
                             "bubbles"
                             "cookie1"
                             "decipher"
                             "dissociate"
                             "doctor"
                             "dunnet"
                             "fortune"
                             "gamegrid"
                             "gametree"
                             "gomoku"
                             "handwrite"
                             "hanoi"
                             "landmark"
                             "life"
                             "meese"
                             "morse"
                             "mpuz"
                             "pong"
                             "snake"
                             "solitaire"
                             "spook"
                             "studly"
                             "tetris"
                             "yow"
                             "zone"))
(mapatoms
 (function
  (lambda (symbol)
    (when (symbol-file symbol)
      (when (member (file-name-sans-extension
                     (file-name-nondirectory (symbol-file symbol))) purge-package-list)
        (unintern symbol)
        (prin1 symbol)
        (princ "\n"))
      ))))

dunnet
fortune-from-region
cookie-snarf
animate-sequence
bruce
mpuz
yow
fortune-to-signature
snake
pong
insert-zippyism
snarf-bruces
tetris
hanoi-unix
animate-string
morse-region
studlify-word
snarf-spooks
handwrite
lm-test-run
shuffle-vector
gomoku
decipher
dissociated-press
bubbles
lm
hanoi-unix-64
apropos-zippy
cookie-insert
doctor
solitaire
cookie
psychoanalyze-pinhead
zone
hanoi
life
fortune
studlify-region
fortune-add-fortune
decipher-mode
animate-birthday-present
spook
unmorse-region
studlify-buffer
fortune-compile
nil

blackbox
nil

nil

5x5-crack
5x5-crack-xor-mutate
5x5-crack-randomly
5x5
5x5-crack-mutating-best
5x5-crack-mutating-current
nil


(memq "5x5" '(hello
              5x5))
nil

nil



(symbol-file '5x5)
"5x5"

(file-name-sans-extension (file-name-nondirectory "/root/.emacs.d/elisp/start.d/w3m_mode_start.elc"))
"w3m_mode_start"

"w3m_mode_start"

"/root/.emacs.d/elisp/start.d/w3m_mode_start"

"/root/.emacs.d/elisp/start.d/w3m_mode_start.elc"

** Thu 06 Dec 2012 03:35:02 AM JST


(defun recover-last-version ()
  (interactive)
  (let* ((basic-name (make-backup-file-name-1 (buffer-file-name)))
         (base-versions (concat (file-name-nondirectory basic-name)
                                ".~"))
         (backup-extract-version-start (length base-versions))
         (high-water-mark 0)
         (min 0)
         possibilities versions vnumber)
    (condition-case ()
        (progn (setq possibilities (file-name-all-completions
                                    base-versions
                                    (file-name-directory basic-name))
                     versions (sort (mapcar #'backup-extract-version
                                            possibilities)
                                    #'<)
                     high-water-mark (apply 'max 0 versions)
                     )
               (dotimes (n kept-old-versions)
                 (pop versions))
               (setq min (apply 'min versions)))
      (file-error (setq possibilities nil)))
      (when (file-exists-p (format "%s.~%d~" basic-name high-water-mark))
        (setq vnumber (read-from-minibuffer
                       (format "Recover from %d to %d: " min high-water-mark)
                       (number-to-string high-water-mark)))
        (if (and (>= high-water-mark (string-to-number vnumber))
                 (<= min (string-to-number vnumber)))
            (let ((inhibit-read-only t))
              (erase-buffer)
              (insert-file-contents (format "%s.~%s~" basic-name vnumber) nil)
              (message (format "recovered from %s.~%s~" basic-name vnumber)))
          (error (format "error: %s.~%s~" basic-name vnumber))))))


(make-backup-file-name-1 (buffer-file-name))


(>= "20" "20")

nil

t


(string-to-number (read-from-minibuffer "Recover from: " (number-to-string 50)))
50 (#o62, #x32)

"40"

"50"


(apply 'max tes)
4
tes
(0 2 4 3)

4
(setq tes '(0 2 4 3))

(min )
(pop tes)
0
tes
(2 4 3)
(dotimes (n kept-old-versions)
 (pop tes))
nil
tes
(4 3)




kept-old-versions
1

** Thu 06 Dec 2012 04:32:18 AM JST
(symbol-file 'mark-word)
"/usr/share/emacs/23.2/lisp/simple.elc"


(defun remark ()
  (interactive)
  (save-excursion
    (goto-char (region-beginning))
    (push-mark nil nil t))
  )

(defun remark ()
  "Revive marked region."
  (interactive)
  (let ((p (point)))
    (goto-char (region-beginning))
    (push-mark nil nil t)
    (goto-char p)))


(global-set-key (kbd "C-c SPC") 'remark)
(global-set-key (kbd "C-c C-SPC") 'remark)

** Sat 08 Dec 2012 12:09:54 AM JST
(delete-other-windows)
nil

nil

nil


(defun startup-display ()
  (delete-other-windows)
  (switch-message)
  (split-window-vertically)
  (other-window 1)
  (if (get-buffer start-loader-buf-name)
      (progn
        (switch-to-buffer start-loader-buf-name)
        (split-window-vertically)
        (switch-to-buffer "*scratch*"))
    (switch-to-buffer "*scratch*")))
** Sun 09 Dec 2012 11:21:24 AM JST
(header-end-line)
(symbol-file 'add-change-log-entry-other-window)
"/usr/share/emacs/23.2/lisp/add-log.elc"
(current-time-string)
"Sat Dec  8 17:42:36 2012"
(let ((str  (current-time-string)))
              (concat (if (equal ?\  (aref str 8))
                          (substring str 9 10)
                        (substring str 8 10))
                      "-" (substring str 4 7) "-" (substring str 20 24)))
"8-Dec-2012"

"8-Dec-2012"
(concat "^\\(" (and comment-start
                                               (regexp-quote comment-start))
                                   (regexp-quote (header-prefix-string)) "\\|"
                                   (if (and comment-start
                                            (not (string= "" comment-start)))
                                       (concat "\\|"
                                               (regexp-quote comment-start))
                                     "")
                                   "\\)" " *\\(" header-history-label
                                   "\\|HISTORY\\)")
"^\\(;;; \\|\\|;\\) *\\(Change Log:\\|HISTORY\\)"




(defun make-revision ()
  "Prepare for a new history revision.  Insert history line if inexistant."
  (interactive)
  (setq comment-start  (or comment-start "\;")) ; Use Lisp comment as default.
  (let ((header-prefix-string   (header-prefix-string))
        (logical-comment-start  (if (= 1 (length comment-start))
                                    (concat comment-start comment-start " ")
                                  comment-start)))
    ;; Look for the history line
    (beginning-of-buffer)               ; Leave a mark behind.
    (if (re-search-forward (concat "^\\(" (and comment-start
                                               (regexp-quote comment-start))
                                   (regexp-quote (header-prefix-string)) "\\|"
                                   (if (and comment-start
                                            (not (string= "" comment-start)))
                                       (concat "\\|"
                                               (regexp-quote comment-start))
                                     "")
                                   "\\)" " *\\(" header-history-label
                                   "\\|HISTORY\\)") ; Backward compatibility.
                           header-max t)
        (progn
          (forward-line 1)
          (end-of-line))
      ;; We did not find a history line, add one
      (goto-char (point-min))
      ;; find the first line that is not part of the header
      (while (and (< (point) header-max)
                  (looking-at (concat "[ \t]*\\("
                                      (regexp-quote (header-prefix-string))
                                      (if (and comment-start
                                               (not (string= "" comment-start)))
                                          (concat "\\|" (regexp-quote comment-start))
                                        "")
                                      (if (and comment-end (not (string= "" comment-end)))
                                          (concat "\\|" (regexp-quote comment-end))
                                        "")
                                      "\\)")))
        (forward-line 1))
      (insert "\n" logical-comment-start header-history-label)
      (save-excursion (insert "\n" comment-end)))
    ;; We are now on the line with the header-history-label label
    (insert "\n" header-prefix-string
            "\n" header-prefix-string
            (format-time-string "%Y/%m/%d")
            "    " (user-full-name)
            ;;"  |>Ident<|\n"
            "  \n" header-prefix-string "   ")))




(concat "[ \t]*\\("
                                      (regexp-quote (header-prefix-string))
                                      (if (and comment-start
                                               (not (string= "" comment-start)))
                                          (concat "\\|" (regexp-quote comment-start))
                                        "")
                                      (if (and comment-end (not (string= "" comment-end)))
                                          (concat "\\|" (regexp-quote comment-end))
                                        "")
                                      "\\)")
"[ 	]*\\(;; \\|;\\)"




(symbol-file 'anything-lisp-completion-at-point)
"/root/.emacs.d/elisp/plugin/anything-config.elc"

** Sun 09 Dec 2012 06:34:02 PM JST
(defun new-header ()
  (interactive)
  (let ((inhibit-read-only t)
        description)
    (goto-char (point-min))
    (when (search-forward-regexp "^;;; .+ ---")
      (setq description (filter-buffer-substring (progn
                                                   (skip-chars-forward " \t")
                                                   (point))
                                                 (progn
                                                   (end-of-line)
                                                 (point))
                                                 nil t)))

    (when (or (search-forward-regexp "^;; .+====================\n" nil t)
              (search-forward-regexp "^;;; code:$" nil t))
      (delete-region (point-min) (point))
      )
    (let ((make-header-hook '(header-mode-line
                                 header-title
                                 header-blank
                                 ;;
                                 header-copyright
                                 header-blank
                                 ;; header-file-name
                                 ;; header-description
                                 ;;header-status
                                 header-author
                                 header-maintainer
                                 header-version
                                 header-creation-date
                                 header-modification-date
                                 ;;header-rcs-id
                                 ;;header-sccs
                                 ;; header-modification-author
                                 ;; header-update-count
                                 header-blank
                                 header-end-line
                                 header-free-software
                                 ;; header-url
                                 ;; header-doc-url
                                 header-end-line
                                 header-commentary
                                 header-underline
                                 ;; header-keywords
                                 ;; header-compatibility
                                 header-blank
                                 header-lib-requires
                                 ;;
                                 header-end-line
                                 header-history
                                 header-underline
                                 ;; header-rcs-log
                                 header-blank
                                 header-code)))
      (make-header)
      (insert description)
      (make-revision)
      (insert "Created this header.")
      )
    ))

(let ((inhibit-read-only t))
  (do-directory-files "/root/.emacs.d/" 'new-header "\\.el\\'")
  )
nil

nil

nil

nil

** Mon 10 Dec 2012 03:55:38 PM JST
(if (and (file-exists-p (concat my-start-dir loaddefs_init_file))
         (not make-loaddefs-flag))
    (make-loaddefs_start)
  ())



(unless (file-exists-p (concat my-start-dir loaddefs_init_file))
  (make-loaddefs_start))
(when make-loaddefs-flag
  (kill-emacs))


(defvar loaddefs_init_file (concat my-start-dir "06_loaddefs_start.el"))
(if make-loaddefs-flag
    (if (or (file-exists-p loaddefs_init_file)
            (file-exists-p (concat loaddefs_init_file "c")))
        ())



    (progn (cond ((file-exists-p loaddefs_init_file)
                  (delete-file loaddefs_init_file)
                  (delete-file (concat loaddefs_init_file "c"))))
           (make-loaddefs_start)))

(delete-file "/tmp/nothing_su.el")

(delete-)
** Thu 13 Dec 2012 06:21:37 PM JST
test
** Fri 14 Dec 2012 03:18:08 PM JST
(face-spac-set )




(face-spec-set 'anything-M-x-key-face         '((t (:foreground "orange" :underline t))))
(face-spec-set 'anything-apt-deinstalled      '((t (:foreground "DimGray"))))
(face-spec-set 'anything-apt-installed        '((t (:foreground "green"))))
(face-spec-set 'anything-bmkext-file          '((t (:foreground "Deepskyblue2"))))
(face-spec-set 'anything-bmkext-gnus          '((t (:foreground "magenta"))))
(face-spec-set 'anything-bmkext-info          '((t (:foreground "green"))))
(face-spec-set 'anything-bmkext-man           '((t (:foreground "Orange4"))))
(face-spec-set 'anything-bmkext-no--file      '((t (:foreground "grey"))))
(face-spec-set 'anything-bmkext-w3m           '((t (:foreground "yellow"))))
(face-spec-set 'anything-bookmarks-su-face    '((t (:foreground "red"))))
(face-spec-set 'anything-buffer-saved-out     '((t (:foreground "yellow"))))
(face-spec-set 'anything-buffer-not-saved     '((t (:foreground "yellow"))))
(face-spec-set 'anything-candidate-number     '((t (:background "Yellow" :foreground "black"))))
(face-spec-set 'anything-dir-name-face        '((t (:foreground "DodgerBlue1"))))
(face-spec-set 'anything-emms-playlist        '((t (:foreground "Springgreen4" :underline t))))
(face-spec-set 'anything-ff-directory         '((t (:foreground "LimeGreen"))))
(face-spec-set 'anything-ff-executable        '((t (:background "red" :foreground "green"))))
(face-spec-set 'anything-ff-file              '((t (:foreground "Darksalmon" :underline t))))
(face-spec-set 'anything-ff-invalid-symlink   '((t (:background "red" :foreground "black"))))
(face-spec-set 'anything-ff-prefix            '((t (:background "yellow" :foreground "black"))))
(face-spec-set 'anything-ff-symlink           '((t (:foreground "DarkOrange"))))
(face-spec-set 'anything-file-name-face       '((t (:foreground "aquamarine3"))))
(face-spec-set 'anything-gentoo-match-face    '((t (:foreground "red"))))
(face-spec-set 'anything-grep-file            '((t (:foreground "BlueViolet" :underline t))))
(face-spec-set 'anything-grep-finish          '((t (:foreground "Green"))))
(face-spec-set 'anything-grep-lineno          '((t (:foreground "Darkorange1"))))
(face-spec-set 'anything-grep-match           '((t (:inherit match))))
(face-spec-set 'anything-grep-running         '((t (:foreground "Red"))))
(face-spec-set 'anything-header               '((t (:inherit header-line))))
(face-spec-set 'anything-lisp-completion-info '((t (:foreground "red"))))
(face-spec-set 'anything-lisp-show-completion '((t (:background "DarkSlateGray"))))
(face-spec-set 'anything-match                '((t (:inherit match))))
(face-spec-set 'anything-overlay-line-face    '((t (:background "IndianRed4" :underline t))))
(face-spec-set 'anything-w3m-bookmarks-face   '((t (:foreground "cyan1" :underline t))))
(face-spec-set 'anything-visible-mark         '((((min-colors 88) (background dark)) (:background "Red"))))



(face-list)
(my-face-f-2
bm-face
c-includes-unknown-face
c-includes-already-face
c-includes-close-face
c-includes-open-face
column-marker-3
column-marker-2
column-marker-1
ert-test-result-unexpected
ert-test-result-expected
hlline-face
linkd-command
linkd-wiki
linkd-icon
linkd-tag-name
linkd-tag
linkd-star-name
linkd-star
linkd-generic-link-name
linkd-generic-link
log4j-font-lock-fatal-face
log4j-font-lock-error-face
log4j-font-lock-warn-face
log4j-font-lock-info-face
log4j-font-lock-debug-face
minimap-semantic-type-face
minimap-semantic-variable-face
minimap-semantic-function-face
minimap-active-region-background
minimap-font-face
mwe:nesting-face-9
mwe:nesting-face-8
mwe:nesting-face-7
mwe:nesting-face-6
mwe:nesting-face-5
mwe:nesting-face-4
mwe:nesting-face-3
mwe:nesting-face-2
mwe:nesting-face-1
mwe:nesting-face-0
rainbow-delimiters-depth-9-face
rainbow-delimiters-depth-8-face
rainbow-delimiters-depth-7-face
rainbow-delimiters-depth-6-face
rainbow-delimiters-depth-5-face
rainbow-delimiters-depth-4-face
rainbow-delimiters-depth-3-face
rainbow-delimiters-depth-2-face
rainbow-delimiters-depth-1-face
rainbow-delimiters-unmatched-face
mc/region-face
mc/cursor-face
mm/mirror-face
mm/master-face
font-lock-title-face
vline-visual
vline
grep-edit-done-face
grep-edit-reject-face
grep-edit-file-face
grep-edit-face
moccur-edit-reject-face
moccur-edit-done-face
moccur-edit-file-face
moccur-edit-face
search-buffers-header-face
search-buffers-face
moccur-current-line-face
moccur-face
ascii-non-ascii-face
irfc-reference-face
irfc-requirement-keyword-face
irfc-table-item-face
irfc-rfc-link-face
irfc-std-number-face
irfc-rfc-number-face
irfc-head-number-face
irfc-head-name-face
irfc-title-face
ace-jump-face-foreground
ace-jump-face-background
ee-link-visited
ee-link
ee-bookmarked
ee-marked
ee-omitted
ee-shadow
ee-category
org-mode-line-clock
org-latex-and-export-specials
org-time-grid
org-agenda-restriction-lock
org-upcoming-deadline
org-scheduled-previously
org-agenda-dimmed-todo-face
org-scheduled-today
org-scheduled
org-agenda-date-weekend
org-agenda-clocking
org-agenda-date-today
org-agenda-date
org-agenda-structure
org-clock-overlay
org-verse
org-quote
org-verbatim
org-block
org-meta-line
org-code
org-formula
org-table
org-checkbox-statistics-done
org-checkbox-statistics-todo
org-checkbox
org-headline-done
org-agenda-done
org-done
org-todo
org-tag
org-sexp-date
org-date
org-target
org-ellipsis
org-footnote
org-link
org-archived
org-warning
org-agenda-column-dateline
org-column-title
org-column
org-property-value
org-drawer
org-special-keyword
org-level-8
org-level-7
org-level-6
org-level-5
org-level-4
org-level-3
org-level-2
org-level-1
org-hide
outline-8
outline-7
outline-6
outline-5
outline-4
outline-3
outline-2
outline-1
svn-mark-face
change-log-acknowledgement
change-log-function
change-log-conditionals
change-log-list
change-log-file
change-log-email
change-log-name
change-log-date
w3m-link-numbering
w3m-form
w3m-header-line-location-content
w3m-header-line-location-title
w3m-insert
w3m-strike-through
w3m-underline
w3m-italic
w3m-bold
w3m-history-current-url
w3m-image-anchor
w3m-image
w3m-current-anchor
w3m-arrived-anchor
w3m-anchor
w3m-tab-mouse
w3m-tab-selected-background
w3m-tab-background
w3m-tab-selected-retrieving
w3m-tab-selected
w3m-tab-unselected-unseen
w3m-tab-unselected-retrieving
w3m-tab-unselected
w3m-form-button-pressed
w3m-form-button-mouse
w3m-form-button
flymake-infoline
flymake-warnline
flymake-errline
antlr-literal
antlr-tokenref
antlr-ruleref
antlr-tokendef
antlr-ruledef
antlr-syntax
antlr-keyword
antlr-default
bookmark-menu-heading
dired-ignored
dired-symlink
dired-perm-write
dired-warning
dired-flagged
dired-marked
dired-mark
dired-header
yas/field-debug-face
yas/field-highlight-face
ac-yasnippet-selection-face
ac-yasnippet-candidate-face
ac-gtags-selection-face
ac-gtags-candidate-face
ac-selection-face
ac-candidate-face
ac-completion-face
popup-menu-selection-face
popup-menu-face
popup-tip-face
popup-isearch-match
popup-scroll-bar-background-face
popup-scroll-bar-foreground-face
popup-face
eldoc-highlight-function-argument
multi-region-face
iswitchb-invalid-regexp
iswitchb-virtual-matches
iswitchb-current-match
iswitchb-single-match
tabbar-button-highlight
tabbar-button
tabbar-separator
tabbar-highlight
tabbar-selected
tabbar-unselected
tabbar-default
mcomplete-substr-method-alternative-part-face
mcomplete-substr-method-fixed-part-face
mcomplete-prefix-method-alternative-part-face
mcomplete-prefix-method-fixed-part-face
ahs-edit-mode-face
ahs-plugin-bod-face
ahs-plugin-whole-buffer-face
ahs-plugin-defalt-face
ahs-warning-face
ahs-definition-face
ahs-face
custom-button-face
custom-changed-face
custom-documentation-face
custom-face-tag-face
custom-group-tag-face
custom-group-tag-face-1
custom-invalid-face
custom-modified-face
custom-rogue-face
custom-saved-face
custom-set-face
custom-state-face
custom-variable-button-face
custom-variable-tag-face
fl-comment-face
fl-doc-string-face
fl-function-name-face
fl-keyword-face
fl-string-face
fl-type-face
font-lock-reference-face
gnus-cite-attribution-face
gnus-cite-face-1
gnus-cite-face-10
gnus-cite-face-11
gnus-cite-face-2
gnus-cite-face-3
gnus-cite-face-4
gnus-cite-face-5
gnus-cite-face-6
gnus-cite-face-7
gnus-cite-face-8
gnus-cite-face-9
gnus-emphasis-bold
gnus-emphasis-bold-italic
gnus-emphasis-highlight-words
gnus-emphasis-italic
gnus-emphasis-underline
gnus-emphasis-underline-bold
gnus-emphasis-underline-bold-italic
gnus-emphasis-underline-italic
gnus-group-mail-1-empty-face
gnus-group-mail-1-face
gnus-group-mail-2-empty-face
gnus-group-mail-2-face
gnus-group-mail-3-empty-face
gnus-group-mail-3-face
gnus-group-mail-low-empty-face
gnus-group-mail-low-face
gnus-group-news-1-empty-face
gnus-group-news-1-face
gnus-group-news-2-empty-face
gnus-group-news-2-face
gnus-group-news-3-empty-face
gnus-group-news-3-face
gnus-group-news-4-empty-face
gnus-group-news-4-face
gnus-group-news-5-empty-face
gnus-group-news-5-face
gnus-group-news-6-empty-face
gnus-group-news-6-face
gnus-group-news-low-empty-face
gnus-group-news-low-face
gnus-header-content-face
gnus-header-from-face
gnus-header-name-face
gnus-header-newsgroups-face
gnus-header-subject-face
gnus-signature-face
gnus-splash-face
gnus-summary-cancelled-face
gnus-summary-high-ancient-face
gnus-summary-high-read-face
gnus-summary-high-ticked-face
gnus-summary-high-unread-face
gnus-summary-low-ancient-face
gnus-summary-low-read-face
gnus-summary-low-ticked-face
gnus-summary-low-unread-face
gnus-summary-normal-ancient-face
gnus-summary-normal-read-face
gnus-summary-normal-ticked-face
gnus-summary-normal-unread-face
gnus-summary-selected-face
message-cited-text-face
message-header-cc-face
message-header-name-face
message-header-newsgroups-face
message-header-other-face
message-header-subject-face
message-header-to-face
message-header-xheader-face
message-mml-face
message-separator-face
modeline-mousable
modeline-mousable-minor-mode
primary-selection
zmacs-region
anything-M-x-key-face
anything-apt-deinstalled
anything-apt-installed
anything-bmkext-file
anything-bmkext-gnus
anything-bmkext-info
anything-bmkext-man
anything-bmkext-no--file
anything-bmkext-w3m
anything-bookmarks-su-face
anything-buffer-saved-out
anything-buffer-not-saved
anything-candidate-number
anything-dir-name-face
anything-emms-playlist
anything-ff-directory
anything-ff-executable
anything-ff-file
anything-ff-invalid-symlink
anything-ff-prefix
anything-ff-symlink
anything-file-name-face
anything-gentoo-match-face
anything-grep-file
anything-grep-finish
anything-grep-lineno
anything-grep-match
anything-grep-running
anything-header
anything-lisp-completion-info
anything-lisp-show-completion
anything-match
anything-overlay-line-face
anything-w3m-bookmarks-face
anything-visible-mark
ascii-ascii-face
dired-directory
widget-button-pressed
widget-inactive
widget-single-line-field
widget-field
widget-button
widget-documentation
linum
undo-tree-visualizer-register-face
undo-tree-visualizer-active-branch-face
undo-tree-visualizer-current-face
undo-tree-visualizer-default-face
flymake-message-face
info-header-node
info-header-xref
info-xref-visited
info-xref
info-menu-star
info-menu-header
info-node
info-reference-item
info-syntax-class-item
info-macro-ref-item
info-user-option-ref-item
info-command-ref-item
info-special-form-ref-item
info-variable-ref-item
info-function-ref-item
info-title-4
info-title-3
info-title-2
info-title-1
info-single-quote
info-string
info-quoted-name
info-menu
info-file
hl-line
col-highlight
cua-global-mark
cua-rectangle-noselect
cua-rectangle
ffap
show-paren-mismatch
show-paren-match
compilation-column-number
compilation-line-number
compilation-info
compilation-warning
compilation-error
comint-highlight-prompt
comint-highlight-input
tooltip
buffer-menu-buffer
match
query-replace
file-name-shadow
lazy-highlight
isearch-fail
isearch
font-lock-regexp-grouping-construct
font-lock-regexp-grouping-backslash
font-lock-preprocessor-face
font-lock-negation-char-face
font-lock-warning-face
font-lock-constant-face
font-lock-type-face
font-lock-variable-name-face
font-lock-function-name-face
font-lock-builtin-face
font-lock-keyword-face
font-lock-doc-face
font-lock-string-face
font-lock-comment-delimiter-face
font-lock-comment-face
next-error
button
completions-common-part
completions-first-difference
completions-annotations
help-argument-name
menu
tool-bar
mouse
cursor
border
scroll-bar
fringe
minibuffer-prompt
vertical-border
header-line
mode-line-buffer-id
mode-line-emphasis
mode-line-highlight
mode-line-inactive
mode-line
nobreak-space
escape-glyph
trailing-whitespace
secondary-selection
region
highlight
link-visited
link
shadow
variable-pitch
fixed-pitch
underline
bold-italic
italic
bold
default)


(symbol-file 'custom-button-face)
nil
custom-button-face


(eval-after-load 'cus-edit
   '(progn
      (message "hello")))
nil




(eval-after-load 'gnus-cite
   '(progn
      (message "hello")))
nil



(eval-after-load 'message
  '(progn
     (message "hello")))
nil



(color-theme-variables '(color-theme-t1
     ((background-color . "black")
      (background-mode  . dark)
      (border-color     . "white")
      (cursor-color     . "yellow")
      (foreground-color . "white")
      (mouse-color      . "white smoke"))
     ((gnus-mouse-face . highlight)
      (list-matching-lines-face . bold)
      (view-highlight-face . highlight))
     ;; (default ((t (nil))))

     ;; (fl-comment-face ((t (:foreground "pink"))))
     ;; (fl-doc-string-face ((t (:foreground "purple"))))
     ;; (fl-function-name-face ((t (:foreground "red"))))
     ;; (fl-keyword-face ((t (:foreground "cyan"))))
     ;; (fl-string-face ((t (:foreground "green"))))
     ;; (fl-type-face ((t (:foreground "yellow"))))


     ;; (highlight ((t (:background "darkolivegreen"))))

     ))
((gnus-mouse-face . highlight) (list-matching-lines-face . bold) (view-highlight-face . highlight))

(set 'list-matching-lines-face 'bold)
(set 'view-highlight-face 'highlight)

highlight


(eval-after-load 'replace
  '(progn
     (message "hello")))
nil

(eval-after-load 'view
  '(progn
     (message "hello")))
"hello"



(setq tes '(color-theme-t1
     ((background-color . "black")
      (background-mode  . dark)
      (border-color     . "white")
      (cursor-color     . "yellow")
      (foreground-color . "white")
      (mouse-color      . "white smoke"))
     ((gnus-mouse-face . highlight)
      (list-matching-lines-face . bold)
      (view-highlight-face . highlight))
     ;; (default ((t (nil))))

     ;; (fl-comment-face ((t (:foreground "pink"))))
     ;; (fl-doc-string-face ((t (:foreground "purple"))))
     ;; (fl-function-name-face ((t (:foreground "red"))))
     ;; (fl-keyword-face ((t (:foreground "cyan"))))
     ;; (fl-string-face ((t (:foreground "green"))))
     ;; (fl-type-face ((t (:foreground "yellow"))))


     ;; (highlight ((t (:background "darkolivegreen"))))

     ))
(color-theme-t1 ((background-color . "black") (background-mode . dark) (border-color . "white") (cursor-color . "yellow") (foreground-color . "white") (mouse-color . "white smoke")) ((gnus-mouse-face . highlight) (list-matching-lines-face . bold) (view-highlight-face . highlight)))


(color-theme-canonic tes)
(color-theme-t1 ((background-color . "black") (background-mode . dark) (border-color . "white") (cursor-color . "yellow") (foreground-color . "white") (mouse-color . "white smoke")) ((gnus-mouse-face . highlight) (list-matching-lines-face . bold) (view-highlight-face . highlight)) nil)
(color-theme-variables tes)
((gnus-mouse-face . highlight) (list-matching-lines-face . bold) (view-highlight-face . highlight))
(color-theme-faces tes)
nil

(modify-frame-parameters (selected-frame)
                         '((background-color . "black")
                           (background-mode . dark)
                           (border-color . "white")
                           (cursor-color . "yellow")
                           (foreground-color . "white")
                           (mouse-color . "white smoke")))


(symbol-file 'modify-frame-parameters)
nil

nil

nil

nil






(+
 0.00150
 0.00152
 0.00160
 0.00160
 0.00164
 0.00165
 0.00168
 0.00168
 0.00170
 0.00171
 0.00171
 0.00172
 0.00174
 0.00174
 0.00177
 0.00178
 0.00179
 0.00180
 0.00180
 0.00181
 0.00182
 0.00183
 0.00183
 0.00183
 0.00184
 0.00187
 0.00190
 0.00191
 0.00192
 0.00192
 0.00192
 0.00193
 0.00194
 0.00196
 0.00200
 0.00201
 0.00204
 0.00204
 0.00207
 0.00212
 0.00216
 0.00219
 0.00220
 0.00221
 0.00223
 0.00228
 0.00229
 0.00238
 0.00244
 0.00245
 0.00251
 0.0026
 0.00260
 0.00263
 0.00264
 0.00282
 0.00287
 0.00347
 0.00356
 0.00389
 0.00737
 0.00800
 0.00887
 0.00898
 0.00920
 0.00922
 0.00976
 0.01000
 0.01026
 0.01200
 0.01231
 0.01355
 0.01846
 0.01950
 0.02141
 0.03106
 0.04194
 0.05798
 0.07842
 0.29841
 0.31466)
1.12642









after-init-hook
(alcs-make-candidates dired-x-bind-find-file start-loader-show-log color-theme-backup-original-values #[nil "\300\301!\207" [auto-insert-mode 1] 2] #[nil "\301!\207" [save-kill-file-name load] 2] auto-recover-startup Emacs-log-init (lambda nil (ad-disable-advice (quote autoload) (quote before) (quote after-require-push)) (ad-activate (quote autoload)) (after-require--set-library)) #[nil "\301\302\"\207" [debug-time my-time-lag "
------ Standard librarys time. ------"] 3] debian-ispell-set-default-dictionary debian-ispell-set-startup-menu x-wm-set-size-hint #[nil "\301\302\"\210\303 \207" [before-init-time my-time-lag "------ Total time. ------" startup-display] 3] table--make-cell-map)

** Sat 15 Dec 2012 08:33:59 PM JST
(iswitchb-buffer)
#<buffer *Compile-Log*>

** Tue 18 Dec 2012 01:26:50 AM JST
;;;;

(get-text-property (point) )


(forward-whi    he)

(symbol-file 'forward-whitespace)
"/usr/share/emacs/23.2/lisp/thingatpt.elc"
(symbol-file 'my-insert-date)
"/root/.emacs.d/elisp/start.d/08_simple_start.elc"
(symbol-file 'update-header-footer)
"/root/.emacs.d/elisp/start.d/30_header2_plugin_start.elc"
ctl
cua--



mode-specific-map
(keymap (67108896 . remark) (32 . remark) (14 . call-navi) (67108905 . mc/mark-all-like-this) (100 . delete-indentation) (105 . imenu) (108 . info-lookup-symbol) (7 . keyboard-quit))

(define-key ctl-e-map [(control ?.)] 'end-of-line)



(define-key ctl-e-map
  "\C-." 'end-of-line)

yes

end-of-line
(key-binding "\C-x\C-f")
find-file-at-point

** Mon 24 Dec 2012 09:15:41 AM JST
hello
world
hello
world
hello
world
hello
world
hello
world
hello
world
hello
world
(clipboard-yank
 (clipboard-yank

(clipboard-yank
cua--last-killed-rectangle
(#("(clipboard-yank" 0 15 (fontified t)) "hell" "worl" "hell" "worl" "hell" "worl")
                     hell
                     worl
                     hell
                     worl
                     hell
                     worl

this-original-command
eval-print-last-sexp
cua-rectangle-modifier-key
meta
(defun tes ()
  (interactive)
  (let ((start (mark)) (end (point)))
    (clipboard-kill-ring-save start end)
  ))
(global-set-key (kbd "H-@") 'tes)

pre-command-hook
(ac-handle-pre-command t)
cua-mode
nil

t
(cua-mode 1)
t

nil

(symbol-file 'clipboard-kill-region)

(kill-word)


x-select-enable-clipboard

(defun my-backward-delete-word (arg)
  "Delete backward word."
  (interactive "*p")
  (cond  ((looking-at "^") (join-line))
         ((looking-back "^[ \t]*") (delete-region (point) (match-beginning 0)))
         (t
          (let ((x-select-enable-clipboard nil))
            (backward-kill-word arg)
            ;; (kill-region (point) (progn (forward-word (- arg)) (point)))
            ))))

(backward-kill-
                    1)
(kill-new "hello" nil)
"hello"
(symbol-name 'kill-new)
"kill-new"

"hello"
(describe-)
x-select-enable-(kill-region (point) (progn (forward-word arg) (point)))
(symbol-file 'kill-(kill-region (point) (progn (forward-word arg) (point))))
"/usr/share/emacs/23.2/lisp/simple.elc"
(symbol-file 'x-clipboard-yank)
"/usr/share/emacs/23.2/lisp/term/x-win.elc"
(x-selection-value 'CLIPBOARD)
#("(x-selection-value 'CLIPBOARD)" 0 30 (fontified t))
(x-selection-value 'CLIPBOARD)CLIPBOARD)


(defun cua-paste (arg)
  "Paste last cut or copied region or rectangle.
An active region is deleted before executing the command.
With numeric prefix arg, paste from register 0-9 instead.
If global mark is active, copy from register or one character."
  (interactive "P")
  (setq arg (cua--prefix-arg arg))
  (let ((regtxt (and cua--register (get-register cua--register)))
	(count (prefix-numeric-value arg))
	paste-column paste-lines)
    (cond
     ((and cua--register (not regtxt))
      (message "Nothing in register %c" cua--register))
     (cua--global-mark-active
      (if regtxt
	  (cua--insert-at-global-mark regtxt)
	(when (not (eobp))
	  (cua--insert-at-global-mark (filter-buffer-substring (point) (+ (point) count)))
	  (forward-char count))))
     (buffer-read-only
      (error "Cannot paste into a read-only buffer"))
     (t
      ;; Must save register here, since delete may override reg 0.
      (message "DEBUG-1-nofile")
      (if mark-active
          (if cua--rectangle
              (progn
                (goto-char (min (mark) (point)))
                (setq paste-column (cua--rectangle-left))
                (setq paste-lines (cua--delete-rectangle))
                (if (= paste-lines 1)
                    (setq paste-lines nil))) ;; paste all
            ;; Before a yank command, make sure we don't yank the
            ;; head of the kill-ring that really comes from the
            ;; currently active region we are going to delete.
            ;; That would make yank a no-op.
            (if (and (string= (filter-buffer-substring (point) (mark))
                              (car kill-ring))
                     (fboundp 'mouse-region-match)
                     (mouse-region-match))
                (current-kill 1))
            (cua-delete-region)))
      (cond
       (regtxt
        (message "DEBUG-2-nofile")
        (cond
         ;; This being a cons implies cua-rect is loaded?
         ((consp regtxt) (cua--insert-rectangle regtxt))
         ((stringp regtxt) (insert-for-yank regtxt))
         (t (message "Unknown data in register %c" cua--register))))
       ((and cua--last-killed-rectangle
             (eq (and kill-ring (car kill-ring)) (car cua--last-killed-rectangle)))
        (message "DEBUG-3-nofile")
        (let ((pt (point)))
          (when (not (eq buffer-undo-list t))
            (setq this-command 'cua--paste-rectangle)
            (undo-boundary)
            (setq buffer-undo-list (cons pt buffer-undo-list)))
          (cua--insert-rectangle (cdr cua--last-killed-rectangle)
                                 nil paste-column paste-lines)
          (if arg (goto-char pt))))
       ((eq this-original-command 'clipboard-yank)
        (message "DEBUG-4-nofile")
        (clipboard-yank))
       ((eq this-original-command 'x-clipboard-yank)
        (message "DEBUG-5-nofile")
        (x-clipboard-yank))
       (t
        (message "DEBUG-6-nofile")
        (yank arg)))))))
x-x-clipboard-

(global-set-key "\C-v" 'x-clipboard-yank)
(let ( t)
  (setq hello t)
)

(symbol-file 'delete-region)
nil

(defun kill-new (string &optional replace yank-handler)
  "Make STRING the latest kill in the kill ring.
Set `kill-ring-yank-pointer' to point to it.
If `interprogram-cut-function' is non-nil, apply it to STRING.
Optional second argument REPLACE non-nil means that STRING will replace
the front of the kill ring, rather than being added to the list.

Optional third arguments YANK-HANDLER controls how the STRING is later
inserted into a buffer; see `insert-for-yank' for details.
When a yank handler is specified, STRING must be non-empty (the yank
handler, if non-nil, is stored as a `yank-handler' text property on STRING).

When the yank handler has a non-nil PARAM element, the original STRING
argument is not used by `insert-for-yank'.  However, since Lisp code
may access and use elements from the kill ring directly, the STRING
argument should still be a \"useful\" string for such uses."
  (if (> (length string) 0)
      (if yank-handler
          (put-text-property 0 (length string)
                             'yank-handler yank-handler string))
    (if yank-handler
        (signal 'args-out-of-range
                (list string "yank-handler specified for empty string"))))
  (if (fboundp 'menu-bar-update-yank-menu)
      (menu-bar-update-yank-menu string (and replace (car kill-ring))))
  (if (and replace kill-ring)
      (setcar kill-ring string)
    (message "will push")
    (push string kill-ring)
    (if (> (length kill-ring) kill-ring-max)
        (setcdr (nthcdr (1- kill-ring-max) kill-ring) nil)))
  (setq kill-ring-yank-pointer kill-ring)
  (if interprogram-cut-function
      (funcall interprogram-cut-function string (not replace))))





(car kill-ring)
#("hello world" 0 11 (fontified t))

""

""

minibuffer-setup-hook
(iswitchb-minibuffer-setup mcomplete-minibuffer-setup winner-save-unconditionally savehist-minibuffer-hook rfn-eshadow-setup-minibuffer minibuffer-history-isearch-setup minibuffer-history-initialize)
(remove-hook 'minibuffer-setup-hook '(lambda () (setq x-select-enable-clipboard nil)))
(iswitchb-minibuffer-setup mcomplete-minibuffer-setup winner-save-unconditionally savehist-minibuffer-hook rfn-eshadow-setup-minibuffer minibuffer-history-isearch-setup minibuffer-history-initialize)

(setq x-select-enable-clipboard t)
((lambda nil (setq x-select-enable-clipboard nil)) iswitchb-minibuffer-setup mcomplete-minibuffer-setup winner-save-unconditionally savehist-minibuffer-hook rfn-eshadow-setup-minibuffer minibuffer-history-isearch-setup minibuffer-history-initialize)

(iswitchb-minibuffer-setup mcomplete-minibuffer-setup winner-save-unconditionally savehist-minibuffer-hook rfn-eshadow-setup-minibuffer minibuffer-history-isearch-setup minibuffer-history-initialize)

x-clipboard-yank
t
x-select-enable-clipboard
nil

** Mon 24 Dec 2012 10:48:18 AM JST
This work is licensed to you under version 2 of the GNU General Public License. Alternatively, you
may choose to receive this work under any other license that grants the right to use, copy, modify,
and/or distribute the work, as long as that license imposes the restriction that derivative works
have to grant the same rights and impose the same restriction. For example, you may choose to receive
this work under the GNU Free Documentation License, the CreativeCommons ShareAlike License, the
XEmacs manual license, or similar licenses.

(setq tes '(reverse-chars-in-region
            reverse-line-region
            reverse-words))


(defun popup-function (list)
  (let ((func (popup-menu*
               (mapcar (lambda (x)
                         (popup-make-item x :value x))
                       list)
               :scroll-bar t)))
    (and func (call-interactively func))
    ))

(defun ttt ()
  (interactive)
  (popup-function tes)
  )
(global-set-key (kbd "H-@") 'ttt)
esrever-chars-in-region




(mapcar 'format-time-string time-format-list)
("Mon 24 Dec 2012 10:07:40 AM JST" "2012/12/24" "12/12/24" "12/24/12" "12/24" "20121224" "121224" "10:07:40" "10:07" "2012 年 12 月 24 日" "2012-12-24" "12-12-24" ...)

(symbol-file 'current-prefix-arg)
nil

nil
(symbol-file 'call-interactively)
nil



transpose-chars
transpose-lines
transpose-paragraphs
transpose-regions
transpose-sentences
transpose-sexps
transpose-words



(upcase-initials )
** Wed 26 Dec 2012 04:26:22 AM JST
(mapatoms)



(apropos)

(#'(lambda (symbol)
    (and (boundp symbol)
         (get symbol 'variable-documentation)))
'user-variable-p)
(defvar tes (make-keymap))
tes
tes
(keymap #^[nil nil keymap nil nil nil nil nil nil nil nil nil ...])
(define-prefix-command 'tes)
tes
(keymap)
(defvar ttt)
ttt
(define-prefix-command 'ttt)
ttt
(keymap)


(define-key hello "" 'world)
(define-key helo "world" 'yahoo)

** Wed 26 Dec 2012 05:46:39 AM JST
(symbol-file 'org-open-at-point)
"/usr/share/emacs/23.2/lisp/org/org.elc"
(symbol-file 'browse-url)
"/root/.emacs.d/elisp/plugin/anything-config.elc"
(define-key lisp-interaction-mode-map "\C-ch" 'anything-c-apropos)
browse-url-browser-function
w3m-browse-url-new-tab
(symbol-file 'w3m-browse-url-new-tab)
"/root/.emacs.d/elisp/start.d/w3m_mode_start.elc"
(symbol-file 'w3m-copy-buffer)
"/usr/share/emacs23/site-lisp/w3m/w3m.elc"
(symbol-)

** Sat 29 Dec 2012 10:26:18 PM JST
before-save-hook
(rope-before-save-actions delete-trailing-blank-lines delete-trailing-whitespace text-adjust-space-before-save-if-needed check-misspell force-backup-of-buffer)

py-help-at-point


(defvar py-temp-directory "/tmp/")
(defalias 'py-help-at-point 'py-describe-symbol)
(defun py-describe-symbol (&optional arg)
  "Print help on symbol at point.

Optional \\[universal-argument] used for debugging, will prevent deletion of temp file. "
  (interactive "P")
  (let* ((orig (point))
         (beg (progn (when (and (looking-back "(")(not (looking-at "\\sw"))) (forward-char -1))  (skip-chars-backward "a-zA-Z0-9_." (line-beginning-position))(point)))
         (end (progn (skip-chars-forward "a-zA-Z0-9_." (line-end-position))(point)))
         (sym (buffer-substring-no-properties beg end))
         (origfile (buffer-file-name))
         (temp (make-temp-name (buffer-name)))
         (file (concat (expand-file-name temp py-temp-directory) ".py"))
         (cmd (py-find-imports)))
    (goto-char orig)
    (when cmd
      (setq cmd (mapconcat
                 (lambda (arg) (concat "try: " arg "\nexcept: pass\n"))
                 (split-string cmd ";" t)
                 "")))
    (setq cmd (concat "import pydoc\n"
                      cmd))
    (when (not py-remove-cwd-from-path)
      (setq cmd (concat cmd "import sys\n"
                        "sys.path.insert(0, '"
                        (file-name-directory origfile) "')\n")))
    (setq cmd (concat cmd "pydoc.help('" sym "')\n"))
    (with-temp-buffer
      (insert cmd)
      (write-file file))
    (py-process-file file "*Python-Help*")
    (when (file-readable-p file)
      (unless (eq 4 (prefix-numeric-value arg)) (delete-file file)))))


(global-set-key (kbd "H-@") 'py-help-at-point)
py-help-at-point

** 2013/01/10 11:38:57
** 2013/01/10 11:38:57
** 2013/01/10 11:38:57
** 2013/01/18 16:27:08

(symbol-file 'rope-organize-imports)

nil

(string= my-pylib-dir (car (cdr (cdr (split-string (getenv "PYTHONPATH") ";")))))

t



"l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"



("l:\\Office\\emacs\\.emacs.d\\data_e\\pylib")



("l:\\Office\\emacs\\.emacs.d\\data_e\\pylib" "l:\\Office\\emacs\\.emacs.d\\data_e\\pylib")



"L:\\Lib\\.pylib"



("L:\\Lib\\.pylib" "l:\\Office\\emacs\\.emacs.d\\data_e\\pylib" "l:\\Office\\emacs\\.emacs.d\\data_e\\pylib")



"L:\\Lib\\.pylib;l:\\Office\\emacs\\.emacs.d\\data_e\\pylib;l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"

(string-match (replace-regexp-in-string "\\\\" "\\\\\\\\" my-pylib-dir)

              (getenv "PYTHONPATH"))

14



12

(replace-regexp-in-string "\\\\" "\\\\\\\\" my-pylib-dir)

"l:\\\\Office\\\\emacs\\\\.emacs.d\\\\data_e\\\\pylib"





"l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"



nil



nil

my-pylib-dir

"l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"

(getenv "HEELLL")

nil

(if ""

    (message "hello"))

"hello"

(symbol-file 'path-separator)

nil

(replace-regexp-in-string ";[ \t]+$" "" "he  ;    llo  ;     ")

"he;llo  "



"he;llo  ; "



"he;llo  "



"he;llo  "



"he;llo  ; "



"he;llo"



""

   hello;

"hello"



"hello"

(replace-regexp-in-string "/" "\\\\" "/root")

"\\root"



"\\root\\home\\work"

(string-match "\\\\" "c:\\")



2



(getenv "PYTHONPATH")

"l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"



"L:\\Lib\\.pylib;l:\\Office\\emacs\\.emacs.d\\data_e\\pylib;l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"

(setenv "PYTHONPATH" "L:\\Lib\\.pylib")

"L:\\Lib\\.pylib"



"L:\\Lib\\.pylib;l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"



"\\"

(getenv "TEST")

"\\"

(python-setenv)

"l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"



"l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"



"l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"



"PYTHONPATH: L:\\Lib\\.pylib;l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"



"PYTHONPATH false"



"PYTHONPATH false"

(getenv "PYT")



(defun win-trim-env-value (value)

  (cond (((string-match "/" value)

          (replace-regexp-in-string "/" "\\\\" value))

         ((string-match "\\\\" value)

          (replace-regexp-in-string "\\\\" "\\\\\\\\" vl)))

        ))





(getenv "PYTHONPATH")

"l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"





(win-trim-env-value "C:\\windows\\")



(replace-regexp-in-string "/" "\\\\" "C:/windows/")

"C:\\windows\\"



"C:\\windows\\"



(defun tes ()

  (string-match "windows" "C:/windows/"))

tes



2



2

(tes)

3



2





(getenv "nothing")

nil



"C:\\\\windows\\\\"

(replace-regexp-in-string "\\\\" "\\\\\\\\" "/root/.emacs.d/")

"/root/.emacs.d/"

(add-env-path "HELLO" "C:\\windows")







(replace-regexp-in-string "yes" "tes" "windows hello")

"windows hello"



"tesdows hello"



(getenv "PYTHONPATH")

"l:\\Lib\\.pylib"



"l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"

(python-setenv)

nil



"PYTHONPATH: l:\\Lib\\.pylib;l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"



nil

(setenv "PYTHONPATH" "l:\\Lib\\.pylib")

"l:\\Lib\\.pylib"



"PYTHONPATH: l:\\Office\\emacs\\.emacs.d\\data_e\\pylib;l:\\Office\\emacs\\.emacs.d\\data_e\\pylib"



"PYTHONPATH false"



** 2013/01/31 10:26:28

(file-name-extension "tes.py")

"py"

(file-name-sans-extension "l:/system/PortablePython/App/Lib/tes.py")

"l:/system/PortablePython/App/Lib/tes"



"tes"









(defun walk-edit (func file-list &optional nosave nokill)

  (dolist (file file-list)

    (do-func--on-file func file nosave nokill)

    )

  )



(defun walk-edit-dirs (func dirs &optional nosave nokill)

  "edit-dirs

ex. (\"l:/Office/emacs/.emacs.d/elisp/mylisp\" 'fullpath \".el$\")"

  (let ((files (walk--edit-target-files-from-dirs dirs)))

    (walk-edit func files nosave nokill)

    )

  )



(defun walk--edit-target-files-from-dirs (dirs)

  (let (files)

    (dolist (d dirs)

      (message (car d))

      (setq files (append (eval `(directory-files ,@d)) files)))

    files))



(defun do-func--on-file (func file &optional nosave nokill)

  "walk-edit"

  (let ((inhibit-read-only t)

        (no-check-type-miss t))

	(with-current-buffer

		(find-file-noselect file)

	  (funcall func)

      (unless nosave (save-buffer))

      (unless nokill (kill-buffer))

      )

    ))





(defun tes-func ()

  " "

  (widen)

  (goto-char (point-min))

  (insert "hello"))





(walk-edit-dirs 'tes-func '(("D:/MYTEMP/mylisp" 'full ".el$")))

nil



nil



nil





("l:/Office/emacs/.emacs.d/elisp/start.d/02_base_start.el" "l:/Office/emacs/.emacs.d/elisp/start.d/04_bindings_start.el" "l:/Office/emacs/.emacs.d/elisp/start.d/06_loaddefs_start.el" "l:/Office/emacs/.emacs.d/elisp/start.d/08_simple_start.el" "l:/Office/emacs/.emacs.d/elisp/start.d/09_check_default_start.el" "l:/Office/emacs/.emacs.d/elisp/start.d/20_auto-async-byte-compile_plugin_start.el" "l:/Office/emacs/.emacs.d/elisp/start.d/20_auto-recover_plugin_start.el" "l:/Office/emacs/.emacs.d/elisp/start.d/20_recentf_plugin_start.el" "l:/Office/emacs/.emacs.d/elisp/start.d/20_rest-room_plugin_start.el" "l:/Office/emacs/.emacs.d/elisp/start.d/22_anything_plugin_start.el" "l:/Office/emacs/.emacs.d/elisp/start.d/22_auto-install_plugin_start.el" "l:/Office/emacs/.emacs.d/elisp/start.d/22_multi-term_plugin_start.el" ...)



("l:/Office/emacs/.emacs.d/elisp/mylisp/anything-info-python.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/auto-recover.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/balle-python-shift.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/check-misspell.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/join-one-start.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/maintain.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/purge-package.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/python-extensions.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/recover-last-killed-file.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/recover-version.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/rename-old-del.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/rest-room.el" ...)



("l:/Office/emacs/.emacs.d/elisp/mylisp/anything-info-python.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/auto-recover.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/balle-python-shift.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/check-misspell.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/join-one-start.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/maintain.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/purge-package.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/python-extensions.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/recover-last-killed-file.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/recover-version.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/rename-old-del.el" "l:/Office/emacs/.emacs.d/elisp/mylisp/rest-room.el" ...)



(directory-files "l:/Office/emacs/.emacs.d/elisp/mylisp" (quote full) ".el$")



(directory-files ("l:/Office/emacs/.emacs.d/elisp/mylisp" (quote full) ".el$"))



("." ".." ".svn" "anything-info-python.el" "anything-info-python.elc" "auto-recover.el" "auto-recover.elc" "balle-python-shift.el" "balle-python-shift.elc" "check-misspell.el" "check-misspell.elc" "join-one-start.el" ...)











(ls-lisp-delete-matching "anything-info-python.el" (list tes))

(("." ".." ".svn" "anything-info-python.el" "anything-info-python.elc" "auto-recover.el" "auto-recover.elc" "balle-python-shift.el" "balle-python-shift.elc" "check-misspell.el" "check-misspell.elc" "join-one-start.el" ...))



(("." ".." ".svn" "anything-info-python.el" "anything-info-python.elc" "auto-recover.el" "auto-recover.elc" "balle-python-shift.el" "balle-python-shift.elc" "check-misspell.el" "check-misspell.elc" "join-one-start.el" ...))



(car (cdr tes))

".."





"."





(setq tes (append '("." ".." ".svn" "anything-info-python.el" "anything-info-python.elc" "auto-recover.el" "auto-recover.elc" "balle-python-shift.el" "balle-python-shift.elc" "check-misspell.el" "check-misspell.elc" "join-one-start.el" "join-one-start.elc" "maintain.el" "maintain.elc" "purge-package.el" "purge-package.elc" "python-extensions.el" "python-extensions.elc" "recover-last-killed-file.el" "recover-last-killed-file.elc" "recover-version.el" "recover-version.elc" "rename-old-del.el" "rename-old-del.elc" "rest-room.el" "rest-room.elc" "rotate-text.el" "rotate-text.elc" "switch-buffer.el" "switch-buffer.elc" "test_sample.el" "timestamp-insert.el" "timestamp-insert.elc" "windmove-or-split.el" "windmove-or-split.elc")))

("." ".." ".svn" "anything-info-python.el" "anything-info-python.elc" "auto-recover.el" "auto-recover.elc" "balle-python-shift.el" "balle-python-shift.elc" "check-misspell.el" "check-misspell.elc" "join-one-start.el" ...)

tes

("." ".." ".svn" "anything-info-python.el" "anything-info-python.elc" "auto-recover.el" "auto-recover.elc" "balle-python-shift.el" "balle-python-shift.elc" "check-misspell.el" "check-misspell.elc" "join-one-start.el" ...)



(list '("." ".." ".svn" "anything-info-python.el" "anything-info-python.elc" "auto-recover.el" "auto-recover.elc" "balle-python-shift.el" "balle-python-shift.elc" "check-misspell.el" "check-misspell.elc" "join-one-start.el" "join-one-start.elc" "maintain.el" "maintain.elc" "purge-package.el" "purge-package.elc" "python-extensions.el" "python-extensions.elc" "recover-last-killed-file.el" "recover-last-killed-file.elc" "recover-version.el" "recover-version.elc" "rename-old-del.el" "rename-old-del.elc" "rest-room.el" "rest-room.elc" "rotate-text.el" "rotate-text.elc" "switch-buffer.el" "switch-buffer.elc" "test_sample.el" "timestamp-insert.el" "timestamp-insert.elc" "windmove-or-split.el" "windmove-or-split.elc"))

(("." ".." ".svn" "anything-info-python.el" "anything-info-python.elc" "auto-recover.el" "auto-recover.elc" "balle-python-shift.el" "balle-python-shift.elc" "check-misspell.el" "check-misspell.elc" "join-one-start.el" "join-one-start.elc" "maintain.el" "maintain.elc" "purge-package.el" "purge-package.elc" "python-extensions.el" "python-extensions.elc" "recover-last-killed-file.el" "recover-last-killed-file.elc" "recover-version.el" "recover-version.elc" "rename-old-del.el" "rename-old-del.elc" "rest-room.el" "rest-room.elc" "rotate-text.el" "rotate-text.elc" "switch-buffer.el" "switch-buffer.elc" "test_sample.el" "timestamp-insert.el" "timestamp-insert.elc" "windmove-or-split.el" "windmove-or-split.elc"))





(("." ".." ".svn" "anything-info-python.el" "anything-info-python.elc" "auto-recover.el" "auto-recover.elc" "balle-python-shift.el" "balle-python-shift.elc" "check-misspell.el" "check-misspell.elc" "join-one-start.el" ...))



(("." ".." ".svn" "anything-info-python.el" "anything-info-python.elc" "auto-recover.el" "auto-recover.elc" "balle-python-shift.el" "balle-python-shift.elc" "check-misspell.el" "check-misspell.elc" "join-one-start.el" ...))



(("." ".." ".svn" "anything-info-python.el" "anything-info-python.elc" "auto-recover.el" "auto-recover.elc" "balle-python-shift.el" "balle-python-shift.elc" "check-misspell.el" "check-misspell.elc" "join-one-start.el" ...))



(symbol-file 'ls-lisp-delete-matching)

"l:/Office/emacs/lisp/ls-lisp.elc"







(walk-edit-dirs '(("l:/Office/emacs/.emacs.d/elisp/mylisp" 'full ".el$")))

(delete ".." '("." ".." ".svn" "anything-info-python.el" "anything-info-python.elc" "auto-recover.el" "auto-recover.elc" "balle-python-shift.el" "balle-python-shift.elc" "check-misspell.el" "check-misspell.elc" "join-one-start.el" "join-one-start.elc" "maintain.el" "maintain.elc" "purge-package.el" "purge-package.elc" "python-extensions.el" "python-extensions.elc" "recover-last-killed-file.el" "recover-last-killed-file.elc" "recover-version.el" "recover-version.elc" "rename-old-del.el" "rename-old-del.elc" "rest-room.el" "rest-room.elc" "rotate-text.el" "rotate-text.elc" "switch-buffer.el" "switch-buffer.elc" "test_sample.el" "timestamp-insert.el" "timestamp-insert.elc" "windmove-or-split.el" "windmove-or-split.elc"))

("." ".svn" "anything-info-python.el" "anything-info-python.elc" "auto-recover.el" "auto-recover.elc" "balle-python-shift.el" "balle-python-shift.elc" "check-misspell.el" "check-misspell.elc" "join-one-start.el" "join-one-start.elc" ...)



(delete)



(directory-files (car ("l:/Office/emacs/.emacs.d/elisp/mylisp" (quote full) ".el$")))





(directory-files ("l:/Office/emacs/.emacs.d/elisp/mylisp" (quote full) ".el$"))



nil



nil



nil



nil



nil















(dolist (file (append (directory-files "/root/.emacs.d/init" t ".el$")

					  (directory-files "/root/.emacs.d/init/mode" t ".el$")

					  (directory-files "/root/.emacs.d/init/function" t ".el$")

					  (directory-files "/root/.emacs.d/init/plugin" t ".el$")))





(eval 'backward-char)









(funcall 'backward-char)













(progn

  (widen)

  (goto-char (point-max))

  ;; ";;; (file-name) ends here" がなければ挿入

  (if (save-excursion

        (search-backward-regexp "ends here" nil t))

      (setq match t)

    (setq text (concat text "\;\;\; " (file-name-nondirectory (buffer-file-name)) " ends here")))

  ;; "ends here" のある行の先頭に移動

  (if match

      (progn

        (goto-char (match-beginning 0))

        (beginning-of-line)))

  ;; 2 行空白をあける

  (save-excursion

    (while (and (< count 1) (not first))

      (previous-line 1)

      (unless (blank-line-p)

        (setq text (concat "\n" text))

        (if (eq count 0)

            (progn

              (setq first t)

              (setq text (concat "\n" text)))))

      (incf count)

      ))

  (insert text)

** 2013/02/03 9:12:16

after-save-hook

(ac-clear-variables-after-save t)

before-save-hook

(rope-before-save-actions

 delete-trailing-blank-lines

 delete-trailing-whitespace

 text-adjust-space-before-save-if-needed

 check-misspell

 force-backup-of-buffer)

(symbol-file 'force-backup-of-buffer)

"l:/Office/emacs/.emacs.d/elisp/start.d/02_base_start.el





"





backup-buffer



(symbol-file 'backup-buffer)

"l:/Office/emacs/lisp/files.el"



(backup-file-name-p "!drive_d!MYTEMP!mylisp!check-misspell.el.~1~")

(backup-file-name-p "hlleo")

nil



43

(symbol-file 'backup-file-name-p)

"l:/Office/emacs/lisp/files.elc"



(symbol-file 'make-backup-file-name)

"l:/Office/emacs/lisp/files.elc"

(backup-extract-version "!drive_d!MYTEMP!mylisp!check-misspell.el.~1~")







my-backup-dir

"l:/Office/emacs/.emacs.d/backup_e/"

(let ((files (directory-files my-backup-dir)))

  )



(defun clean-backup-files ()

  "Delete backup-files if not exists source."

  (interactive)

  (if windows-p

      (dolist (f (directory-files my-backup-dir 'full))

        (unless (file-directory-p f)

          (let* ((trimed (file-name-nondirectory f))

                 (trimed (replace-regexp-in-string "\\(!drive_\\|\.~.+~$\\)" "" trimed))

                 (target (concat (substring trimed 0 1) ":"

                                 (replace-regexp-in-string "!" "/" trimed nil nil nil 1))))

            (unless (file-exists-p target)

              (delete-file f 'trash)

              (message "Deleted: %s" f))

            )))))

nil





nil



nil



nil



nil

(file-name-nondirectory )

nil







nil







nil

(file-directory-p "l:/Office/emacs/.emacs.d/elisp/start.d")

t



nil



tes)

"old"



("d" "MYTEMP" "PyMOTW" "doctest" "doctest_simple.py.~1~")







"!drive_d!MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~"

(substring "!drive_d!MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~" "drive_" "")

(replace-regexp-in-string "!drive_" "" "!drive_d!MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~")

"d!MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~"



"!d!MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~"

:

(substring "d!MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~" 0 1)

"d"



"d!"



"MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~"



"!MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~"





(replace-regexp-in-string "\\(!drive_\\|\.~.+~$\\)" "" "!drive_d!MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~")

"d!MYTEMP!PyMOTW!doctest!doctest_simple.py"



(replace-regexp-in-string "\.~.+~$" "" "!drive_d!MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~")

"!drive_d!MYTEMP!PyMOTW!doctest!doctest_simple.py"



"d!MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~"

(replace-regexp-in-string "!" "/" "d!MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~" nil nil nil 1)

"/MYTEMP/PyMOTW/doctest/doctest_simple.py.~1~"



"YTEMP:PyMOTW:doctest:doctest_simple.py.~1~"



":MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~"

(setq tes (split-string "d!MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~" "!"))

("d" "MYTEMP" "PyMOTW" "doctest" "doctest_simple.py.~1~")

tes

("d" "MYTEMP" "PyMOTW" "doctest" "doctest_simple.py.~1~")



("d" "MYTEMP" "PyMOTW" "doctest" "doctest_simple.py.~1~")

(concat (car tes) ":" )



(symbol-file 'replace-in-string)

nil

(replace-regexp-in-string )





d!MYTEMP!PyMOTW!doctest!doctest_simple.py.~1~





(concatenate )





(mapconcat )









































(defun clean--backup-files (dir)

  "Delete backup-files if not exists source."

  ;; windows

  (dolist (f (directory-files dir 'full))

    (unless (file-directory-p f)

      (let ((target

             (cond

              (windows-p

               (let*

                   ((trimed (file-name-nondirectory f))

                    (trimed (replace-regexp-in-string "\\(!drive_\\|\.~.+~$\\)" "" trimed))

                    (target (concat (substring trimed 0 1) ":"

                                    (replace-regexp-in-string "!" "/" trimed nil nil nil 1))))

                 target))

              ;; unix

              (t

               (let* ((trimed (file-name-nondirectory f))

                      (trimed (replace-regexp-in-string "\.~.+~$" "" trimed))

                      (target (replace-regexp-in-string "!" "/" trimed)))

                 target)))))

        (when (and target (not (file-exists-p target)))

          (delete-file f 'trash)

          (message "Deleted: %s" f))

        ))))







(cond ( cond

       (transpose-sexps 1))

      (t

       (transpose-chars 1)))





(file-exists-p nil)





(cond (linux-p "yahoo")

      (windows-p (message "hello"))

      (t (message "world")))

"hello"



"hello"



** 2013/02/04 9:58:53

(next-buffer)









(defun my-ll-debug-toggle-comment-region-or-line ()

  ""

  (interactive)

    (if (eq last-command 'yank)

        (if (save-excursion

              (goto-char (region-beginning))

              (ll-debug-region-or-line-comment-start))

            (ll-debug-uncomment-region (region-beginning) (region-end))

          (comment-region (region-beginning) (region-end))))

    (ll-debug-toggle-comment-region-or-line))



(global-set-key "\C-o" 'my-ll-debug-toggle-comment-region-or-line)



** 2013/02/04 11:13:37

(setq e2wm:c-code-recipe

  '(| (:left-max-size 30)

      (- (:upper-size-ratio 0.7)

        imenu files)

      (| (:right-max-size 80)



         main sub)))

llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll







  (setq e2wm:c-code-recipe

    '(| (:left-max-size 100) main

    (- (:upper-size-ratio 0.6) sub (| (:left-max-size 100) imenu files))))







;;

(setq e2wm:c-code-recipe

      '(| (:left-max-size 30)

          (- (:upper-size-ratio 0.4)

             files imenu)

            (| (:right-max-size 80) main

            (- (:upper-size-ratio 0.5) main-prev sub))))



;;

(setq e2wm:c-code-winfo

      '((:name main)

        (:name history :plugin history-list)

        (:name files :plugin files :plugin-args (:sort time :show-hidden t))

        (:name sub :buffer "*info*" :default-hide nil)

        (:name imenu :plugin imenu :default-hide nil)

        (:name main-prev :plugin main-prev :default-hide nil))

      )







(defun e2wm:toggle-start-stop ()

  (interactive)

  (if e2wm:pst-minor-mode

      (e2wm:stop-management)

    (e2wm:start-management))

    )

(global-set-key [f11] 'e2wm:tes)







(define-key hello "KEY" 'FUNC)







  (define-key global-map (kbd "6") 'self-inserting)

self-inserting



self-inserting



    self-inserting



    self-inserting



    self-inserting



    self-inserting



** 2013/02/04 18:19:43

(defun reload-auto-complete-mode ()

  "Reload auto-complete-mode"

  (interactive)

  (auto-complete-mode -1)

  (auto-complete-mode 1)

  )





ll-debug-statement-alist

((matlab-mode . [cl-struct-ll-debug-struct "disp(" ");" ((nil "'" (ll-debug-create-next-debug-string) "'"))]) (octave-mode . [cl-struct-ll-debug-struct "disp(" ");" ((nil "'" (ll-debug-create-next-debug-string) "'"))]) (sh-mode . [cl-struct-ll-debug-struct "echo " "" ((nil (ll-debug-create-next-debug-string)))]) (ruby-mode . [cl-struct-ll-debug-struct "puts " "" ((nil "\"" (ll-debug-create-next-debug-string) "\""))]) (jde-mode . [cl-struct-ll-debug-struct "System.out.println(" ");" ((nil "\"" (ll-debug-create-next-debug-string) "\"") (nil "\"" (ll-debug-create-next-debug-string) "\"" ("Variable name: " "+\"  " str ":\"+" str)))]) (java-mode . [cl-struct-ll-debug-struct "System.out.println(" ");" ((nil "\"" (ll-debug-create-next-debug-string) "\"") (nil "\"" (ll-debug-create-next-debug-string) "\"" ("Variable name: " "+\"  " str ":\"+" str)))]) (c-mode . [cl-struct-ll-debug-struct "printf(" ");" ((nil "\"" (ll-debug-create-next-debug-string) "\\n\"") (nil "\"" (ll-debug-create-next-debug-string) ("Variable name: " "  " str ":%" (quote (progn (if v1 (setq v1 (concat v1 ", " str)) (setq v1 str)) nil)) (read-string "Format: ")) "\\n\", " v1))]) (c++-mode . [cl-struct-ll-debug-struct "std::cout << " " << std::endl;" ((nil "\"" (ll-debug-create-next-debug-string) "\"") (nil "\"" (ll-debug-create-next-debug-string) "\"" ("Variable name: " " << \"  " str ":\" << " str)))]) (cperl-mode . [cl-struct-ll-debug-struct "print " ";" ((nil "\"" (ll-debug-create-next-debug-string) "\\n\"") (nil "\"" (ll-debug-create-next-debug-string) ("Variable: " "  \\" str ":" str) "\\n\"") (nil "\"" (ll-debug-create-next-debug-string) " \", Data::Dumper->Dump([" ("Variable: " str (quote (progn (if (string= "$" (substring str 0 1)) (setq v1 (concat v1 " " (substring str 1))) (progn (backward-word 1) (backward-char 1) (insert "\\") (forward-char 1) (forward-word 1) (setq v1 (concat v1 " *" (substring str 1))))) nil)) ", ") "], [qw/" v1 "/]), \"\\n\""))]) (perl-mode . [cl-struct-ll-debug-struct "print " ";" ((nil "\"" (ll-debug-create-next-debug-string) "\\n\"") (nil "\"" (ll-debug-create-next-debug-string) ("Variable: " "  \\" str ":" str) "\\n\"") (nil "\"" (ll-debug-create-next-debug-string) " \", Data::Dumper->Dump([" ("Variable: " str (quote (progn (if (string= "$" (substring str 0 1)) (setq v1 (concat v1 " " (substring str 1))) (progn (backward-word 1) (backward-char 1) (insert "\\") (forward-char 1) (forward-word 1) (setq v1 (concat v1 " *" (substring str 1))))) nil)) ", ") "], [qw/" v1 "/]), \"\\n\""))]) (lisp-interaction-mode . [cl-struct-ll-debug-struct "(message " ")" ((nil "\"" (ll-debug-create-next-debug-string) "\"") (nil "\"" (ll-debug-create-next-debug-string) ("Variable name: " "  " str ":%S" (quote (progn (setq v1 (concat v1 " " str)) nil))) "\" " v1))]) (emacs-lisp-mode . [cl-struct-ll-debug-struct "(message " ")" ((nil "\"" (ll-debug-create-next-debug-string) "\"") (nil "\"" (ll-debug-create-next-debug-string) ("Variable name: " "  " str ":%S" (quote (progn (setq v1 (concat v1 " " str)) nil))) "\" " v1))]) (lisp-mode . [cl-struct-ll-debug-struct "(CL:format t " ")" ((nil "\"" (ll-debug-create-next-debug-string) "~%\"") (nil "\"" (ll-debug-create-next-debug-string) ("Variable name: " "  " str ":~S" (quote (progn (setq v1 (concat v1 " " str)) nil))) "~%\" " v1))]) (scheme-mode . [cl-struct-ll-debug-struct "(begin " "(newline))" ((nil "(display \"" (ll-debug-create-next-debug-string) "\")") (nil "(display \"" (ll-debug-create-next-debug-string) "\")" ("Variable name: " "(display \"  " str ":\")(display " str ")")))]))





(add-to-list 'll-debug-statement-alist '((python-mode . [cl-struct-ll-debug-struct "print(" ")" ((nil "'" (ll-debug-create-next-debug-string)))])))

(((python-mode . [cl-struct-ll-debug-struct "print(" ")" ...])) (matlab-mode . [cl-struct-ll-debug-struct "disp(" ");" (...)]) (octave-mode . [cl-struct-ll-debug-struct "disp(" ");" (...)]) (sh-mode . [cl-struct-ll-debug-struct "echo " "" (...)]) (ruby-mode . [cl-struct-ll-debug-struct "puts " "" (...)]) (jde-mode . [cl-struct-ll-debug-struct "System.out.println(" ");" (... ...)]) (java-mode . [cl-struct-ll-debug-struct "System.out.println(" ");" (... ...)]) (c-mode . [cl-struct-ll-debug-struct "printf(" ");" (... ...)]) (c++-mode . [cl-struct-ll-debug-struct "std::cout << " " << std::endl;" (... ...)]) (cperl-mode . [cl-struct-ll-debug-struct "print " ";" (... ... ...)]) (perl-mode . [cl-struct-ll-debug-struct "print " ";" (... ... ...)]) (lisp-interaction-mode . [cl-struct-ll-debug-struct "(message " ")" (... ...)]) ...)





ll-debug-statement-alist

(((python-mode . [cl-struct-ll-debug-struct "print(" ")" ...])) (matlab-mode . [cl-struct-ll-debug-struct "disp(" ");" (...)]) (octave-mode . [cl-struct-ll-debug-struct "disp(" ");" (...)]) (sh-mode . [cl-struct-ll-debug-struct "echo " "" (...)]) (ruby-mode . [cl-struct-ll-debug-struct "puts " "" (...)]) (jde-mode . [cl-struct-ll-debug-struct "System.out.println(" ");" (... ...)]) (java-mode . [cl-struct-ll-debug-struct "System.out.println(" ");" (... ...)]) (c-mode . [cl-struct-ll-debug-struct "printf(" ");" (... ...)]) (c++-mode . [cl-struct-ll-debug-struct "std::cout << " " << std::endl;" (... ...)]) (cperl-mode . [cl-struct-ll-debug-struct "print " ";" (... ... ...)]) (perl-mode . [cl-struct-ll-debug-struct "print " ";" (... ... ...)]) (lisp-interaction-mode . [cl-struct-ll-debug-struct "(message " ")" (... ...)]) ...)





(ll-debug-register-mode 'python-mode

                        "print(" ")"

                        '(nil "'" (ll-debug-create-next-debug-string) "'"))







(setq linum-delay t)



(tempbuf-mode -1)

nil

名指し



pep8 --repeat

(symbol-file 'pep8)

"p:/Office/emacs/.emacs.d/elisp/plugin/python-pep8.elc"

(require 'compile)

compile

(symbol-file 'pylint)

"p:/Office/emacs/.emacs.d/elisp/plugin/python-pylint.elc"



** 2013/02/04 19:15:25

(symbol-file 'smartchr)

"p:/Office/emacs/.emacs.d/elisp/start.d/30_smartchr_plugin_start.el"





(symbol-file 'real-last-command)

nil

real-last-command

ac-complete





(smartchr '("'`!!''" "'"))



(defun tes-smarchr ()

  "-smarchr"

  (interactive)

  (smartchr '("'`!!''" "'")))

tes-smarchr

(global-set-key [f11] 'tes-smarchr)

tes-smarchr





(defun py-conma ()

  "conma"

  (interactive)

  (cond ((looking-at "'")

         (self-insert-command) (backward-char 1))

        ))

(global-set-key [f11] 'py-conma)







(defun hello (ARGS)

  ""

  (interactive)

  )

(global-set-key [f11] 'hello))





w32-apps-modifier





(defun hello (ARGS)

  ""

  (interactive)

  )

(global-set-key "H-@" 'hello))





(defun hello (ARGS)

  ""

  (interactive)

  world)

(global-set-key "H-@" 'hello)

** 2013/02/05 6:39:11



** 2013/02/05 9:14:47

(progn )

** 2013/02/05 9:47:41



** 2013/02/05 10:11:25

(defun my-forward-seq (&optional args)

  "Sequential Forward Move. \

End of LINE, WINDOW, BUFFER. And return START-POINT.

Args:  4 = start point

       8 = end of line

      12 = end of window

      16 = end of buffer"

  (interactive "p")

  ;; keep point if called first time

  (if (not (eq last-command this-command))

      (setq seq-start-point (point)))

  (if (looking-at "$")

      (cond

	   ;; back to first point

	   ((or (eq args 4)

			(eq (buffer-end 1) (point))) (goto-char seq-start-point))

	   ;; go to end of buffer

	   ((eq (point)

			(save-excursion

			  (let ((auto-window-vscroll nil))

				(move-to-window-line -1) (end-of-line) (point)))) (goto-char (point-max)))

	   ;; go to end of window

	   (t (let ((auto-window-vscroll nil)) (move-to-window-line -1) (end-of-line))))

    (if (member (what-face-at-point) '(font-lock-comment-face font-lock-comment-delimiter-face))

        (end-of-line)

      (seq-esc-comment-end-of-line))))



** 2013/02/05 13:44:55

(eq ?\' (char-before (point)))

(eq ?\' (char-after (+ (point) 1)))





(eq ?\" (char-before (point)))

(eq ?\" (char-after (+ (point) 1)))









(defun quote-doublequote-toggle-tes ()

  "Toggle quote <=> double quotes."

  (interactive)

  (unless (eq (what-face-at-point) 'font-lock-string-face)

    (error "Not in string."))

  (when (save-excursion

          (backward-string-edge) (looking-at "\"\"\""))

    (error "Not support triple qoutes."))

  ;; tail first

  ;; if replace head quote at first, will fontify end of buffer.

  (save-excursion

    (forward-string-edge)

    (cond ((eq ?\' (char-before (point))) (delete-char -1) (insert "\""))

          ((eq ?\" (char-before (point))) (delete-char -1) (insert "\'"))))

  ;; do not remove this. escape error match.

  ;; head quoute

  (save-excursion

    (backward-string-edge)

    (cond ((eq ?\' (char-after (+ (point) 1))) (forward-char) (delete-char 1) (insert "\""))

          ((eq ?\" (char-after (+ (point) 1))) (forward-char) (delete-char 1) (insert "'"))))

  )



(global-set-key (kbd "H-@") 'quote-doublequote-toggle-tes)





(wget)

** 2013/02/06 7:16:00

typemiss-list

(("emacs" . "emacs")

 ("defualt" . "default")

 ("formart" . "format")

 ("pyhton" . "python")

 ("\\_<\\(ture\\)\\_>" . "true")

 ("windwos" . "windows"))





(setq tes typemiss-list)

(("emacs" . "emacs") ("defualt" . "default") ("formart" . "format") ("pyhton" . "python") ("\\_<\\(ture\\)\\_>" . "true") ("windwos" . "windows"))





tes

(("emacs" . "emacs") ("defualt" . "default") ("formart" . "format") ("pyhton" . "python") ("\\_<\\(ture\\)\\_>" . "true") ("windwos" . "windows"))





(dolist (el '(("test" . "world")

             ("yahoo" . "google")))

  (add-to-list 'tes el)

  )

nil

tes

(("yahoo" . "google") ("test" . "world") ("emacs" . "emacs") ("defualt" . "default") ("formart" . "format") ("pyhton" . "python") ("\\_<\\(ture\\)\\_>" . "true") ("windwos" . "windows"))



(add-to-list 'load-path "p:/Office/emacs/.emacs.d/elisp/plugin/helm")

("p:/Office/emacs/.emacs.d/elisp/plugin/helm" "p:/Office/emacs/.emacs.d/elisp/start.d/" "p:/Office/emacs/.emacs.d/elisp/" "p:/Office/Emacs/site-lisp" "p:/Office/Emacs/../site-lisp" "p:/Office/Emacs/lisp" "p:/Office/Emacs/lisp/vc" "p:/Office/Emacs/lisp/url" "p:/Office/Emacs/lisp/textmodes" "p:/Office/Emacs/lisp/progmodes" "p:/Office/Emacs/lisp/play" "p:/Office/Emacs/lisp/org" ...)







(defun helm-predefine ()

  "For eval-after-load helm function."

  (message "Loading helm..")

  (helm-map-predefine))



(defun helm-map-predefine ()

  "For helm key bindings."

  (interactive)

  (define-key helm-map "\C-k" 'helm-previous-line)

  (define-key helm-map "\C-\M-k" 'helm-previous-page)

  (define-key helm-map "\C-\M-n" 'helm-next-page)

  )



(eval-after-load 'helm '(helm-predefine))





(file-exists-p "D:\\tes")

nil

(delete-file "D:\\tes")



** 2013/02/06 10:55:15

(setq python-pep8-options '("--repeat"))

("")





(setq python-pep8-command "python -m pep8")

(defun python-pep8 ()

  "Run PEP8, and collect output in a buffer.

While pep8 runs asynchronously, you can use \\[next-error] (M-x next-error),

or \\<python-pep8-mode-map>\\[compile-goto-error] in the grep \

output buffer, to go to the lines where pep8 found matches."

  (interactive)



  (save-some-buffers (not python-pep8-ask-about-save) nil)

  (let* ((tramp (tramp-tramp-file-p (buffer-file-name)))

         (file (or (and tramp

                        (aref (tramp-dissect-file-name (buffer-file-name)) 3))

                   (buffer-file-name)))

         (command (mapconcat

                   'identity

                   (list python-pep8-command

                         (mapconcat 'identity python-pep8-options " ")

                         (comint-quote-filename file)

                         "|" (if windows-p

                                 (concat (substring usb-drive-letter 0 2)

                                         "\\Dos\\unixutils\\sort.exe")

                               "sort") "-n" "-t:" "-k3") " ")))

    (compilation-start command 'python-pep8-mode)))









(if windows-p

    (concat usb-drive-letter "Dos/unixutils/sort.exe")

  "sort")

"p:/Dos/unixutils/sort.exe"



** 2013/02/06 14:46:31

(symbol-file 'clean-backup-files)

"p:/Office/emacs/.emacs.d/elisp/start.d/test_start.elc"





(defun anything-python ()

  ""

  (interactive)

  (anything

   :source '(anything-c-source-info-python-module)

   :buffer "*anything python")

  )

(global-set-key (kbd "H-@") 'anything-python)



** 2013/02/06 16:32:29



(defun align--space (arg)

  ""

  (let ((count 0)

        (startc (current-column))

        endc)

    (save-excursion

      (previous-line arg)

      (while (and (blank-line-p)

                  (not (bobp))

                  (> 10 count))

        (incf count)

        (previous-line arg))

      (skip-chars-forward " \t")

      (setq endc (current-column)))

    (insert-char 32 (- endc startc))

    ))



(defun back-align-space (arg)

  "align-space"

  (interactive "p")

  (align--space arg))



(defun back-align-space (arg)

  "align-space"

  (interactive "p")

  (align--space (- arg)))



(global-set-key (kbd "H-@") 'back-align-space)





(re-search-backward "defun[ \t]*\\([a-z0-9].+\\)[ \t]" nil 'noerror)



(symbol-file 'imenu--split)

"p:/Office/emacs/lisp/imenu.el"

(match-string 0)

()











`(save-excursion

   (let ((re "(def\\\\(un\\\\|var\\\\)[ \t\n]*\\\\([a-z0-9]*[:-]\\\\)"))

     (cond

      ((or

        (re-search-backward re nil t)

        (re-search-forward  re nil t))

       (match-string 2))

      (t ""))))`











(match-string)

** 2013/02/06 17:17:18

(forward-list )



(defun my-forward-thing (arg)

  "ARG"

  (interactive "p")

  (cond ((eq (what-face-at-point) 'font-lock-string-face)

         (forward-string-edge))

        (t (forward-list arg))))



(defun my-backward-thing (arg)

  "ARG"

  (interactive "p")

  (cond ((eq (what-face-at-point) 'font-lock-string-face)

         (backward-string-edge))

        (t (backward-list arg))))



(global-set-key (kbd "H-@") 'temp)

** 2013/02/06 18:09:25

forward



(buffer-file-name)







(defun re-find-file ()

  ""

  (interactive)

  (let ((buf-name (buffer-file-name)))

    (kill-this-buffer)

    (find-file buf-name)))

(defalias 're-open 're-find-file)



** 2013/02/06 18:39:26

(syf 'previous-line)

"p:/Office/emacs/lisp/simple.elc"





(line-move 1 nil nil 'try-vscroll)





(defun backward-align-space (arg)

  "align-space"

  (interactive "p")

  (align--space (- arg)))







(switch-to-buffer "*auto-async-byte-compile*")

#<buffer *auto-async-byte-compile*>



** 2013/02/07 9:52:27

(defun py-go-to-keyword (regexp &optional maxindent)

  "Returns a list, whose car is indentation, cdr position. "

  (let ((orig (point))

        ;; (origline (py-count-lines))

        (maxindent maxindent)

        (first t)

        done erg cui)

    (while (and (not done) (not (bobp)))

      (py-beginning-of-statement)

      (if (and (looking-at regexp)(if maxindent

                                      (< (current-indentation) maxindent)t))

          (progn

            (setq erg (point))

            (setq done t))

        (when (and first (not maxindent))

          (setq maxindent (current-indentation))

          (setq first nil))))

    (when erg (setq erg (cons (current-indentation) erg)))

    erg))



** 2013/02/07 11:22:07

(symbol-file 'current-indentation)

nil



nil





(looking-at "^\\_<\\(def\\|class\\)\\_>[ \n\t]")





(let (done)

  (while (and (not (looking-at "^\\_<\\(def\\|class\\)\\_>[ \n\t]"))

              (re-search-backward "[ \t]*\\_<\\(def\\|class\\)\\_>[ \n\t]" nil 'noerror)))

  (if (looking-at "^\\_<\\(class\\)\\_>[ \n\t]")

      (message "on class")

    (message "DEBUG-1-nofile")

    )

)





(defun py-in-class-block-p ()

  ""

  (save-excursion

    (while (and (not (looking-at "^\\_<\\(def\\|class\\)\\_>[ \n\t]"))

                (re-search-backward

                 "[ \t]*\\_<\\(def\\|class\\)\\_>[ \n\t]" nil 'noerror)))

    (looking-at "^\\_<\\(class\\)\\_>[ \n\t]"))

  )









(cond ((looking-at "^") "")

      (t

       (let ((indent (current-indentation)))



)))



** 2013/02/07 13:32:59



** 2013/02/07 17:18:17

(defvar py-search-import-point-max 20000)









(defun skip-fontlocks (font-locks arg)

  "Move fontlock edges."

  (let (faces)

    (while (and (setq faces (what-face-at-point))

                (dolist-member faces font-locks))

      (forward-char arg))))



(defun dolist-member (targets members)

  ""

  (let ((targets (if (listp targets) targets (list targets)))

        (members (if (listp members) members (list members)))

        (result t))

    (dolist (tg targets)

      (unless (member tg members)

        (setq result nil)))

    result))



(defun forward-skip-string-regexp ()

  ""

  (interactive)

  (skip-fontlocks '(font-lock-string-face

                    font-lock-regexp-grouping-backslash

                    font-lock-regexp-grouping-construct) 1)

  )



** 2013/02/07 17:29:50

cond (() ())

      (() ())



(cond ((hello) (world))

      (t (do)))







(cond ((eobp) (message "hello"))

      (t (message "world")))



** 2013/02/07 17:51:45



** 2013/02/07 17:53:51





(defun llFUNC-NAME (ARGS)

  "FUNC-NAME

ARGS"

  )

** 2013/02/08 16:43:02

${5:$$(if (save-excursion

            (re-search-backward "action=.\\w+_const"

                                (save-excursion

                                  (re-search-backward "add_argument" nil 'noerror))

                                'noerror)) (insert "const=,") (delete-blank-lines))}





${5:$$(let ((point (- (point) 100)))

        (if (save-excursion

              (re-search-backward "action=.\\w+_const" point 'noerror))

            (insert "const=,") (delete-blank-lines)))}



(defun tes ()

  (let ((point (- (point) 100)))

    (when (save-excursion

          (re-search-backward "action=.\\w+_const" point 'noerror))

        ",\n    const=,")))







parser.add_argument(

                    '-v', '--verbose',

                          action='append_const',

                          dest='',

                          [yas] elisp error!

                          help='ls')









(defun argparse-insertconst ()

   (let ((point (- (point) 100)))

     (when (save-excursion

             (re-search-backward "action=.\\w+_const" point 'noerror))

       ",\n    const=")))

















(make-string (current-column) 32)

""

(make-string 20 32)

"                    "

(mapcar '(lambda (x) (message x))

        '("hello" "world"))

("hello" "world")









(let*

    ((indent

      (concat "\n" (make-string (current-column) 32)))

     (args

      (mapconcat

       '(lambda (x)

          (if (not (string= (nth 0 x) ""))

              (concat "- " (char-to-string 96) (nth 0 x)

                      (char-to-string 96) ":")))

       (mapcar

        '(lambda (x)

           (mapcar

            '(lambda (x)

               (replace-regexp-in-string "[[:blank:]]*$" ""

                                         (replace-regexp-in-string "^[[:blank:]]*" "" x)))

            x))

        (mapcar '(lambda (x) (split-string x "="))

                (split-string text ",")))

       indent)))

  (if (string= args "")

      (make-string 3 34)

    (mapconcat

     'identity

     (list "" "Arguments:" args (make-string 3 34))

     indent)))



(mapcar '(lambda (x) (replace-regexp-in-string "-" "_" text))

        text)



(mapcar '(lambda (x) (cond ((string-match "^--" x) (substring x 2))

                           ((string-match "^-" x) (substring x 1))

                           (t x))))



(let* (tmp done

       (orig-lis (mapcar '(lambda (x) (replace-regexp-in-string "[\"' ]" "" x))

                         (split-string text ",")))

       (lis orig-lis)

       (matched (progn

                  (while (and lis (not matched))

                    (when (string-match "^--" (car lis))

                      (add-to-list 'matched (car lis)))

                         (setq lis (cdr lis))))))



  (if matched (cond ((string-match "^--" matched) (substring matched 2))

                    ((string-match "^-" matched) (substring matched 1)))

    )

)



(string-match "^--" "--help")

0





(let* ((lis (mapcar '(lambda (x) (replace-regexp-in-string "[\"' ]" "" x))

                    (split-string tes2 ",")))

       (n 0)

       (length (length lis))

       matched)

  (unless (eq "" (car lis))

    (while (< n length)

      (when (string-match "^--" (nth n lis))

        (setq matched (substring (nth n lis) 2)))

      (incf n))

    (setq n 0)

    (unless matched

      (while (< n length)

        (when (string-match "^-" (nth n lis))

          (setq matched (substring (nth n lis) 1)))

        (incf n)))

    (unless matched

      (setq matched (car lis)))

    (replace-regexp-in-string "-" "_" matched))

  )

"verbose_hello"



"verbose"



"verbose"





(setq tes2 "'names', '-v', '--verbose-hello'")

"'names', '-v', '--verbose-hello'"



"'names', '-v', '--verbose'"





(split-string tes2 ",")



(setq tes2 '("'name'"))

("'name'")





"v"







nil0"names"



nil0in"names"



nil0"names"



"names"

tes2

"'names', '-v'"





"names"







"verbose"



"verbose"

tes

"'names', '-v',"

(delete "'--verbose'" tes)

"'names', '-v', '--verbose'"

("'name'" "'-v'")



(setq tes2 "'names', '-v'")

"'names', '-v'"



"'names', '-v',"

(substring "-v" 1)

"v"







  (while (and (not matched)

              (not done))

    (or (when (string-match "^--" (car lis))

          (setq matched (car lis)))

        (when (string-match))))

  )



(nth 1 tes1)

"-v"



(length tes1)

3

(> 4 3)

t



nil



tes

"'names', '-v', '--verbose'"



tes1

("names" "-v" "--verbose")



(member "'--verbose'" tes)

nil



tes

"'names', '-v', '--verbose'"

nil

(setq tes1 (mapcar '(lambda (x) (replace-regexp-in-string "[\"' ]" "" x))

                   (split-string tes ",")))

("names" "-v" "--verbose")

tes1

("names" "-v" "--verbose")

(member "--verbose" tes)

nil

()



("names" "-v" "--verbose")



tes

"'names', '-v', '--verbose'"

(tes)



tes1

("names" "-v" "--verbose")





(replace-regexp-in-string "^-")

(replace-regexp-in-string "")

(setq tes "'names', '-v', '--verbose'")

"'names', '-v', '--verbose'"



(split-string tes ",")

("'names'" " '-v'" " '--verbose'")



(mapcar '(lambda (x) (replace-regexp-in-string "[\"' ]" "" x))

        (split-string tes ","))

("names" "-v" "--verbose")





(setq to nil)

to

nil



(dolist (el '("hello" "world" "yahoo"))

  (add-to-list 'to el)

  )

nil

to

("yahoo" "world" "hello")











(append "world" aa)

(119 111 114 108 100 "hello")



(119 111 114 108 100 "hello" . "\"--help\"")



(push "hello" tes)

("hello" . "\"--help\"")



(length 'tes)

(setq aa '("hello"))

("hello")

(length aa)

1







(replace-regexp-in-string "[\"' ]" "" tes)

"--help"



"\"--help\""





(setq tes (concat (char-to-string 34) "--help" (char-to-string 34)))

"\"--help\""

tes

"\"--help\""



"\"--help\""



"34--help34"







(replace-regexp-in-string "[' ]" "" " '--hello'")

"--hello"



"--hello"



(string-start)





(subst-char-in-string 0 1 "--help")

"--help"



(substring "--help" 2)

"help"



(when (string= (or "store_const" "append_const")) "const=s,\n")





(string-match "^--" "--help")

nil



0





-h

--help

--help-verbose





















(cond

 ((setq ll nil) (message "yahoo"))

 ((setq ttt "hello") (message ttt))

 )

"hello"



"world"



"world"







(unless (eq "" (mapcar '(lambda (x) (replace-regexp-in-string "[\"' ]" "" x))

                       (split-string "" ",")))

  (message "hello"))

"hello"



nil



("")



(setq dd (mapcar '(lambda (x) (replace-regexp-in-string "[\"' ]" "" x))

                 (split-string "" ",")))

("")

dd

("")





(eq "" (car dd))

t



nil





(let* (matched

       done

       (lis (mapcar '(lambda (x) (replace-regexp-in-string "[\"' ]" "" x))

                    (split-string tes ",")))

       (n 0)

       (length (length lis)))

  (unless (eq "" (car lis))

    (while (< n length)

      (when (string-match "^--" (nth n lis))

        (setq matched (nth n lis)))

      (incf n))

    (setq n 0)



    (unless matched

      (while (< n length)

        (when (string-match "^-" (nth n lis))

          (setq matched (nth n lis)))

        (incf n)))



    (unless matched

      (setq matched (car lis)))

    matched)

  )

"--verbose"

()









;;;;;;;;;;;;;;

parser.add_argument(

                    '-${1:v}', '--${2:verbose}',

                               dest='${2:$(replace-regexp-in-string "-" "_" text)}',

                               action='${3:$$(yas/choose-value '("store"

                                                                 "store_const"

                                                                 "store_true"

                                                                 "store_false"

                                                                 "append"

                                                                 "append_const"

                                                                 "count"

                                                                 "version"

                                                                 ))}',

                                                                   ${3:$(if

                                                                            (string= text (or "store_const" "append_const"))

                                                                            (concat "const=,\n" (make-string (current-column) 32))

                                                                          "")

                                                                   }help='${4:a lot print}'$0)



** 2013/02/10 18:52:33



** 2013/02/11 0:25:04

(setq my-code-dir (expand-file-name "code/" my-data-dir))

"p:/Office/emacs/.emacs.d/data_e/code/tes.py"





(defun scrap-code ()

  ""

  (interactive)

  (let* ((origname (buffer-file-name))

         (file-name (file-name-nondirectory origname))

         (file-name-noextension (file-name-sans-extension file-name))

         (extension (file-name-extension file-name))

         (major-name (if (eq major-mode 'emacs-lisp-mode) "elisp"

                       (downcase (replace-regexp-in-string

                                  "-mode" "" (symbol-name major-mode)))))

         (parent-dir my-code-dir)

         (dir (expand-file-name "scrap"

                                 (expand-file-name major-name parent-dir)))

         (default-name (expand-file-name

                        (concat file-name-noextension ".scrap." extension) dir))

         (new (read-input

               "Save scrap file: " default-name nil default-name)))

    (unless (file-exists-p dir)

      (make-directory dir))

    (copy-file origname new)

    (if (file-exists-p new)

        (message "Saved %s file." new)

      (error "has error scrap-code"))

    )

  )





(file-name-sans-extension "tes.py")

"tes"





(file-name-sans-versions "tes.py")

"tes.py"



(let* ((bufname "p:/Office/emacs/.emacs.d/data_e/code/tes.py")

       (file-name (file-name-nondirectory "p:/Office/emacs/.emacs.d/data_e/code/tes.py"))

        (tmp-name (split-string file-name ".")))

   (princ tmp-name)

)

(      )("" "" "" "" "" "" "")



(scrap      )("scrap" "" "" "" "" "" "")







(split-string (file-name-nondirectory

               "p:/Office/emacs/.emacs.d/data_e/code/tes.py") 46)



(split-string "tes.py" "\." nil)

(file-name-extension "tes.py")

"py"







("" "" "" "" "" "" "")



("" "" "" "" "" "" "")



("" "" "" "" "" "" "")





("" "" "" "" "" "" "")



"tes.py"









(file-name-nondirectory bufname)

major-mode

lisp-interaction-mode



(replace-regexp-in-string "-mode" "" (symbol-name major-mode))

"lisp-interaction"



""

(file-exists-p my-data-dir)

t



("lisp" "interaction" "mode")



(symbol-name major-mode)

"lisp-interaction-mode"



symbol





(setq my-code-dir (expand-file-name "code/" my-data-dir))

"p:/Office/emacs/.emacs.d/data_e/code/"



"p:/Office/emacs/.emacs.d/data_e/"





my-data-dir

"p:/Office/emacs/.emacs.d/data_e/"

(setq scrap-dir)

** 2013/02/11 20:47:51

(load "doctest-mode")

t

(sym 'pdb)

"p:/Office/emacs/lisp/progmodes/gud.elc"

(string-to)



my-pylib-dir

"p:\\Office\\emacs\\.emacs.d\\data_e\\pylib"



(getenv "PYTHON")

"p:\\system\\PortablePython\\App"



(defun pdb (command-line)

  "Run pdb on program FILE in buffer `*gud-FILE*'.

The directory containing FILE becomes the initial working directory

and source-file directory for your debugger."

  (interactive

   (list (if windows-p

             (gud-query-cmdline

              (concat "python -u "

                      usb-drive-letter "system/PortablePython/App/Lib/pdb.py "

                      (buffer-file-name)))

           (gud-query-cmdline 'pdb))))



  (gud-common-init command-line nil 'gud-pdb-marker-filter)

  (set (make-local-variable 'gud-minor-mode) 'pdb)



  (gud-def gud-break  "break %d%f:%l"  "\C-b" "Set breakpoint at current line.")

  (gud-def gud-remove "clear %d%f:%l"  "\C-d" "Remove breakpoint at current line")

  (gud-def gud-step   "step"         "\C-s" "Step one source line with display.")

  (gud-def gud-next   "next"         "\C-n" "Step one line (skip functions).")

  (gud-def gud-cont   "continue"     "\C-r" "Continue with display.")

  (gud-def gud-finish "return"       "\C-f" "Finish executing current function.")

  (gud-def gud-up     "up"           "<" "Up one stack frame.")

  (gud-def gud-down   "down"         ">" "Down one stack frame.")

  (gud-def gud-print  "p %e"         "\C-p" "Evaluate Python expression at point.")

  ;; Is this right?

  (gud-def gud-statement "! %e"      "\C-e" "Execute Python statement at point.")



  ;; (setq comint-prompt-regexp "^(.*pdb[+]?) *")

  (setq comint-prompt-regexp "^(Pdb) *")

  (setq paragraph-start comint-prompt-regexp)

  (run-hooks 'pdb-mode-hook))







usb-drive-letter

"p:/"

(concat usb-drive-letter "system/PortablePython/App/Lib/pdb.py")







(defun pdb-this-buffer ()

  ""

  (interactive)

  (and (buffer-modified-p)

       (y-or-n-p "Save bufffer?")

       (save-buffer))

  (let ((cmd (read-from-minibuffer

              "pdb command: "

              (concat "python -u "

                      usb-drive-letter "system/PortablePython/App/Lib/pdb.py "

                      (buffer-file-name)))))

    (pdb cmd)))













(read-from-minibuffer "pdb command: "

                      (concat (concat "python -u "

                                      usb-drive-letter "system/PortablePython/App/Lib/pdb.py "

                                      (buffer-file-name))))

"python -u p:/system/PortablePython/App/Lib/pdb.py "



(require 'ipython)

ipython



(setq py-python-command-args '("-i" "--colors"))

("-i" "--colors")



("-i" "--colors" "-l")



("-i" "--colors")



py-python-command-args

("-i" "--colors")



("-i" "-colors" "LightBG")



("-i" "-colors" "LightBG")



("-i" "-colors" "LightBG")



("-i" "-colors" "LightBG")



("-i" "-colors" "LightBG")



("-i" "-colors" "LightBG")



** 2013/02/12 16:43:23



(setq flycheck-warning-overlay 'flycheck-warning-overlay)

flycheck-warning-overlay

(symf 'ahs-plugin-defalt-face)

"p:/Office/emacs/.emacs.d/elisp/plugin/auto-highlight-symbol.elc"



nil





(defadvice ahs-idle-function

  (around disable-ahs-idle-function-when-yasnippet activate)

  (unless ac-completing

    ad-do-it)

  )

;; (progn (ad-disable-advice 'ahs-idle-function 'around 'disable-ahs-idle-function-when-yasnippet) (ad-update 'ahs-idle-function)))





;;hello

(face-spec-set



 'ahs-plugin-defalt-face '((t (:forground "Black" :background "skyblue"))))

(face-spec-set

nil



(yank)

(yank)

(face-spec-setnil

 (face-spec-set

 (face-spec-set

  ;;    nil

;;

nil

(kill)

;;

nil



;;

nil

(beginning-of-line nil)



(defadvice duplicate-line

  (around inhibit-overwrite-kill-ring activate)



  )





;; (progn (ad-disable-advice 'duplicate-line 'around 'inhibit-overwrite-kill-ring) (ad-update 'duplicate-line)))



(defadvice duplicate-line

  (around inhibit-overwrite-kill-ring activate)

  ad-do-it

  )

;; (progn (ad-disable-advice 'duplicate-line 'around 'inhibit-overwrite-kill-ring) (ad-update 'duplicate-line)))



(defadvice duplicate-line

  (around inhibit-overwrite-kill-ring activate)

  (let ((tmp (car kill-ring)))



    ad-do-it))

  ;; (progn (ad-disable-advice 'duplicate-line 'around 'inhibit-overwrite-kill-ring) (ad-update 'duplicate-line)))



(defadvice duplicate-line

  (around inhibit-overwrite-kill-ring activate)

  ad-do-it

  )

;; (progn (ad-disable-advice 'duplicate-line 'around 'inhibit-overwrite-kill-ring) (ad-update 'duplicate-line)))



(defadvice duplicate-line

  (around inhibit-overwrite-kill-ring activate)

  (let ((tmp (car kill-ring)))

    ad-do-it

    (setcar kill-ring tmp)

    ))

;; (progn (ad-disable-advice 'duplicate-line 'around 'inhibit-overwrite-kill-ring) (ad-update 'duplicate-line)))



hello

helloprogn

kill-ring

prognprognprognprogn

(#("progn" 0 5 (fontified t face font-lock-comment-face)) #("progn" 0 5 (fontified t face font-lock-comment-face)) #("progn" 0 5 (fontified t face font-lock-comment-face)) #("    " 0 4 (fontified t)) #("    " 0 4 (fontified t)) #("or " 0 3 (fontified t)) #("const" 0 5 (fontified t face font-lock-string-face)) #("${4:$(if

    (string= text (or \"store_const\" \"append_const\"))

      (concat \"const=,\\n\" (make-string (current-column) 32))

      \"\")" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-warning-face) 3 4 (fontified t face font-lock-keyword-face) 4 6 (fontified t) 6 8 (fontified t face font-lock-keyword-face) 8 31 (fontified t) 31 44 (fontified t face font-lock-string-face) 44 45 (fontified t) 45 59 (fontified t face font-lock-string-face) 59 76 (fontified t) 76 87 (fontified t face font-lock-string-face) 87 129 (fontified t) 129 131 (fontified t face font-lock-string-face) 131 132 (fontified t)) #("(defalias)" 0 1 (fontified t) 1 9 (selection-face ac-yasnippet-selection-face popup-face ac-yasnippet-candidate-face symbol "a" action yas/expand fontified t face font-lock-keyword-face) 9 10 (fontified t)) "hello" #("(face-spec-setnil" 0 13 (fontified t) 13 14 (rear-nonsticky t fontified t) 14 17 (fontified t)) #("tes" 0 3 (fontified t)) ...)







(defun duplicate-line-tes (n dir)

  "Copy the Nth following line to point.

If the last command was a duplication, replace the current line by the next

line in direction DIR."

  (if (eq (car-safe last-command) 'duplicate-line)

      (progn

        (delete-region (point-at (beginning-of-line nil))

                       (point-at (end-of-line nil)))

        (setq n (+ dir (cdr last-command))))

    (kill-region (point-at (beginning-of-line nil))

                 (point-at (end-of-line nil))))

  (if (= n 0)

      (insert (current-kill 0))

    (insert (save-excursion

              (beginning-of-line (1+ n))

              (buffer-substring (point)

                                (point-at (end-of-line nil)))))

    (setq this-command (cons 'duplicate-line n))))

(defun duplicate-previous-line-tes (n)

  "Copy the Nth previous line to point.

If repeated, replace by the line preceding the one that was copied last time.

This command can be interleaved with \\[duplicate-following-line]."

  (interactive "p")

  (duplicate-line-tes (- n) -1))



0

(kill-new "hello")

"hello"

hello



kill-ring

("hello" #("(face-spec-setnil" 0 13 (fontified t) 13 14 (rear-nonsticky t fontified t) 14 17 (fontified t)) #("tes" 0 3 (fontified t)) #("(defun duplicate-previous-line (n)

  \"Copy the Nth previous line to point.

If repeated, replace by the line preceding the one that was copied last time.

This command can be interleaved with \\\\[duplicate-following-line].\"

  (interactive \"p\")

  (duplicate-line (- n) -1))" 0 1 (fontified t) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 30 (fontified t face font-lock-function-name-face) 30 37 (fontified t) 37 193 (fontified t face font-lock-doc-face) 193 217 (fontified t face (font-lock-constant-face font-lock-doc-face)) 217 220 (fontified t face font-lock-doc-face) 220 236 (fontified t) 236 239 (fontified t face font-lock-string-face) 239 241 (fontified t) 241 269 (fontified t)) #("(defun duplicate-line (n dir)

  \"Copy the Nth following line to point.

If the last command was a duplication, replace the current line by the next

line in direction DIR.\"

  (if (eq (car-safe last-command) 'duplicate-line)

      (progn

        (delete-region (point-at (beginning-of-line nil))

                       (point-at (end-of-line nil)))

        (setq n (+ dir (cdr last-command))))

    (kill-region (point-at (beginning-of-line nil))

                 (point-at (end-of-line nil))))

  (if (= n 0)

      (insert (current-kill 0))

    (insert (save-excursion

              (beginning-of-line (1+ n))

              (buffer-substring (point)

                                (point-at (end-of-line nil)))))

    (setq this-command (cons 'duplicate-line n))))" 0 1 (fontified t) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 21 (fontified t face font-lock-function-name-face) 21 32 (fontified t) 32 170 (fontified t face font-lock-doc-face) 170 174 (fontified t) 174 176 (fontified t face font-lock-keyword-face) 176 229 (fontified t) 229 234 (fontified t face font-lock-keyword-face) 234 491 (fontified t) 491 494 (fontified t) 494 496 (fontified t face font-lock-keyword-face) 496 550 (fontified t) 550 564 (fontified t face font-lock-keyword-face) 564 760 (fontified t)) #("(1+ -1)" 0 6 (fontified t) 6 7 (fontified t)) #("(kill-region (point-at (beginning-of-line nil))

                 (point-at (end-of-line nil)))" 0 94 (fontified t)) #("(mess)" 0 5 (fontified t) 5 6 (fontified t)) #("(yank)" 0 5 (fontified t) 5 6 (fontified t)) #("(face-spec-set" 0 1 (fontified t) 1 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) #(";;    " 0 6 (fontified t face font-lock-comment-delimiter-face)) #(";;

" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 6 (fontified t face font-lock-comment-delimiter-face) 6 7 (face font-lock-comment-face fontified nil)) ...)



(defun tes (n)

  ""

  (interactive "p")

  (princ n))

(global-set-key (kbd "H-@") 'duplicate-previous-line-tes)



;;    nil

(setq kill-ring (cdr kill-ring))

kill-ring

(flycheck-error-face ((t (:background "dark red"))))

(#("(face-spec-setnil" 0 13 (fontified t) 13 14 (rear-nonsticky t fontified t) 14 17 (fontified t)) #("tes" 0 3 (fontified t)) #("(defun duplicate-previous-line (n)

  \"Copy the Nth previous line to point.

If repeated, replace by the line preceding the one that was copied last time.

This command can be interleaved with \\\\[duplicate-following-line].\"

  (interactive \"p\")

  (duplicate-line (- n) -1))" 0 1 (fontified t) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 30 (fontified t face font-lock-function-name-face) 30 37 (fontified t) 37 193 (fontified t face font-lock-doc-face) 193 217 (fontified t face (font-lock-constant-face font-lock-doc-face)) 217 220 (fontified t face font-lock-doc-face) 220 236 (fontified t) 236 239 (fontified t face font-lock-string-face) 239 241 (fontified t) 241 269 (fontified t)) #("(defun duplicate-line (n dir)

  \"Copy the Nth following line to point.

If the last command was a duplication, replace the current line by the next

line in direction DIR.\"

  (if (eq (car-safe last-command) 'duplicate-line)

      (progn

        (delete-region (point-at (beginning-of-line nil))

                       (point-at (end-of-line nil)))

        (setq n (+ dir (cdr last-command))))

    (kill-region (point-at (beginning-of-line nil))

                 (point-at (end-of-line nil))))

  (if (= n 0)

      (insert (current-kill 0))

    (insert (save-excursion

              (beginning-of-line (1+ n))

              (buffer-substring (point)

                                (point-at (end-of-line nil)))))

    (setq this-command (cons 'duplicate-line n))))" 0 1 (fontified t) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 21 (fontified t face font-lock-function-name-face) 21 32 (fontified t) 32 170 (fontified t face font-lock-doc-face) 170 174 (fontified t) 174 176 (fontified t face font-lock-keyword-face) 176 229 (fontified t) 229 234 (fontified t face font-lock-keyword-face) 234 491 (fontified t) 491 494 (fontified t) 494 496 (fontified t face font-lock-keyword-face) 496 550 (fontified t) 550 564 (fontified t face font-lock-keyword-face) 564 760 (fontified t)) #("(1+ -1)" 0 6 (fontified t) 6 7 (fontified t)) #("(kill-region (point-at (beginning-of-line nil))

                 (point-at (end-of-line nil)))" 0 94 (fontified t)) #("(mess)" 0 5 (fontified t) 5 6 (fontified t)) #("(yank)" 0 5 (fontified t) 5 6 (fontified t)) #("(face-spec-set" 0 1 (fontified t) 1 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) #(";;    " 0 6 (fontified t face font-lock-comment-delimiter-face)) #(";;

" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 6 (fontified t face font-lock-comment-delimiter-face) 6 7 (face font-lock-comment-face fontified nil)) #("my-forward-whitespace" 0 21 (fontified t)) ...)







(#("(face-spec-setnil" 0 13 (fontified t) 13 14 (rear-nonsticky t fontified t) 14 17 (fontified t)) #("tes" 0 3 (fontified t)) #("(defun duplicate-previous-line (n)

  \"Copy the Nth previous line to point.

If repeated, replace by the line preceding the one that was copied last time.

This command can be interleaved with \\\\[duplicate-following-line].\"

  (interactive \"p\")

  (duplicate-line (- n) -1))" 0 1 (fontified t) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 30 (fontified t face font-lock-function-name-face) 30 37 (fontified t) 37 193 (fontified t face font-lock-doc-face) 193 217 (fontified t face (font-lock-constant-face font-lock-doc-face)) 217 220 (fontified t face font-lock-doc-face) 220 236 (fontified t) 236 239 (fontified t face font-lock-string-face) 239 241 (fontified t) 241 269 (fontified t)) #("(defun duplicate-line (n dir)

  \"Copy the Nth following line to point.

If the last command was a duplication, replace the current line by the next

line in direction DIR.\"

  (if (eq (car-safe last-command) 'duplicate-line)

      (progn

        (delete-region (point-at (beginning-of-line nil))

                       (point-at (end-of-line nil)))

        (setq n (+ dir (cdr last-command))))

    (kill-region (point-at (beginning-of-line nil))

                 (point-at (end-of-line nil))))

  (if (= n 0)

      (insert (current-kill 0))

    (insert (save-excursion

              (beginning-of-line (1+ n))

              (buffer-substring (point)

                                (point-at (end-of-line nil)))))

    (setq this-command (cons 'duplicate-line n))))" 0 1 (fontified t) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 21 (fontified t face font-lock-function-name-face) 21 32 (fontified t) 32 170 (fontified t face font-lock-doc-face) 170 174 (fontified t) 174 176 (fontified t face font-lock-keyword-face) 176 229 (fontified t) 229 234 (fontified t face font-lock-keyword-face) 234 491 (fontified t) 491 494 (fontified t) 494 496 (fontified t face font-lock-keyword-face) 496 550 (fontified t) 550 564 (fontified t face font-lock-keyword-face) 564 760 (fontified t)) #("(1+ -1)" 0 6 (fontified t) 6 7 (fontified t)) #("(kill-region (point-at (beginning-of-line nil))

                 (point-at (end-of-line nil)))" 0 94 (fontified t)) #("(mess)" 0 5 (fontified t) 5 6 (fontified t)) #("(yank)" 0 5 (fontified t) 5 6 (fontified t)) #("(face-spec-set" 0 1 (fontified t) 1 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) #(";;    " 0 6 (fontified t face font-lock-comment-delimiter-face)) #(";;

" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 6 (fontified t face font-lock-comment-delimiter-face) 6 7 (face font-lock-comment-face fontified nil)) #("my-forward-whitespace" 0 21 (fontified t)) ...)



(#("(face-spec-setnil" 0 13 (fontified t) 13 14 (rear-nonsticky t fontified t) 14 17 (fontified t)) #("tes" 0 3 (fontified t)) #("(defun duplicate-previous-line (n)

  \"Copy the Nth previous line to point.

If repeated, replace by the line preceding the one that was copied last time.

This command can be interleaved with \\\\[duplicate-following-line].\"

  (interactive \"p\")

  (duplicate-line (- n) -1))" 0 1 (fontified t) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 30 (fontified t face font-lock-function-name-face) 30 37 (fontified t) 37 193 (fontified t face font-lock-doc-face) 193 217 (fontified t face (font-lock-constant-face font-lock-doc-face)) 217 220 (fontified t face font-lock-doc-face) 220 236 (fontified t) 236 239 (fontified t face font-lock-string-face) 239 241 (fontified t) 241 269 (fontified t)) #("(defun duplicate-line (n dir)

  \"Copy the Nth following line to point.

If the last command was a duplication, replace the current line by the next

line in direction DIR.\"

  (if (eq (car-safe last-command) 'duplicate-line)

      (progn

        (delete-region (point-at (beginning-of-line nil))

                       (point-at (end-of-line nil)))

        (setq n (+ dir (cdr last-command))))

    (kill-region (point-at (beginning-of-line nil))

                 (point-at (end-of-line nil))))

  (if (= n 0)

      (insert (current-kill 0))

    (insert (save-excursion

              (beginning-of-line (1+ n))

              (buffer-substring (point)

                                (point-at (end-of-line nil)))))

    (setq this-command (cons 'duplicate-line n))))" 0 1 (fontified t) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 21 (fontified t face font-lock-function-name-face) 21 32 (fontified t) 32 170 (fontified t face font-lock-doc-face) 170 174 (fontified t) 174 176 (fontified t face font-lock-keyword-face) 176 229 (fontified t) 229 234 (fontified t face font-lock-keyword-face) 234 491 (fontified t) 491 494 (fontified t) 494 496 (fontified t face font-lock-keyword-face) 496 550 (fontified t) 550 564 (fontified t face font-lock-keyword-face) 564 760 (fontified t)) #("(1+ -1)" 0 6 (fontified t) 6 7 (fontified t)) #("(kill-region (point-at (beginning-of-line nil))

                 (point-at (end-of-line nil)))" 0 94 (fontified t)) #("(mess)" 0 5 (fontified t) 5 6 (fontified t)) #("(yank)" 0 5 (fontified t) 5 6 (fontified t)) #("(face-spec-set" 0 1 (fontified t) 1 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) #(";;    " 0 6 (fontified t face font-lock-comment-delimiter-face)) #(";;

" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 6 (fontified t face font-lock-comment-delimiter-face) 6 7 (face font-lock-comment-face fontified nil)) #("my-forward-whitespace" 0 21 (fontified t)) ...)



#(";;    nil" 0 5 (fontified t face font-lock-comment-delimiter-face) 5 6 (rear-nonsticky t fontified t face font-lock-comment-delimiter-face) 6 9 (fontified t face font-lock-comment-face))

;;    nil

(#(";;    nil" 0 5 (fontified t face font-lock-comment-delimiter-face) 5 6 (rear-nonsticky t fontified t face font-lock-comment-delimiter-face) 6 9 (fontified t face font-lock-comment-face)) #("(face-spec-setnil" 0 13 (fontified t) 13 14 (rear-nonsticky t fontified t) 14 17 (fontified t)) #("tes" 0 3 (fontified t)) #("(defun duplicate-previous-line (n)

  \"Copy the Nth previous line to point.

If repeated, replace by the line preceding the one that was copied last time.

This command can be interleaved with \\\\[duplicate-following-line].\"

  (interactive \"p\")

  (duplicate-line (- n) -1))" 0 1 (fontified t) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 30 (fontified t face font-lock-function-name-face) 30 37 (fontified t) 37 193 (fontified t face font-lock-doc-face) 193 217 (fontified t face (font-lock-constant-face font-lock-doc-face)) 217 220 (fontified t face font-lock-doc-face) 220 236 (fontified t) 236 239 (fontified t face font-lock-string-face) 239 241 (fontified t) 241 269 (fontified t)) #("(defun duplicate-line (n dir)

  \"Copy the Nth following line to point.

If the last command was a duplication, replace the current line by the next

line in direction DIR.\"

  (if (eq (car-safe last-command) 'duplicate-line)

      (progn

        (delete-region (point-at (beginning-of-line nil))

                       (point-at (end-of-line nil)))

        (setq n (+ dir (cdr last-command))))

    (kill-region (point-at (beginning-of-line nil))

                 (point-at (end-of-line nil))))

  (if (= n 0)

      (insert (current-kill 0))

    (insert (save-excursion

              (beginning-of-line (1+ n))

              (buffer-substring (point)

                                (point-at (end-of-line nil)))))

    (setq this-command (cons 'duplicate-line n))))" 0 1 (fontified t) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 21 (fontified t face font-lock-function-name-face) 21 32 (fontified t) 32 170 (fontified t face font-lock-doc-face) 170 174 (fontified t) 174 176 (fontified t face font-lock-keyword-face) 176 229 (fontified t) 229 234 (fontified t face font-lock-keyword-face) 234 491 (fontified t) 491 494 (fontified t) 494 496 (fontified t face font-lock-keyword-face) 496 550 (fontified t) 550 564 (fontified t face font-lock-keyword-face) 564 760 (fontified t)) #("(1+ -1)" 0 6 (fontified t) 6 7 (fontified t)) #("(kill-region (point-at (beginning-of-line nil))

                 (point-at (end-of-line nil)))" 0 94 (fontified t)) #("(mess)" 0 5 (fontified t) 5 6 (fontified t)) #("(yank)" 0 5 (fontified t) 5 6 (fontified t)) #("(face-spec-set" 0 1 (fontified t) 1 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) #(";;    " 0 6 (fontified t face font-lock-comment-delimiter-face)) #(";;

" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 6 (fontified t face font-lock-comment-delimiter-face) 6 7 (face font-lock-comment-face fontified nil)) ...)







(defadvice hello

  (around hello activate)



  ad-do-it

  )

;; (progn (ad-disable-advice 'hello 'around ') (ad-update 'hello)))





(defadvice hello

  (CLASS 1 FLAGS)



  )

;; (progn (ad-disable-advice 'hello 'CLASS '1) (ad-update 'hello)))



(defadvice FUNCTION

  (before [yas] elisp error!FUNCTIONLAGS)



  )

;; (progn (ad-disable-advice 'FUNCTION 'before ') (ad-update 'FUNCTION)))



(defadvice hello

  (before hello activate)

  world

  )

;; (progn (ad-disable-advice 'hello 'before 'hello) (ad-update 'hello)))

** 2013/02/12 17:58:46





after-init-hook

(color-theme-backup-original-values startup-display startup-times start-loader-show-log (lambda nil (auto-insert-mode 1)) auto-recover-startup Emacs-log-init (lambda nil (ad-disable-advice (quote autoload) (quote before) (quote after-require-push)) (ad-activate (quote autoload)) (after-require--set-library)) w32-check-shell-configuration)



















(string-match "yahoo" "hello world" )

nil



0



(string-match "\.junk\..+" f)





(defun auto-recover-startup ()

  "Auto recover from auto save.

If auto save file is old, then will delete it."

  (let ((files (directory-files my-bk-autosave-dir))

        (find-file-hook nil)

        f-location

        source-file)

    (dolist (f files)

      (unless (and (not auto-recover-re-exclude)

                   (string-match auto-recover-re-exclude f))

        (setq f-location (expand-file-name f my-bk-autosave-dir))

        (when (auto-save-file-name-p f)

          (setq source-file (file-name-from-auto-save f))

          (if (file-newer-than-file-p f-location source-file)

              (if (not (file-exists-p f-location))

                  ;; recover by copy

                  (progn

                    (copy-file f-location source-file)

                    (find-file-noselect source-file)

                    (message (format "%s recovered from auto-save by copy" source-file)))

                ;; recover by insert contents

                (switch-to-buffer (find-file-noselect source-file))

                (let ((inhibit-read-only t)

                      (coding-system buffer-file-coding-system)

                      (coding-system-for-read 'auto-save-coding))

                  (erase-buffer)

                  (insert-file-contents f-location nil)

                  (set-buffer-file-coding-system coding-system))

                (after-find-file nil nil t))

            (delete-file f-location)))))))







"#t!!junk!2013-02-12-135920.junk.py#"

"#t!!junk!2013-02-12-170945.junk.py#"

"#t!!junk!2013-02-12-171029.py#"



(string-match "\\.junk\\..+#$" "#t!!junk!2013-02-12-135920.py#")

DEBUG-2-auto-recover.el  f:"#t!!junk!2013-02-12-135920.junk.py#"

DEBUG-2-auto-recover.el  f:"#t!!junk!2013-02-12-170945.junk.py#"

DEBUG-2-auto-recover.el  f:"#t!!junk!2013-02-12-171029.py#"

DEBUG-3-auto-recover.el  f:"."

DEBUG-3-auto-recover.el  f:".."



nil



26



** 2013/02/12 18:58:51

(load "auto-install")

t



(remove-hook 'python-mode-hook 'turn-on-fic-mode)

(#[nil "\301\300!\210\302\303 \207" [expand-region-skip-whitespace make-local-variable nil er/add-python-mode-expansions] 2] wisent-python-default-setup ropemacs-mode #[nil "\2056 o\2034 \212\214~\210m\204- \302 \211A@\206 \303	8)\204' \304 \305=\203- \306y\210\202 \307 \210\310 *\207\310 \207" [py-smart-indentation erg syntax-ppss 8 current-indentation 0 1 back-to-indentation py-guess-indent-offset] 3] #[nil "\304\302!\210\305\304\303!\210\306\211\207" [py-indent-tabs-mode indent-tabs-mode beginning-of-defun-function end-of-defun-function make-local-variable py-beginning-of-def-or-class py-end-of-def-or-class] 2] hs-minor-mode python-coding-style python-mode-hook-predefine)



** 2013/02/12 23:33:59



(defvar annotation-list '("TODO" "FIXME" "BUG" "WARNING" "KLUDGE"))

(defvar annotation-format " %s: (%s) [%s]")

(defvar annotation-timestamp-format "%Y/%m/%d")



(setq annotation-format " %s: (%s) [%s]")

(setq annotation-list '("TODO" "FIXME" "BUG" "WARNING" "KLUDGE"))

("TODO" "FIXME" "BUG" "WARNING" "KLUDGE")





(defun annotation ()

  ""

  (interactive)

  (let ((p (annotation-anotated-this-line-p)))

    (if p

        (save-excursion

          (goto-char p)

          (let* ((bounds (bounds-of-thing-at-point 'word))

                 (str (match-string 0))

                 (n (which-in-list str annotation-list)))

            (delete-region (car bounds) (cdr bounds))

            (insert (nth (if (eq (1+ n) (length annotation-list))

                             0

                             (1+ n))

                         annotation-list))))

      (insert (concat comment-start

                      (format annotation-format

                              (car annotation-list)

                              user-full-name

                              (format-time-string annotation-timestamp-format)

                              ))))))

(global-set-key (kbd "H-@") 'annotation)

; TODO: (Atami) [2013/02/12]

(length annotation-list)

5









(defun annotation-make-re ()

  ""

  (let ((re "\\(?:")

        notfirst)

    (dolist (el annotation-list)

      (if notfirst

          (setq re (concat re "\\|" el))

        (setq notfirst t)

        (setq re (concat re el)))

      )

    (concat re "\\)")))



(defun annotation-anotated-this-line-p ()

  "anotated-this-line-p"

  (save-excursion

    (end-of-line)

    (re-search-backward (annotation-make-re)

                        (save-excursion

                          (beginning-of-line) (point)) 'noerror)

    (let ((face (what-face-at-point)))

      (if (or (eq 'font-lock-comment-face face)

              (member 'font-lock-comment-face face))

          (point)

        nil))))



(defun which-in-list (target list)

  " "

  (let ((n 0)

        (len (length list))

        done)

    (while (and (not done)

                (> len n))

      (if (string= target (nth n list))

          (setq done t)

        (incf n)))

    (if (> len n)

        n nil)))





(insert (concat comment-start (format annotation-format

                (car annotation-list)

                user-full-name

                (format-time-string annotation-timestamp-format)

                )))

; TODO: (Atami) [2013/02/12]nil



 TODO: (Atami) [2013/02/12]nil



(format-time-string annotation-timestamp-format)

"2013/02/12"







(tes "BUGS" annotation-list)

nil



2



1



0



nil







(while (and (not done)

            (> len n))

  (if (eq target (nth n list))

      (setq done t))

  (if (> len n)

      n nil))







(length annotation-list)

4



(nth 0 annotation-list)

"TODO"







( "TODO" annotation-list)

("TODO" "FIXME" "BUG" "WARNING")





(match-string 0)

; TODO

nil

no



(narrow-to-region (beginning-of-line) (end-of-line))



(insert

(concat comment-start

        (format annotation-format

                (car annotation-list)

                user-full-name

                (format-time-string annotation-timestamp-format))))



(re-search-forward re (save-excursion

                        (end-of-line) (point)) 'noerror)



`(,(rx (and line-start (or ,@annotation-list))))









(let ((face (what-face-at-point)))

  (if (or (eq 'font-lock-comment-face face)

          (member 'font-lock-comment-face face))

      (point)

    nil))



(re-search-forward "\\(?:TODO\\|FIXME\\|BUG\\|WARNING\\)")





; TODO



(what-face-at-point)

"\\(?:TODO\\|FIXME\\|BUG\\|WARNING\\)"



"\\(?:TODO\\|FIXME\\|BUG\\|WARNING"





"\\(?:TODOhelloFIXMEhelloBUGhelloWARNINGhello"





"\\(?:TODOFIXMEBUGWARNING"



"\\(?:TODOFIXMEBUGWARNING"







(concat annotation-list)





; TODO: (Atami) [2013/02/12]nil



"; TODO: (Atami) [2013/02/12]"



";TODO: (Atami) [2013/02/12]"





"TODO: (Atami) [2013/02/12]"



"TODO: (Atami) [2013/02/12]"



"TODO:(Atami)[2013/02/12]"



"TODO:(Atami)[2013/02/12]"





(format-time-string annotation-timestamp-format)

"2013/02/12"



"2013/02/12"

user-full-name

"Atami"





(comment-start)



comment-start

";"





; TODO: (Atami) [2013/02/12]

; WARNING: (Atami) [2013/02/12]; TODO: (Atami) [2013/02/12]









(replace-regexp-in-string " " "" comment-start)

";"







nil



(comment)

comment

comment-chars

comment-start

";"

comment-

** 2013/02/14 3:51:57

"^[[:digit:]]\\{1,3\\}"





(replace-regexp "^[[:digit:]]\\{1,3\\}" "")













nil





(setq py-imenu-create-index-p t)







;;;

** 2013/02/14 6:11:33

(skip-chars-backward " /t")





        (           )



(eq (char-before) 40)

10



(save-excursion

  (backward-sexp)

  (skip-chars-backward " /t")

  (unless (eq (char-before) 40) ; 40 = (

    (insert-char 40 1)))



(insert-char 40 1)

(nil



((

  add-hook 'mode-hook

           '(lambda()



              )

)

(add)

(backward-sexp)





( add-hook 'mode-hook

           '(lambda()



              )

)















(add-hook 'hello

          '(lambda()



             )

)

add-hook 'mode-hook

'(lambda()



   )







(add





add-hook 'mode-hook

'(lambda()



   )





midnight-hook

(clean-backup-files clean-buffer-list)





(defun test ()

  ""

  (message "DEBUG-1-nofile")

  (message "DEBUG-2-nofile")



  )

(test)

"DEBUG-2-nofile"



"DEBUG-1-nofile"



(header-title);*scratch* ---

;*scratch* ---



;*scratch* ---

798

(header-mode-line)

;; -*- Mode: Lisp-Interaction -*-



nil





(global-set-key [C-return] 'open-line-indent)

(newline-and-indent)



(indent-for-tab-command)





(defun open-line-indent (n)

  "Insert a newline and leave point before it.

If there is a fill prefix and/or a `left-margin', insert them

on the new line if the line would have been blank.

With arg N, insert N newlines."

  (interactive "*p")

  (open-line n)

  (save-excursion

    (forward-line n)

    (indent-for-tab-command)))

(global-set-key [C-return] 'open-line-indent)

open-line-indent







(defun open-line-indent-tes (n)

  "Insert a newline and leave point before it.

If there is a fill prefix and/or a `left-margin', insert them

on the new line if the line would have been blank.

With arg N, insert N newlines."

  (interactive "*p")

  (open-line n)

  (save-excursion

    (forward-line n)

    (indent-for-tab-command)))

(global-set-key (kbd "H-@")

                'open-line-

                indent)



** 2013/02/14 7:56:11

tabbar-auto-scroll-flag

t

tabbar-auto-scroll-flag

(setq tabbar-auto-scroll-flag t)

t

(setq tabbar-cycle-scope 'tabs)

tabs



groups



nil



(face-spec-set 'tabbar-selected '((t

                                  :inherit tabbar-default

                                  :box (:line-width 1 :color "white" :style pressed-button)

                                  :foreground "red" :bold

                                  )))

nil



nil

(face-spec-set 'tabbar-default '(

                                 ;;(((class color grayscale) (background light))

                                 ;; :inherit variable-pitch

                                 ;; :height 0.8

                                 ;; :foreground "gray50"

                                 ;; :background "grey75"

                                 ;; )

                                 (((class color grayscale) (background dark))

                                  :inherit variable-pitch

                                  :height 0.8

                                  :foreground nil

                                  :background nil

                                  )

                                 (((class mono) (background light))

                                  :inherit variable-pitch

                                  :height 0.8

                                  :foreground "black"

                                  :background "white"

                                  )

                                 (((class mono) (background dark))

                                  :inherit variable-pitch

                                  :height 0.8

                                  :foreground "white"

                                  :background "black"

                                  )

                                 (t

                                  :inherit variable-pitch

                                  :height 0.8

                                  :foreground "gray50"

                                  :background "gray75"

                                  )))

nil



nil



nil



nil



nil



nil



nil



nil



nil



nil



nil



nil



header-line















(setq tabbar-button-widget "Disabled")

"Disabled"

(setq tabbar-scroll-left-button nil)

nil

(dolist (btn '(tabbar-buffer-home-button

               tabbar-scroll-left-button

               tabbar-scroll-right-button))

  (set btn (cons (cons "" nil)

                 (cons "" nil))))

nil

(set-face-attribute 'tabbar-button nil :box nil)

(set-face-attribute 'tabbar-separator nil :height 0.8)

(set-face-attribute 'tabbar-default nil :background nil :foreground nil :height 0.8)

(set-face-attribute 'tabbar-unselected nil :background nil :foreground nil :box nil)

(set-face-attribute 'tabbar-selected nil :background nil :foreground "red" :box nil)

nil



nil



nil





nil







nil



nil



nil

(setq tabbar-separator '(1.5))

(1.5)



(3.0)



(3.0)



(20)



(1.5)

(global-set-key "\M-V" 'tabbar-backward-group)

(global-set-key "\M-~" 'tabbar-backward-group)



(get-buffer "06_loaddefs_start.el")

#<buffer 06_loaddefs_start.el>



(kill-buffer "06_loaddefs_start.el")

t





nil



** 2013/02/14 12:51:25



** 2013/02/14 16:46:49

(defun py--define-start-point ()

  "Return point that start definition of class or def.

If not exists return nil.

Will skip them in string or comment."

  (save-excursion

    (goto-char (point-min))

    (let (point)

      (while (and

              (setq point (re-search-forward "\\_<\\(class\\|def\\)\\_>" nil t))

              (py--at-string/comment-p)))

      (if point

          (match-beginning 0)

        nil))))







(let (done point)

  (while (and (re-search-forward "\\_<\\(?:class\\|def\\)\\_>" nil t)

              (not done))

    (unless (py--at-string/comment-p)

      (setq done t))

    )))



(skip-chars-backward "\\_<\\(?:class\\|def\\)\\_>")

(match-beginning 0)

727







(defun py--import-region ()

  "import-region"

  (let ((start (py--import-statement-start-point))

        (end (py--import--statement-end-point)))

    (when (and start end)

      (cons start end))))



(defun py--import-statement-start-point ()

  "import-statement-start-point"

  (save-excursion

    (goto-char (point-min))

    (let (point)

      (while (and

              (setq point (re-search-forward "\\(from\\|import\\)\\_>" nil t))

              (py--at-string/comment-p)))

      (if point

          (match-beginning 0)

        nil))))



(defun py--import--statement-end-point ()

  "import--statement-end-point"

  (save-excursion

    (save-restriction

      (narrow-to-region (point-min) (or (py--define-start-point) (point-max)))

      (goto-char (point-max))

      (if (re-search-backward "^\\(?:from\\|import\\|try[ \t]:.*[ \n\t]*\\(?:import\\|from\\)\\)\\_>" nil t)

          (if (looking-at "try")

              (progn (re-search-forward "^except")

                     (forward-paragraph 1))

            (forward-line 1)

            (point))

        nil))))













(save-excursion

  (save-restriction

    (narrow-to-region (point-min) (or (py--define-start-point) (point-max)))

    (goto-char (point-max))

    (if (re-search-backward "^\\(?:from\\|import\\|try[ \t]:.*[ \n\t]*\\(?:import\\|from\\)\\)\\_>" nil t)

        (if (looking-at "try")

            (progn (re-search-forward "^except")

                   (forward-paragraph 1))

          (forward-line 1)

          (point))

      nil)))







(if (re-search-forward "\\(?:from\\|import\\)\\_>" nil t)

    )



(save-excursion

  (goto-char (point-min))

  (let (point)

    (while (and

            (setq point (re-search-forward "\\(?:from\\|import\\)\\_>" nil t))

            (py--at-string/comment-p))

      (if point

          (match-beginning 0)

        nil))))

** 2013/02/14 16:53:55



(setq mode-line-format

      '("%e"

        mode-line-position

        ",P"

        (:eval (format "%4d" (point)))

        " "

        "%z"   ; mode-line-mule-info

        " "

        mode-line-buffer-identification

        " "

        "%*"   ; mode-line-modified

        "%2@"  ; mode-line-remote

        mode-name

        ))



(defvar orig-mode-line-format nil)



(defun toggle-mode-line ()

  "toggle-mode-line"

  (interactive)

  (if orig-mode-line-format

      (progn (setq mode-line-format orig-mode-line-format

                   orig-mode-line-format nil))

    (setq orig-mode-line-format mode-line-format)

    (setq mode-line-format '("%e"

                             mode-line-position

                             ",P"

                             (:eval (format "%4d" (point)))

                             " "

                             "%z"   ; mode-line-mule-info

                             " "

                             mode-line-buffer-identification

                             " "

                             "%*"   ; mode-line-modified

                             "%2@"  ; mode-line-remote

                             mode-name

                             )))

  )

** 2013/02/14 17:34:14

(defun py--insert-imports (modules str)

  "py-insert-imports

MODULES

STR"

  (let ((region (py--import-region))

        (re (concat "\\(?:from\\|import\\)[ \t]+" modules)))

    (save-excursion

      (save-restriction

        ;; narrowing

        (when region

          (narrow-to-region (car region) (cdr region)))

        (goto-char (point-min))

        (unless (re-search-forward re nil 'noerror)

          (goto-char (point-min))

          (insert (concat str "\n"))

          )

        ))))



(concat "\\(?:from\\|import\\)[ \t]+" modules)







(py--insert-imports "contextlib[ \t]+import[ \t]+closing"

                    "from contextlib import closing")



`py--import-region' `py--import-statement-start-point'

`py--import--statement-end-point'

`py--insert-imports'











(py--insert-imports "argparse" "import argparse")



** 2013/02/16 3:15:06

(global-set-key "\M-<" 'tabbar-backward-tab)

tabbar-backward-tab



(incf 1)





python_mode_start.el







(+ 1 1)

2





(setq n 1)

1

(incf n)

2

(setq n (1+ n))





(setq python-shell-interpreter             "python")

"python"







(defun replace-dir-sep ()

  "replace-dir-sep"

  (interactive)

  (query-replace "\\" "\\\\"))



(define-key ctl-e-map "\\" 'replace-dir-sep)





(setq python-shell-interpreter-args "-i P:\\system\\PortablePython\\App\\Scripts\\ipython-script.py")



P:\system\PortablePython\App\Scripts



(concat "-i " usb-drive-letter "system/PortablePython/App/Scripts/ipython-script.py")



(defun t1/smart-operater-- (arg)

  "smart-operater"

  (interactive "p")

  (cond ((py--at-comment/string-p) (self-insert-command n))

        (t (smart-operator--)))

  )

(global-set-key (kbd "H-@") 't1/smart-operater--)

smart-operator-docs





(setq smart-operater-docs t)











(defun smart-operator-document-line? ()

  (nth 8 (syntax-ppss)))















import paramiko

pa = paramiko.SSHClient()

pa.set_missing_host_key_policy(paramiko.AutoAddPolicy())

pa.connect('localhost', 12316, 't1')

ch = pa.get_transport().open_session()

ch.get_pty()

md = 'sudo cryptsetup luksOpen /dev/mapper/VG-data data_crypt'

ch.exec_command(md)

recv = ch.recv(1024)

recv2 = ch.recv(1024)

ch.send('\n')





(defadvice moccur

  (after moccur-hook activate)

  (color-moccur-mode-map-predefine)

  )

;; (progn (ad-disable-advice 'moccur 'after 'moccur-hook) (ad-update 'moccur)))







(defadvice moccur-edit-mode-in

  (after moccur-edit-hook activate)

  (moccur-edit-mode-map-predefine)

  )

;; (progn (ad-disable-advice 'moccur-edit-mode-in 'after 'moccur-edit-hook) (ad-update 'moccur-edit-mode-in)))





(defadvice moccur-set-key

  (after moccur-set-key-hook activate)

  (color-moccur-mode-map-predefine)

  )

;; (progn (ad-disable-advice 'moccur-set-key 'after 'moccur-set-key-hook) (ad-update 'moccur-set-key)))







(defadvice moccur-mode-edit-set-key

  (after moccur-mode-edit-set-key-hook activate)

  (moccur-edit-mode-map-predefine)

  )

;; (progn (ad-disable-advice 'moccur-mode-edit-set-key 'after 'moccur-mode-edit-set-key-hook) (ad-update 'moccur-mode-edit-set-key)))









(defun iswitchb-exit-anything ()

  ""

  (interactive)

  (if (minibufferp)

      (progn

        (run-with-timer 0.2 nil 'anything)

        (exit-minibuffer))

    (anything)))

minibuffer

(add-hook 'minibuffer-exit-hook 'tes2)

(tes2 agrep-minibuffer-exit-hook)



(tes2 agrep-minibuffer-exit-hook)



(run-with-timer 1 nil 'anything)

[nil 20766 29337 562000 nil anything nil nil]



(defun tes2 ()

  ""

  (interactive)

  (message "DEBUG-3-nofile")

  (remove-hook 'minibuffer-exit-hook 'tes2)

  (anything)

  )

(global-set-key (kbd "H-@") 'tes)



(minibufferp)



add-hook 'VAR-HOOK 'FUNCTIONS









minibuffer-exit-hook

(agrep-minibuffer-exit-hook)



(agrep-minibuffer-exit-hook)























(symf 'minibuffer-exit-hook)

nil



** 2013/02/16 22:42:29

(require 'pylit)

pylit

imenu-after-jump-hook

((lambda nil (if (eq major-mode (quote org-mode)) (org-show-context (quote org-goto)))))



iswitchb-cannot-complete-hook

iswitchb-completion-help

(add-hook 'iswitch-cannot-complete-hook 'iswitchb-exit-anything)

(iswitchb-exit-anything)



** 2013/02/16 23:52:55

(defun py-insert-pdb-set-trace ()

  "insert-pdb-set-trace"

  (interactive)

  (py--insert-imports "pdb" "import pdb")

  (ll-debug-open-fresh-line)

  (insert "pdb.set_trace()")

  (forward-line)

  (indent-according-to-mode)

  )

(global-set-key (kbd "H-@") 'py-insert-pdb-set-trace)







(autoload 'll-debug-open-fresh-line "ll-debug")



** 2013/02/17 0:53:00

(setq )



** 2013/02/17 1:42:01

(defface e2wm:face-history-list-select2

  '((t :foreground "Blue" :background "WhiteSmoke"))

  "Face for e2wm history list." :group 'e2wm)





col-highlight



(face-spec-set 'col-highlight '((((class color)

                                  (background dark))

                                 (:background "dark slate gray"))

                                (((class color)

                                  (background light))

                                 (:background "LightSkyBlue1"))

                                (t

                                 ())))





(setq col-highlight-face 'col-highlight)

col-highlight



(defadvice add-change-log-entry

  (around inhibit-read-only-add-change-log-entry activate)

  (let ((inhibit-read-only t))

    ad-do-it

    )

  )

;; (progn (ad-disable-advice 'add-change-log-entry 'around 'inhibit-read-only-add-change-log-entry) (ad-update 'add-change-log-entry))

)

** 2013/02/18 2:50:58



** 2013/02/18 2:54:23



** 2013/02/18 6:04:28

(define-key python-mode-map [(control c)(control c)] 'py-execute-buffer)





(defadvice jedi:show-doc

  (around inhibit-read-only-jedi:show-doc activate)

  (let ((inhibit-read-only t))

    ad-do-it

    ))

;; (progn (ad-disable-advice 'jedi:show-doc 'around 'inhibit-read-only-jedi:show-doc) (ad-update 'jedi:show-doc))

)







(defun jedi:show-doc ()

  "Show the documentation of the object at point."

  (interactive)

    (deferred:nextc (jedi:call-deferred 'get_definition)

      (lambda (reply)

        (with-current-buffer (get-buffer-create jedi:doc-buffer-name)

          (let ((inhibit-read-only t))

            (erase-buffer)

            (loop with has-doc = nil

                  with first = t

                  for def in reply

                  do (destructuring-bind

                         (&key doc desc_with_module line_nr module_path

                             &allow-other-keys)

                         def

                     (unless (or (null doc) (equal doc ""))

                       (if first

                           (setq first nil)

                         (insert "\n\n---\n\n"))

                       (insert "Docstring for " desc_with_module "\n\n" doc)

                       (setq has-doc t)))

                finally do

                (if (not has-doc)

                    (message "Document not found.")

                  (progn

                    (goto-char (point-min))

                    (when (fboundp jedi:doc-mode)

                      (funcall jedi:doc-mode))

                    (run-hooks 'jedi:doc-hook)

                    (funcall jedi:doc-display-buffer (current-buffer))))))))))

** 2013/02/18 6:39:48

(global-set-key (kbd "H-@") 'jedi:goto-definition)





(defadvice py-buffer-name-prepare

  (around for-ipython-py-buffer-name-prepare activate)

  (let ((name ad-do-it))

    (if (string= "*Python*" name)

        "*IPython*"

      name)

    )

  )

;; (progn (ad-disable-advice 'py-buffer-name-prepare 'around 'for-ipython-py-buffer-name-prepare) (ad-update 'py-buffer-name-prepare))

)

** 2013/02/18 6:50:53

(describe-function 'py-buffer-name-prepare)

#("py-buffer-name-prepare is a compiled Lisp function in

`python-mode.el'.



(py-buffer-name-prepare NAME &optional SEPCHAR DEDICATED)



Return an appropriate name to display in modeline.

SEPCHAR is the file-path separator of your system.



This function is advised.



Around-advice `for-ipython-py-buffer-name-prepare'." 55 69 (button (t) category help-function-def-button help-args (py-buffer-name-prepare "p:/Office/emacs/.emacs.d/elisp/plugin/python-mode.el")) 97 101 (face help-argument-name) 112 119 (face help-argument-name) 120 129 (face help-argument-name) 132 183 (ad-advice-info py-buffer-name-prepare) 183 190 (face help-argument-name) 190 314 (ad-advice-info py-buffer-name-prepare))









(defun py-shell-tes (&optional argprompt dedicated pyshellname switch sepchar py-buffer-name done split)

  "Start an interactive Python interpreter in another window.

Interactively, \\[universal-argument] 4 prompts for a buffer.

\\[universal-argument] 2 prompts for `py-python-command-args'.

If `default-directory' is a remote file name, it is also prompted

to change if called with a prefix arg.



Returns py-shell's buffer-name.

Optional string PYSHELLNAME overrides default `py-shell-name'.

Optional symbol SWITCH ('switch/'noswitch) precedes `py-switch-buffers-on-execute-p'

When SEPCHAR is given, `py-shell' must not detect the file-separator.

BUFFER allows specifying a name, the Python process is connected to

When DONE is `t', `py-shell-manage-windows' is omitted

Optional symbol SPLIT ('split/'nosplit) precedes `py-split-buffers-on-execute-p'

"

  (interactive "P")

  (let* ((coding-system-for-read 'utf-8)

         (coding-system-for-write 'utf-8)

         (switch (or switch py-switch-buffers-on-execute-p))

         (split (or split py-split-windows-on-execute-p))

         (sepchar (or sepchar (char-to-string py-separator-char)))

         (args py-python-command-args)

         (oldbuf (current-buffer))

         (path (getenv "PYTHONPATH"))

         ;; make classic python.el forms usable, to import emacs.py

         (process-environment

          (cons (concat "PYTHONPATH="

                        (if path (concat path path-separator))

                        data-directory)

                process-environment))

         ;; reset later on

         (py-buffer-name

          (or py-buffer-name

              (when argprompt

                (cond

                 ((eq 4 (prefix-numeric-value argprompt))

                  (setq py-buffer-name

                        (prog1

                            (read-buffer "Py-Shell buffer: "

                                         (generate-new-buffer-name (py-buffer-name-prepare (or pyshellname py-shell-name) sepchar)))

                          (if (file-remote-p default-directory)

                              ;; It must be possible to declare a local default-directory.

                              (setq default-directory

                                    (expand-file-name

                                     (read-file-name

                                      "Default directory: " default-directory default-directory

                                      t nil 'file-directory-p)))))))

                 ((and (eq 2 (prefix-numeric-value argprompt))

                       (fboundp 'split-string))

                  (setq args (split-string

                              (read-string "Py-Shell arguments: "

                                           (concat

                                            (mapconcat 'identity py-python-command-args " ") " ")))))))))

         (pyshellname (or pyshellname (py-choose-shell)))

         ;; If we use a pipe, Unicode characters are not printed

         ;; correctly (Bug#5794) and IPython does not work at

         ;; all (Bug#5390). python.el

         (process-connection-type t)

         ;; already in py-choose-shell

         (py-use-local-default

          (if (not (string= "" py-shell-local-path))

              (expand-file-name py-shell-local-path)

            (when py-use-local-default

              (error "Abort: `py-use-local-default' is set to `t' but `py-shell-local-path' is empty. Maybe call `py-toggle-local-default-use'"))))

         (py-buffer-name-prepare (unless (and py-buffer-name (not dedicated))

                                   (py-buffer-name-prepare (or pyshellname py-shell-name) sepchar dedicated)))

         (py-buffer-name (or py-buffer-name-prepare py-buffer-name))

         (executable (cond (pyshellname)

                           (py-buffer-name

                            (py-report-executable py-buffer-name))))

         proc)

    (unless (comint-check-proc py-buffer-name)

      (set-buffer (apply 'make-comint-in-buffer executable py-buffer-name executable nil args))

      (set (make-local-variable 'comint-prompt-regexp)

           (cond ((string-match "[iI][pP]ython[[:alnum:]*-]*$" py-buffer-name)

                  (concat "\\("

                          (mapconcat 'identity

                                     (delq nil (list py-shell-input-prompt-1-regexp py-shell-input-prompt-2-regexp ipython-de-input-prompt-regexp ipython-de-output-prompt-regexp py-pdbtrack-input-prompt py-pydbtrack-input-prompt))

                                     "\\|")

                          "\\)"))

                 (t (concat "\\("

                            (mapconcat 'identity

                                       (delq nil (list py-shell-input-prompt-1-regexp py-shell-input-prompt-2-regexp py-pdbtrack-input-prompt py-pydbtrack-input-prompt))

                                       "\\|")

                            "\\)"))))

      (set (make-local-variable 'comint-input-filter) 'py-history-input-filter)

      (set (make-local-variable 'comint-prompt-read-only) py-shell-prompt-read-only)

      (set (make-local-variable 'comint-use-prompt-regexp) nil)

      (set (make-local-variable 'compilation-error-regexp-alist)

           python-compilation-regexp-alist)

      ;; (setq completion-at-point-functions nil)

      (when py-fontify-shell-buffer-p

        (set (make-local-variable 'font-lock-defaults)

             '(py-font-lock-keywords nil nil nil nil

                                     (font-lock-syntactic-keywords

                                      . py-font-lock-syntactic-keywords))))

      (set (make-local-variable 'comment-start) "# ")

      (set (make-local-variable 'comment-start-skip) "^[ \t]*#+ *")

      (set (make-local-variable 'comment-column) 40)

      (set (make-local-variable 'comment-indent-function) #'py-comment-indent-function)

      (font-lock-fontify-buffer))

    (set (make-local-variable 'indent-region-function) 'py-indent-region)

    (set (make-local-variable 'indent-line-function) 'py-indent-line)

    ;; (font-lock-unfontify-region (point-min) (line-beginning-position))

    (setq proc (get-buffer-process py-buffer-name))

    (goto-char (point-max))

    (move-marker (process-mark proc) (point-max))

    ;; (funcall (process-filter proc) proc "")

    (py-shell-send-setup-code proc)

    ;; (accept-process-output proc 1)

    (compilation-shell-minor-mode 1)

    ;; (sit-for 0.1)

    (setq comint-input-sender 'py-shell-simple-send)

    (setq comint-input-ring-file-name

          (cond ((string-match "[iI][pP]ython[[:alnum:]*-]*$" py-buffer-name)

                 (if py-honor-IPYTHONDIR-p

                     (if (getenv "IPYTHONDIR")

                         (concat (getenv "IPYTHONDIR") "/history")

                       py-ipython-history)

                   py-ipython-history))

                (t

                 (if py-honor-PYTHONHISTORY-p

                     (if (getenv "PYTHONHISTORY")

                         (concat (getenv "PYTHONHISTORY") "/" (py-report-executable py-buffer-name) "_history")

                       py-ipython-history)

                   py-ipython-history))

                ;; (dedicated

                ;; (concat "~/." (substring py-buffer-name 0 (string-match "-" py-buffer-name)) "_history"))

                ;; .pyhistory might be locked from outside Emacs

                ;; (t "~/.pyhistory")

                ;; (t (concat "~/." (py-report-executable py-buffer-name) "_history"))

                ))

    (comint-read-input-ring t)

    (set-process-sentinel (get-buffer-process py-buffer-name)

                          #'shell-write-history-on-exit)

    ;; (comint-send-string proc "import emacs\n")

    ;; (process-send-string proc "import emacs")

    (ansi-color-for-comint-mode-on)

    (use-local-map py-shell-map)

    ;; pdbtrack

    (add-hook 'comint-output-filter-functions 'py-pdbtrack-track-stack-file t)

    (remove-hook 'comint-output-filter-functions 'python-pdbtrack-track-stack-file t)

    (setq py-pdbtrack-do-tracking-p t)

    (set-syntax-table python-mode-syntax-table)

    ;; (add-hook 'py-shell-hook 'py-dirstack-hook)

    (when py-shell-hook (run-hooks 'py-shell-hook))

    (unless done (py-shell-manage-windows switch split oldbuf py-buffer-name))

    py-buffer-name))



** 2013/02/18 6:59:23

(defun py-buffer-name-prepare (name &optional sepchar dedicated)

  "Return an appropriate name to display in modeline.

SEPCHAR is the file-path separator of your system. "

  (let ((sepchar (or sepchar (char-to-string py-separator-char)))

        prefix erg suffix)

    (when (string-match (regexp-quote sepchar) name)

      (unless py-modeline-acronym-display-home-p

        (when (string-match (concat "^" (expand-file-name "~")) name)

          (setq name (replace-regexp-in-string (concat "^" (expand-file-name "~")) "" name))))

      (save-match-data

        (setq liste (split-string name sepchar)))

      (dolist (ele liste)

        (unless (string= "" ele)

          (setq prefix (concat prefix (char-to-string (aref ele 0))))))

      (unless py-modeline-display-full-path-p



        (setq name (substring name (1+ (string-match (concat sepchar "[^" sepchar "]+$") name))))))

    (setq erg

          (cond ((string= "ipython" name)

                 (replace-regexp-in-string "ipython" "IPython" name))

                ((string= "jython" name)

                 (replace-regexp-in-string "jython" "Jython" name))

                ((string= "python" name)

                 (replace-regexp-in-string "python" "Python" name))

                ((string-match "python2" name)

                 (replace-regexp-in-string "python2" "Python2" name))

                ((string-match "python3" name)

                 (replace-regexp-in-string "python3" "Python3" name))

                (t name)))

    (when (and windows-p (string= "Python" erg))

      (setq erg "IPython"))

    (when dedicated

      (setq erg (make-temp-name (concat erg "-"))))

    (cond ((and prefix (string-match "^\*" erg))

           (setq erg (replace-regexp-in-string "^\*" (concat "*" prefix " ") erg)))

          (prefix

           (setq erg (concat "*" prefix " " erg "*")))



          (t (setq erg (concat "*" erg "*"))))

    erg))



** 2013/02/18 20:27:51

(setq-default inferior-python-mode

              (let ((map (copy-keymap comint-mode-map)))

                (substitute-key-definition 'complete-symbol 'py-shell-complete

                                           map global-map)



                (define-key map (kbd "RET") 'comint-send-input)

                (if py-complete-function

                    (define-key map [tab] 'py-indent-line)

                  (define-key map [tab] 'py-indent-line))

                ))



** 2013/02/18 22:14:22

(self-insert-command 2)



(defun tes (arg)

  "ARGS"

  (interactive "p")

  (cond ((py--at-comment/string-p) (self-insert-command arg))

        (t (smart-operator--)))

  )

(define-key smart-operator-mode-map "-" 'tes)

(cond ((or (py--at-comment/string-p)

           (looking-at "^")) (self-insert-command arg))

      (t (smart-operator--)))







(defadvice smart-operator-insert

  (around inhibit-comment-string-smart-operator-insert activate)

  (cond ((or (py--at-comment/string-p)

             (looking-at "^")) (self-insert-command 1))

        (t ad-do-it))

  )

;; (progn (ad-disable-advice 'smart-operator-insert 'around 'inhibit-comment-string-smart-operator-insert) (ad-update 'smart-operator-insert))

)

** 2013/02/20 23:49:18
(symf 'outline-end-of-heading)
"p:/Office/emacs/lisp/outline.elc"
(defun outline-end-of-heading ()
  (if (re-search-forward outline-heading-end-regexp nil 'move)
      (forward-char -1)))

        def upload(self, source, target):
        """
        """
        if not self.sftp:
          self.sftp_connect()
        # self.sftp.chdir(targetdir)
        self.sftp.put(source, target)

** 2013/02/21 1:12:39
and not elif or if else = < > !  

(rx symbol-start
    (or "and" "not" "elif" "or" "if" "else" "=" "<" ">" "!" ":"))
"\\_<\\(?:\\(?:and\\|el\\(?:if\\|se\\)\\|if\\|not\\|or\\|[!:<=>]\\)\\)"

"\\_<\\(?:\\(?:and\\|el\\(?:if\\|se\\)\\|if\\|not\\|or\\|[!:<=>]\\)\\)"

"\\_<\\(?:\\(?:and\\|el\\(?:if\\|se\\)\\|if\\|not\\|or\\)\\)"

(re-search-forward "\\_<\\(?:\\(?:and\\|el\\(?:if\\|se\\)\\|if\\|not\\|or\\|[!<=>]\\)\\)" nil 'noeerror)


 py-operator-regexp
"[ \t]*\\(\\.\\|+\\|-\\|*\\|//\\|//\\|&\\|%\\||\\|\\^\\|>>\\|<<\\|<\\|<=\\|>\\|>=\\|==\\|!=\\)[ \t]*"

  
\\_<\\(?:\\(?:and\\|el\\(?:if\\|se\\)\\|if\\|not\\|or\\)\\)


"[ \t]*\\(\\.\\|+\\|=\\|:\\|-\\|*\\|//\\|//\\|&\\|%\\||\\|\\^\\|>>\\|<<\\|<\\|<=\\|>\\|>=\\|==\\|!=\\|\\_<\\(?:\\(?:and\\|el\\(?:if\\|se\\)\\|if\\|not\\|or\\)\\)\\)[ \t]*"

;;; result
"[ \t]*\\(\\.\\|+\\|=\\|:\\|-\\|*\\|//\\|//\\|&\\|%\\||\\|\\^\\|>>\\|<<\\|<\\|<=\\|>\\|>=\\|==\\|!=\\|\\_<\\(?:\\(?:and\\|el\\(?:if\\|se\\)\\|if\\|not\\|or\\)\\)\\)[ \t]*"

"[ \t]*\\(\\.\\|+\\|=\\|:\\|-\\|*\\|//\\|//\\|&\\|%\\||\\|\\^\\|>>\\|<<\\|<\\|<=\\|>\\|>=\\|==\\|!=\\|\\_<\\(?:\\(?:and\\|el\\(?:if\\|se\\)\\|if\\|not\\|or\\)\\)\\)[ \t]*"
** 2013/02/21 2:46:15
(symf 'recursive-edit)
nil

** 2013/02/21 7:18:42

yahoo world hello
(transpose-regions 2 7 14 19)
nil

(re-search-backward py-trance-re nil 'noerror)
  
  ;; (setq py-trance-re "[ \t]*\\(+\\|=\\|:\\|-\\|*\\|//\\|//\\|&\\|%\\||\\|\\^\\|>>\\|<<\\|<\\|<=\\|>\\|>=\\|==\\|!=\\|\\_<\\(\\(and\\|el\\(?:if\\|se\\)\\|if\\|not\\|or\\)\\)\\_>\\)[ \t]*")

(setq py-trance-re "[ \t]*\\(+\\|=\\|:\\|-\\|*\\|&\\|%\\||\\|\\^\\|>>\\|<<\\|<\\|<=\\|>\\|>=\\|==\\|!=\\|\\_<\\(?:\\(?:and\\|el\\(?:if\\|se\\)\\|if\\|not\\|or\\)\\)\\_>\\)[ \t]*")


(rx symbol-start (or "and" "or" "is") symbol-end)
"\\_<\\(?:and\\|is\\|or\\)\\_>"

"\\_<\\(?:and\\|is\\|or\\)"

  
(rx (or symbol-start symbol-end))
(looking-at "\\_<")



(looking-at "\\(+\\|=\\|-\\|*\\|&\\|%\\||\\|\\^\\|>>\\|<<\\|<\\|<=\\|>\\|>=\\|==\\|!=\\)")
(skip-chars-backward "\\(+\\|=\\|-\\|*\\|&\\|%\\||\\|\\^\\|>>\\|<<\\|<\\|<=\\|>\\|>=\\|==\\|!=\\|[ \t]\\)")

(looking-at "\\_<\\(?:and\\|is\\|or\\)\\_>")
(member (thing-at-point 'symbol) '("and" "is" "or"))
  (type-of (thing-at-point 'symbol))
    
(symbol-file 'thing-at-point)
"p:/Office/emacs/lisp/thingatpt.elc"

(member (thing-at-point 'symbol) '("and" "is" "or"))

(defun tes ()
  (interactive)
  (cond ((member (thing-at-point 'symbol) '("and" "is" "or"))
         (transpose-by-operation2))
        ((looking-at
          "\\(+\\|=\\|-\\|*\\|&\\|%\\||\\|\\^\\|>>\\|<<\\|<\\|<=\\|>\\|>=\\|==\\|!=\\)")
         (transpose-by-operation))
        (t (message "tes"))))
(global-set-key (kbd "H-@") 'tes)

(setq py-trance-re2 "[ \t]*\\(:\\|\\_<\\(?:\\(?:and\\|el\\(?:if\\|se\\)\\|if\\|or\\)\\)\\_>\\)[ \t]*")

(defun transpose-by-operation2 ()
  "by-operation"
  (interactive)
  (let (startr1 endr1 startr2 endr2)
    (save-excursion 
      (setq endr1 (progn
                    (unless (looking-at "\\_<")
                      (backward-sexp))
                    (skip-chars-backward "[ \t]")
                    (point)))
      (setq startr1 (progn
                      (re-search-backward py-trance-re2 nil 'noerror)
                      (match-end 0))))
    (save-excursion
      (setq startr2 (progn
                      (forward-sexp)
                      (skip-chars-forward "[ \t]")
                      (point)))
      (setq endr2 (progn
                    (re-search-forward py-trance-re2 nil 'noerror)
                    (match-beginning 0))))
    (transpose-regions startr1 endr1 startr2 endr2)
    ))




(setq skip-ope "\\(+\\|=\\|-\\|*\\|&\\|%\\||\\|\\^\\|>>\\|<<\\|<\\|<=\\|>\\|>=\\|==\\|!=\\)")
(setq py-trance-re "[ \t]*\\(+\\|=\\|:\\|-\\|*\\|&\\|%\\||\\|\\^\\|>>\\|<<\\|<\\|<=\\|>\\|>=\\|==\\|!=\\|\\_<\\(?:\\(?:and\\|el\\(?:if\\|se\\)\\|if\\|not\\|or\\)\\)\\_>\\)[ \t]*")
    
(defun transpose-by-operation ()
  "by-operation"
  (interactive)
  (let (startr1 endr1 startr2 endr2)
    (save-excursion 
      (setq endr1 (progn
                    (skip-chars-backward skip-ope)
                    (skip-chars-backward "[ \t]")
                    (point)))
      (setq startr1 (progn
                      (re-search-backward py-trance-re nil 'noerror)
                      (match-end 0))))
    (save-excursion
      (setq startr2 (progn
                      (skip-chars-forward skip-ope)
                      (skip-chars-forward "[ \t]")
                      (point)))
      (setq endr2 (progn
                    (re-search-forward py-trance-re nil 'noerror)
                    (match-beginning 0))))
    (transpose-regions startr1 endr1 startr2 endr2)
  ))
(global-set-key (kbd "H-@") 'transpose-by-operation)

(transpose-regions 1470 1475 1478 1479)

;; before str point
(save-restriction 
  (narrow-line)
  (re-search-backward py-trance-re (bol) 'noerror)
  (match-end 0)
  )

py-trance-re
"[ 	]*\\(+\\|=\\|:\\|-\\|*\\|&\\|%\\||\\|\\^\\|>>\\|<<\\|<\\|<=\\|>\\|>=\\|==\\|!=\\|\\_<\\(?:\\(?:and\\|el\\(?:if\\|se\\)\\|if\\|not\\|or\\)\\)\\_>\\)[ 	]*"


(when (looking-at py-trance-re)
  (let ((before-end (match-beginning 0))
        (after-beginning (match-end 0))
        before after)
      (re-search-backward py-trance-re (bol) 'noerror)
      (setq before (delete-and-extract-region (match-end 0) before-end))
      (goto-char after-beginning)
      (re-search-forward py-trance-re (eol) 'noerror)
      (setq after (delete-and-extract-region (match-beginning 0) after-beginning))
      (insert before)
      (goto-char before-end)
      (insert after)
    ))
(kill-region (bol) (eol))
(re-search-backward  (bol) 'noerror)





    (thing-at-point)
(thing-)

(substring )
(symf 'kill-region)
"p:/Office/emacs/lisp/simple.el"
(setq tes (delete-and-extract-region (bol) (eol)))
(car tes)
(insert tes)
"p:/Office/emacs/lisp/simple.el"nil

#("\"p:/Office/emacs/lisp/simple.el\"" 0 32 (fontified t face font-lock-string-face))

(delete-and-extract-region (bol) (eol))
  (defsubst bol ()
  (save-excursion
    (beginning-of-line)
    (point)))

(defsubst eol ()
  (save-excursion
    (end-of-line)
    (point)))

(defun narrow-line ()
  (narrow-to-region (bol) (eol)))

** 2013/02/22 2:56:41
(re-search-forward "^\\([^d].[^e].[^f]\\)" nil 'noerror)
(global-set-key (kbd "H-@") (lambda () (interactive)
  (re-search-forward "^The" nil 'noerror)
  ))

(looking-at " ")

(defun tes ()
  ""
  (interactive)
  (move-to-column 3)
  (unless (looking-at " ")
    (kill-whole-line)
    (next-line)
    ))

(defun non-visual-next ()
  (interactive)
  (let ((line-move-visual nil))
    (next-line)
    )
  )
(global-set-key (kbd "H-p") 'non-visual-next)
(global-set-key (kbd "H-@") 'tes)
(setq line-move-visual nil)

(expand-file-name "code" my-data-dir)
"p:/Office/emacs/.emacs.d/data_e/code"

my-code-dir
"p:/Office/emacs/.emacs.d/data_e/code"


(defun tes (&optional args)
  "ARGS"
  (let (hello world)

  (unless args
    (message "DEBUG-1-nofile"))))


(defun tes2 ()
  ""
  (interactive)
  (tes)
  )
(global-set-key (kbd "H-@") 'tes2)
** 2013/02/24 17:57:47

** 2013/02/24 17:57:56

** 2013/02/25 21:48:36
(defun follow-update-window-start-tes () 
  "Make sure that the start of WIN starts at a full screen line."
  (setq win (selected-window))
  (save-excursion
    (goto-char (window-start win))
    (forward-char)
    (unless (bolp)
      ;; (message "DEBUG-1-nofile")
      (vertical-motion 0 win)
      (unless (eq (point) (window-start win))
        (vertical-motion 1 win)
        (set-window-start win (point) 'noforce)))))

(window-start (selected-window))


(progn
  (setq my-mini-overlay (make-overlay (point-min) (point-max) nil t t))
  (overlay-put my-mini-overlay 'face 'minimap-font-face)
  (linum-mode -1)
  (set-window-fringes nil 0 0))

(delete-overlay my-mini-overlay)

my-mini-overlay
#<overlay in no buffer>


(defvar my-mini-overlay nil)
(make-variable-buffer-local 'my-mini-overlay)

(defface my-mini-font-face
  '((default :family "DejaVu Sans Mono" :height 30)))

(define-minor-mode my-mini-mode
  ""
  nil "my-mini" nil
  (cond (my-mini-mode
         (setq my-mini-overlay (make-overlay (point-min) (point-max) nil t t))
         (overlay-put my-mini-overlay 'face 'minimap-font-face)
         (linum-mode -1)
         (set-window-fringes nil 0 0))
        ((not my-mini-mode) (delete-overlay my-mini-overlay))))

(defun my-mini-toggle ()
  "mini-toggle"
  (interactive)
  (if my-mini-mode
      (my-mini-mode 1)
    (my-mini-mode -1)))



(defun follow-calc-win-end (&optional win)
  "Calculate the presumed window end for WIN.

Actually, the position returned is the start of the next
window, normally is the end plus one.

If WIN is nil, the selected window is used.

Returns (end-pos end-of-buffer-p)"
  (if (featurep 'xemacs)
      ;; XEmacs can calculate the end of the window by using
      ;; the 'guarantee options. GOOD!
      (let ((end (window-end win t)))
        (if (= end (point-max (window-buffer win)))
            (list end t)
          (list (+ end 1) nil)))
    ;; Emacs: We have to calculate the end by ourselves.
    ;; This code works on both XEmacs and Emacs, but now
    ;; that XEmacs has got custom-written code, this could
    ;; be optimized for Emacs.
    (let (height buffer-end-p)
      (with-selected-window (or win (selected-window))
        (save-excursion
          (goto-char (window-start))
          (setq height
                (-
                 (count-lines (window-start) (window-end))
                 ;; (window-height)
                   (if header-line-format 2 1)))
          (setq buffer-end-p
                (if (bolp)
                    (not (= height (vertical-motion height)))
                  (save-restriction
                    ;; Fix a mis-feature in `vertical-motion':
                    ;; The start of the window is assumed to
                    ;; coincide with the start of a line.
                    (narrow-to-region (point) (point-max))
                    (not (= height (vertical-motion height))))))
          (list (point) buffer-end-p))))))

(defun follow-estimate-first-window-start (windows win start)
  "Estimate the position of the first window.
The estimate is computed by assuming that the window WIN, which
should be a member of WINDOWS, starts at position START."
  (let ((windows-before (car (follow-split-followers windows win))))
    (save-excursion
      (goto-char start)
      (vertical-motion 0 win)
      (dolist (w windows-before)
        (vertical-motion (- 1 (count-lines (window-start) (window-end))) w))
      (point))))


follow-windows-start-end-cache
nil


(defun follow-windows-start-end (windows)
  "Builds a list of (WIN START END BUFFER-END-P) for every window in WINDOWS."
  (if (follow-cache-valid-p windows)
      follow-windows-start-end-cache
    (let ((orig-win (selected-window))
          win-start-end)
      (dolist (w windows)
        (select-window w)
        (push (cons w (cons (window-start) (follow-calc-win-end)))
              win-start-end))
      (select-window orig-win)
      (setq follow-windows-start-end-cache (nreverse win-start-end)))))



(defun follow-post-command-hook ()
  "Ensure that the windows in Follow mode are adjacent after each command."
  (unless (input-pending-p)
    (let ((follow-inside-post-command-hook t)
          (win (selected-window)))
      ;; Work in the selected window, not in the current buffer.
      (with-current-buffer (window-buffer win)
        (unless (and (symbolp this-command)
                     (get this-command 'follow-mode-use-cache))
          (follow-invalidate-cache))
        (when (and follow-mode
                   (not (window-minibuffer-p win)))
          ;; The buffer shown in the selected window is in follow
          ;; mode.  Find the current state of the display.
          (let* ((windows (follow-all-followers win))
                 (dest (point))
                 (win-start-end (progn
                                  (follow-update-window-start (car windows))
                                  (follow-windows-start-end windows)))
                 (aligned (follow-windows-aligned-p win-start-end))
                 (visible (follow-pos-visible dest win win-start-end))
                 selected-window-up-to-date)
            (unless (and aligned visible)
              (follow-invalidate-cache))
            (follow-avoid-tail-recenter)
            ;; Select a window to display point.
            (unless follow-internal-force-redisplay
              (if (eq dest (point-max))
                  ;; At point-max, we have to be careful since the
                  ;; display can be aligned while `dest' can be
                  ;; visible in several windows.
                  (cond
                   ;; Select the current window, but only when the
                   ;; display is correct. (When inserting characters
                   ;; in a tail window, the display is not correct, as
                   ;; they are shown twice.)
                   ;;
                   ;; Never stick to the current window after a
                   ;; deletion.  The reason is cosmetic: when typing
                   ;; `DEL' in a window showing only the end of the
                   ;; file, a character would be removed from the
                   ;; window above, which is very unintuitive.
                   ((and visible
                         aligned
                         (not (memq this-command
                                    '(backward-delete-char
                                      delete-backward-char
                                      backward-delete-char-untabify
                                      kill-region))))
                    (follow-debug-message "Max: same"))
                   ;; If the end is visible, and the window doesn't
                   ;; seems like it just has been moved, select it.
                   ((follow-select-if-end-visible win-start-end)
                    (follow-debug-message "Max: end visible")
                    (setq visible t aligned nil)
                    (goto-char dest))
                   ;; Just show the end...
                   (t
                    (follow-debug-message "Max: default")
                    (select-window (car (reverse windows)))
                    (goto-char dest)
                    (setq visible nil aligned nil)))

                ;; We're not at the end, here life is much simpler.
                (cond
                 ;; This is the normal case!
                 ;; It should be optimized for speed.
                 ((and visible aligned)
                  (follow-debug-message "same"))
                 ;; Pick a position in any window.  If the display is
                 ;; ok, this will pick the `correct' window.
                 ((follow-select-if-visible dest win-start-end)
                  (follow-debug-message "visible")
                  (goto-char dest)
                  ;; We have to perform redisplay, since scrolling is
                  ;; needed in case the line is partially visible.
                  (setq visible nil))
                 ;; Not visible anywhere else, lets pick this one.
                 ;; (Is this case used?)
                 (visible
                  (follow-debug-message "visible in selected."))
                 ;; Far out!
                 ((eq dest (point-min))
                  (follow-debug-message "min")
                  (select-window (car windows))
                  (goto-char dest)
                  (set-window-start (selected-window) (point-min))
                  (setq win-start-end (follow-windows-start-end windows))
                  (follow-invalidate-cache)
                  (setq visible t aligned nil))
                 ;; If we can position the cursor without moving the first
                 ;; window, do it. This is the case that catches `RET'
                 ;; at the bottom of a window.
                 ((follow-select-if-visible-from-first dest windows)
                  (follow-debug-message "Below first")
                  (setq visible t aligned t))
                 ;; None of the above. For simplicity, we stick to the
                 ;; selected window.
                 (t
                  (follow-debug-message "None")
                  (setq visible nil aligned nil))))
              ;; If a new window has been selected, make sure that the
              ;; old is not scrolled when the point is outside the
              ;; window.
              (unless (eq win (selected-window))
                (let ((p (window-point win)))
                  (set-window-start win (window-start win) nil)
                  (set-window-point win p))))
            (unless visible
              ;; If point may not be visible in the selected window,
              ;; perform a redisplay; this ensures scrolling.
              (redisplay)
              (setq selected-window-up-to-date t)
              (follow-avoid-tail-recenter)
              (setq win-start-end (follow-windows-start-end windows))
              (follow-invalidate-cache)
              (setq aligned nil))
            ;; Now redraw the windows around the selected window.
            (unless (and (not follow-internal-force-redisplay)
                         (or aligned
                             (follow-windows-aligned-p win-start-end))
                         (follow-point-visible-all-windows-p
                          win-start-end))
              (setq follow-internal-force-redisplay nil)
              (follow-redisplay windows (selected-window)
                                selected-window-up-to-date)
              (setq win-start-end (follow-windows-start-end windows))
              (follow-invalidate-cache)
              ;; When the point ends up in another window. This
              ;; happens when dest is in the beginning of the file and
              ;; the selected window is not the first.  It can also,
              ;; in rare situations happen when long lines are used
              ;; and there is a big difference between the width of
              ;; the windows.  (When scrolling one line in a wide
              ;; window which will cause a move larger that an entire
              ;; small window.)
              (unless (follow-pos-visible dest win win-start-end)
                (follow-select-if-visible dest win-start-end)
                (goto-char dest)))

            ;; If the region is visible, make it look good when spanning
            ;; multiple windows.
            (when (region-active-p)
              (follow-maximize-region
               (selected-window) windows win-start-end))))
        ;; Whether or not the buffer was in follow mode, we must
        ;; update the windows displaying the tail so that Emacs won't
        ;; recenter them.
        (follow-avoid-tail-recenter)))))




(car (cdr (cdr (car '('("win" 10443 18242 nil) '("win2" 18242 25942 nil))))))
nil
(#<window 19 on simple.el>
          10443
          18242 nil)
(#<window 20 on simple.el> 18242 275690 nil)



(defsubst follow-windows-aligned-p (win-start-end)
  "Non-nil if the follower windows are aligned."
  (let ((res t))
    (save-excursion
      (goto-char (window-start (caar win-start-end)))
      (unless (bolp)
        (vertical-motion 0 (caar win-start-end))
        (setq res (eq (point) (window-start (caar win-start-end))))))
    (while (and res (cdr win-start-end))
      ;; At least two followers left
      (setq res (eq (car (cdr (cdr (car win-start-end))))
                    (car (cdr (car (cdr win-start-end))))))
      (setq win-start-end (cdr win-start-end)))
    res))


(window-text-height)

** 2013/02/27 0:19:16


;; Document
;; ("C-ch"        ')
;; ("\C-c\C-h"    ')
;; ("\C-cd"       ')
;; ("\C-c\C-x"    ')
;;;; Info
;; ("\C-c\C-\M-h" ')
;; ("\C-cH"       ')
;;;; Go definitions
;; ("\C-cf"       ')
;; ("\C-c\C-f"    ')
;;;; Comment
;; (""            ')
;;;; Mark
;;;; Move
;;;; indent
;;;; Align
;;;; interpreter  

(define-key emacs-lisp-mode-map "C" 'self-insert-command)

** 2013/02/27 20:01:11
(require 'highlight-indentation)
highlight-indentation
(set-face-background 'highlight-indentation-face "DeepSkyBlue3")
(set-face-background 'highlight-indentation-current-column-face "midnight blue")
nil
CornflowerBlue  #6495ed
** 2013/02/27 20:27:12

** 2013/02/27 20:01:11
(require 'highlight-indentation)
highlight-indentation
(set-face-background 'highlight-indentation-face "DeepSkyBlue3")
(set-face-background 'highlight-indentation-current-column-face "midnight blue")
nil
CornflowerBlue  #6495ed



view-mode
nil


(defun t1-py-view-mode-toggle ()
  ""
  (interactive)
  (if view-mode
      (progn
        (view-mode -1)
        (highlight-indentation-mode -1))
    (view-mode 1)
    (highlight-indentation-mode 1))
  )

(global-set-key (kbd "H-@") 't1-py-view-mode-toggle)


(defalias 'bfn 'buffer-file-name)
** 2013/02/27 20:37:17

** 2013/02/27 20:27:12

** 2013/02/27 20:01:11
(require 'highlight-indentation)
highlight-indentation
(set-face-background 'highlight-indentation-face "DeepSkyBlue3")
(set-face-background 'highlight-indentation-current-column-face "midnight blue")
nil
CornflowerBlue  #6495ed



view-mode
nil


(defun t1-py-view-mode-toggle ()
  ""
  (interactive)
  (if view-mode
      (progn
        (view-mode -1)
        (highlight-indentation-mode -1))
    (view-mode 1)
    (highlight-indentation-mode 1))
  )

(global-set-key (kbd "H-@") 't1-py-view-mode-toggle)


(defalias 'bfn 'buffer-file-name)
** 2013/02/27 20:39:08
hs-show-hook
nil

** 2013/02/28 20:11:01

** 2013/03/01 1:47:28
(capitalize "hello")
"Hello"

(yas/text)
(yas/text)


(require 'highlight-indentation nil 'noerror)
highlight-indentation


(define-key python-mode-map ":" 'yas/expand)


(define-key python-mode-map "(" (smartchr '("(`!!')" "(" "((`!!'))" "(")))

(defun FUNC-NAME (ARGS)
  "FUNC-NAME
ARGS"
  )


(add-hook 'VAR-HOOK 'FUNCTIONS)






(defun t1-yas/expand-operand ()
  ""
  (interactive)
  (smartchr '("(`!!')" "(" "((`!!'))" "("))
  )
  
(global-set-key (kbd "H-@") (smartchr '("(`!!')" "(" "((`!!'))" "(")))



(define-key python-mode-map "(" 't1-yas/expand-operand)





(defun smartchr (&rest list-of-string)
  (let ((list-of-string (if (consp (car-safe list-of-string))
                            (car-safe list-of-string)
                          list-of-string)))
    (lexical-let ((smartchr-structs (mapcar 'smartchr-parse list-of-string))
                  (last-struct nil)
                  (count 0))
      (lambda ()
        (interactive)
        (princ this-command)
        (princ "\n")
        (princ real-last-command)
        (if (eq this-command real-last-command)
            (incf count)
          (setq count 0))
        (when (>= count (length smartchr-structs))
          (setq count 0))
        ;; cleanup -> insert
        (let ((struct (nth count smartchr-structs)))
          (assert (smartchr-struct-p struct))
          (when (eq this-command real-last-command)
            (assert (smartchr-struct-p last-struct))
            (funcall (smartchr-struct-cleanup-fn last-struct)))
          (setq last-struct struct)
          (funcall (smartchr-struct-insert-fn struct)))))))





(defun t1-hello (world)
  "
WORLD"
  (interactive)
  )
** 2013/03/01 7:06:22
    (define-key python-mode-map "("  (smartchr '("(`!!')" "(" "((`!!'))" "(")))

(save-excursion
(when (re-search-forward "def[ \t]+_main.+:" nil 'noerror)
  (forward-line)
  (while (or (looking-at "\\(?:[ \t'\"]\\|$\\)") (py--at-comment/string-p))
    (forward-char))
  (insert "args = _options_maker()\n"
          (make-string (current-indentation) 32))))








(progn 
  (py--insert-imports "argparse" "import argparse")
  (save-excursion
    (goto-char (point-min))
    (when (re-search-forward "def[ \t]+_main.+:" nil 'noerror)
      (sit-for 0)
      (while (or (looking-at "\\(?:[ \t'\"]\\|$\\)")
                 (py--at-comment/string-p))
        (forward-char))
      (insert "args = _options_maker()\n"
              (make-string (current-indentation) 32)))))





`(progn
   (py--insert-imports "argparse" "import argparse")
   (save-excursion
     (goto-char (point-min))
     (when (re-search-forward "def[ \t]+_main.+:" nil 'noerror)
       (skip-chars-forward " \t\n")
       (when (looking-at "[\"']")
         (t1-forward-thing 1))
       (when (looking-at "$")
         (insert "\n" (make-string (current-indentation) 32)))
       (insert "args = _options_maker()\n"
               (make-string (current-indentation) 32)))))`

(t1-forward-thing 1)
                   (not (eq 0 (skip-chars-forward " \t\n\"'")))


(if (py--at-comment/string-p)
    (forward-char))





(re-search-forward REGEXP nil 'noerror)




def _options_maker():
      parser = argparse.ArgumentParser(description="""hello""")
parser.add_argument('--version',
                    dest='version',
                    action='version',
                    version=__version__,
                    help='Version Strings.')
# (yas/expand-link "argparse_add_argument")
return parser.parse_args()

** 2013/03/01 7:37:41
(find-file (expand-file-name (concat "snippet/" (symbol-name major-mode)) my-data-dir))



(dired (expand-file-name (concat "snippets/" (symbol-name major-mode)) my-data-dir))
#<buffer lisp-interaction-mode<3>>


    (expand-file-name (concat "snippet/" (symbol-name major-mode) "/") my-data-dir)
"p:/Office/emacs/.emacs.d/data_e/snippet/lisp-interaction-mode"





(defun switch-snippets ()
  "switch snippets directory as dired."
  (interactive)
  (dired (expand-file-name
          (concat "snippets/"
                  (if (eq 'lisp-interaction-mode major-mode)
                      "emacs-lisp-mode"
                    (symbol-name major-mode)))
          my-data-dir))
  )

(global-set-key (kbd "H-@") 'switch-snippets)


(defun py-narrow-to-defun ()
  "Make text outside current def or class invisible.
    
    The defun visible is the one that contains point or follows point. "
  (interactive)
  (save-excursion
    (let ((end (py-beginning-of-def-or-class)))
      (py-end-of-def-or-class)
      (narrow-to-region end (point)))))

(global-set-key (kbd "H-@") 'py-narrow-to-defun) 
** 2013/03/01 8:19:00
(defun hello ()
  ""
  )


(defun t1-operand ()
  ""
  (interactive)
  (call-interactively (smartchr '("(`!!')" "(" "((`!!'))" "(")))
  )

(global-set-key (kbd "H-@") 't1-operand)
()
(defun call-yas/expand ()
  ""
  (yas/expand))

(global-set-key "(" 't1-operand)
(global-set-key "(" 'self-insert-command)

defun hellot1- (ARGS)

"
ARGS"
(defun t1-hello (ARGS)
  "
ARGS"
  )

(key-binding [40])
t1-operand

    

max-specpdl-size
4570


"


(defun smartchr (&rest list-of-string)
  (let ((list-of-string (if (consp (car-safe list-of-string))
                            (car-safe list-of-string)
                          list-of-string)))
    (lexical-let ((smartchr-structs (mapcar 'smartchr-parse list-of-string))
                  (last-struct nil)
                  (count 0))
                    (smartchr1)
                    )))


(defun smartchr1()
  "ARGS"
    (interactive)
    (princ real-last-command)
    (if (eq this-command real-last-command)
        (incf count)
      (setq count 0))
    (when (>= count (length smartchr-structs))
      (setq count 0))
    ;; cleanup -> insert
    (let ((struct (nth count smartchr-structs)))
      (assert (smartchr-struct-p struct))
      (when (eq this-command real-last-command)
        (assert (smartchr-struct-p last-struct))
        (funcall (smartchr-struct-cleanup-fn last-struct)))
      (setq last-struct struct)
      (funcall (smartchr-struct-insert-fn struct))))

** 2013/03/01 14:45:10
(face-spec-set 'flycheck-error-face '((t :inherit flymake-errline)))
(face-spec-set 'flycheck-warning-face '((t :inherit flymake-warnline)))
nil

nil

(progn
  (goto-char (point-min))
  (re-search-forward "-\\*-.*-\\*-" nil 'noerror)
  (kill-whole-line)
  (delete-blank-lines)
  )

(defun delete-header ()
  ""
  (goto-char (point-min))
  (re-search-forward "-\\*-.*-\\*-" nil 'noerror)
  (kill-whole-line)
  (delete-blank-lines))







(walk-edit-dirs 'delete-header '(("t:\\junk\\start.d" 'full ".el$")))

** 2013/03/01 14:53:05
(defun delete-header ()
  ""
  (goto-char (point-min))
  (when 
      (re-search-forward "-\\*-.*-\\*-" nil 'noerror)
    (kill-whole-line)
    (delete-blank-lines)))

(walk-edit-dirs 'delete-header '(("p:/Office/emacs/.emacs.d/elisp/start.d" 'full ".el$")))

** 2013/03/01 18:04:33
(defun delete-header ()
  ""
  (goto-char (point-min))
  (when (re-search-forward "-\\*-.*-\\*-" nil 'noerror)
    (let ((inhibit-read-only t))
      (kill-whole-line)
      (delete-blank-lines))))

(walk-edit-dirs 'delete-header '(("p:/Office/emacs/.emacs.d/elisp/start.d" 'full ".el$")))(p)
nil




modified-p

(modified-p)

(buffer-modified-p)
** 2013/03/01 19:26:14
(require 'profile)
(mcomplete-mode 1)
nil


nil

nil

** 2013/03/01 19:45:40
(setq yas/ignore-filenames-as-triggers t)
t

(if hello
    world
    yahoo
)


eval-after-load 'filename
'(progn
   )


eval-after-load 'filename
'(progn
   )

(re-in-string "\\.junk\\." buffer-file-name)
** 2013/03/01 19:55:24


(remove-hook 'emacs-lisp-mode-hook 'flycheck-mode)
(ert--activate-font-lock-keywords emacs-lisp-mode-hook-predefine enable-auto-async-byte-compile-mode)

(remove-hook emacs-mode)


(dolist (el '(("import"   "from")
              ("else"     "elif")
              ("continue" "break")))
  (add-to-list 'rotate-text-rotations el))

t





rotate-text-rotations
(("add-hook" "remove-hook") ("forward" "backward") ("message" "princ") ("t" "nil") ("true" "false") ("True" "False") ("TRUE" "FALSE") ("yes" "no") ("Yes" "No") ("YES" "NO") ("width" "height") ("start" "end") ...)

** 2013/03/03 6:45:37
(defun filename-predefine ()
  "For eval-after-load filename function."
  (message "Loading filename..")
  
  
  (eval-after-load 'filename '(filename-mode-predefine))


(defun filename-mode-predefine ()
  "For eval-after-load filename function."
  (message "Loading filename..")
  (filename-mode-map-predefine))

(defun filename-mode-map-predefine ()
  "For filename key bindings."
  (interactive)
  ())

(eval-after-load 'filename '(filename-mode-predefine))





(defun hello-mode-predefine ()
  "For eval-after-load hello function."
  (message "Loading hello..")
  (hello-mode-map-predefine))

(defun hello-mode-map-predefine ()
  "For hello key bindings."
  (interactive)
  ())

(eval-after-load 'hello '(hello-mode-predefine))





(defun filename-mode-predefine ()
  "For eval-after-load filename function."
  (message "Loading filename..")
  (filename-mode-map-predefine))

(defun filename-mode-map-predefine ()
  "For filename key bindings."
  (interactive)
  ())

(eval-after-load 'filename '(filename-mode-predefine))


(eval-after-load)
(eval-after-loadh)

(eval-after-load)
(eval-after-load 'filename
  '(progn
     ))


;; -*- codi; mode: emacs-lisp; no-byte-compile: t -*-
(" [[::]]")

[[:digit:
  (in-string-p)

  # condition: (if (in-string-p) '(require-snippet-condition . force-in-comment) nil)



(setq yas/buffer-local-condition
      '(or (not (memq (get-text-property (point) 'face)
                      '(font-lock-comment-face font-lock-doc-face font-lock-string-face)))
           '(require-snippet-condition . force-in-comment)))

(equal 'font-lock-comment-face (get-text-property (point) 'face))
(if (member (get-text-property (point) 'face) '(font-lock-string-face)) t nil)

()





(yas/global-mode-check-buffers mode-local-post-major-mode-change global-auto-complete-mode-check-buffers global-auto-highlight-symbol-mode-check-buffers auto-insert global-edit-server-edit-mode-check-buffers view-mode-by-default-setup flymake-find-file-hook turn-on-view-mode global-linum-mode-check-buffers global-undo-tree-mode-check-buffers recentf-track-opened-file global-font-lock-mode-check-buffers epa-file-find-file-hook vc-find-file-hook save-place-find-file-hook)

** 2013/03/03 16:57:58

** 2013/03/04 10:01:23
(defun insert-condition-py-in-string/comment ()
  (let ((inhibit-read-only t))
    (save-excursion
      (goto-char (point-min))
      (when (and (re-search-forward "key:" nil 'noerror)
                 (not (save-excursion (re-search-forward "condition:" nil 'noerror))))
        (end-of-line)
        (insert "\n# condition: (not (python-in-string/comment))"))
      )))


(walk-edit-dirs 'insert-condition-py-in-string/comment '(("p:/Office/emacs/.emacs.d/data_e/snippets/python-mode" 'full ".yasnippet")) nil nil)
nil

nil

nil

nil

nil

nil

** 2013/03/05 8:51:39

** 2013/03/05 17:43:10
(this-command-keys-vector)
[M-return]
(key-binding [32])
yas/expand


(defvar tes)
(setq tes nil)
nil

(push (point) (con))

(setq tes (cons (list (buffer-file-name) (point)) tes))
(156 155)
(pop tes)
156

(155)

(defvar stack-point nil)
(defvar stack-point-max 10)

stack-point

(defun stack-point ()
  ""
  (setq stack-point (cons (list (buffer-file-name) (point)) stack-point))
  (length stack-point)
  (when (> (length stack-point) stack-point-max)
    (setcdr (nthcdr (1- stack-point-max) stack-point) nil))
  )

(defun pop-stack-point ()
  ""
  (interactive)
  (let ((dst (pop stack-point)))
    (when (eq dst nil)
      (error "no stack point"))
    (when (not (eq (car dst) nil))
      (find-file (car dst))
      (goto-char (car (cdr dst)))
        )))
(pop stack-point)
nil

(global-set-key (kbd "H-@") 'pop-stack-point)
(boundp nil)
t

stack-point
(("p:/Office/emacs/lisp/simple.el" 124599) ("p:/Office/emacs/lisp/simple.el" 125693) ("p:/Office/emacs/lisp/simple.el" 125579) ("p:/Office/emacs/lisp/simple.el" 125524) ("p:/Office/emacs/lisp/simple.el" 125406) ("p:/Office/emacs/lisp/simple.el" 125225) ("p:/Office/emacs/lisp/simple.el" 124940) ("p:/Office/emacs/lisp/simple.el" 124672) ("p:/Office/emacs/lisp/simple.el" 124165) ("p:/Office/emacs/lisp/simple.el" 124193))

(("p:/Office/emacs/lisp/simple.el" 125693)
 ("p:/Office/emacs/lisp/simple.el" 125579)
 ("p:/Office/emacs/lisp/simple.el" 125524)
 ("p:/Office/emacs/lisp/simple.el" 125406)
 ("p:/Office/emacs/lisp/simple.el" 125225)
 ("p:/Office/emacs/lisp/simple.el" 124940)
 ("p:/Office/emacs/lisp/simple.el" 124672)
 ("p:/Office/emacs/lisp/simple.el" 124165)
 ("p:/Office/emacs/lisp/simple.el" 124193)
 ("p:/Office/emacs/lisp/simple.el" 124597))


2
pop

(cons "tes" "world" "tes")

("tes" . "world")

(list (buffer-file-name) (point))
(nil 335)



kill-ring





(yas/expand-link)

option_strings,
dest,
nargs=None,
const=None,
default=None,
type=None,
choices=None,
required=False,
help=None,
metavar=None):


# -*- mode: snippet -*-
# name: store_ture
# key: argparse_add_argument
# condition: (not (python-in-string/comment))
# --
parser.add_argument(${1:'-v', '--verbose'},
dest='${1:$(let* ((lis (mapcar '(lambda (x) (replace-regexp-in-string "[\"' ]" "" x))
                               (split-string text ",")))
                  (n 0)
                  (length (length lis))
                  matched)
             (unless (eq "" (car lis))
               (while (< n length)
                 (when (string-match "^--" (nth n lis))
                   (setq matched (substring (nth n lis) 2)))
                 (incf n))
               (setq n 0)
               (unless matched
                 (while (< n length)
                   (when (string-match "^-" (nth n lis))
                     (setq matched (substring (nth n lis) 1)))
                   (incf n)))
               (unless matched
                 (setq matched (car lis)))
               (replace-regexp-in-string "-" "_" matched))
             )}',
action='store_true',
default=False,
required=False,
# (yas/expand-link "argparse_other_options" t)
help='${2:A lot of messages.}')

# (yas/expand-link "argparse_add_argument" t)$0













option_strings,
dest,
const,
default=None,
required=False,
help=None,
metavar=None):

before-save-hook
(rope-before-save-actions delete-trailing-blank-lines delete-trailing-whitespace text-adjust-space-before-save-if-needed check-misspell force-backup-of-buffer)

























class _AppendAction(Action):

def __init__(self,
             option_strings,
             dest,
             nargs=None,
             const=None,
             default=None,
             type=None,
             choices=None,
             required=False,
             help=None,
             metavar=None):



















class _AppendConstAction(Action):

def __init__(self,
             option_strings,
             dest,
             const,
             default=None,
             required=False,
             help=None,
             metavar=None):






class _CountAction(Action):

def __init__(self,
             option_strings,
             dest,
             default=None,
             required=False,
             help=None):

** 2013/03/07 3:00:28
(emacs-init-time)
"5.0 seconds"
yas/init-snippet-templat

e


(defu)
** 2013/03/07 5:38:15
buffer-read-only
nil

auto-insert-




find-file-hook
(mode-local-post-major-mode-change
global-edit-server-edit-mode-check-buffers
yas/global-mode-check-buffers
global-auto-complete-mode-check-buffers
global-auto-highlight-symbol-mode-check-buffers
auto-insert
view-mode-by-default-setup
flymake-find-file-hook
turn-on-view-mode
global-linum-mode-check-buffers
global-undo-tree-mode-check-buffers
recentf-track-opened-file
global-font-lock-mode-check-buffers
epa-file-find-file-hook
vc-find-file-hook
save-place-find-file-hook)


find-fi



real-last-command
cua-paste




(defun view-mode-by-default-setup ()
  (when (and buffer-file-name view-mode-by-default-regexp
             (string-match view-mode-by-default-regexp buffer-file-name))
    (princ last-command)
    (princ real-last-command)
    (view-mode 1)
    (message "view-mode by view-mode-by-default-regexp.")))


(add)yas/before-expand-snippet-hook
(yas/my-save-marker)

(add-hook 'yas/before-expand-snippet-hook 'view-mode-off)

(defun view-mode-off ()
  ""
  (interactive)
  (message "DEBUG-1-nofile")
  
  (view-mode -1))







(defadvice yas/expand-snippet
  (after view-mode-off-yas/expand-snippet activate)
  (view-mode -1)
  )
;; (progn (ad-disable-advice 'yas/expand-snippet 'after 'view-mode-off-yas/expand-snippet) (ad-update 'yas/expand-snippet))
)


(add-hook 'hello '(lambda()
                    
                       ))
;; (hello (lambda()
                       
                       ))


(add-hook 'hello '(lambda() (world)))
;; (hello (lambda() (world)))

(add-hook 'VAR-HOOK '(lambda () ))
;; (VAR-HOOK (lambda () ))

(add-hook 'find-file-hook 'yasnippet)
;; (remove-hook 'find-file-hook 'yasnippet)

** 2013/03/11 18:58:03
py-guess-indent-offset

(tab-to-space)

(defvar py-inhibit-replace-tab nil)
(make-local-variable 'py-inhibit-replace-tab)
(defun py-replace-tab ()
  "ARGS"
  (interactive)
  (save-restriction
    (goto-char (point-min))
    (and (not py-inhibit-replace-tab)
         (re-search-forward "^\t" nil 'noerror)
         (y-or-n-p "This buffer using tab. replace to space?")
         (untabify (point-min) (point-max)))))
** 2013/03/12 14:40:25
(delete-blank-lines)
(just-one-blank-line)
(insert "\n")


(if (py-in-class-block-p)
    (delete-blank-lines)
  (progn
    (delete-blank-lines)
    (insert "\n")))

 
)

Put any relevant ``__all__`` specification after the imports.



py--determine-import-point
py--determine-__all__-point

(py--import-region)

(re-search-forward "^\"\"\"" 3000 'noerror)
(re-search-forward "^\\_<\\(class\\|def\\)\\_>" nil t)


(while (and (setq point (re-search-forward "^\\_<\\(class\\|def\\)\\_>" nil t))
            (py--at-comment/string-p)))








;; goto min buffer
;; search import or from

;; if not exists import or from statements
;; skip header documents

;; if nil above
;; search def or class statements

;; if nil above
;; skip header #!/bin/env -*-

(defun py--determine-end-doc-point ()
  (save-excursion
    (goto-char (point-min))
    (when(re-search-forward "^\"\"\"" 3000 'noerror)
      (forward-skip-string-regexp)
      (forward-char 1)
      (point))))

(defun py--determine-first-definition-point ()
  (save-excursion
    (goto-char (point-min))
    (let (point)
      (while (and (setq point (re-search-forward "^\\_<\\(class\\|def\\)\\_>" nil t))
                  (py--at-comment/string-p)))
      (when point
          (match-beginning 0)))))

(defun py--determine-head-point ()
  (save-excursion
    (goto-char (point-min))
    (skip-fontlocks '(font-lock-comment-face
                      font-lock-comment-delimiter-face
                      font-lock-regexp-grouping-backslash
                      font-lock-regexp-grouping-construct
                      ) 1)
    (point)
    ))



(defun py--import-statement-start-point ()
  "import-statement-start-point"
  (save-excursion
    (goto-char (point-min))
    (let (point)
      (while (and (setq point (re-search-forward "^\\(from\\|import\\)\\_>" nil t))
                  (py--at-comment/string-p)))
      (if point
          (match-beginning 0)
        ;; if not exists import statements.
        (or (when (setq point (py--determine-end-doc-point))
              (goto-char point)
              (forward-char) (point))
            (when (setq point (py--determine-first-definition-point))
              (goto-char point)
              (forward-line -1) (point))
            (py--determine-head-point)
              )))))














(defun py--determine-end-doc-point (&optional truepoint)
  (save-excursion
    (goto-char (point-min))
    (when(re-search-forward "^\"\"\"" 3000 'noerror)
      (forward-skip-string-regexp)
      (when (not truepoint)
        (forward-line 1))
      (point))))

(defun py--determine-first-definition-point (&optional truepoint)
  (save-excursion
    (goto-char (point-min))
    (let (point)
      (while (and (setq point (re-search-forward "^\\_<\\(class\\|def\\)\\_>" nil t))
                  (py--at-comment/string-p)))
      (when point
        (if truepoint
            (match-beginning 0)
          (forward-line -1)
          (skip-fontlocks '(font-lock-comment-face
                            font-lock-comment-delimiter-face
                            font-lock-regexp-grouping-backslash
                            font-lock-regexp-grouping-construct
                            ) -1)
          (point))))))

(defun py--determine-head-point ()
  (save-excursion
    (goto-char (point-min))
    (skip-fontlocks '(font-lock-comment-face
                      font-lock-comment-delimiter-face
                      font-lock-regexp-grouping-backslash
                      font-lock-regexp-grouping-construct
                      ) 1)
    (point)))






(skip-fontlocks '(font-lock-comment-face
                  font-lock-comment-delimiter-face
                  font-lock-regexp-grouping-backslash
                  font-lock-regexp-grouping-construct
                  ) -1)






(defun py--import-statement-start-point ()
  "import-statement-start-point"
  (save-excursion
    (goto-char (point-min))
    (let (point)
      (while (and (setq point (re-search-forward "^\\(from\\|import\\)\\_>" nil t))
                  (py--at-comment/string-p)))
      (if point
          (match-beginning 0)
        ;; if not exists import statements.
        (or (py--determine-end-doc-point)
            (py--determine-first-definition-point)
            (py--determine-head-point))))))

** 2013/03/12 19:05:49
file_
(defun my-kill-line (arg)
  " If line is blank, delete all surrounding blank lines, leaving just one.
On isolated blank line, delete that one.
On nonblank line, kill whole line."
  (interactive "P*")
  (cond (mark-active
         (cua-cut-region arg))
        ((progn (beginning-of-line) (looking-at "[ \t]*$"))
         (delete-blank-lines))
        (t
         (kill-whole-line))))


(defun py-kill-line (arg)
  " If line is blank, delete all surrounding blank lines, leaving just one.
On isolated blank line, delete that one.
On nonblank line, kill whole line."
  (interactive "P*")
  (cond (mark-active
         (cua-cut-region arg))
        ((progn (beginning-of-line) (looking-at "\\(?:def\\|class\\)"))
         (kill-whole-line))
        ((save-excursion
           (re-search-backward "[^ \t\n]" nil 'noerror)
           (forward-line 1)
           (looking-at "^[ \t\n]+[\n\r]\\(?:def\\|class\\)"))
         (if (eq last-command this-command)
             (progn (delete-blank-lines) (kill-whole-line))
           (delete-blank-lines)
           (save-excursion (insert "\n"))))
        ((progn (beginning-of-line) (looking-at "[ \t]*$"))
         (delete-blank-lines))
        (t
         (kill-whole-line))))
(define-key python-mode-map "\C-y" 'py-kill-line)
(global-set-key (kbd "H-@") 'py-kill-line)

(looking-at "^[ \t\n]+[\n\r]\\(?:def\\|class\\)")
(looking-at "\\(?:def\\|class\\)")

(progn (forward-line 1) (point))
(match-end 0)
\(?:\n\|.\)*


([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}
/^([\w\!\#$\%\&'\*\+\-\/\=\?\^`{\|}\~]+\.)*[\w\!\#$\%\&'\*\+\-\/\=\?\^`{\|}\~]+@((((([a-z0-9]{1}[a-z0-9\-]{0,62}[a-z0-9]{1})|[a-z])\.)+[a-z]{2,6})|(\d{1,3}\.){3}\d{1,3}(\:\d{1,5})?)$/i


(defun insert-utf ()
  (save-excursion
    (goto-char (point-min))
    (unless (re-search-forward "-\\*-[ \t]+coding:[ \t]+utf-8[ \t]+-\\*-" 100 'noerror)
      (goto-char (point-min))
      (when (looking-at "#!")
        (forward-line 1)
        (when (looking-at "#")
          (kill-whole-line))
        (insert "# -*- coding: utf-8 -*-\n")))))

(let ((python-mode-hook nil)
      (inhibit-read-only t))
  (walk-edit-dirs 'insert-utf '(("p:/Lib/.pylib" 'full ".py$"))))

(let ((python-mode-hook nil)
      (inhibit-read-only t))
  (walk-edit-dirs 'insert-utf '(("p:/Lib/.pylib/portable" 'full ".py$"))))
nil
(let ((python-mode-hook nil)
      (inhibit-read-only t))
  (walk-edit-dirs 'insert-utf '(("p:/Lib/.pylib/portable/updater" 'full ".py$"))))
nil
yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy


(let ((python-mode-hook nil)
      (inhibit-read-only t))
  (walk-edit-dirs 'insert-utf '(("p:/Lib/.pylib/agent" 'full ".py$"))))
nil

(let ((python-mode-hook nil)
      (inhibit-read-only t))
  (walk-edit-dirs 'insert-utf '(("p:/Lib/.pylib/winutiles" 'full ".py$"))))
nil

nil




nil

nil

nil

nil

nil
yyy
nil




nil

** 2013/03/12 21:44:51
(if (blank-line-p)
    ELSE
)

(progn 
  (delete-blank-lines)
  (delete-blank-lines)
  (insert "\n")
  (when (py-in-class-block-p)
    (insert "\n")))

(font-lock-add-keywords 'python-mode '(("\\_<\\(l\\|I\\|O\\)\\_>"
                                        1 '((t (:inherit flymake-warnline))))))
nil

** 2013年03月21日 14時13分38秒

** Sat 30 Mar 2013 04:06:43 AM JST

** Sat 30 Mar 2013 06:19:12 PM JST

** Sat 30 Mar 2013 07:23:29 PM JST

** Sat 30 Mar 2013 08:27:36 PM JST
(define-key doc-view-mode-map "N" 'doc-view-scroll-up-or-next-page+)
(define-key doc-view-mode-map "K" 'doc-view-scroll-down-or-previous-page+)


(add-hook 'image-mode-hook 'turn-off-view-mode)
;; (remove-hook 'image-mode-hook 'turn-off-view-mode)



find-file-hook
(mode-local-post-major-mode-change yas/global-mode-check-buffers global-edit-server-edit-mode-check-buffers global-auto-highlight-symbol-mode-check-buffers global-auto-complete-mode-check-buffers auto-insert view-mode-by-default-setup turn-on-view-mode global-linum-mode-check-buffers global-undo-tree-mode-check-buffers recentf-track-opened-file global-font-lock-mode-check-buffers epa-file-find-file-hook vc-find-file-hook save-place-find-file-hook)



02_base_start.el
02_base_start.el
02_base_start.elc
04_bindings_start.el
04_bindings_start.elc
06_loaddefs_start.el
06_loaddefs_start.elc
08_simple_start.el
08_simple_start.elc
09_check_default_start.el
09_check_default_start.elc
20_auto-async-byte-compile_plugin_start.el

(setq Info-next-link-keymap nil)


(load "info+")
t


(defun view-mode-by-default-setup ()
  (when (and buffer-file-name view-mode-by-default-regexp
             (string-match view-mode-by-default-regexp buffer-file-name))
    (view-mode 1)
    (message "view-mode by view-mode-by-default-regexp.")))


(defadvice view-mode-by-default-setup
  (around view-mode-by-default-setup+ activate)
  (unless (string-match "\\(\\.png$\\|\\.jpg$\\|\\.jpeg$\\)" buffer-file-name)
    ad-do-it
    ))
;; (progn (ad-disable-advice 'view-mode-by-default-setup+ 'around 'view-mode-by-default-setup+) (ad-update 'view-mode-by-default-setup+))
)

(defun view-mode-by-default-setup ()
  (message "DEBUG-3-nofile")
  (when (and buffer-file-name view-mode-by-default-regexp
             (string-match view-mode-by-default-regexp buffer-file-name))
    (message "DEBUG-4-nofile")
    (view-mode 1)
    (message "view-mode by view-mode-by-default-regexp.")))

find-file-hook
(mode-local-post-major-mode-change yas/global-mode-check-buffers global-edit-server-edit-mode-check-buffers global-auto-highlight-symbol-mode-check-buffers global-auto-complete-mode-check-buffers auto-insert view-mode-by-default-setup turn-on-view-mode global-linum-mode-check-buffers global-undo-tree-mode-check-buffers recentf-track-opened-file global-font-lock-mode-check-buffers epa-file-find-file-hook vc-find-file-hook save-place-find-file-hook)

(remove-hook 'find-file-hook 'turn-on-view-mode)
(mode-local-post-major-mode-change yas/global-mode-check-buffers global-edit-server-edit-mode-check-buffers global-auto-highlight-symbol-mode-check-buffers global-auto-complete-mode-check-buffers auto-insert view-mode-by-default-setup global-linum-mode-check-buffers global-undo-tree-mode-check-buffers recentf-track-opened-file global-font-lock-mode-check-buffers epa-file-find-file-hook vc-find-file-hook save-place-find-file-hook)

** Sat 30 Mar 2013 09:14:08 PM JST
(load "viewer")
t

t


(setq viewer-modeline-color-default "lime green")
(setq viewer-modeline-color-view "DeepPink")


(defun toggle-view-mode ()
  ""
  (interactive)
  (if view-mode
      (view-mode-disable)
    (view-mode-disable)
    )
  )
(global-set-key (kbd "s-s") 'toggle-view-mode)

()

(viewer-change-modeline-color-advice view-mode)
view-mode

** Sat 13 Apr 2013 09:48:28 AM JST
[l for l in  _ih if l.startswith('doc')]

自由民主党	
自民
294
民主党・無所属クラブ	
民主
56
日本維新の会	
維新
54
公明党	
公明
31
みんなの党	
みんな
18
日本共産党	
共産
8
生活の党	
生活
7
社会民主党・市民連合	
社民
2
無所属	
無

民主党・新緑風会	民主
自由民主党・無所属の会	自民
公明党	公明
みんなの党	みん
生活の党	生活
日本共産党	共産
みどりの風	み風
社会民主党・護憲連合	社民
日本維新の会	維新
新党改革	改革
各派に属しない議員	無所属
** Wed 17 Apr 2013 03:46:50 PM JST

** Tue 23 Jul 2013 09:08:21 PM JST

１７時頃、原付バイクを引き取りに草津警察署に到着。
原付バイクの確認と指紋の採取を行う。
鍵は見付かっていない。
鍵はバイクの鍵と勝手口、倉庫の鍵、畑の鍵が束ねてあった。 
バイクを確認すると破損箇所等はなかった。
メットインの中を覗くと使用していた黒地に白ツバの半ヘルが存在せず、
見知らぬピンク地に白く中央の太字の線と星型のマークの入ったメットとサングラスが入っていた。
それらを含めて指紋を採取してもらい、土曜日に最後に触った自分の十本の指の指紋、
第一関節から第三関節の指の指紋、左右の挙紋、手の側面（小指側）の指紋を採った。

見付けてくれたのは草津署のカワベさんで"滋賀県栗東市安養寺1丁目4　マガリハウス前"に置いてあったそうで、
マガリハウスの大家さん曰、出入りの邪魔になっていたそうだ。
** Fri 09 Aug 2013 05:13:41 AM JST
*
flag:003001
dispname:企画調整課／滋賀県
feedurl:http://www.pref.shiga.lg.jp/a/kikaku/
imglink:http://www.pref.shiga.lg.jp/a/kikaku/
title:企画調整課／滋賀県
link:http://www.pref.shiga.lg.jp/a/kikaku/
favicon:http://www.pref.shiga.lg.jp/favicon.ico
client:41361.5844939931
oplink:1
htmlrss:1
recovery:996699059
*

*
flag:003001
dispname:新駅問題支援対策室／滋賀県
feedurl:http://www.pref.shiga.lg.jp/a/shinkansen/
imglink:http://www.pref.shiga.lg.jp/a/shinkansen/
title:新駅問題支援対策室／滋賀県
link:http://www.pref.shiga.lg.jp/a/shinkansen/
favicon:http://www.pref.shiga.lg.jp/favicon.ico
client:41361.5845171412
oplink:1
htmlrss:1
recovery:996699060
*

** Sun 15 Sep 2013 05:51:16 AM JST

** Thu 19 Sep 2013 02:19:07 PM JST

** Thu 19 Sep 2013 02:41:29 PM JST

** Thu 19 Sep 2013 04:01:18 PM JST
ac-sources
(ac-source-yasnippet ac-source-words-in-same-mode-buffers)


lisp-interaction-mode-hook

auto-complete-mode
t
(bound auto-complete-mode)
(bound-and-true-p auto-complete-mode)
(bound-and-true-p abrakatabura)
nil

t
(add-to-list 'ac-sources '(ac-emacs-lisp-features ac-source-functions))
((ac-emacs-lisp-features ac-source-functions) ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers)

(ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers)

(ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers)



ac-sources
(ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers)

(ac-source-yasnippet ac-source-words-in-same-mode-buffers)

(ac-source-yasnippet ac-source-words-in-same-mode-buffers)



(dolist (acs '(ac-emacs-lisp-features ac-source-functions ac-source-variables ac-source-symbols))
  (add-to-list 'ac-sources acs 'append))
nil
ac-sources
((ac-emacs-lisp-features ac-source-functions) ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers ac-source-functions ac-source-variables ac-source-symbols)

((ac-emacs-lisp-features ac-source-functions) ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers ac-source-functions ac-source-variables ac-source-symbols)



(setq ac-sources '(ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers ac-source-functions ac-source-variables ac-source-symbols))
(ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers ac-source-functions ac-source-variables ac-source-symbols)

(ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers ac-source-functions ac-source-variables ac-source-symbols)
ac-sources
(ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers ac-source-functions ac-source-variables ac-source-symbols)



(defun scratch-load-ac-sources-after-auto-complete-predefine ()
  "Load ac-sources after load auto-complete."
  (save-window-excursion
    (if (get-buffer "*scratch*")
        (switch-to-buffer "*scratch*"))
    (load-scratch-auto-complete))
  )
scratch-load-ac-sources-after-auto-complete-predefine


(scratch-load-ac-sources-after-auto-complete-predefine)
nil

nil

(ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers ac-source-functions ac-source-variables ac-source-symbols ac-emacs-lisp-features ac-source-functions ac-source-variables ac-source-symbols ac-emacs-lisp-features ac-source-functions ac-source-variables ac-source-symbols)

(ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers ac-source-functions ac-source-variables ac-source-symbols ac-emacs-lisp-features ac-source-functions ac-source-variables ac-source-symbols)


ac-sources
(ac-source-symbols ac-source-variables ac-source-functions ac-emacs-lisp-features)

(ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers ac-source-functions ac-source-variables ac-source-symbols)

(ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers ac-source-functions ac-source-variables ac-source-symbols)

(ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers ac-source-functions ac-source-variables ac-source-symbols)

(ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers ac-source-functions ac-source-variables ac-source-symbols)

(ac-emacs-lisp-features ac-source-yasnippet ac-source-words-in-same-mode-buffers ac-source-functions ac-source-variables ac-source-symbols ac-emacs-lisp-features ac-source-functions ac-source-variables ac-source-symbols ac-emacs-lisp-features ac-source-functions ac-source-variables ac-source-symbols)


(setq ac-sources nil)
nil
ac-sources
nil

** Thu 19 Sep 2013 11:13:16 PM JST

** Thu 26 Sep 2013 09:51:52 PM JST


ac-sources
(ac-source-yasnippet ac-source-words-in-same-mode-buffers)

** Fri 27 Sep 2013 02:40:30 AM JST
(require 'popwin nil )
popwin

popwin
(popwin:display-buffer (buffer-name))

(buffer-name)
"*scratch*"


(popwin:popup-buffer (buffer-name) :noselect nil)

(popwin:pop-to-buffer )

e2wm:def-plugin-files-mode-map
(keymap (13 . e2wm:def-plugin-files-select-command) (32 . e2wm:def-plugin-files-show-command) (113 . e2wm:pst-window-select-main-command) (122 . e2wm:def-plugin-files-sort-size-command) (115 . e2wm:def-plugin-files-sort-name-command) (116 . e2wm:def-plugin-files-sort-time-command) (114 . e2wm:def-plugin-files-rename-command) (94 . e2wm:def-plugin-files-updir-command) (100 . e2wm:def-plugin-files-delete-command) (103 . e2wm:def-plugin-files-update-by-command) (43 . e2wm:def-plugin-files-mkdir-command) ...)


(defun indirect-region (start end)
  "Edit the current region in another buffer.
    If the buffer-local variable `indirect-mode-name' is not set, prompt
    for mode name to choose for the indirect buffer interactively.
    Otherwise, use the value of said variable as argument to a funcall."
  (interactive "r")
  (let ((buffer-name (generate-new-buffer-name "*indirect*"))
        (mode
         (if (not indirect-mode-name)
             (setq indirect-mode-name
                   (intern
                    (completing-read 
                     "Mode: "
                     (mapcar (lambda (e) 
                               (list (symbol-name e)))
                             (apropos-internal "-mode$" 'commandp))
                     nil t)))
           indirect-mode-name)))
    (pop-to-buffer (make-indirect-buffer (current-buffer) buffer-name))
    (funcall mode)
    (narrow-to-region start end)
    (goto-char (point-min))
    (shrink-window-if-larger-than-buffer)))


(defvar indirect-mode-name nil
  "Mode to set for indirect buffers.")
(make-variable-buffer-local 'indirect-mode-name)


(defun pytes ()
  ""
  (interactive)
  (save-excursion
    (let* ((region (py--import-region))
           ;; expand region
           (start (progn (goto-char (car region))
                         (forward-line -1)
                         (point)))
           (end (progn (goto-char (cdr region))
                       (forward-line 5)
                       (point)))
           )
      (indirect-region start end (buffer-name))
      )))

(car (current-buffer))

#<buffer *scratch*>

(car )
(let ((region (py--import-region)))
  (princ (car region))
  (princ "\n")
  (princ (cdr region))
  )


(setq tesregion (py--import-region))

tesregion
(95 . 181)

(car tesregion)
95
(cdr tesregion)
181



(defun testtt (&optional a)
  "A"
  (if a
      (setq a (concat " " a))
    (setq a ""))
  (concat "*indirect" a "*")
  )

(defun indirect-region (start end &optional buffname)
  "Edit the current region in another buffer.
START:start of region.
END:end of region.
    If the buffer-local variable `indirect-mode-name' is not set, prompt
    for mode name to choose for the indirect buffer interactively.
    Otherwise, use the value of said variable as argument to a funcall."
  (interactive "r")
  (if buffname
      (setq buffname (concat " " buffname))
    (setq buffname ""))
  (let ((buffer-name (generate-new-buffer-name (concat "*indirect" buffname "*")))
        (mode
         (if (not indirect-mode-name)
             (setq indirect-mode-name
                   (intern
                    (completing-read
                     "Mode: "
                     (mapcar (lambda (e)
                               (list (symbol-name e)))
                             (apropos-internal "-mode$" 'commandp))
                     nil t)))
           indirect-mode-name)))
    (pop-to-buffer (make-indirect-buffer (current-buffer) buffer-name))
    (funcall mode)
    (narrow-to-region start end)
    (goto-char (point-min))
    (shrink-window-if-larger-than-buffer)))

(buffer-file-name)
nil
(buffer-)
(list (current-buffer))
(#<buffer *scratch*>)

*scratch*#<buffer *scratch*>

#<buffer *scratch*>

(testtt "hello")
"*indirect hello*"

"*indirect*"

"*indirect *"

""

""
(buffer-name)
"*scratch*"

nilnil

** Fri 27 Sep 2013 06:44:01 PM JST
(defun py-wharap-quote ()
  ""
  (interactive)
  (let ((re-start (rx symbol-start))
        (re-end (rx symbol-end)))
    (unless (looking-at re-start)
      (re-search-backward re-start nil 'noerror))
    (insert "'")
    (re-search-forward re-end nil 'noerror)
    (insert "'")
    ))

(skip-char)
** Fri 27 Sep 2013 11:21:50 PM JST
(defun py-wrap-byquote ()
  "Wrap symbol by quote."
  (interactive)
  (when (looking-at "[ \t]")
    (error "Do not on space or tab"))
  (save-excursion
    (let ((re-start (rx symbol-start))
          (re-end (rx symbol-end)))
      (unless (looking-at re-start)
        (re-search-backward re-start nil 'noerror))
      (insert "'")
      (re-search-forward re-end nil 'noerror)
      (insert "'")
      )))

(skip-chars-forward " ")
(rx symbol-start)
"\\_<"
(rx symbol-end)
"\\_>"

(save-excursion
  (save-restriction)
  (narrow-line)
  (re-search-backward (concat (rx symbol-start) "import" (rx symbol-end))
                      nil 'noerror)
  (goto-char (match-end 0))
  (skip-chars-forward "[ \t]")
  )








(setq e2wm:c-code-recipe
      '(| (:left-max-size 30)
          (- (:upper-size-ratio 0.3)
             files
             (- (:upper-size-ratio 0.2)
                history imenu))
          (| (:right-max-size 85) main
             (- (:upper-size-ratio 0.6) main-prev sub))))

(setq e2wm:c-code-winfo
      '((:name imenu     :plugin imenu :default-hide nil)
        (:name files     :plugin files :plugin-args)
        (:name history   :plugin history-list :default-hide nil)
        (:name main)
        (:name main-prev :plugin main-prev :default-hide nil)
        (:name sub       :buffer "*info*" :default-hide nil)))


(defface e2wm:face-history-list-normal
  '((t :foreground "DarkSlateBlue"))
  "Face for e2wm history list." :group 'e2wm)
(defface e2wm:face-history-list-select1
  '((t :foreground "OrangeRed" :background "Lightsteelblue1"))
  "Face for e2wm history list." :group 'e2wm)
(defface e2wm:face-history-list-select2
  '((t :foreground "Blue" :background "WhiteSmoke"))
  "Face for e2wm history list." :group 'e2wm)

(face-spec-set 'e2wm:face-history-list-normal '((t :foreground "White")))
nil




(setq-default e2wm:face-history-list-normal '((t :foreground "White")))
((t :foreground "White"))

(setq e2wm:face-history-list-select2 )

** Sun 29 Sep 2013 02:06:31 AM JST
(delete-blank-lines)


(defun py-clean-kill-region (beg end &optional yank-handler)
  "BEG 
AND 
YANK-HANDLER"
  (interactive (list (point) (mark)))
  (kill-region beg end)
  (delete-blank-lines)
  )

(global-set-key (kbd "s-o") 'py-clean-kill-region)

(re-search-forward "global" 201 )



(defmacro py-in-string-or-comment-p ()
  "Returns beginning position if inside a string or comment, nil otherwise. "
  `(or (nth 8 (syntax-ppss))
       (when (or (looking-at "\"")(looking-at "[ \t]*#[ \t]*"))
         (match-beginning 0))))

(eol)
505

py-def-or-class-re
"[ 	]*\\_<\\(def\\|class\\)\\_>[ 
	]"
py-def-re
"[ 	]*\\_<\\(def\\)\\_>[ 
	]"
(line-beginning-position)
633


(skip-chars-forward )
(skip-syntax-forward )


	hello



(forward-line )
(next-line)


(delq 'ac-source-words-in-same-mode-buffers ac-sources)
(ac-source-yasnippet)


(setq dummy ac-sources)
(ac-source-yasnippet ac-source-words-in-same-mode-buffers)
dummy
(ac-source-yasnippet)

(ac-source-yasnippet ac-source-words-in-same-mode-buffers)


(goto-char (point-min))


%(asctime)s	実行時刻
%(filename)s	ファイル名
%(funcName)s	関数名
%(levelname)s	DEBUG、INFO等のレベル名
%(lineno)d	行番号
%(name)s	呼びだしたログの定義名
%(module)s	モジュール名
%(message)s	ログメッセージ
%(process)d	プロセスID
%(thread)d	スレッドID



snippet-mode-hook
(snippet-mode-hook-predefine)


jit-lock-function



(outshine-match-next-headline 0 outshine-level-1 t)


(require 'jit-lock nil 'noerror)
(require 'font-lock nil 'noerror)
font-lock

jit-lock
font-lock-keyword-face
font-lock-keyword-face

font-lock-fontify-keywords-region





font-lock-preprocessor-face
font-lock-preprocessor-face







${2:$$(yas/choose-value '("r" "w" "a" "r+" "rb" "wb" "r+b"))}





# define log file name
# logname = 'weekly.log'
# logdir = '/var/log'
# logpath = os.path.join(logdir, logname)
# logging.basicConfig(filename=logpath, level=logging.DEBUG, filemode='w',
                                        #                     format='%(asctime)s %logging.basicConfig(message)s')



`(py--insert-imports "logging" "import logging")`# define logging
logname = ${1:NAME}
logdir = ${2:'/var/log'}
logpath = `(cond ((save-excursion
                    (goto-char (point-min))
                    (re-search-forward "import[ \t]+os[ \t]+as[ \t]+_os" nil 'noerror))
                  (insert "_os"))
                 ((save-excursion
                    (goto-char (point-min))
                    (re-search-forward "import[ \t]+os" nil 'noerror)) (insert "os"))
                 (t (py--insert-imports "os" "import os")))`.path.join(logdir, logname)
# asctime, filename, funcName, levelname, lineno, name,
# module, message, process, thread
logformat = ('%(asctime)s,%(levelname)s,line:%(lineno)d,func:%(funcName)s,'
               'mod:%(module)s,%(message)s')
logging.basicConfig(filename=logpath, level=logging.${3:$$(yas/choose-value '("NOTSET" "DEBUG" "INFO" "WARN" "ERROR" "FATAL"))}, filemode='${4:$$(yas/choose-value '("w" "a"))}',
                                      format=logformat)

WILLREPLACE




(save-excursion
  (cond ((progn (goto-char (point-min))
                (re-search-forward "import[ \t]+os[ \t]+as[ \t]+_os" nil 'noerror))
         (insert "_os"))
        ((progn (goto-char (point-min))
                (re-search-forward "import[ \t]+os" nil 'noerror))
         (insert "os"))
        (t (py--insert-imports "os" "import os"))))



(cond ((save-excursion
         (goto-char (point-min))
         (re-search-forward "import[ \t]+os[ \t]+as[ \t]+_os" nil 'noerror))
       (insert "_os"))
      ((save-excursion
         (goto-char (point-min))
         (re-search-forward "import[ \t]+os" nil 'noerror)) (insert "os"))
      (t (py--insert-imports "os" "import os")))

(let* ((region (py--import-region))
       (start (car region))
       (end (cdr region)))
    (cond ((save-excursion
             (save-restriction
               (narrow-to-region start end)
               (goto-char (point-min))
               (re-search-forward "import[ \t]+os[ \t]+as[ \t]+_os" nil 'noerror)))
           (insert "_os"))
          ((save-excursion
             (save-restriction
               (narrow-to-region start end)
               (goto-char (point-min))
               (re-search-forward "import[ \t]+os" nil 'noerror)) (insert "os")))
           (t (py--insert-imports "os" "import os"))))







(isearch-query-replace )

(replace-string "WILLREPLACE" "os")


WILLREPLACE

** Mon 30 Sep 2013 02:08:37 PM JST
(line-end-position)

(require 'cl)
cl
redo
(redo)
(undo)









(require 'cl)
cl
(redo)


(defun hello-\(\) ()
  ""
  (message "hello")
  )
(hello-\(\))
"hello"
(defun hello-{} ()
  ""
  (message "world")
  )
(hello-{})
"world"
(defun hello-\[\] ()
  ""
  (message "hello"))
hello-\[\]
(hello-\[\])
"hello"

hello-
python-mode-hook

(rx "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'")
"\\[\\^'\\\\\\\\]\\*(\\?:\\\\\\\\\\.\\[\\^'\\\\\\\\]\\*)\\*'"




(rx (or "+" "-" "/" "&" "^" "~" "|" "*" "<" ">"
        "=" "%" "**" "//" "<<" ">>" "<=" "!="
        "==" ">=" "is" "not"))
"\\(?:!=\\|\\*\\*\\|//\\|<[<=]\\|==\\|>[=>]\\|is\\|not\\|[%&*+/<=>|~^-]\\)"
'(\\*\\*=?|>>=?|<<=?|<>|!=|//=?|[+\\-*/%&|^=<>]=?|~)'
(rx "(\\*\\*=?|>>=?|<<=?|<>|!=|//=?|[+\\-*/%&|^=<>]=?|~)")
"(\\\\\\*\\\\\\*=\\?|>>=\\?|<<=\\?|<>|!=|//=\\?|\\[\\+\\\\-\\*/%&|\\^=<>]=\\?|~)"

(rx (or "\*\*=?" ">>=?" "<<=?" "<>" "!=" "//=?" "[+\-*/%&|^=<>]=?"  "~"))
"\\(?:!=\\|\\*\\*=\\?\\|//=\\?\\|<\\(?:<=\\?\\|>\\)\\|>>=\\?\\|\\[\\+-\\*/%&|\\^=<>]=\\?\\|~\\)"
(rx (or "+" "-" "/" "&" "^" "~" "|" "*" "<" ">"
        "=" "%" "**" "//" "<<" ">>" "<=" "!="
        "==" ">=" "is" "not"))
"\\(?:!=\\|\\*\\*\\|//\\|<[<=]\\|==\\|>[=>]\\|is\\|not\\|[%&*+/<=>|~^-]\\)"

"[^-%&*+/<->^|~]"
(rx (any ?+ ?- ?/ ?& ?^ ?~ ?| ?* ?< ?> ?= ?%))
"[-%&*+/<->^|~]"


(rx (and
     ;; Match even number of backslashes.
     (or (not (any ?\\ ?\' ?\")) point
         ;; Quotes might be preceded by a escaped quote.
         (and (or (not (any ?\\)) point) ?\\
              (* ?\\ ?\\) (any ?\' ?\")))
     (* ?\\ ?\\)
     ;; Match single or triple quotes of any kind.
     (group (or  "\"" "\"\"\"" "'" "'''"))))
"\\(?:[^\"'\\]\\|\\=\\|\\(?:[^\\]\\|\\=\\)\\\\\\(?:\\\\\\\\\\)*[\"']\\)\\(?:\\\\\\\\\\)*\\(\\(?:\"\"\"\\|'''\\|[\"']\\)\\)"


(rx
 (not
  (any ?+ ?- ?/ ?& ?^ ?~ ?| ?* ?< ?> ?= ?%)))










(rx symbol-start (or "def" "class" "if" "elif" "else" "try"
                     "except" "finally" "for" "while" "with")
    symbol-end)
"\\_<\\(?:\\(?:class\\|def\\|e\\(?:l\\(?:if\\|se\\)\\|xcept\\)\\|f\\(?:inally\\|or\\)\\|if\\|try\\|w\\(?:hile\\|ith\\)\\)\\)\\_>"
(rx line-start (* space) ?@ (any letter ?_)
    (* (any word ?_)))
"^[[:space:]]*@[_[:alpha:]][_[:word:]]*"

(rx line-start "if" (+ space) "__name__"
    (+ space) "==" (+ space)
    (any ?' ?\") "__main__" (any ?' ?\")
    (* space) ?:)
"^if[[:space:]]+__name__[[:space:]]+==[[:space:]]+[\"']__main__[\"'][[:space:]]*:"

(rx (any letter ?_) (* (any word ?_)))
"[_[:alpha:]][_[:word:]]*"


(re-search-forward (rx line-start "if" (+ space) "__name__"
                       (+ space) "==" (+ space)
                       (any ?' ?\") "__main__" (any ?' ?\")
                       (* space) ?:) ; if __name__ == "__main__":
                   nil 'noerror)
(goto-char (match-end 0))
(insert "\n" (make-string (current-indentation) 32))
(insert "\n" (make-string (current-indentation) 32) "_logging_setup()")
    

    _logging_setup()    _logging_setup()
    _logging_setup()

_logging_setup()    nil
    _logging_setup()    
    

nil


nil






(global-set-key (kbd "s-o") 'python-indent-shift-right)


(python-rx line-start (* space) defun (+ space) (group symbol-name))
python-nav-beginning-of-defun-regexp
"^[[:space:]]*\\_<\\(?:class\\|def\\)\\_>[[:space:]]+\\([_[:alpha:]][_[:word:]]*\\)"
(rx (and
     ;; Match even number of backslashes.
     (or (not (any ?\\ ?\' ?\")) point
         ;; Quotes might be preceded by a escaped quote.
         (and (or (not (any ?\\)) point) ?\\
              (* ?\\ ?\\) (any ?\' ?\")))
     (* ?\\ ?\\)
     ;; Match single or triple quotes of any kind.
     (group (or  "\"" "\"\"\"" "'" "'''"))))
"\\(?:[^\"'\\]\\|\\=\\|\\(?:[^\\]\\|\\=\\)\\\\\\(?:\\\\\\\\\\)*[\"']\\)\\(?:\\\\\\\\\\)*\\(\\(?:\"\"\"\\|'''\\|[\"']\\)\\)"


(when (re-search-forward "def[ \t]+_main.+:" nil 'noerror)
  (skip-chars-forward " \t\n")
  (when (looking-at "[\"']")
    (t1-forward-thing 1))
  (when (looking-at "$")
    (insert "\n" (make-string (current-indentation) 32)))
  (insert "_setup_logging\n"
          (make-string (current-indentation) 32)))


(save-excursion
  (goto-char (point-min))
  (when (re-search-forward "def[ \t]+_main.+:" nil 'noerror)
    (skip-chars-forward " \t\n")
    (when (looking-at "[\"']")
      (t1-forward-thing 1))
    (when (looking-at "$")
      (insert "\n" (make-string (current-indentation) 32)))
    (insert "_logging_setup()"
            (make-string (current-indentation) 32))))

"DEBUG" "INFO" "WARN" "ERROR" "FATAL"

** Tue 01 Oct 2013 05:54:36 PM JST
(rx (or space \t))

"[[:space:]]"

(rx line-start (* space) ?@ (any letter ?_)
    (* (any word ?_)))
"^[[:space:]]*@[_[:alpha:]][_[:word:]]*"


(rx (* blank) (group (or line-end ?#)))
"[[:blank:]]*\\($\\|#\\)"

"[[:blank:]]*\\(?:$\\|#\\)"

"[[:blank:]]*"

"[ \t]*\\_<\\(return\\|raise\\|break\\|continue\\|pass\\)\\_>[ \n\t]"
(rx (* blank)
    symbol-start (or "return" "raise" "break" "continue" "pass") symbol-end
    (char "/n" "\t" " "))
"[[:blank:]]*\\_<\\(?:\\(?:break\\|continue\\|pass\\|r\\(?:aise\\|eturn\\)\\)\\)\\_>[	 /n]"



"[[:blank:]]*\\_<\\(?:\\(?:break\\|continue\\|pass\\|r\\(?:aise\\|eturn\\)\\)\\)\\_>"

"[[:blank:]]*\\_<\\(\\(?:break\\|continue\\|pass\\|r\\(?:aise\\|eturn\\)\\)\\)\\_>"

(rx (group (or "return" "raise" "break" "continue" "pass")))
"\\(\\(?:break\\|continue\\|pass\\|r\\(?:aise\\|eturn\\)\\)\\)"

"\\(returnraisebreakcontinuepass\\)"

"\\(?:break\\|continue\\|pass\\|r\\(?:aise\\|eturn\\)\\)"

(rx (char "/n" "\t" " "))
"[	 /n]"

"[	/n]"

"[/n]"







(rx (* blank) symbol-start
    (group (or "return" "raise" "break" "continue" "pass")) symbol-end
    (char "/n" "\t" " "))
"[[:blank:]]*\\_<\\(\\(?:break\\|continue\\|pass\\|r\\(?:aise\\|eturn\\)\\)\\)\\_>[	 /n]"



"[[:blank:]]*\\_<\\(?:\\(?:break\\|continue\\|pass\\|r\\(?:aise\\|eturn\\)\\)\\)\\_>[	 /n]"

"[ \t]*\\_<\\(return\\|raise\\|break\\|continue\\|pass\\)\\_>[ \n\t]"



"[ \t]*\\_<finally\\_>[: \n\t]"


(rx (* blank) symbol-start "finally" symbol-end (char " " ":" "\t" "\n"))
"[[:blank:]]*\\_<finally\\_>[	
 :]"

"[[:blank:]]*\\_<finally\\_>[	
 :]"

(rx point)
"\\="





`(progn
   ,@(mapcar #'(lambda (arg)
                 `(define-key ,mode-map ,@arg)) body)))
(defmacro py:closing-re-maker (keyword)
  "KEYWORD"
  `(rx (* blank)
       symbol-start ,keyword symbol-end
       (char " " ":" "\t" "\n")))

(py:closing-re-maker "finally")
"[[:blank:]]*\\_<finally\\_>[	
 :]"


(rx (* blank) symbol-start "finally" symbol-end (char " " ":" "	" "
"))

(progn (\` (rx (* blank) symbol-start (\, keyword) symbol-end (char " " ":" "	" "
"))))



























(py:closing-re-maker "else")
"[[:blank:]]*\\_<else\\_>[	
 :]"
(py:closing-re-maker "except")
"[[:blank:]]*\\_<except\\_>[	
 :]"






py-no-outdent-re







"\\(try:\\|except\\(\\s +.*\\)?:\\|while\\s +.*:\\|for\\s +.*:\\|if\\s +.*:\\|elif\\s +.*:\\)\\([ 	]*\\_<\\(return\\|raise\\|break\\|continue\\|pass\\)\\_>[ 	\n]\\)"

(rx (group (or "try:" (group "except" space (+ space) (zero-or-more any)))))
"\\(try:\\|\\(except[[:space:]][[:space:]]+.*\\)\\)"


"\\(try:\\|\\(?:except\\([[:space:]][[:space:]]+.*\\)\\)?\\)"


"\\(try:\\|\\(except[[:space:]][[:space:]]+.*\\)\\)"

"\\(try:\\|except\\|\\([[:space:]][[:space:]]+.*\\)\\)"



"\\(try:\\|except\\|\\([[:space:]][[:space:]]+.\\)\\)"


"\\(try:\\|except\\|\\([[:space:]][[:space:]]+\\)\\)"

"\\(try:\\|except\\|\\([[:space:]][[:space:]]*\\)\\)"

"\\(try:\\|except\\|\\([[:space:]][[:space:]]\\*\\)\\)"

"\\(try:\\|except\\|\\([[:space:]][[:space:]]\\*\\)\\)"

"\\(try:\\|except\\|\\([[:space:]][[:space:]]\\)\\)"






















(defconst py-assignment-re "\\_<\\w+\\_>[ \t]*\\(=\\|+=\\|*=\\|%=\\|&=\\|^=\\|<<=\\|-=\\|/=\\|**=\\||=\\|>>=\\|//=\\)"
  "If looking at the beginning of an assignment. ")
(rx (or "=" "+=" "-=" "*=" "/=" "//=" "%=" "**="
        ">>=" "<<=" "&=" "^=" "|="))
"\\(?:\\(?:\\*\\*\\|//\\|<<\\|>>\\|[%&*+/|^-]\\)?=\\)"
"\\_<\\w+\\_>[ \t]*\\(?:\\(?:\\*\\*\\|//\\|<<\\|>>\\|[%&*+/|^-]\\)?=\\)"

(rx symbol-start (+ word) symbol-end)
"\\_<[[:word:]]+\\_>"

(concat (rx symbol-start (+ word) symbol-end)
        py:assignment-operator-re)
"\\_<[[:word:]]+\\_>\\(?:\\(?:\\*\\*\\|//\\|<<\\|>>\\|[%&*+/|^-]\\)?=\\)"


"[ \t]*\\_<\\(class\\|def\\|for\\|if\\|try\\|while\\|with\\)\\_>[: \n\t]"
(rx (* blank) symbol-start (group (or "class" "def" "for" "if" "try" "while" "with")) symbol-end (any ":" " " "\n" "\t"))
"[[:blank:]]*\\_<\\(\\(?:class\\|def\\|for\\|if\\|try\\|w\\(?:hile\\|ith\\)\\)\\)\\_>[	
 :]"

(rx (* blank) symbol-start (group (or "for" "if" "try" "with")) symbol-end (any ":" " " "\n" "\t"))
"[[:blank:]]*\\_<\\(\\(?:for\\|if\\|try\\|with\\)\\)\\_>[	
 :]"

"[ \t]*\\_<\\(for\\|if\\|try\\|with\\)\\_>[: \n\t]"


















(rx (* blank) symbol-start "try" symbol-end (any ":" " " "\n" "\t"))
"[[:blank:]]*\\_<try\\_>[	
 :]"

(rx (* blank) symbol-start (group "class") symbol-end (any " " "\n" "\t"))
"[[:blank:]]*\\_<\\(class\\)\\_>[	
 ]"





(rx (* blank) symbol-start (group (or "class" "def") symbol-end (any " " "\n" "\t")))
"[[:blank:]]*\\_<\\(\\(?:class\\|def\\)\\_>[	
 ]\\)"
(rx (* blank)
    symbol-start (group (or "class" "def"))
    symbol-end
    (any " " "\n" "\t"))
"[[:blank:]]*\\_<\\(\\(?:class\\|def\\)\\)\\_>[	
 ]"











"[ \t]*\\_<\\(def\\|class\\|if\\|else\\|elif\\|while\\|for\\|try\\|except\\|finally\\|with\\)\\_>[: \n\t]"


(rx (* blank) symbol-start (group (or "def" "class" "if" "else" "elif" "while" "for"
                                      "try" "except" "finally" "with"))
    symbol-end (any ":" " " "\n" "\t"))
"[[:blank:]]*\\_<\\(\\(?:class\\|def\\|e\\(?:l\\(?:if\\|se\\)\\|xcept\\)\\|f\\(?:inally\\|or\\)\\|if\\|try\\|w\\(?:hile\\|ith\\)\\)\\)\\_>[	
 :]"

"[ \t]*\\_<\\(def\\|class\\|if\\|else\\|elif\\|while\\|for\\|try\\|except\\|finally\\|with\\)\\_>[: \n\t]"


(rx (* blank) symbol-start (group (or "else" "elif" "except" "finally")) symbol-end (any ":" "\n" " " "\t"))
"[[:blank:]]*\\_<\\(\\(?:e\\(?:l\\(?:if\\|se\\)\\|xcept\\)\\|finally\\)\\)\\_>[	
 :]"

"[ \t]*\\_<\\(else\\|elif\\|except\\|finally\\)\\_>[: \n\t]"

(rx (* blank) symbol-start "elif" symbol-end (any ":" " " "\n" "\t"))
"[[:blank:]]*\\_<elif\\_>[	
 :]"

"[ \t]*\\_<\\(except\\|else\\|finally\\)\\_>[: \n\t]"
(rx (* blank) symbol-start (group (or "except" "else" "finally")) symbol-end (any ":" " " "\n" "\t"))
"[[:blank:]]*\\_<\\(\\(?:e\\(?:lse\\|xcept\\)\\|finally\\)\\)\\_>[	
 :]"


"[ \t]*\\_<if\\_>[ \n\t]"
(rx (* blank) symbol-start "if" symbol-end (any " " "\n" "\t"))
"[[:blank:]]*\\_<if\\_>[	
 ]"


"[ \t]*\\_<try\\_>[: \n\t]"
(rx (* blank) symbol-start "try" symbol-end (any ":" " " "\n" "\t"))
"[[:blank:]]*\\_<try\\_>[	
 :]"

(rx line-start (* blank) "#" (* blank) "-*-" (* blank) "coding:" (+ not-newline)
    "-*-")

(rx line-start
    (* blank) "#" (* blank)
    "-*-" (* blank) "coding:"
    (+ not-newline) "-*-")
"^[[:blank:]]*#[[:blank:]]*-\\*-[[:blank:]]*coding:.+-\\*-"

"^[[:blank:]]*#[[:blank:]]*-\\*-[[:blank:]]*coding:.+-\\*-"

"^[[:blank:]]*#[[:blank:]]*-\\*-[[:blank:]]*coding:.+"

"^[[:blank:]]*#[[:blank:]]*-\\*-"

"^[[:blank:]]*#[[:blank:]]*"

"^[[:blank:]]*#"

"^[[:blank:]]*"

"^[[:blank:]]"


"^[ \t]*#[ \t]*-\\*-[ \t]*coding:.+-\\*-"
"#![ \t]?\\([^ \t\n]+\\)[ \t]*\\([biptj]+ython[^ \t\n]*\\)"
(rx "#!" (? blank) (group (+ (not-char "\t" "\n" " "))) (* blank) (group (+ (any "b" "i" "p" "t" "j")) "ython" (* (not-char " " "\t" "\n"))))
"#![[:blank:]]?\\([^	 ]+\\)[[:blank:]]*\\([bijpt]+ython[^	 ]*\\)"

"#![[:blank:]]?\\([^ \n\t]+\\)[[:blank:]]*\\(\\(?:[bijpt]ython[^	
 ]*\\)+\\)"

"#![[:blank:]]?\\([^ 	]+\\)[[:blank:]]*\\(\\(?:[bijpt]ython[^ \t\n]\\)+\\)"

"#![[:blank:]]?\\([^	
]+\\)"

"#![[:blank:]]?"
^\\(\"\"\"\\|'''\\)[\\ \n]+\\(\"\"\"\\|'''\\)

^\\(\"\"\"\\|'''\\)\\(?:[\\ \n]\\|.+\\)

"^\\(?:\"\"\"\\|'''\\)\\.*[\\\n \t]*\\(?:.*[^'\"][\n]\\)+\\(?:\"\"\"\\|'''\\)"
"^[uUbB]?[rR]?\"\"\"\\(.*\\|[[:blank:]]*\\|\n\\)\\(.\\|\n\\)+\"\"\"$"


\\(?:\\(?:\\.|\"\\(?!\"\"\\)\\)[^\"\\]*\\)*\"\"\"

"^[uUbB]?[rR]?'''\\\\?[^']*'''"

(rx line-start (? (any "B" "U" "b" "u")) (? (any "R" "r")) "'''" (? "\\") (* (not-char "'")) "'''")
"^[BUbu]?[Rr]?'''\\\\?[^']*'''"

"^[BUbu]?[Rr]?\"\"\"\\\\?[^\"]*\"\"\""

(rx line-start (? (any "B" "U" "b" "u")) (? (any "R" "r")) "\"\"\"" (? "\\") (* (not-char "\"")) "\"\"\"")
"^[BUbu]?[Rr]?\"\"\"\\\\?[^\"]*\"\"\""

(rx (group (or (regexp "^[BUbu]?[Rr]?\"\"\"\\\\?[^\"]*\"\"\"") (regexp "^[BUbu]?[Rr]?'''\\\\?[^']*'''"))))
"\\(^[BUbu]?[Rr]?\"\"\"\\\\?[^\"]*\"\"\"\\|^[BUbu]?[Rr]?'''\\\\?[^']*'''\\)"

"\\(\\(?:\\^\\[BUbu]\\?\\[Rr]\\?\\(?:\"\"\"\\\\\\\\\\?\\[\\^\"]\\*\"\"\"\\|'''\\\\\\\\\\?\\[\\^']\\*'''\\)\\)\\)"


"^[BUbu]?[Rr]?'''\\\\?[^']*"

"^[BUbu]?[Rr]?'''\\\\?[^']"


"^[BUbu]?[Rr]?'''\\\\?"

"^[BUbu]?[Rr]?"

"^[BUbu]?"

"^[Ubu]?"

(macroexpand `(rx (group (or (regexp ,py:single3-file-doc-re)
                             (regexp ,py:double3-file-doc-re)))))
"\\(^[BUbu]?[Rr]?'''\\\\?[^']*'''\\|^[BUbu]?[Rr]?\"\"\"\\\\?[^\"]*\"\"\"\\)"
py:file-doc-re
"\\(^[BUbu]?[Rr]?'''\\\\?[^']*'''\\|^[BUbu]?[Rr]?\"\"\"\\\\?[^\"]*\"\"\"\\)"

@

(progn (\` (rx (group ...))))

(rx (group (or (regexp "^[BUbu]?[Rr]?'''\\\\?[^']*'''") (regexp "^[BUbu]?[Rr]?\"\"\"\\\\?[^\"]*\"\"\""))))

(rx (group (or (regexp "^[BUbu]?[Rr]?'''\\\\?[^']*'''") (regexp "^[BUbu]?[Rr]?\"\"\"\\\\?[^\"]*\"\"\""))))


(rx (* blank) (? (any "B" "U" "b" "u"))
    (? (any "R" "r")) "'''" (? "\\")
    (* (not-char "'")) "'''")
"[[:blank:]]*[BUbu]?[Rr]?'''\\\\?[^']*'''"

"^[BUbu]?[Rr]?'''\\\\?[^']*'''"




"^[[:blank:]]+[BUbu]?[Rr]?\\('''\\\\?[^']*[[:blank:]]+'''\\)[[:blank:]]*$"
(rx line-start (* blank) (? (any "B" "U" "b" "u")) (? (any "R" "r")) (group "'''" (? "\\") (* (not-char "'")) (+ blank) "'''") (* blank) line-end)
"^[[:blank:]]*[BUbu]?[Rr]?\\('''\\\\?[^']*[[:blank:]]+'''\\)[[:blank:]]*$"





(rx line-start (+ blank)
    (? (any "B" "U" "b" "u"))
    (? (any "R" "r"))
    (group "\"\"\"" (? "\\")
           (* (not-char "\""))
           (+ blank) "\"\"\"") (* blank) line-end)
"^[[:blank:]]*[BUbu]?[Rr]?\\(\"\"\"\\\\?[^\"]*[[:blank:]]*\"\"\"\\)[[:blank:]]*$"




(macroexpand
 `(rx
   (group
    (or (regexp ,py:single3-class-or-def-doc-re)
        (regexp ,py:double3-class-or-def-doc-re)
        ))))
"\\(^[[:blank:]]+[BUbu]?[Rr]?\\('''\\\\?[^']*[[:blank:]]+'''\\)[[:blank:]]*$\\|^[[:blank:]]+[BUbu]?[Rr]?\\(\"\"\"\\\\?[^\"]*[[:blank:]]+\"\"\"\\)[[:blank:]]*$\\)"


(macroexpand
 `(rx
   (group (or (regexp ,py:single3-file-doc-re)
              (regexp ,py:double3-file-doc-re)
              (regexp ,py:single3-class-or-def-doc-re)
              (regexp ,py:double3-class-or-def-doc-re)))))
"\\(^[BUbu]?[Rr]?'''\\\\?[^']*'''\\|^[BUbu]?[Rr]?\"\"\"\\\\?[^\"]*\"\"\"\\|^[[:blank:]]+[BUbu]?[Rr]?\\('''\\\\?[^']*[[:blank:]]*'''\\)[[:blank:]]*$\\|^[[:blank:]]+[BUbu]?[Rr]?\\(\"\"\"\\\\?[^\"]*[[:blank:]]*\"\"\"\\)[[:blank:]]*$\\)"



(re-search-backward py:doc-re nil 'noerror)









"^[ \t]*\\(from\\|import\\)[ \t]"
"^import *[A-Za-z_][A-Za-z_0-9].*\\|^from +[A-Za-z_][A-Za-z_0-9.]+ +import .*"
"from +\\([^ \t\n]+\\) +import"
"^\\(\\(from\\)\\|\\(import\\)\\) \\([^ \t\n.]+\\)"

(rx symbol-start "import" symbol-end)
(rx line-start (* blank) symbol-start (group (or "import" "from")) symbol-end (* blank) (+ not-newline))
"^[[:blank:]]*\\_<\\(\\(?:from\\|import\\)\\)\\_>[[:blank:]]*.+"

"^[[:blank:]]*\\_<\\(\\(?:from\\|import\\)\\)\\_>"

"^[[:blank:]]*\\(\\_<\\(?:from\\|import\\)\\_>\\)"


"\\_<import\\_>"

(rx (group (or (regexp "\\_<from\\_>")
               (regexp "\\_<import\\_>"))))
"\\(\\_<from\\_>\\|\\_<import\\_>\\)"

(rx (any ?+ ?- ?/ ?& ?^ ?~ ?| ?* ?< ?> ?= ?%))
"[-%&*+/<->^|~]"
(rx (not (regexp "[-%&*+/<->^|~]")))


(concat (rx symbol-start (+ word) symbol-end)
        py:assignment-operator-re)
"\\_<[[:word:]]+\\_>\\(?:\\(?:\\*\\*\\|//\\|<<\\|>>\\|[%&*+/|^-]\\)?=\\)"






"\\([A-Za-z_][A-Za-z_0-9.].*\\)[[:blank:]]*\\(?:\\(?:\\*\\*\\|//\\|<<\\|>>\\|[%&*+/|^-]\\)?=\\)"

(rx symbol-start (group (any "_" lower upper) (* (any "_" "." lower upper))) symbol-end (* blank)
                  (or "=" "+=" "-=" "*=" "/=" "//=" "%="
                      "**=" ">>=" "<<=" "&=" "^=" "|="))
"\\_<\\([_[:upper:][:lower:]][._[:upper:][:lower:]]*\\)\\_>[[:blank:]]*\\(?:\\(?:\\(?:\\*\\*\\|//\\|<<\\|>>\\|[%&*+/|^-]\\)?=\\)\\)"

"\\([_[:upper:][:lower:]][._[:upper:][:lower:]]*\\)[[:blank:]]*\\(?:\\(?:\\(?:\\*\\*\\|//\\|<<\\|>>\\|[%&*+/|^-]\\)?=\\)\\)"


"\\([_[:upper:][:lower:]][._[:upper:][:lower:]]*\\)[[:blank:]]*\\(?:\\(?:\\(?:\\*\\*\\|//\\|<<\\|>>\\|[%&*+/|^-]\\)?=\\)\\)"

"\\([_[:upper:][:lower:]][._[:upper:][:lower:]].*\\)[[:blank:]]*\\(?:\\(?:\\(?:\\*\\*\\|//\\|<<\\|>>\\|[%&*+/|^-]\\)?=\\)\\)"

"\\([_[:upper:][:lower:]][._[:upper:][:lower:]]\\)[[:blank:]]*\\(?:\\(?:\\(?:\\*\\*\\|//\\|<<\\|>>\\|[%&*+/|^-]\\)?=\\)\\)"

"\\([_[:upper:][:lower:]][._[:upper:][:lower:]]\\)[[:blank:]]*\\\\(\\?:\\\\(\\?:\\\\\\*\\\\\\*\\\\|//\\\\|<<\\\\|>>\\\\|\\[%&\\*\\+/|\\^-]\\\\)\\?=\\\\)"
py:assignment-operator-list
(setq test '("\"=\"" "\"+=\"" "\"-=\"" "\"*=\"" "\"/=\"" "\"//=\"" "\"%=\"" "\"**=\"" "\">>=\"" "\"<<=\"" "\"&=\"" "\"^=\"" "\"|=\""))
("\"=\"" "\"+=\"" "\"-=\"" "\"*=\"" "\"/=\"" "\"//=\"" "\"%=\"" "\"**=\"" "\">>=\"" "\"<<=\"" "\"&=\"" "\"^=\"" ...)
test
("\"=\"" "\"+=\"" "\"-=\"" "\"*=\"" "\"/=\"" "\"//=\"" "\"%=\"" "\"**=\"" "\">>=\"" "\"<<=\"" "\"&=\"" "\"^=\"" "\"|=\"")


(macroexpand `(rx (or ,test)))



"\\([_[:upper:][:lower:]][._[:upper:][:lower:]]\\)"

"\\([_[:lower:][:upper:]]\\)"



(rx (or "=" "+=" "-=" "*=" "/=" "//=" "%="
        "**=" ">>=" "<<=" "&=" "^=" "|=")
    (* blank) symbol-start
    (group (any "_" lower upper)
           (* (any "_" "." lower upper)))
    symbol-end 
    )
"\\(?:\\(?:\\(?:\\*\\*\\|//\\|<<\\|>>\\|[%&*+/|^-]\\)?=\\)\\)[[:blank:]]*\\_<\\([_[:upper:][:lower:]][._[:upper:][:lower:]]*\\)\\_>"

(rx (* blank) (group (or line-end ?#)))
"[[:blank:]]*\\($\\|#\\)"
()


(rx line-start (* blank) line-end)
"^[[:blank:]]*$"

(re-search-backward "^[[:blank:]]*$" nil 'noerror)

(r)


(looking-at )

(rx (and
     ;; Match even number of backslashes.
     (or (not (any ?\\ ?\' ?\")) point
         ;; Quotes might be preceded by a escaped quote.
         (and (or (not (any ?\\)) point) ?\\
              (* ?\\ ?\\) (any ?\' ?\")))
     (* ?\\ ?\\)
     ;; Match single or triple quotes of any kind.
     (group (or  "\"" "\"\"\"" "'" "'''"))))
"\\(?:[^\"'\\]\\|\\=\\|\\(?:[^\\]\\|\\=\\)\\\\\\(?:\\\\\\\\\\)*[\"']\\)\\(?:\\\\\\\\\\)*\\(\\(?:\"\"\"\\|'''\\|[\"']\\)\\)"
last-command-event
M-return
last-command
self-insert-command

(if (string-match "pyhton$" "teswtpyhton")
    (princ "hello")
)
hello"hello"

nil

nil

nil

nil

5


(remove-hook 'post-self-insert-hook 'record-every-key-press)
(add-hook 'post-self-insert-hook 'record-every-key-press)

(setq hotstrings '(("pyhton" . "python")
                   ("eamcs" . "emacs")
                   ("tets" . "test")
                   ("longword" . "shortword")
                   ("sh" . "short")))

(setq xyz (sort hotstrings (lambda (a b) (> (length (car a))
                                          (length (car b))))))

(setq xxx (let ((table (copy-alist hotstrings)))
  (sort table (lambda (a b) (> (length (car a))
                               (length (car b)))))
  ))








(("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test") ("sh" . "short"))

(("longword" . "shortword") ("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test") ("sh" . "short"))

xxx
(("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))

(("longword" . "shortword") ("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))

(("longword" . "shortword") ("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))

(("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))

(("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))

(("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))

(("longword" . "shortword") ("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))

(("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))



(("longword" . "shortword") ("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))
xyz
(("longword" . "shortword") ("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))

(("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))
xyz
(("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))


(("longword" . "shortword") ("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))

(("pyhton" . "python"))

(("pyhton" . "python"))

(("tets" . "test") ("eamcs" . "emacs") ("pyhton" . "python"))

(("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))

(("longword" . "shortword") ("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))




(("pyhton" . "python"))

(("tets" . "test") ("eamcs" . "emacs") ("pyhton" . "python"))

(("longword" . "shortword") ("pyhton" . "python") ("eamcs" . "emacs") ("tets" . "test"))

(("pyhton" . "python"))

(("eamcs" . "emacs") ("pyhton" . "python"))


(defun hs:get-maxlen ()
  ""
  (let ((maxlen 1))
    (dolist (matcher hotstrings)
      (setq maxlen (max maxlen (length (car matcher)))))
    (+ maxlen 1)))

(setq hs:maxlen (hs:get-maxlen))

(defun hs:convert-re (str)
  "STR"
  (macroexpand `(rx ,str line-end)))

(defsubst hs:stack-str (str char)
  (concat str char))

(defsubst hs:pop0-str (str)
  (substring str 1))

(setq hs:current-stack "")

(defun record-every-key-press ()
  (let* ((char last-command-event)
         (strchar (char-to-string char))
         (hslist hotstrings)
         done)
    (if (eq char 10) ;ret key
        (setq hs:current-stack "")
      ;; stack new char
      (setq hs:current-stack (hs:stack-str hs:current-stack strchar))
      ;; (message "DEBUG-3-nofile  currstck:%S" hs:current-stack)
      ;; pop old char
      (when (<= hs:maxlen (length hs:current-stack))
        (setq hs:current-stack (hs:pop0-str hs:current-stack)))
      (while (and hslist (not done))
        ;; consider `looking-back' if we had bug
        (when (string-match (hs:convert-re (car (car hslist))) hs:current-stack)
          (setq done t)
          (delete-char (- (length (car (car hslist)))))
          (insert (cdr (car hslist))))
        (setq hslist (cdr hslist))))))


emacs 
eamcsking-at "pyhton")

pyhton
(looking-back "pyhton")
(hs:stack-str "test" "h")
"testh"
(hs:pop0-str "testh")
"esth"

(setq tes '("hello" "world" "yahoo" "googl"))

(hs:convert-re (car tes))
"hello$"



(setq tes "test")
"test"
(setcdr (char-to-string 108) tes)
(cdr tes)

(char-to-string 108)
"l"

(buffer-substring 2 4)

;; (delete-char -nil








(hs:convert-re "hello")
"hello$"

(setq tes hotstrings)
(("pyhton" . "python") ("eamcs" . "emacs"))


(while tes
  (message (car (car tes)))
  (setq tes (cdr tes))
  )
nil



(max 1 2 3 6 2 7 0)
7
(length "hello")
5

6

(substring "abcdefg" 1)
"bcdefg"


hotstrings
(("pyhton" . "python") ("eamcs" . "emacs"))
(car (car hotstrings))
"pyhton"

("pyhton" . "python")

post-self-insert-hook
(record-every-key-press blink-paren-post-self-insert-function)
(char-string 10)
(char-to-string 108)
"l"

"
"
hs:table
(("pyhton" . "python") ("eamcs" . "emacs"))
(setq hs:table '(("eamcs"              . "emacs")
                 ("defualt"            . "default")
                 ("formart"            . "format")
                 ("pyhton"             . "python")
                 ;; ("\\_<\\(ture\\)\\_>" . "true")
                 ("windwos"            . "windows")
                 ("startwith"          . "startswith")
                 ("endwith"            . "endswith")
                 ("slef"               . "self")))
(("eamcs" . "emacs") ("defualt" . "default") ("formart" . "format") ("pyhton" . "python") ("windwos" . "windows") ("startwith" . "startswith") ("endwith" . "endswith") ("slef" . "self"))

((("eamcs" . "emacs") ("defualt" . "default") ("formart" . "format") ("pyhton" . "python") ("windwos" . "windows") ("startwith" . "startswith") ("endwith" . "endswith") ("slef" . "self")))





hs:table
(("eamcs" . "emacs") ("defualt" . "default") ("formart" . "format") ("pyhton" . "python") ("windwos" . "windows") ("startwith" . "startswith") ("endwith" . "endswith") ("slef" . "self"))


;; emacs defualt defualt python
(hs:reload)
;; default defualt defualt
;; emacs python formart

;; emacs defualt formart windwos 
;; hs:sorted-table
(("startwith" . "startswith") ("defualt" . "default") ("formart" . "format") ("windwos" . "windows") ("endwith" . "endswith") ("pyhton" . "python") ("eamcs" . "emacs") ("slef" . "self"))
hs:maxlen
7


hs:table
(("eamcs" . "emacs") ("defualt" . "default") ("formart" . "format") ("pyhton" . "python") ("windwos" . "windows") ("startwith" . "startswith") ("endwith" . "endswith") ("slef" . "self"))

(setq hs:table '(("eamcs"              . "emacs")
                 ("defualt"            . "default")
                 ("formart"            . "format")
                 ("pyhton"             . "python")
                 ;; ("\\_<\\(ture\\)\\_>" . "true")
                 ("windwos"            . "windows")
                 ("startwith"          . "startswith")
                 ("endwith"            . "endswith")
                 ("slef"               . "self")
                 ("improt"             . "import")
                 ("clac" . "calc")
                 ("botton" . "button")
                 ("allign" . "align")
                 ("atempt" . "attempt")
                 ))
(("eamcs" . "emacs") ("defualt" . "default") ("formart" . "format") ("pyhton" . "python") ("windwos" . "windows") ("startwith" . "startswith") ("endwith" . "endswith") ("slef" . "self") ("improt" . "import") ("clac" . "calc") ("botton" . "button") ("allign" . "align") ...)
calc import 
hello world yahoo










hs:table
(("eamcs" . "emacs") ("defualt" . "default") ("formart" . "format") ("pyhton" . "python") ("windwos" . "windows") ("startwith" . "startswith") ("endwith" . "endswith") ("slef" . "self") ("improt" . "import") ("clac" . "calc") ("botton" . "button") ("allign" . "align") ("atempt" . "attempt") ("avengence" . "a vengeance") ("adbandon" . "abandon") ("abandonned" . "abandoned") ("aberation" . "aberration") ("aborigene" . "aborigine") ("abortificant" . "abortifacient") ("abbout" . "about") ("abotu" . "about") ("baout" . "about") ("abouta" . "about a") ("aboutit" . "about it") ("aboutthe" . "about the") ("abscence" . "absence") ("absense" . "absence") ("abcense" . "absense") ("absolutly" . "absolutely") ("asorbed" . "absorbed") ("absorbsion" . "absorption") ("absorbtion" . "absorption") ("abundacies" . "abundances") ("abundancies" . "abundances") ("abundunt" . "abundant") ("abutts" . "abuts") ("acadmic" . "academic") ("accademic" . "academic") ("acedemic" . "academic") ("acadamy" . "academy") ("accademy" . "academy") ("accelleration" . "acceleration") ("acceptible" . "acceptable") ("acceptence" . "acceptance") ("accessable" . "accessible") ("accension" . "accession") ("accesories" . "accessories") ("accesorise" . "accessorise") ("accidant" . "accident") ("accidentaly" . "accidentally") ("accidently" . "accidentally") ("acclimitization" . "acclimatization") ("accomdate" . "accommodate") ("accomodate" . "accommodate") ("acommodate" . "accommodate") ("acomodate" . "accommodate") ("accomodated" . "accommodated") ("accomodates" . "accommodates") ("accomodating" . "accommodating") ("accomodation" . "accommodation") ("accomodations" . "accommodations") ("accompanyed" . "accompanied") ("acomplish" . "accomplish") ("acomplished" . "accomplished") ("acomplishment" . "accomplishment") ("acomplishments" . "accomplishments") ("accoring" . "according") ("acording" . "according") ("accordingto" . "according to") ("acordingly" . "accordingly") ("accordeon" . "accordion") ("accordian" . "accordion") ("acocunt" . "account") ("acuracy" . "accuracy") ("acccused" . "accused") ("accussed" . "accused") ("acused" . "accused") ("acustom" . "accustom") ("acustommed" . "accustomed") ("achive" . "achieve") ("achivement" . "achievement") ("achivements" . "achievements") ("acknowldeged" . "acknowledged") ("acknowledgeing" . "acknowledging") ("accoustic" . "acoustic") ("acquiantence" . "acquaintance") ("aquaintance" . "acquaintance") ("aquiantance" . "acquaintance") ("acquiantences" . "acquaintances") ("accquainted" . "acquainted") ("aquainted" . "acquainted") ("aquire" . "acquire") ("aquired" . "acquired") ("aquiring" . "acquiring") ("aquit" . "acquit") ("acquited" . "acquitted") ("aquitted" . "acquitted") ("accross" . "across") ("activly" . "actively") ("activites" . "activities") ("actualy" . "actually") ("actualyl" . "actually") ("adaption" . "adaptation") ("adaptions" . "adaptations") ("addtion" . "addition") ("additinal" . "additional") ("addtional" . "additional") ("additinally" . "additionally") ("addres" . "address") ("adres" . "address") ("adress" . "address") ("addresable" . "addressable") ("adresable" . "addressable") ("adressable" . "addressable") ("addresed" . "addressed") ("adressed" . "addressed") ("addressess" . "addresses") ("addresing" . "addressing") ("adresing" . "addressing") ("adecuate" . "adequate") ("adequit" . "adequate") ("adequite" . "adequate") ("adherance" . "adherence") ("adhearing" . "adhering") ("adminstered" . "administered") ("adminstrate" . "administrate") ("adminstration" . "administration") ("admininistrative" . "administrative") ("adminstrative" . "administrative") ("adminstrator" . "administrator") ("admissability" . "admissibility") ("admissable" . "admissible") ("addmission" . "admission") ("admited" . "admitted") ("admitedly" . "admittedly") ("adolecent" . "adolescent") ("addopt" . "adopt") ("addopted" . "adopted") ("addoptive" . "adoptive") ("adavanced" . "advanced") ("adantage" . "advantage") ("advanage" . "advantage") ("adventrous" . "adventurous") ("advesary" . "adversary") ("advertisment" . "advertisement") ("advertisments" . "advertisements") ("asdvertising" . "advertising") ("adviced" . "advised") ("aeriel" . "aerial") ("aeriels" . "aerials") ("areodynamics" . "aerodynamics") ("asthetic" . "aesthetic") ("asthetical" . "aesthetic") ("asthetically" . "aesthetically") ("afair" . "affair") ("affilate" . "affiliate") ("affilliate" . "affiliate") ("afficionado" . "aficionado") ("afficianados" . "aficionados") ("afficionados" . "aficionados") ("aforememtioned" . "aforementioned") ("affraid" . "afraid") ("afterthe" . "after the") ("agian" . "again") ("agin" . "again") ("againnst" . "against") ("agains" . "against") ("agaisnt" . "against") ("aganist" . "against") ("agianst" . "against") ("aginst" . "against") ("againstt he" . "against the") ("aggaravates" . "aggravates") ("agregate" . "aggregate") ("agregates" . "aggregates") ("agression" . "aggression") ("aggresive" . "aggressive") ("agressive" . "aggressive") ("agressively" . "aggressively") ("agressor" . "aggressor") ("agrieved" . "aggrieved") ("agre" . "agree") ("aggreed" . "agreed") ("agred" . "agreed") ("agreing" . "agreeing") ("aggreement" . "agreement") ("agreeement" . "agreement") ("agreemeent" . "agreement") ("agreemnet" . "agreement") ("agreemnt" . "agreement") ("agreemeents" . "agreements") ("agreemnets" . "agreements") ("agricuture" . "agriculture") ("airbourne" . "airborne") ("aicraft" . "aircraft") ("aircaft" . "aircraft") ("aircrafts" . "aircraft") ("airrcraft" . "aircraft") ("aiport" . "airport") ("airporta" . "airports") ("albiet" . "albeit") ("alchohol" . "alcohol") ("alchol" . "alcohol") ("alcohal" . "alcohol") ("alochol" . "alcohol") ("alchoholic" . "alcoholic") ("alcholic" . "alcoholic") ("alcoholical" . "alcoholic") ("algebraical" . "algebraic") ("algoritm" . "algorithm") ("algorhitms" . "algorithms") ("algoritms" . "algorithms") ("alientating" . "alienating") ("alltime" . "all-time") ("aledge" . "allege") ("alege" . "allege") ("alledge" . "allege") ("aledged" . "alleged") ("aleged" . "alleged") ("alledged" . "alleged") ("alledgedly" . "allegedly") ("allegedely" . "allegedly") ("allegedy" . "allegedly") ("allegely" . "allegedly") ("aledges" . "alleges") ("alledges" . "alleges") ("alegience" . "allegiance") ("allegence" . "allegiance") ("allegience" . "allegiance") ("alliviate" . "alleviate") ("allopone" . "allophone") ("allopones" . "allophones") ("alotted" . "allotted") ("alowed" . "allowed") ("alowing" . "allowing") ("alusion" . "allusion") ("almots" . "almost") ("almsot" . "almost") ("alomst" . "almost") ("alonw" . "alone") ("allready" . "already") ("alraedy" . "already") ("alreayd" . "already") ("alreday" . "already") ("aready" . "already") ("alsation" . "Alsatian") ("alsot" . "also") ("aslo" . "also") ("alternitives" . "alternatives") ("allthough" . "although") ("altho" . "although") ("althought" . "although") ("altough" . "although") ("allwasy" . "always") ("allwyas" . "always") ("alwasy" . "always") ("alwats" . "always") ("alway" . "always") ("alwyas" . "always") ("amalgomated" . "amalgamated") ("amatuer" . "amateur") ("amerliorate" . "ameliorate") ("ammend" . "amend") ("ammended" . "amended") ("admendment" . "amendment") ("amendmant" . "amendment") ("ammendment" . "amendment") ("ammendments" . "amendments") ("amoung" . "among") ("amung" . "among") ("amoungst" . "amongst") ("ammount" . "amount") ("ammused" . "amused") ("analagous" . "analogous") ("analogeous" . "analogous") ("analitic" . "analytic") ("anarchim" . "anarchism") ("anarchistm" . "anarchism") ("ansestors" . "ancestors") ("ancestory" . "ancestry") ("ancilliary" . "ancillary") ("adn" . "and") ("anbd" . "and") ("anmd" . "and") ("andone" . "and one") ("andt he" . "and the") ("andteh" . "and the") ("andthe" . "and the") ("androgenous" . "androgynous") ("androgeny" . "androgyny") ("anihilation" . "annihilation") ("aniversary" . "anniversary") ("annouced" . "announced") ("anounced" . "announced") ("anual" . "annual") ("annualy" . "annually") ("annuled" . "annulled") ("anulled" . "annulled") ("annoint" . "anoint") ("annointed" . "anointed") ("annointing" . "anointing") ("annoints" . "anoints") ("anomolies" . "anomalies") ("anomolous" . "anomalous") ("anomoly" . "anomaly") ("anonimity" . "anonymity") ("anohter" . "another") ("anotehr" . "another") ("anothe" . "another") ("anwsered" . "answered") ("antartic" . "antarctic") ("anthromorphisation" . "anthropomorphisation") ("anthromorphization" . "anthropomorphization") ("anti-semetic" . "anti-Semitic") ("anyother" . "any other") ("anytying" . "anything") ("anyhwere" . "anywhere") ("appart" . "apart") ("aparment" . "apartment") ("appartment" . "apartment") ("appartments" . "apartments") ("apenines" . "Apennines") ("appenines" . "Apennines") ("apolegetics" . "apologetics") ("appologies" . "apologies") ("appology" . "apology") ("aparent" . "apparent") ("apparant" . "apparent") ("apparrent" . "apparent") ("apparantly" . "apparently") ("appealling" . "appealing") ("appeareance" . "appearance") ("appearence" . "appearance") ("apperance" . "appearance") ("apprearance" . "appearance") ("appearences" . "appearances") ("apperances" . "appearances") ("appeares" . "appears") ("aplication" . "application") ("applicaiton" . "application") ("applicaitons" . "applications") ("aplied" . "applied") ("applyed" . "applied") ("appointiment" . "appointment") ("apprieciate" . "appreciate") ("aprehensive" . "apprehensive") ("approachs" . "approaches") ("appropiate" . "appropriate") ("appropraite" . "appropriate") ("appropropiate" . "appropriate") ("approrpiate" . "appropriate") ("approrpriate" . "appropriate") ("apropriate" . "appropriate") ("approproximate" . "approximate") ("aproximate" . "approximate") ("approxamately" . "approximately") ("approxiately" . "approximately") ("approximitely" . "approximately") ("aproximately" . "approximately") ("arbitarily" . "arbitrarily") ("abritrary" . "arbitrary") ("arbitary" . "arbitrary") ("arbouretum" . "arboretum") ("archiac" . "archaic") ("archimedian" . "Archimedean") ("archictect" . "architect") ("archetectural" . "architectural") ("architectual" . "architectural") ("archetecturally" . "architecturally") ("architechturally" . "architecturally") ("archetecture" . "architecture") ("architechture" . "architecture") ("architechtures" . "architectures") ("arn't" . "aren't") ("argubly" . "arguably") ("armamant" . "armament") ("armistace" . "armistice") ("arised" . "arose") ("arond" . "around") ("aroud" . "around") ("arround" . "around") ("arund" . "around") ("aranged" . "arranged") ("arangement" . "arrangement") ("arrangment" . "arrangement") ("arrangments" . "arrangements") ("arival" . "arrival") ("artical" . "article") ("artice" . "article") ("articel" . "article") ("artifical" . "artificial") ("artifically" . "artificially") ("artillary" . "artillery") ("asthe" . "as the") ("aswell" . "as well") ("asetic" . "ascetic") ("aisian" . "Asian") ("asside" . "aside") ("askt he" . "ask the") ("asphyxation" . "asphyxiation") ("assisnate" . "assassinate") ("assassintation" . "assassination") ("assosication" . "assassination") ("asssassans" . "assassins") ("assualt" . "assault") ("assualted" . "assaulted") ("assemple" . "assemble") ("assertation" . "assertion") ("assesment" . "assessment") ("asign" . "assign") ("assit" . "assist") ("assistent" . "assistant") ("assitant" . "assistant") ("assoicate" . "associate") ("assoicated" . "associated") ("assoicates" . "associates") ("assocation" . "association") ("asume" . "assume") ("asteriod" . "asteroid") ("atthe" . "at the") ("athiesm" . "atheism") ("athiest" . "atheist") ("atheistical" . "atheistic") ("athenean" . "Athenian") ("atheneans" . "Athenians") ("atmospher" . "atmosphere") ("attrocities" . "atrocities") ("attatch" . "attach") ("atain" . "attain") ("attemp" . "attempt") ("attemt" . "attempt") ("attemped" . "attempted") ("attemted" . "attempted") ("attemting" . "attempting") ("attemts" . "attempts") ("attendence" . "attendance") ("attendent" . "attendant") ("attendents" . "attendants") ("attened" . "attended") ("atention" . "attention") ("attension" . "attention") ("attentioin" . "attention") ("attitide" . "attitude") ("atorney" . "attorney") ("attributred" . "attributed") ("audeince" . "audience") ("audiance" . "audience") ("austrailia" . "Australia") ("austrailian" . "Australian") ("australian" . "Australian") ("auther" . "author") ("autor" . "author") ("authorative" . "authoritative") ("authoritive" . "authoritative") ("authorites" . "authorities") ("authoritiers" . "authorities") ("authrorities" . "authorities") ("authorithy" . "authority") ("autority" . "authority") ("authobiographic" . "autobiographic") ("authobiography" . "autobiography") ("autochtonous" . "autochthonous") ("autoctonous" . "autochthonous") ("automaticly" . "automatically") ("automibile" . "automobile") ("automonomous" . "autonomous") ("auxillaries" . "auxiliaries") ("auxilliaries" . "auxiliaries") ("auxilary" . "auxiliary") ("auxillary" . "auxiliary") ("auxilliary" . "auxiliary") ("availablility" . "availability") ("availaible" . "available") ("availalbe" . "available") ("availble" . "available") ("availiable" . "available") ("availible" . "available") ("avalable" . "available") ("avaliable" . "available") ("avilable" . "available") ("avalance" . "avalanche") ("averageed" . "averaged") ("avation" . "aviation") ("awared" . "awarded") ("awya" . "away") ("aywa" . "away") ("abck" . "back") ("bakc" . "back") ("bcak" . "back") ("backgorund" . "background") ("backrounds" . "backgrounds") ("balence" . "balance") ("ballance" . "balance") ("banannas" . "bananas") ("bandwith" . "bandwidth") ("bankrupcy" . "bankruptcy") ("banruptcy" . "bankruptcy") ("barbeque" . "barbecue") ("basicaly" . "basically") ("basicly" . "basically") ("cattleship" . "battleship") ("bve" . "be") ("eb" . "be") ("beachead" . "beachhead") ("beatiful" . "beautiful") ("beautyfull" . "beautiful") ("beutiful" . "beautiful") ("becamae" . "became") ("baceause" . "because") ("beacuse" . "because") ("becasue" . "because") ("becaus" . "because") ("beccause" . "because") ("becouse" . "because") ("becuase" . "because") ("becuse" . "because") ("becausea" . "because a") ("becauseof" . "because of") ("becausethe" . "because the") ("becauseyou" . "because you") ("becoe" . "become") ("becomeing" . "becoming") ("becomming" . "becoming") ("bedore" . "before") ("befoer" . "before") ("begginer" . "beginner") ("begginers" . "beginners") ("beggining" . "beginning") ("begining" . "beginning") ("beginining" . "beginning") ("beginnig" . "beginning") ("begginings" . "beginnings") ("beggins" . "begins") ("behavour" . "behaviour") ("beng" . "being") ("beleagured" . "beleaguered") ("beligum" . "belgium") ("beleif" . "belief") ("beleiev" . "believe") ("beleieve" . "believe") ("beleive" . "believe") ("belive" . "believe") ("beleived" . "believed") ("belived" . "believed") ("beleives" . "believes") ("beleiving" . "believing") ("belligerant" . "belligerent") ("bellweather" . "bellwether") ("bemusemnt" . "bemusement") ("benefical" . "beneficial") ("benificial" . "beneficial") ("beneficary" . "beneficiary") ("benifit" . "benefit") ("benifits" . "benefits") ("bergamont" . "bergamot") ("bernouilli" . "Bernoulli") ("beseige" . "besiege") ("beseiged" . "besieged") ("beseiging" . "besieging") ("beastiality" . "bestiality") ("betweeen" . "between") ("betwen" . "between") ("bewteen" . "between") ("inbetween" . "between") ("vetween" . "between") ("bicep" . "biceps") ("bilateraly" . "bilaterally") ("billingualism" . "bilingualism") ("binominal" . "binomial") ("bizzare" . "bizarre") ("blaim" . "blame") ("blaimed" . "blamed") ("blessure" . "blessing") ("blitzkreig" . "Blitzkrieg") ("bodydbuilder" . "bodybuilder") ("bombardement" . "bombardment") ("bombarment" . "bombardment") ("bonnano" . "Bonanno") ("bondary" . "boundary") ("boundry" . "boundary") ("boxs" . "boxes") ("brasillian" . "Brazilian") ("breakthough" . "breakthrough") ("breakthroughts" . "breakthroughs") ("brethen" . "brethren") ("bretheren" . "brethren") ("breif" . "brief") ("breifly" . "briefly") ("briliant" . "brilliant") ("brillant" . "brilliant") ("brimestone" . "brimstone") ("britian" . "Britain") ("brittish" . "British") ("broacasted" . "broadcast") ("brodcast" . "broadcast") ("broadacasting" . "broadcasting") ("broady" . "broadly") ("borke" . "broke") ("buddah" . "Buddha") ("bouy" . "buoy") ("bouyancy" . "buoyancy") ("buoancy" . "buoyancy") ("bouyant" . "buoyant") ("boyant" . "buoyant") ("beaurocracy" . "bureaucracy") ("beaurocratic" . "bureaucratic") ("burried" . "buried") ("buisness" . "business") ("busness" . "business") ("bussiness" . "business") ("busineses" . "businesses") ("buisnessman" . "businessman") ("butthe" . "but the") ("byt he" . "by the") ("ceasar" . "Caesar") ("casion" . "caisson") ("caluclate" . "calculate") ("caluculate" . "calculate") ("calulate" . "calculate") ("calcullated" . "calculated") ("caluclated" . "calculated") ("caluculated" . "calculated") ("calulated" . "calculated") ("calculs" . "calculus") ("calander" . "calendar") ("calenders" . "calendars") ("califronia" . "California") ("califronian" . "Californian") ("caligraphy" . "calligraphy") ("callipigian" . "callipygian") ("cambrige" . "Cambridge") ("camoflage" . "camouflage") ("campain" . "campaign") ("campains" . "campaigns") ("acn" . "can") ("cna" . "can") ("cxan" . "can") ("can't of" . "can't have") ("candadate" . "candidate") ("candiate" . "candidate") ("candidiate" . "candidate") ("candidtae" . "candidate") ("candidtaes" . "candidates") ("cannister" . "canister") ("cannisters" . "canisters") ("cannnot" . "cannot") ("cannonical" . "canonical") ("cantalope" . "cantaloupe") ("caperbility" . "capability") ("capible" . "capable") ("capetown" . "Cape Town") ("captial" . "capital") ("captued" . "captured") ("capturd" . "captured") ("carcas" . "carcass") ("carreer" . "career") ("carrers" . "careers") ("carefull" . "careful") ("carribbean" . "Caribbean") ("carribean" . "Caribbean") ("careing" . "caring") ("carmalite" . "Carmelite") ("carniverous" . "carnivorous") ("carthagian" . "Carthaginian") ("cartilege" . "cartilage") ("cartilidge" . "cartilage") ("carthographer" . "cartographer") ("cartdridge" . "cartridge") ("cartrige" . "cartridge") ("casette" . "cassette") ("cassawory" . "cassowary") ("cassowarry" . "cassowary") ("casulaties" . "casualties") ("causalities" . "casualties") ("casulaty" . "casualty") ("categiory" . "category") ("ctaegory" . "category") ("catterpilar" . "caterpillar") ("catterpilars" . "caterpillars") ("cathlic" . "catholic") ("catholocism" . "catholicism") ("caucasion" . "Caucasian") ("cacuses" . "caucuses") ("cieling" . "ceiling") ("cellpading" . "cellpadding") ("celcius" . "Celsius") ("cemetaries" . "cemeteries") ("cementary" . "cemetery") ("cemetarey" . "cemetery") ("cemetary" . "cemetery") ("sensure" . "censure") ("cencus" . "census") ("cententenial" . "centennial") ("centruies" . "centuries") ("centruy" . "century") ("cerimonial" . "ceremonial") ("cerimonies" . "ceremonies") ("cerimonious" . "ceremonious") ("cerimony" . "ceremony") ("ceromony" . "ceremony") ("certian" . "certain") ("certainity" . "certainty") ("chariman" . "chairman") ("challange" . "challenge") ("challege" . "challenge") ("challanged" . "challenged") ("challanges" . "challenges") ("chalenging" . "challenging") ("champange" . "champagne") ("chaneg" . "change") ("chnage" . "change") ("changable" . "changeable") ("chanegs" . "changes") ("changeing" . "changing") ("changng" . "changing") ("caharcter" . "character") ("carachter" . "character") ("charachter" . "character") ("charactor" . "character") ("charecter" . "character") ("charector" . "character") ("chracter" . "character") ("caracterised" . "characterised") ("charaterised" . "characterised") ("charactersistic" . "characteristic") ("charistics" . "characteristics") ("caracterized" . "characterized") ("charaterized" . "characterized") ("cahracters" . "characters") ("charachters" . "characters") ("charactors" . "characters") ("carismatic" . "charismatic") ("charasmatic" . "charismatic") ("chartiable" . "charitable") ("caht" . "chat") ("chekc" . "check") ("chemcial" . "chemical") ("chemcially" . "chemically") ("chemicaly" . "chemically") ("chemestry" . "chemistry") ("cheif" . "chief") ("childbird" . "childbirth") ("childen" . "children") ("childrens" . "children's") ("chilli" . "chili") ("choosen" . "chosen") ("chuch" . "church") ("curch" . "church") ("churchs" . "churches") ("cincinatti" . "Cincinnati") ("cincinnatti" . "Cincinnati") ("circut" . "circuit") ("ciricuit" . "circuit") ("curcuit" . "circuit") ("circulaton" . "circulation") ("circumsicion" . "circumcision") ("sercumstances" . "circumstances") ("cirtus" . "citrus") ("civillian" . "civilian") ("claimes" . "claims") ("clas" . "class") ("clasic" . "classic") ("clasical" . "classical") ("clasically" . "classically") ("claer" . "clear") ("cleareance" . "clearance") ("claered" . "cleared") ("claerer" . "clearer") ("claerly" . "clearly") ("cliant" . "client") ("clincial" . "clinical") ("clinicaly" . "clinically") ("caost" . "coast") ("coctail" . "cocktail") ("cognizent" . "cognizant") ("co-incided" . "coincided") ("coincedentally" . "coincidentally") ("colaborations" . "collaborations") ("collaberative" . "collaborative") ("colateral" . "collateral") ("collegue" . "colleague") ("collegues" . "colleagues") ("collectable" . "collectible") ("colection" . "collection") ("collecton" . "collection") ("colelctive" . "collective") ("collonies" . "colonies") ("colonisators" . "colonisers") ("colonizators" . "colonizers") ("collonade" . "colonnade") ("collony" . "colony") ("collosal" . "colossal") ("colum" . "column") ("combintation" . "combination") ("combanations" . "combinations") ("combinatins" . "combinations") ("combusion" . "combustion") ("comback" . "comeback") ("commedic" . "comedic") ("confortable" . "comfortable") ("comming" . "coming") ("commadn" . "command") ("comander" . "commander") ("comando" . "commando") ("comandos" . "commandos") ("commandoes" . "commandos") ("comemmorate" . "commemorate") ("commemmorate" . "commemorate") ("commmemorated" . "commemorated") ("comemmorates" . "commemorates") ("commemmorating" . "commemorating") ("comemoretion" . "commemoration") ("commemerative" . "commemorative") ("commerorative" . "commemorative") ("commerical" . "commercial") ("commericial" . "commercial") ("commerically" . "commercially") ("commericially" . "commercially") ("comission" . "commission") ("commision" . "commission") ("comissioned" . "commissioned") ("commisioned" . "commissioned") ("comissioner" . "commissioner") ("commisioner" . "commissioner") ("comissioning" . "commissioning") ("commisioning" . "commissioning") ("comissions" . "commissions") ("commisions" . "commissions") ("comit" . "commit") ("committment" . "commitment") ("committments" . "commitments") ("comited" . "committed") ("comitted" . "committed") ("commited" . "committed") ("comittee" . "committee") ("commitee" . "committee") ("committe" . "committee") ("committy" . "committee") ("comiting" . "committing") ("comitting" . "committing") ("commiting" . "committing") ("commongly" . "commonly") ("commonweath" . "commonwealth") ("comunicate" . "communicate") ("comminication" . "communication") ("communciation" . "communication") ("communiation" . "communication") ("commuications" . "communications") ("commuinications" . "communications") ("communites" . "communities") ("comunity" . "community") ("comanies" . "companies") ("comapnies" . "companies") ("comany" . "company") ("comapany" . "company") ("comapny" . "company") ("company;s" . "company's") ("comparitive" . "comparative") ("comparitively" . "comparatively") ("compair" . "compare") ("comparision" . "comparison") ("comparisions" . "comparisons") ("compability" . "compatibility") ("compatiable" . "compatible") ("compensantion" . "compensation") ("competance" . "competence") ("competant" . "competent") ("compitent" . "competent") ("competitiion" . "competition") ("compeitions" . "competitions") ("competative" . "competitive") ("competive" . "competitive") ("competiveness" . "competitiveness") ("copmetitors" . "competitors") ("complier" . "compiler") ("compleated" . "completed") ("completedthe" . "completed the") ("competely" . "completely") ("compleatly" . "completely") ("completelyl" . "completely") ("completly" . "completely") ("compleatness" . "completeness") ("completness" . "completeness") ("completetion" . "completion") ("componant" . "component") ("composate" . "composite") ("comphrehensive" . "comprehensive") ("comprimise" . "compromise") ("compulsary" . "compulsory") ("compulsery" . "compulsory") ("cmoputer" . "computer") ("coputer" . "computer") ("computarised" . "computerised") ("computarized" . "computerized") ("concieted" . "conceited") ("concieve" . "conceive") ("concieved" . "conceived") ("consentrate" . "concentrate") ("consentrated" . "concentrated") ("consentrates" . "concentrates") ("consept" . "concept") ("consern" . "concern") ("conserned" . "concerned") ("conserning" . "concerning") ("comdemnation" . "condemnation") ("condamned" . "condemned") ("condemmed" . "condemned") ("condidtion" . "condition") ("condidtions" . "conditions") ("conditionsof" . "conditions of") ("condolances" . "condolences") ("conferance" . "conference") ("confidental" . "confidential") ("confidentally" . "confidentially") ("confids" . "confides") ("configureable" . "configurable") ("confirmmation" . "confirmation") ("coform" . "conform") ("congradulations" . "congratulations") ("congresional" . "congressional") ("conjecutre" . "conjecture") ("conjuction" . "conjunction") ("conected" . "connected") ("conneticut" . "Connecticut") ("conection" . "connection") ("conived" . "connived") ("cannotation" . "connotation") ("cannotations" . "connotations") ("conotations" . "connotations") ("conquerd" . "conquered") ("conqured" . "conquered") ("conquerer" . "conqueror") ("conquerers" . "conquerors") ("concious" . "conscious") ("consious" . "conscious") ("conciously" . "consciously") ("conciousness" . "consciousness") ("consciouness" . "consciousness") ("consiciousness" . "consciousness") ("consicousness" . "consciousness") ("consectutive" . "consecutive") ("concensus" . "consensus") ("conesencus" . "consensus") ("conscent" . "consent") ("consequeseces" . "consequences") ("consenquently" . "consequently") ("consequentually" . "consequently") ("conservitive" . "conservative") ("concider" . "consider") ("consdider" . "consider") ("considerit" . "considerate") ("considerite" . "considerate") ("concidered" . "considered") ("consdidered" . "considered") ("consdiered" . "considered") ("considerd" . "considered") ("consideres" . "considered") ("concidering" . "considering") ("conciders" . "considers") ("consistant" . "consistent") ("consistantly" . "consistently") ("consolodate" . "consolidate") ("consolodated" . "consolidated") ("consonent" . "consonant") ("consonents" . "consonants") ("consorcium" . "consortium") ("conspiracys" . "conspiracies") ("conspiricy" . "conspiracy") ("conspiriator" . "conspirator") ("constatn" . "constant") ("constanly" . "constantly") ("constarnation" . "consternation") ("consituencies" . "constituencies") ("consituency" . "constituency") ("constituant" . "constituent") ("constituants" . "constituents") ("consituted" . "constituted") ("consitution" . "constitution") ("constituion" . "constitution") ("costitution" . "constitution") ("consitutional" . "constitutional") ("constituional" . "constitutional") ("constaints" . "constraints") ("consttruction" . "construction") ("constuction" . "construction") ("contruction" . "construction") ("consulant" . "consultant") ("consultent" . "consultant") ("consumber" . "consumer") ("consumate" . "consummate") ("consumated" . "consummated") ("comntain" . "contain") ("comtain" . "contain") ("comntains" . "contains") ("comtains" . "contains") ("containes" . "contains") ("countains" . "contains") ("contaiminate" . "contaminate") ("contemporaneus" . "contemporaneous") ("contamporaries" . "contemporaries") ("contamporary" . "contemporary") ("contempoary" . "contemporary") ("contempory" . "contemporary") ("contendor" . "contender") ("constinually" . "continually") ("contined" . "continued") ("continueing" . "continuing") ("continous" . "continuous") ("continously" . "continuously") ("contritutions" . "contributions") ("contributer" . "contributor") ("contributers" . "contributors") ("controll" . "control") ("controled" . "controlled") ("controling" . "controlling") ("controlls" . "controls") ("contravercial" . "controversial") ("controvercial" . "controversial") ("controversal" . "controversial") ("controvertial" . "controversial") ("controveries" . "controversies") ("contraversy" . "controversy") ("controvercy" . "controversy") ("controvery" . "controversy") ("conveinent" . "convenient") ("convienient" . "convenient") ("convential" . "conventional") ("convertion" . "conversion") ("convertor" . "converter") ("convertors" . "converters") ("convertable" . "convertible") ("convertables" . "convertibles") ("conveyer" . "conveyor") ("conviced" . "convinced") ("cooparate" . "cooperate") ("cooporate" . "cooperate") ("coordiantion" . "coordination") ("cpoy" . "copy") ("copywrite" . "copyright") ("coridal" . "cordial") ("corparate" . "corporate") ("corproation" . "corporation") ("coorperations" . "corporations") ("corperations" . "corporations") ("corproations" . "corporations") ("correcters" . "correctors") ("corrispond" . "correspond") ("corrisponded" . "corresponded") ("correspondant" . "correspondent") ("corrispondant" . "correspondent") ("correspondants" . "correspondents") ("corrispondants" . "correspondents") ("correponding" . "corresponding") ("correposding" . "corresponding") ("corrisponding" . "corresponding") ("corrisponds" . "corresponds") ("corridoors" . "corridors") ("corosion" . "corrosion") ("corruptable" . "corruptible") ("cotten" . "cotton") ("coudl" . "could") ("could of" . "could have") ("couldthe" . "could the") ("coudln't" . "couldn't") ("coudn't" . "couldn't") ("couldnt" . "couldn't") ("coucil" . "council") ("counries" . "countries") ("countires" . "countries") ("ocuntries" . "countries") ("ocuntry" . "country") ("coururier" . "courier") ("convenant" . "covenant") ("creaeted" . "created") ("creedence" . "credence") ("criterias" . "criteria") ("critereon" . "criterion") ("crtical" . "critical") ("critised" . "criticised") ("criticing" . "criticising") ("criticists" . "critics") ("crockodiles" . "crocodiles") ("crucifiction" . "crucifixion") ("crusies" . "cruises") ("crystalisation" . "crystallisation") ("culiminating" . "culminating") ("cumulatative" . "cumulative") ("currenly" . "currently") ("ciriculum" . "curriculum") ("curriculem" . "curriculum") ("cusotmer" . "customer") ("cutsomer" . "customer") ("cusotmers" . "customers") ("cutsomers" . "customers") ("cxan" . "cyan") ("cilinder" . "cylinder") ("cyclinder" . "cylinder") ("dakiri" . "daiquiri") ("dalmation" . "dalmatian") ("danceing" . "dancing") ("dardenelles" . "Dardanelles") ("dael" . "deal") ("debateable" . "debatable") ("decaffinated" . "decaffeinated") ("decathalon" . "decathlon") ("decieved" . "deceived") ("decideable" . "decidable") ("deside" . "decide") ("decidely" . "decidedly") ("ecidious" . "deciduous") ("decison" . "decision") ("descision" . "decision") ("desicion" . "decision") ("desision" . "decision") ("decisons" . "decisions") ("descisions" . "decisions") ("desicions" . "decisions") ("desisions" . "decisions") ("decomissioned" . "decommissioned") ("decomposit" . "decompose") ("decomposited" . "decomposed") ("decomposits" . "decomposes") ("decompositing" . "decomposing") ("decress" . "decrees") ("deafult" . "default") ("defendent" . "defendant") ("defendents" . "defendants") ("defencive" . "defensive") ("deffensively" . "defensively") ("definance" . "defiance") ("deffine" . "define") ("deffined" . "defined") ("definining" . "defining") ("definate" . "definite") ("definit" . "definite") ("definately" . "definitely") ("definatly" . "definitely") ("definetly" . "definitely") ("definitly" . "definitely") ("definiton" . "definition") ("defintion" . "definition") ("degredation" . "degradation") ("degrate" . "degrade") ("dieties" . "deities") ("diety" . "deity") ("delagates" . "delegates") ("deliberatly" . "deliberately") ("delerious" . "delirious") ("delusionally" . "delusively") ("devels" . "delves") ("damenor" . "demeanor") ("demenor" . "demeanor") ("damenor" . "demeanour") ("damenour" . "demeanour") ("demenour" . "demeanour") ("demorcracy" . "democracy") ("demographical" . "demographic") ("demolision" . "demolition") ("demostration" . "demonstration") ("denegrating" . "denigrating") ("densly" . "densely") ("deparment" . "department") ("deptartment" . "department") ("dependance" . "dependence") ("dependancy" . "dependency") ("dependant" . "dependent") ("despict" . "depict") ("derivitive" . "derivative") ("deriviated" . "derived") ("dirived" . "derived") ("derogitory" . "derogatory") ("decendant" . "descendant") ("decendent" . "descendant") ("decendants" . "descendants") ("decendents" . "descendants") ("descendands" . "descendants") ("decribe" . "describe") ("discribe" . "describe") ("decribed" . "described") ("descibed" . "described") ("discribed" . "described") ("decribes" . "describes") ("descriibes" . "describes") ("discribes" . "describes") ("decribing" . "describing") ("discribing" . "describing") ("descriptoin" . "description") ("descripton" . "description") ("descripters" . "descriptors") ("dessicated" . "desiccated") ("disign" . "design") ("desgined" . "designed") ("dessigned" . "designed") ("desigining" . "designing") ("desireable" . "desirable") ("desktiop" . "desktop") ("dispair" . "despair") ("desparate" . "desperate") ("despiration" . "desperation") ("dispicable" . "despicable") ("dispite" . "despite") ("destablised" . "destabilised") ("destablized" . "destabilized") ("desinations" . "destinations") ("desitned" . "destined") ("destory" . "destroy") ("desctruction" . "destruction") ("distruction" . "destruction") ("distructive" . "destructive") ("detatched" . "detached") ("detailled" . "detailed") ("deatils" . "details") ("dectect" . "detect") ("deteriate" . "deteriorate") ("deteoriated" . "deteriorated") ("deterioriating" . "deteriorating") ("determinining" . "determining") ("detremental" . "detrimental") ("devasted" . "devastated") ("devestated" . "devastated") ("devestating" . "devastating") ("devistating" . "devastating") ("devellop" . "develop") ("devellops" . "develop") ("develloped" . "developed") ("developped" . "developed") ("develloper" . "developer") ("developor" . "developer") ("develeoprs" . "developers") ("devellopers" . "developers") ("developors" . "developers") ("develloping" . "developing") ("delevopment" . "development") ("devellopment" . "development") ("develpment" . "development") ("devolopement" . "development") ("devellopments" . "developments") ("divice" . "device") ("diablical" . "diabolical") ("diamons" . "diamonds") ("diarhea" . "diarrhoea") ("dichtomy" . "dichotomy") ("didnot" . "did not") ("didint" . "didn't") ("didnt" . "didn't") ("differance" . "difference") ("diferences" . "differences") ("differances" . "differences") ("difefrent" . "different") ("diferent" . "different") ("diferrent" . "different") ("differant" . "different") ("differemt" . "different") ("differnt" . "different") ("diffrent" . "different") ("differentiatiations" . "differentiations") ("diffcult" . "difficult") ("diffculties" . "difficulties") ("dificulties" . "difficulties") ("diffculty" . "difficulty") ("difficulity" . "difficulty") ("dificulty" . "difficulty") ("delapidated" . "dilapidated") ("dimention" . "dimension") ("dimentional" . "dimensional") ("dimesnional" . "dimensional") ("dimenions" . "dimensions") ("dimentions" . "dimensions") ("diminuitive" . "diminutive") ("diosese" . "diocese") ("diptheria" . "diphtheria") ("diphtong" . "diphthong") ("dipthong" . "diphthong") ("diphtongs" . "diphthongs") ("dipthongs" . "diphthongs") ("diplomancy" . "diplomacy") ("directiosn" . "direction") ("driectly" . "directly") ("directer" . "director") ("directers" . "directors") ("disagreeed" . "disagreed") ("dissagreement" . "disagreement") ("disapear" . "disappear") ("dissapear" . "disappear") ("dissappear" . "disappear") ("dissapearance" . "disappearance") ("disapeared" . "disappeared") ("disappearred" . "disappeared") ("dissapeared" . "disappeared") ("dissapearing" . "disappearing") ("dissapears" . "disappears") ("dissappears" . "disappears") ("dissappointed" . "disappointed") ("disapointing" . "disappointing") ("disaproval" . "disapproval") ("dissarray" . "disarray") ("diaster" . "disaster") ("disasterous" . "disastrous") ("disatrous" . "disastrous") ("diciplin" . "discipline") ("disiplined" . "disciplined") ("unconfortability" . "discomfort") ("diconnects" . "disconnects") ("discontentment" . "discontent") ("dicover" . "discover") ("disover" . "discover") ("dicovered" . "discovered") ("discoverd" . "discovered") ("dicovering" . "discovering") ("dicovers" . "discovers") ("dicovery" . "discovery") ("descuss" . "discuss") ("dicussed" . "discussed") ("desease" . "disease") ("disenchanged" . "disenchanted") ("desintegrated" . "disintegrated") ("desintegration" . "disintegration") ("disobediance" . "disobedience") ("dissobediance" . "disobedience") ("dissobedience" . "disobedience") ("disobediant" . "disobedient") ("dissobediant" . "disobedient") ("dissobedient" . "disobedient") ("desorder" . "disorder") ("desoriented" . "disoriented") ("disparingly" . "disparagingly") ("despatched" . "dispatched") ("dispell" . "dispel") ("dispeled" . "dispelled") ("dispeling" . "dispelling") ("dispells" . "dispels") ("dispence" . "dispense") ("dispenced" . "dispensed") ("dispencing" . "dispensing") ("diaplay" . "display") ("dispaly" . "display") ("unplease" . "displease") ("dispostion" . "disposition") ("disproportiate" . "disproportionate") ("disputandem" . "disputandum") ("disatisfaction" . "dissatisfaction") ("disatisfied" . "dissatisfied") ("disemination" . "dissemination") ("disolved" . "dissolved") ("dissonent" . "dissonant") ("disctinction" . "distinction") ("distiction" . "distinction") ("disctinctive" . "distinctive") ("distingish" . "distinguish") ("distingished" . "distinguished") ("distingquished" . "distinguished") ("distingishes" . "distinguishes") ("distingishing" . "distinguishing") ("ditributed" . "distributed") ("distribusion" . "distribution") ("distrubution" . "distribution") ("disricts" . "districts") ("devide" . "divide") ("devided" . "divided") ("divison" . "division") ("divisons" . "divisions") ("docrines" . "doctrines") ("doctines" . "doctrines") ("doccument" . "document") ("docuemnt" . "document") ("documetn" . "document") ("documnet" . "document") ("documenatry" . "documentary") ("doccumented" . "documented") ("doccuments" . "documents") ("docuement" . "documents") ("documnets" . "documents") ("doens" . "does") ("doese" . "does") ("doe snot" . "does not ; *could* be legitimate... but very unlikely!") ("doens't" . "doesn't") ("doesnt" . "doesn't") ("dosen't" . "doesn't") ("dosn't" . "doesn't") ("doign" . "doing") ("doimg" . "doing") ("doind" . "doing") ("donig" . "doing") ("dollers" . "dollars") ("dominent" . "dominant") ("dominiant" . "dominant") ("dominaton" . "domination") ("do'nt" . "don't") ("dont" . "don't") ("don't no" . "don't know") ("doulbe" . "double") ("dowloads" . "downloads") ("dramtic" . "dramatic") ("draughtman" . "draughtsman") ("dravadian" . "Dravidian") ("deram" . "dream") ("derams" . "dreams") ("dreasm" . "dreams") ("drnik" . "drink") ("driveing" . "driving") ("drummless" . "drumless") ("druming" . "drumming") ("drunkeness" . "drunkenness") ("dukeship" . "dukedom") ("dumbell" . "dumbbell") ("dupicate" . "duplicate") ("durig" . "during") ("durring" . "during") ("duting" . "during") ("dieing" . "dying") ("eahc" . "each") ("eachotehr" . "eachother") ("ealier" . "earlier") ("earlies" . "earliest") ("eearly" . "early") ("earnt" . "earned") ("ecclectic" . "eclectic") ("eclispe" . "eclipse") ("ecomonic" . "economic") ("eceonomy" . "economy") ("esctasy" . "ecstasy") ("eles" . "eels") ("effeciency" . "efficiency") ("efficency" . "efficiency") ("effecient" . "efficient") ("efficent" . "efficient") ("effeciently" . "efficiently") ("efficently" . "efficiently") ("effulence" . "effluence") ("efort" . "effort") ("eforts" . "efforts") ("aggregious" . "egregious") ("eight o" . "eight o") ("eigth" . "eighth") ("eiter" . "either") ("ellected" . "elected") ("electrial" . "electrical") ("electricly" . "electrically") ("electricty" . "electricity") ("eletricity" . "electricity") ("elementay" . "elementary") ("elimentary" . "elementary") ("elphant" . "elephant") ("elicided" . "elicited") ("eligable" . "eligible") ("eleminated" . "eliminated") ("eleminating" . "eliminating") ("alse" . "else") ("esle" . "else") ("eminate" . "emanate") ("eminated" . "emanated") ("embargos" . "embargoes") ("embarras" . "embarrass") ("embarrased" . "embarrassed") ("embarrasing" . "embarrassing") ("embarrasment" . "embarrassment") ("embezelled" . "embezzled") ("emblamatic" . "emblematic") ("emmigrated" . "emigrated") ("emmisaries" . "emissaries") ("emmisarries" . "emissaries") ("emmisarry" . "emissary") ("emmisary" . "emissary") ("emision" . "emission") ("emmision" . "emission") ("emmisions" . "emissions") ("emited" . "emitted") ("emmited" . "emitted") ("emmitted" . "emitted") ("emiting" . "emitting") ("emmiting" . "emitting") ("emmitting" . "emitting") ("emphsis" . "emphasis") ("emphaised" . "emphasised") ("emphysyma" . "emphysema") ("emperical" . "empirical") ("imploys" . "employs") ("enameld" . "enamelled") ("encouraing" . "encouraging") ("encryptiion" . "encryption") ("encylopedia" . "encyclopedia") ("endevors" . "endeavors") ("endevour" . "endeavour") ("endevours" . "endeavours") ("endig" . "ending") ("endolithes" . "endoliths") ("enforceing" . "enforcing") ("engagment" . "engagement") ("engeneer" . "engineer") ("engieneer" . "engineer") ("engeneering" . "engineering") ("engieneers" . "engineers") ("enlish" . "English") ("enchancement" . "enhancement") ("emnity" . "enmity") ("enourmous" . "enormous") ("enourmously" . "enormously") ("enought" . "enough") ("ensconsed" . "ensconced") ("entaglements" . "entanglements") ("intertaining" . "entertaining") ("enteratinment" . "entertainment") ("entitlied" . "entitled") ("entitity" . "entity") ("entrepeneur" . "entrepreneur") ("entrepeneurs" . "entrepreneurs") ("intrusted" . "entrusted") ("enviornment" . "environment") ("enviornmental" . "environmental") ("enviornmentalist" . "environmentalist") ("enviornmentally" . "environmentally") ("enviornments" . "environments") ("envrionments" . "environments") ("epsiode" . "episode") ("epidsodes" . "episodes") ("equitorial" . "equatorial") ("equilibium" . "equilibrium") ("equilibrum" . "equilibrium") ("equippment" . "equipment") ("equiped" . "equipped") ("equialent" . "equivalent") ("equivalant" . "equivalent") ("equivelant" . "equivalent") ("equivelent" . "equivalent") ("equivilant" . "equivalent") ("equivilent" . "equivalent") ("equivlalent" . "equivalent") ("eratic" . "erratic") ("eratically" . "erratically") ("eraticly" . "erratically") ("errupted" . "erupted") ("especally" . "especially") ("especialy" . "especially") ("especialyl" . "especially") ("espesially" . "especially") ("expecially" . "especially") ("expresso" . "espresso") ("essense" . "essence") ("esential" . "essential") ("essencial" . "essential") ("essentail" . "essential") ("essentual" . "essential") ("essesital" . "essential") ("essentialy" . "essentially") ("estabishes" . "establishes") ("establising" . "establishing") ("esitmated" . "estimated") ("ect" . "etc") ("ethnocentricm" . "ethnocentrism") ("europian" . "European") ("eurpean" . "European") ("eurpoean" . "European") ("europians" . "Europeans") ("evenhtually" . "eventually") ("eventally" . "eventually") ("eventially" . "eventually") ("eventualy" . "eventually") ("eveyr" . "every") ("everytime" . "every time") ("everthing" . "everything") ("evidentally" . "evidently") ("efel" . "evil") ("envolutionary" . "evolutionary") ("exerbate" . "exacerbate") ("exerbated" . "exacerbated") ("excact" . "exact") ("exagerate" . "exaggerate") ("exagerrate" . "exaggerate") ("exagerated" . "exaggerated") ("exagerrated" . "exaggerated") ("exagerates" . "exaggerates") ("exagerrates" . "exaggerates") ("exagerating" . "exaggerating") ("exagerrating" . "exaggerating") ("exhalted" . "exalted") ("examinated" . "examined") ("exemple" . "example") ("exmaple" . "example") ("excedded" . "exceeded") ("exeedingly" . "exceedingly") ("excell" . "excel") ("excellance" . "excellence") ("excelent" . "excellent") ("excellant" . "excellent") ("exelent" . "excellent") ("exellent" . "excellent") ("excells" . "excels") ("exept" . "except") ("exeptional" . "exceptional") ("exerpt" . "excerpt") ("exerpts" . "excerpts") ("excange" . "exchange") ("exchagne" . "exchange") ("exhcange" . "exchange") ("exchagnes" . "exchanges") ("exhcanges" . "exchanges") ("exchanching" . "exchanging") ("excitment" . "excitement") ("exicting" . "exciting") ("exludes" . "excludes") ("exculsivly" . "exclusively") ("excecute" . "execute") ("excecuted" . "executed") ("exectued" . "executed") ("excecutes" . "executes") ("excecuting" . "executing") ("excecution" . "execution") ("exection" . "execution") ("exampt" . "exempt") ("excercise" . "exercise") ("exersize" . "exercise") ("exerciese" . "exercises") ("execising" . "exercising") ("extered" . "exerted") ("exhibtion" . "exhibition") ("exibition" . "exhibition") ("exibitions" . "exhibitions") ("exliled" . "exiled") ("excisted" . "existed") ("existance" . "existence") ("existince" . "existence") ("existant" . "existent") ("exisiting" . "existing") ("exonorate" . "exonerate") ("exoskelaton" . "exoskeleton") ("exapansion" . "expansion") ("expeced" . "expected") ("expeditonary" . "expeditionary") ("expiditions" . "expeditions") ("expell" . "expel") ("expells" . "expels") ("experiance" . "experience") ("experienc" . "experience") ("expierence" . "experience") ("exprience" . "experience") ("experianced" . "experienced") ("exprienced" . "experienced") ("expeiments" . "experiments") ("expalin" . "explain") ("explaning" . "explaining") ("explaination" . "explanation") ("explictly" . "explicitly") ("explotation" . "exploitation") ("exploititive" . "exploitative") ("exressed" . "expressed") ("expropiated" . "expropriated") ("expropiation" . "expropriation") ("extention" . "extension") ("extentions" . "extensions") ("exerternal" . "external") ("exinct" . "extinct") ("extradiction" . "extradition") ("extrordinarily" . "extraordinarily") ("extrordinary" . "extraordinary") ("extravagent" . "extravagant") ("extemely" . "extremely") ("extrememly" . "extremely") ("extremly" . "extremely") ("extermist" . "extremist") ("extremeophile" . "extremophile") ("fascitious" . "facetious") ("facillitate" . "facilitate") ("facilites" . "facilities") ("farenheit" . "Fahrenheit") ("familair" . "familiar") ("familar" . "familiar") ("familliar" . "familiar") ("fammiliar" . "familiar") ("familes" . "families") ("fimilies" . "families") ("famoust" . "famous") ("fanatism" . "fanaticism") ("facia" . "fascia") ("fascitis" . "fasciitis") ("facinated" . "fascinated") ("facist" . "fascist") ("favoutrable" . "favourable") ("feasable" . "feasible") ("faeture" . "feature") ("faetures" . "features") ("febuary" . "February") ("fedreally" . "federally") ("efel" . "feel") ("fertily" . "fertility") ("fued" . "feud") ("fwe" . "few") ("ficticious" . "fictitious") ("fictious" . "fictitious") ("feild" . "field") ("feilds" . "fields") ("fiercly" . "fiercely") ("firey" . "fiery") ("fightings" . "fighting") ("filiament" . "filament") ("fiel" . "file") ("fiels" . "files") ("fianlly" . "finally") ("finaly" . "finally") ("finalyl" . "finally") ("finacial" . "financial") ("financialy" . "financially") ("fidn" . "find") ("fianite" . "finite") ("firts" . "first") ("fisionable" . "fissionable") ("ficed" . "fixed") ("flamable" . "flammable") ("flawess" . "flawless") ("flemmish" . "Flemish") ("glight" . "flight") ("fluorish" . "flourish") ("florescent" . "fluorescent") ("flourescent" . "fluorescent") ("flouride" . "fluoride") ("foucs" . "focus") ("focussed" . "focused") ("focusses" . "focuses") ("focussing" . "focusing") ("follwo" . "follow") ("follwoing" . "following") ("folowing" . "following") ("formalhaut" . "Fomalhaut") ("foootball" . "football") ("fora" . "for a") ("forthe" . "for the") ("forbad" . "forbade") ("forbiden" . "forbidden") ("forhead" . "forehead") ("foriegn" . "foreign") ("formost" . "foremost") ("forunner" . "forerunner") ("forsaw" . "foresaw") ("forseeable" . "foreseeable") ("fortelling" . "foretelling") ("foreward" . "foreword") ("forfiet" . "forfeit") ("formallise" . "formalise") ("formallised" . "formalised") ("formallize" . "formalize") ("formallized" . "formalized") ("formaly" . "formally") ("fomed" . "formed") ("fromed" . "formed") ("formelly" . "formerly") ("fourties" . "forties") ("fourty" . "forty") ("forwrd" . "forward") ("foward" . "forward") ("forwrds" . "forwards") ("fowards" . "forwards") ("faught" . "fought") ("fougth" . "fought") ("foudn" . "found") ("foundaries" . "foundries") ("foundary" . "foundry") ("fouth" . "fourth") ("fransiscan" . "Franciscan") ("fransiscans" . "Franciscans") ("frequentily" . "frequently") ("freind" . "friend") ("freindly" . "friendly") ("firends" . "friends") ("freinds" . "friends") ("frmo" . "from") ("frome" . "from") ("fromt he" . "from the") ("fromthe" . "from the") ("froniter" . "frontier") ("fufill" . "fulfill") ("fufilled" . "fulfilled") ("fulfiled" . "fulfilled") ("funtion" . "function") ("fundametal" . "fundamental") ("fundametals" . "fundamentals") ("furneral" . "funeral") ("funguses" . "fungi") ("firc" . "furc") ("furuther" . "further") ("futher" . "further") ("futhermore" . "furthermore") ("galatic" . "galactic") ("galations" . "Galatians") ("gallaxies" . "galaxies") ("galvinised" . "galvanised") ("galvinized" . "galvanized") ("gameboy" . "Game Boy") ("ganes" . "games") ("ghandi" . "Gandhi") ("ganster" . "gangster") ("garnison" . "garrison") ("guage" . "gauge") ("geneological" . "genealogical") ("geneologies" . "genealogies") ("geneology" . "genealogy") ("gemeral" . "general") ("generaly" . "generally") ("generatting" . "generating") ("genialia" . "genitalia") ("gentlemens" . "gentlemen's") ("geographicial" . "geographical") ("geometrician" . "geometer") ("geometricians" . "geometers") ("geting" . "getting") ("gettin" . "getting") ("guilia" . "Giulia") ("guiliani" . "Giuliani") ("guilio" . "Giulio") ("guiseppe" . "Giuseppe") ("gievn" . "given") ("giveing" . "giving") ("glace" . "glance") ("gloabl" . "global") ("gnawwed" . "gnawed") ("godess" . "goddess") ("godesses" . "goddesses") ("godounov" . "Godunov") ("goign" . "going") ("gonig" . "going") ("oging" . "going") ("giid" . "good") ("gothenberg" . "Gothenburg") ("gottleib" . "Gottlieb") ("goverance" . "governance") ("govement" . "government") ("govenment" . "government") ("govenrment" . "government") ("goverment" . "government") ("governmnet" . "government") ("govorment" . "government") ("govornment" . "government") ("govermental" . "governmental") ("govormental" . "governmental") ("gouvener" . "governor") ("governer" . "governor") ("gracefull" . "graceful") ("graffitti" . "graffiti") ("grafitti" . "graffiti") ("grammer" . "grammar") ("gramatically" . "grammatically") ("grammaticaly" . "grammatically") ("greatful" . "grateful") ("greatfully" . "gratefully") ("gratuitious" . "gratuitous") ("gerat" . "great") ("graet" . "great") ("grat" . "great") ("gridles" . "griddles") ("greif" . "grief") ("gropu" . "group") ("gruop" . "group") ("gruops" . "groups") ("grwo" . "grow") ("guadulupe" . "Guadalupe") ("gunanine" . "guanine") ("gauarana" . "guarana") ("gaurantee" . "guarantee") ("gaurentee" . "guarantee") ("guarentee" . "guarantee") ("gurantee" . "guarantee") ("gauranteed" . "guaranteed") ("gaurenteed" . "guaranteed") ("guarenteed" . "guaranteed") ("guranteed" . "guaranteed") ("gaurantees" . "guarantees") ("gaurentees" . "guarantees") ("guarentees" . "guarantees") ("gurantees" . "guarantees") ("gaurd" . "guard") ("guatamala" . "Guatemala") ("guatamalan" . "Guatemalan") ("guidence" . "guidance") ("guiness" . "Guinness") ("guttaral" . "guttural") ("gutteral" . "guttural") ("gusy" . "guys") ("habaeus" . "habeas") ("habeus" . "habeas") ("habsbourg" . "Habsburg") ("hda" . "had") ("hadbeen" . "had been") ("haemorrage" . "haemorrhage") ("hallowean" . "Halloween") ("ahppen" . "happen") ("hapen" . "happen") ("hapened" . "happened") ("happend" . "happened") ("happended" . "happened") ("happenned" . "happened") ("hapening" . "happening") ("hapens" . "happens") ("harras" . "harass") ("harased" . "harassed") ("harrased" . "harassed") ("harrassed" . "harassed") ("harrasses" . "harassed") ("harases" . "harasses") ("harrases" . "harasses") ("harrasing" . "harassing") ("harrassing" . "harassing") ("harassement" . "harassment") ("harrasment" . "harassment") ("harrassment" . "harassment") ("harrasments" . "harassments") ("harrassments" . "harassments") ("hace" . "hare") ("hsa" . "has") ("hasbeen" . "has been") ("hasnt" . "hasn't") ("ahev" . "have") ("ahve" . "have") ("haev" . "have") ("hvae" . "have") ("havebeen" . "have been") ("haveing" . "having") ("hvaing" . "having") ("hge" . "he") ("hesaid" . "he said") ("hewas" . "he was") ("headquater" . "headquarter") ("headquatered" . "headquartered") ("headquaters" . "headquarters") ("healthercare" . "healthcare") ("heathy" . "healthy") ("heared" . "heard") ("hearign" . "hearing") ("herat" . "heart") ("haviest" . "heaviest") ("heidelburg" . "Heidelberg") ("hieght" . "height") ("hier" . "heir") ("heirarchy" . "heirarchy") ("helment" . "helmet") ("halp" . "help") ("hlep" . "help") ("helpped" . "helped") ("helpfull" . "helpful") ("hemmorhage" . "hemorrhage") ("ehr" . "her") ("ehre" . "here") ("here;s" . "here's") ("heridity" . "heredity") ("heroe" . "hero") ("heros" . "heroes") ("hertzs" . "hertz") ("hesistant" . "hesitant") ("heterogenous" . "heterogeneous") ("heirarchical" . "hierarchical") ("hierachical" . "hierarchical") ("hierarcical" . "hierarchical") ("heirarchies" . "hierarchies") ("hierachies" . "hierarchies") ("heirarchy" . "hierarchy") ("hierachy" . "hierarchy") ("hierarcy" . "hierarchy") ("hieroglph" . "hieroglyph") ("heiroglyphics" . "hieroglyphics") ("hieroglphs" . "hieroglyphs") ("heigher" . "higher") ("higer" . "higher") ("higest" . "highest") ("higway" . "highway") ("hillarious" . "hilarious") ("himselv" . "himself") ("hismelf" . "himself") ("hinderance" . "hindrance") ("hinderence" . "hindrance") ("hindrence" . "hindrance") ("hipopotamus" . "hippopotamus") ("hersuit" . "hirsute") ("hsi" . "his") ("ihs" . "his") ("historicians" . "historians") ("hsitorians" . "historians") ("hstory" . "history") ("hitsingles" . "hit singles") ("hosited" . "hoisted") ("holliday" . "holiday") ("homestate" . "home state") ("homogeneize" . "homogenize") ("homogeneized" . "homogenized") ("honourarium" . "honorarium") ("honory" . "honorary") ("honourific" . "honorific") ("hounour" . "honour") ("horrifing" . "horrifying") ("hospitible" . "hospitable") ("housr" . "hours") ("howver" . "however") ("huminoid" . "humanoid") ("humoural" . "humoral") ("humer" . "humour") ("humerous" . "humourous") ("humurous" . "humourous") ("husban" . "husband") ("hydogen" . "hydrogen") ("hydropile" . "hydrophile") ("hydropilic" . "hydrophilic") ("hydropobe" . "hydrophobe") ("hydropobic" . "hydrophobic") ("hygeine" . "hygiene") ("hypocracy" . "hypocrisy") ("hypocrasy" . "hypocrisy") ("hypocricy" . "hypocrisy") ("hypocrit" . "hypocrite") ("hypocrits" . "hypocrites") ("i;d" . "I'd") ("iconclastic" . "iconoclastic") ("idae" . "idea") ("idaeidae" . "idea") ("idaes" . "ideas") ("identicial" . "identical") ("identifers" . "identifiers") ("identofy" . "identify") ("idealogies" . "ideologies") ("idealogy" . "ideology") ("idiosyncracy" . "idiosyncrasy") ("ideosyncratic" . "idiosyncratic") ("ignorence" . "ignorance") ("illiegal" . "illegal") ("illegimacy" . "illegitimacy") ("illegitmate" . "illegitimate") ("illess" . "illness") ("ilness" . "illness") ("ilogical" . "illogical") ("ilumination" . "illumination") ("illution" . "illusion") ("imagenary" . "imaginary") ("imagin" . "imagine") ("inbalance" . "imbalance") ("inbalanced" . "imbalanced") ("imediate" . "immediate") ("emmediately" . "immediately") ("imediately" . "immediately") ("imediatly" . "immediately") ("immediatley" . "immediately") ("immediatly" . "immediately") ("immidately" . "immediately") ("immidiately" . "immediately") ("imense" . "immense") ("inmigrant" . "immigrant") ("inmigrants" . "immigrants") ("imanent" . "imminent") ("immunosupressant" . "immunosuppressant") ("inpeach" . "impeach") ("impecabbly" . "impeccably") ("impedence" . "impedance") ("implamenting" . "implementing") ("inpolite" . "impolite") ("importamt" . "important") ("importent" . "important") ("importnat" . "important") ("impossable" . "impossible") ("emprisoned" . "imprisoned") ("imprioned" . "imprisoned") ("imprisonned" . "imprisoned") ("inprisonment" . "imprisonment") ("improvemnt" . "improvement") ("improvment" . "improvement") ("improvments" . "improvements") ("inproving" . "improving") ("improvision" . "improvisation") ("int he" . "in the") ("inteh" . "in the") ("inthe" . "in the") ("inwhich" . "in which") ("inablility" . "inability") ("inaccessable" . "inaccessible") ("inadiquate" . "inadequate") ("inadquate" . "inadequate") ("inadvertant" . "inadvertent") ("inadvertantly" . "inadvertently") ("inappropiate" . "inappropriate") ("inagurated" . "inaugurated") ("inaugures" . "inaugurates") ("inaguration" . "inauguration") ("incarcirated" . "incarcerated") ("incidentially" . "incidentally") ("incidently" . "incidentally") ("includ" . "include") ("includng" . "including") ("incuding" . "including") ("incomptable" . "incompatible") ("incompetance" . "incompetence") ("incompetant" . "incompetent") ("incomptetent" . "incompetent") ("imcomplete" . "incomplete") ("inconsistant" . "inconsistent") ("incorportaed" . "incorporated") ("incorprates" . "incorporates") ("incorperation" . "incorporation") ("incorruptable" . "incorruptible") ("inclreased" . "increased") ("increadible" . "incredible") ("incredable" . "incredible") ("incramentally" . "incrementally") ("incunabla" . "incunabula") ("indefinately" . "indefinitely") ("indefinitly" . "indefinitely") ("indepedence" . "independence") ("independance" . "independence") ("independece" . "independence") ("indipendence" . "independence") ("indepedent" . "independent") ("independant" . "independent") ("independendet" . "independent") ("indipendent" . "independent") ("indpendent" . "independent") ("indepedantly" . "independently") ("independantly" . "independently") ("indipendently" . "independently") ("indpendently" . "independently") ("indecate" . "indicate") ("indite" . "indict") ("indictement" . "indictment") ("indigineous" . "indigenous") ("indispensible" . "indispensable") ("individualy" . "individually") ("indviduals" . "individuals") ("enduce" . "induce") ("indulgue" . "indulge") ("indutrial" . "industrial") ("inudstry" . "industry") ("inefficienty" . "inefficiently") ("unequalities" . "inequalities") ("inevatible" . "inevitable") ("inevitible" . "inevitable") ("inevititably" . "inevitably") ("infalability" . "infallibility") ("infallable" . "infallible") ("infrantryman" . "infantryman") ("infectuous" . "infectious") ("infered" . "inferred") ("infilitrate" . "infiltrate") ("infilitrated" . "infiltrated") ("infilitration" . "infiltration") ("infinit" . "infinite") ("infinitly" . "infinitely") ("enflamed" . "inflamed") ("inflamation" . "inflammation") ("influance" . "influence") ("influented" . "influenced") ("influencial" . "influential") ("infomation" . "information") ("informatoin" . "information") ("informtion" . "information") ("infrigement" . "infringement") ("ingenius" . "ingenious") ("ingreediants" . "ingredients") ("inhabitans" . "inhabitants") ("inherantly" . "inherently") ("inheritence" . "inheritance") ("inital" . "initial") ("intial" . "initial") ("ititial" . "initial") ("initally" . "initially") ("intially" . "initially") ("initation" . "initiation") ("initiaitive" . "initiative") ("inate" . "innate") ("inocence" . "innocence") ("inumerable" . "innumerable") ("innoculate" . "inoculate") ("innoculated" . "inoculated") ("insectiverous" . "insectivorous") ("insensative" . "insensitive") ("inseperable" . "inseparable") ("insistance" . "insistence") ("instaleld" . "installed") ("instatance" . "instance") ("instade" . "instead") ("insted" . "instead") ("institue" . "institute") ("instutionalized" . "institutionalized") ("instuction" . "instruction") ("instuments" . "instruments") ("insufficent" . "insufficient") ("insufficently" . "insufficiently") ("insurence" . "insurance") ("intergrated" . "integrated") ("intergration" . "integration") ("intelectual" . "intellectual") ("inteligence" . "intelligence") ("inteligent" . "intelligent") ("interchangable" . "interchangeable") ("interchangably" . "interchangeably") ("intercontinetal" . "intercontinental") ("intrest" . "interest") ("itnerest" . "interest") ("itnerested" . "interested") ("itneresting" . "interesting") ("itnerests" . "interests") ("interferance" . "interference") ("interfereing" . "interfering") ("interm" . "interim") ("interrim" . "interim") ("interum" . "interim") ("intenational" . "international") ("interational" . "international") ("internation" . "international") ("interpet" . "interpret") ("intepretation" . "interpretation") ("intepretator" . "interpretor") ("interrugum" . "interregnum") ("interelated" . "interrelated") ("interupt" . "interrupt") ("intevene" . "intervene") ("intervines" . "intervenes") ("inot" . "into") ("inctroduce" . "introduce") ("inctroduced" . "introduced") ("intrduced" . "introduced") ("introdued" . "introduced") ("intruduced" . "introduced") ("itnroduced" . "introduced") ("instutions" . "intuitions") ("intutive" . "intuitive") ("intutively" . "intuitively") ("inventer" . "inventor") ("invertibrates" . "invertebrates") ("investingate" . "investigate") ("involvment" . "involvement") ("ironicly" . "ironically") ("irelevent" . "irrelevant") ("irrelevent" . "irrelevant") ("irreplacable" . "irreplaceable") ("iresistable" . "irresistible") ("iresistible" . "irresistible") ("irresistable" . "irresistible") ("iresistably" . "irresistibly") ("iresistibly" . "irresistibly") ("irresistably" . "irresistibly") ("iritable" . "irritable") ("iritated" . "irritated") ("i snot" . "is not") ("isthe" . "is the") ("isnt" . "isn't") ("issueing" . "issuing") ("itis" . "it is") ("itwas" . "it was") ("it;s" . "it's") ("its a" . "it's a") ("it snot" . "it's not") ("it' snot" . "it's not") ("iits the" . "it's the") ("its the" . "it's the") ("ihaca" . "Ithaca") ("jaques" . "jacques") ("japanes" . "Japanese") ("jeapardy" . "jeopardy") ("jewelery" . "jewellery") ("jewllery" . "jewellery") ("johanine" . "Johannine") ("jospeh" . "Joseph") ("jouney" . "journey") ("journied" . "journeyed") ("journies" . "journeys") ("juadaism" . "Judaism") ("juadism" . "Judaism") ("judgment" . "judgement") ("jugment" . "judgment") ("judical" . "judicial") ("juducial" . "judicial") ("judisuary" . "judiciary") ("iunior" . "junior") ("juristiction" . "jurisdiction") ("juristictions" . "jurisdictions") ("jstu" . "just") ("jsut" . "just") ("kindergarden" . "kindergarten") ("klenex" . "kleenex") ("knive" . "knife"))

(("eamcs" . "emacs") ("defualt" . "default") ("formart" . "format") ("pyhton" . "python") ("windwos" . "windows") ("startwith" . "startswith") ("endwith" . "endswith") ("slef" . "self") ("improt" . "import") ("clac" . "calc") ("botton" . "button") ("allign" . "align") ("atempt" . "attempt"))



(setq htest (make-hash-table :test 'equal))
#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ( ...))
htest
#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ( ...))





innate
initial python python 
** Sat 05 Oct 2013 12:48:48 AM JST
python


(rx (and
     ;; Match even number of backslashes.
     (or (not (any ?\\ ?\' ?\")) point
         ;; Quotes might be preceded by a escaped quote.
         (and (or (not (any ?\\)) point) ?\\
              (* ?\\ ?\\) (any ?\' ?\")))
     (* ?\\ ?\\)
     ;; Match single or triple quotes of any kind.
     (group (or  "\"" "\"\"\"" "'" "'''"))))
"\\(?:[^\"'\\]\\|\\=\\|\\(?:[^\\]\\|\\=\\)\\\\\\(?:\\\\\\\\\\)*[\"']\\)\\(?:\\\\\\\\\\)*\\(\\(?:\"\"\"\\|'''\\|[\"']\\)\\)"

(defun py:string|comment-at-p ()
  "Return non-nil if point is in a Python literal (a comment or string)."
  ;; We don't need to save the match data.
  (nth 8 (syntax-ppss)))


(defun negative-p (n)
  "N"
  (< n 0))

(defun positive-p (n)
  "N"
  (< 0 n))

(defun py:class-next (n)
  "N"
  (interactive "p")
  (let* ((regexp py:class-re)
         (n (or n 1))
         (tmp (cond ((negative-p n) (list 1 #'match-beginning #'re-search-backward))
                    ((positive-p n) (list -1 #'match-end #'re-search-forward))
                    (t '(0 nil nil))))
         (addn (car tmp))
         (adjust-fn (car (cdr tmp)))
         (search-fn (car (cdr (cdr tmp))))
         last-point done)
    (while (and (not (eq n 0))
                (not done))
      ;; skip target regexp before move
      (when (looking-at regexp)
        (goto-char (funcall adjust-fn 0)))
      (setq last-point (point))
      (if (funcall search-fn regexp nil 'noerror)
          (when (not (py:string|comment-at-p))
            (goto-char (match-beginning 0))
            (setq n (+ n addn)))
        (setq done t)
        (goto-char (match-beginning 0)))
      ))
  (point))

(defun py:class-prev (n)
  "N"
  (interactive "p")
  (when (positive-p n)
    (setq n (- n)))
  (py:class-next n) ;go previous
  )

(global-set-key (kbd "s-i") 'py:class-prev)

(funcall 'match-end 0)

(match-start 0)
(match-beginning 0)
1733


1265

1265

1265

1282

847


(setq tes (list 1 're-search-forward 'match-end))
(car (cdr tes))
re-search-forward


1

(1 re-search-forward match-end)


(global-set-key (kbd "s-o") 'py:class-next)

(re-search-forward "REGEXP" nil 'noerror)  
  
(funcall 'match-end 0)
49

49

1155

  
(positive-p -1)
nil

t

(negative-p -1)
t

nil

(defun tes (n)
  "N"
  (interactive "p")
  (message n))

(global-set-key (kbd "s-o") 'tes)

(next-line)

(when 0
  (message "hello"))
"hello"

(re-search-forward py:class-re nil 'noerror)
(looking-back py:class-re)



(defun py:class--beg-to-end ()
  ""
  (let ((orig-indent (current-indentation))
        done)
    (forward-line 1)
    (while (and (not (eobp))
                (or (< orig-indent (current-indentation))
                    (blank-line-p)
                    (progn (skip-chars-forward (rx (or blank ?#)))
                           (py:string|comment-at-p))))
      (forward-line 1))
    ;; move end of class
    (while (or (not (eq (skip-chars-backward " \t\n") 0))
               (not (eq (py:string|comment-skip -1) 0))))
    (point)))

(defun py:class--end-next ()
  ""
  (if (py:class-exists-p)
      (let ((point (cond ((looking-at py:class-re)
                          (py:class--beg-to-end))
                         ((py:class-in-p)
                          (py:class-prev 1)
                          (py:class--beg-to-end))
                         ((py:class-next-exist-p)
                          (py:class-next 1)
                          (py:class--beg-to-end))
                         (t nil))))
        point)
    nil))
  
(defun py:class-end-next (n)
  "N"
  (interactive "p")
  (when (negative-p n)
    (error "Value error: N must be positive."))
  (while (and (not (eq n 0))
              (py:class--end-next))
    (setq n (- n 1)))
  )

(global-set-key (kbd "s-o") 'py:class-end-next)

(py:class-end-next 1)
(py:class-end--next)



;; (defun py:class-end-next2 ()
;;   "N"
;;   (interactive "p")
;;   (let ((orig (point)))
;;     (py:class-end-next1)
;;     (while (or (not (eq (skip-chars-backward " \t\n") 0))
;;                (not (eq (py:string|comment-skip -1) 0))))
;;     (when (and (<= (point) orig)
;;                (py:class-next-exist-p))
;;       (py:class-next 1)
;;       (py:class-end-next2))
;;     (point)
;;     ))

    
    ;; (if (or (py:class-in-p) (looking-at py:class-re))
    ;;     (progn
    ;;       (py:class-prev 1)
    ;;       (py:class-end-next1))
    ;;   (when (py:class-next-exist-p)
    ;;     (py:class-next 1)
    ;;     (py:class-end-next1)))))




(py:class-next-exist-p)

(py:class-in-p)

(py:class-exists-p)
(defun py:string|comment-skip (&optional n)
  "N"
  (interactive "p")
  (let ((n (or n 1))
        (orig (point)))
    (while (py:string|comment-at-p)
      (forward-char n))
    (- (point) orig)))

(py:string|comment-skip -1)


(py:string|comment-at-p)




;; check exists class in buffer
;; check in class
;; if in class
;;    back to class beginning
;;    move end class
;; if not in class check next class
;;      if exists next class
;;          move next beginning of class
** Sat 05 Oct 2013 02:20:01 AM JST
(defun py:narrow-current-class ()
  ""
  (when (or (py:class-in-p)
            (looking-at py:class-re))
    (save-excursion
      (let ((start (if (looking-at py:class-re)
                       (point)
                     (py:class-prev 1)
                     (point)))
            (end (py:class--beg-to-end)))
        (narrow-to-region start end)))))

(py:narrow-current-class)
** Sat 05 Oct 2013 09:31:00 AM JST
(defun py:def-next (n)
  "N"
  (interactive "p")
  (let* ((orig (point))
         (regexp py:def-re)
         (n (or n 1))))
  )

(py:class-next 1)

(re-search-forward py:class-re nil 'noerror)

(defun py:class-next--internal ()
  ""
  (let ((orig (point)))
    ;; fix position for move next
    (when (looking-at py:class-re)
      (goto-char (match-end 0)))
    (if (re-search-forward py:class-re nil 'noerror)
        (if (py:string|comment-at-p)
            (py:class-next--internal) ;recursive
          (goto-char (match-beginning 0))
          (point))
      (goto-char orig)
      nil)))

(defun py:class-next (n)
  "N"
  (interactive "p")
  ;; prevent bad value
  (when (or (not (integerp n))
            (< n 0))
    (error "Value error"))
  (while (and (not (eq n 0))
              (py:class-next--internal))
    (setq n (- n 1)))
  (point))

(global-set-key (kbd "s-o") 'py:class-next)
(py:class-next--internal)


(defun py:class-prev--internal ()
  ""
  (let ((orig (point)))
    (if (re-search-backward py:class-re nil 'noerror)
        (if (py:string|comment-at-p)
            (py:class-prev--internal) ;recursive
          (goto-char (match-beginning 0))
          (point))
      (goto-char orig)
      nil)))

(defun py:class-prev (n)
  "N"
  (interactive "p")
  ;; prevent bad value
  (when (or (not (integerp n))
            (> n 0))
    (error "Value error"))
  (while (and (not (eq n 0))
              (py:class-prev--internal))
    (setq n (+ n 1)))
  (point))

(global-set-key (kbd "s-o") 'py:class-prev)
(py:class-prev--internal)


(setq tes #'re-search-forward)
re-search-forward


re-search-forward
(eq tes 're-search-forward)
t

t
(py:class-next/prev--internal 'prev)
(defun py:class-next/prev--internal (&optional action)
  ""
  (let* ((orig (point))
         (regexp py:class-re)
         (re-search-fnc (cond ((eq action 'next) #'re-search-forward)
                              ((eq action 'prev) #'re-search-backward)
                              (t #'re-search-forward))))
    ;; fix position for move next
    (when (and (eq re-search-fnc 're-search-forward)
               (looking-at regexp))
      (goto-char (match-end 0)))
    (if (funcall re-search-fnc regexp nil 'noerror)
        (if (py:string|comment-at-p)
            ;; recursive call
            (py:class-next/prev--internal action)
          (goto-char (match-beginning 0))
          (point))
      ;; beginning or end class in buffer
      (goto-char orig)
      nil)))

(defun py:class-forward (n)
  "N"
  (interactive "p")
  (when (not (integerp n))
    (error "N must be integer"))
  (let* ((action (cond ((< 0 n) 'next)
                      ((< n 0) 'prev)
                      ((zerop n) (error "0 is not acceptable"))
                      (t (error "Bad value"))))
         (add-method (cond ((eq action 'next) #'-)
                           ((eq action 'prev) #'+))))
    (while (and (not (eq n 0))
                (py:class-next/prev--internal action))
      (setq n (funcall add-method n 1)))))


(defun py:class-next (n)
  "N"
  (interactive "p")
  (py:class-forward n))

(global-set-key (kbd "s-o") 'py:class-next)

(defun py:class-prev (n)
  "N"
  (interactive "p")
  (py:class-forward (- n)))

(global-set-key (kbd "s-i") 'py:class-prev)

(- 1)
-1
(- -1)
1


(rx space)
"[[:space:]]"
(rx blank "\n")
"[[:blank:]]
"

"[[:blank:]]	
"

"[[:space:]]	
"

"[[:space:]]	"

(global-set-key (kbd "s-o") 'py:class-end-next)
(py:class--end-next)
(py:class-in-p)

(ignore-errors (< 0 -1))
nil

t

nil
(py:class-end-next)
(py:class-prev-exists-p)
(py:class-beginning-next/prev--internal 'prev)


(py:class-beginning-forward -2)

(dotimes (n 2)
  (message "hello"))
nil

(py:class-prev-exists-p)

(py:class-end-prev--internal)
(py:class-tail-at-p)

(py:class-end-prev--internal)




(py:class-beginning-next/prev--internal 'prev)


;;; class-in or class-at-tail and prev-exists
;;;     






(defun py:class-beginning-forward (n)
  "N"
  (interactive "p")
  (when (not (integerp n))
    (error "N must be integer"))
  (let* ((action (cond ((< 0 n) 'next)
                       ((< n 0) 'prev)
                       ((zerop n) (error "0 is not acceptable"))
                       (t (error "Bad value"))))
         (add-method (cond ((eq action 'next) #'-)
                           ((eq action 'prev) #'+))))
    (while (and (not (eq n 0))
                (py:class-beginning-next/prev--internal action))
      (setq n (funcall add-method n 1)))))













(py:class-end-forward -2)

(defun py:class-beginning-next (n)
  "N"
  (interactive "p")
  (py:class-beginning-forward n))


(defun py:class-beginning-prev (n)
  "N"
  (interactive "p")
  (py:class-beginning-forward (- n)))



(global-set-key (kbd "s-o") 'py:class-end-next)
(global-set-key (kbd "s-i") 'py:class-prev-end)
** Thu 10 Oct 2013 08:36:19 AM JST
(count-line)
(count-lines)
(current-line)
4
(setq ac-sources (append ac-sources '(ac-emacs-lisp-features
                                      ac-source-functions
                                      ac-source-variables
                                      ac-source-symbols)))
(py:go-writable-point-in-def)
py:doc-class|def-re
"^[[:blank:]]+[BUbu]?[Rr]?\\('''\\\\?[^']*[[:blank:]]*'''\\|\"\"\"\\\\?[^\"]*[[:blank:]]*\"\"\"\\)[[:blank:]]*$"
(looking-back "^[[:blank:]]+[BUbu]?[Rr]?\\('''\\\\?[^']*[[:blank:]]*'''\\|\"\"\"\\\\?[^\"]*[[:blank:]]*\"\"\"\\)[[:blank:]]*$")
grep-command
"grep -nH -e "
grep-find-command
("find . -type f -exec grep -nH -e  {} +" . 34)

(setq-default grep-find-command "find . -type f '!' -wholename '*/.svn/*' -print0 | xargs -0 -e grep -nH -e ")
"find . -type f '!' -wholename '*/.svn/*' -print0 | xargs -0 -e grep -nH -e "
(py:go-writable-point-in-def)

(re-search-backward "\\(\\[\\|\\]\\)" nil 'noerror)
(setq left-re "\\[")
(setq right-re "\\]")

(macroexpand `(rx (or (regexp ,left-re) (regexp ,right-re))))
"\\[\\|\\]"

"\\(?:\\\\[][]\\)"

"\\(\\(?:\\\\[][]\\)\\)"
(py:region-beginning-of-brackets--internal "\\[" "\\]")
(re-search-forward "\\(\\[\\|\\]\\)" nil 'noerror)
(py:region-end-of-brackets--internal "\\[" "\\]")
(py:narrow-square-brackets)

(defun py:beginning-block-start-forward (n)
  "N"
  (interactive "p")
  (py:beginning-forward--internal n py:block-start-re))

(defun py:beginning-block-start-next (n)
  "N"
  (interactive "p")
  (py:beginning-block-start-forward n))

(defun py:beginning-block-start-prev (n)
  "N"
  (interactive "p")
  (py:beginning-block-start-forward (- n)))
(py:beginning-block-start-forward -1)

(py:go-writable-point-in-def nil t)

py:def-name-re
"\\_<def[[:space:]]+\\(\\(?:[[:word:]]\\|_\\)+\\)"
py:doc-re
"\\(^[BUbu]?[Rr]?'''\\\\?[^']*'''\\|^[BUbu]?[Rr]?\"\"\"\\\\?[^\"]*\"\"\"\\|^[[:blank:]]+[BUbu]?[Rr]?\\('''\\\\?[^']*[[:blank:]]*'''\\)[[:blank:]]*$\\|^[[:blank:]]+[BUbu]?[Rr]?\\(\"\"\"\\\\?[^\"]*[[:blank:]]*\"\"\"\\)[[:blank:]]*$\\)"
py:doc-class|def-re
"^[[:blank:]]+[BUbu]?[Rr]?\\('''\\\\?[^']*[[:blank:]]*'''\\|\"\"\"\\\\?[^\"]*[[:blank:]]*\"\"\"\\)[[:blank:]]*$"

(defconst py:def-param-start-re (rx symbol-start "def" (1+ space) (1+ (or word ?_)) (* blank) ?()))
py:def-param-start-re
"\\_<def[[:space:]]+\\(?:[[:word:]]\\|_\\)+[[:blank:]]*("

"\\_<def[[:space:]]+\\(?:[[:word:]]\\|_\\)+[[:blank:]]*("
(rx symbol-start "def" (1+ space) (1+ (or word ?_)) (* blank) ?())
"\\_<def[[:space:]]+\\(?:[[:word:]]\\|_\\)+[[:blank:]]*("
(rx symbol-start "def" (1+ space) (1+ (or word ?_)) (* blank) ?\()
"\\_<def[[:space:]]+\\(?:[[:word:]]\\|_\\)+[[:blank:]]*("
(py:go-def-end-parameter)
(py:go-def-parameter)
(py:region-round-brackets)
(py:end-of-round-brackets)
(py:region-square-brackets)
(py:in-round-brackets-p)
(py:narrow-round-brackets)

(rx (or (regexp ,left-re) (regexp ,right-re)))


(py:go-writable-point-in-def)

py:doc-class|def-re
"^[[:blank:]]+[BUbu]?[Rr]?\\('''\\\\?[^']*[[:blank:]]*'''\\|\"\"\"\\\\?[^\"]*[[:blank:]]*\"\"\"\\)[[:blank:]]*$"

(py:has-def-doc-p)
(defun py:has-def-doc-p (&optional names)
  ""
  (save-excursion
    (save-restriction
      (widen)
      (when (py:narrow-def names)
        (goto-char (point-min))
        (if (re-search-forward py:doc-class|def-re nil 'noerror)
            t nil)))))

(py:go-beginning-def-doc)

(py:go-end-def-doc)

(defun py:go-end-def-doc (&optional names)
  "NAMES"
  (let ((region (py:region-doc--def)))
    (when (not (eq region nil))
      (goto-char (cdr region)))))
(py:region-round-brackets)
(py:narrow-doc-def)
(py:end-of-round-brackets)
(py:beginning-of-round-brackets)
(py:beginning-of-square-brackets)
(py:end-of-pair-brackets--internal "\\[" "\\]")
(py:beg|end-of-pair-brackets--internal "\\[" "\\]" 'beg)
(py:end-of-square-brackets)
(py:end-of-curly-brackets)
(py:end-of-round-brackets)
(py:beginning-of-square-brackets)
(py:beginning-of-curly-brackets)
(py:in-round-brackets-p)
(py:region-round-brackets)

(py:go-def-parameter)
(py:region-def-parameter)
(defun py:region-def-parameter ()
  ""
  (save-excursion 
    (save-restriction
      (widen)
      (let ((start (py:go-def-parameter))
            (end (py:end-of-round-brackets)))
        (and start end (cons start end))))))

py:def-param-start-re
"\\_<def[[:space:]]+\\(?:[[:word:]]\\|_\\)+[[:blank:]]*("

(py:go-end-class-doc)
(py:go-class-parameter)


py:import-line-re
"^[[:blank:]]*\\_<\\(\\(?:from\\|import\\)\\)\\_>.*"
(py:beginning-import-statement)

(defun py:beginning-import-statement (&optional bound)
  ""
  (save-restriction
    (widen)
    (narrow-to-region (py:beginning-writable-point) (or (py:go-first-class|def)
                                                        (point-max)))
    (goto-char (point-min))
    (let ((bound (or bound (save-excursion (forward-line 100) (point))))
          start)
      (while (and (setq start (re-search-forward py:import-line-re bound 'noerror))
                  (py:at-string|comment-p)))
      (if (not (eq start nil))
          (goto-char (match-beginning 0))
        ;; no exists import statement
        (or (and (py:end-of-filedoc) (forward-line 1) (point)) 
            (and (py:beginning-class|def-forward 1)
                 (skip-chars-backward " \t\n") (forward-line 1) (point))
            (goto-char (point-min)))))))

py:shebang-re
"#![[:blank:]]?\\([^	
 ]+\\)[[:blank:]]*\\([bijpt]+ython[^	
 ]*\\)"

(py:beginning-writable-point)
(defun py:beginning-writable-point ()
  ""
  (goto-char (point-min))
  (while (or (looking-at py:shebang-re)
             (looking-at py:encoding-string-re))
    (forward-line 1))
  (point))

(skip-chars-backward " \t\n")

(py:beginning-class|def-forward 1)

(defun py:go-end-class-doc (&optional names)
  "NAMES"
  (let ((region (py:region-doc--class)))
    (when (not (eq region nil))
      (goto-char (cdr region)))))

(py:beginning-class|def-forward 1)
(py:go-first-class|def)
(forward-line 1)

(forward-line 100)

py:filedoc-re
"\\(^[BUbu]?[Rr]?'''\\\\?[^']*'''\\|^[BUbu]?[Rr]?\"\"\"\\\\?[^\"]*\"\"\"\\)"

(py:region-filedoc)

py:filedoc-re
"^[BUbu]?[Rr]?'''\\\\?[^']*'''\\|^[BUbu]?[Rr]?\"\"\"\\\\?[^\"]*\"\"\""

(defun py:go-first-class|def ()
  ""
  (let ((orig (point)))
    (goto-char (point-min))
    (if (re-search-forward py:class|def-re nil 'noerror)
        (goto-char (match-beginning 0))
      (goto-char orig))))
(py:go-first-class|def)


(py:in-class|def--predicate)
(py:beginning-next/prev--internal py:try-block-re)
(py:beginning-forward--internal 1 py:try-re)
py:try-block-re
"[[:blank:]]*\\_<try\\_>[	
 :]"
py-try-re
"[[:blank:]]*\\_<\\(try\\)\\_>[	
 :]"
(py:in-class|def--predicate #'py:beginning-try-forward)
(py:in-try-p)
(py:in-try-with-tail-p)
(next-line)
(line-move-to-column 30)

(py:end-try-block 'with-tail)
(defun py:end-try-block (&optional with-tail)
  ""
  (when (looking-at py:try-re)
    (let ((orig-column (current-column))
          done)
      ;; line move out of try block
      (while (and (not done)
                  (not (eobp)))
        (forward-line 1)
        (line-move-to-column orig-column)
        (and (eq orig-column (current-column))
             (not (or (looking-at "#") (py:at-string|comment-p)))
             (not (looking-at py:try-clause-re))
             (not (looking-at "[ \t]"))
             (setq done t)))
      (beginning-of-line)
      (while (or (not (eq (skip-chars-backward " \t\n") 0))
                 ;skip backward str or comment and calc point
                 (not (eq (let ((orig (point)))
                            (py:skip-back-string|comment)
                            (- (point) orig)) 0))))
      (when with-tail
        (forward-line 1)
        (while (and (not (eobp))
                    (blank-line-p)
                    (forward-line 1))))
      (point)
      )))

(py:region-try-block)

(py:beginning-try-forward -1)
()
(defun py:region-try-block (&optional with-tail)
  "WITH-TAIL"
  (save-excursion
    (save-restriction
      (widen)
      (let ((start (py:beginning-try-forward -1))
            (end (py:end-try-block with-tail)))
        (and start end (cons start end))))))
(py:in-try-block-p)
(defun py:in-try-block-p (&optional with-tail)
  "WITH-TAIL"
  (save-excursion
    (save-restriction
      (widen)
      (let ((orig (point))
            (region (progn (end-of-line) ;skip block word
                           (py:region-try-block with-tail))))
        (ignore-errors
          (and (< (car region) orig)
               (< orig (cdr region))))))))


(setq tes (progn (forward-line 100) (point)))
(setq tes2 (py:beginning-class|def-forward 1))
(min tes tes2)
1493

8531
tes
8531
(py:end-import-statement)
(py:beginning-import-statement)
(py:end-import-statement)
(py:region-imports)
(py:end-import-statement)
(py:narrow-imports)
(py:narrow-try-block)
(py:narrow-def)
(py:go-writable-point-in-def)

py:class-param-start-re
"\\_<class[[:space:]]+\\(?:[[:word:]]\\|_\\)+[[:blank:]]*("
(py:end-try-block)
(py:region-try)

(defun py:narrow-if ()
  ""
  )

(defun py:narrow-if-block ()
  ""
  )

(defun py:narrow-else ()
  ""
  )

(defun py:narrow-elif ()
  ""
  )

(defun py:narrow-except ()
  ""
  )

(defun py:narrow-finally ()
  ""
  )

** Mon 14 Oct 2013 08:09:40 AM JST
(py:move-up-method)
(require '__python__ nil 'noerror)

(py:region--internal py:def-re 'indent 'with-tail)
(py:narrow-to-class)

(py:from-beg-to-end-block--internal nil)
(and t (skip-chars-backward " \t")
     (looking-at "^") (forward-char -1))
(py:move-down-method)
(narrow-to-region 39744 40104)


(skip-chars-forward " \t")
(setq pstart (point))
(while (not (eobp))
  (re-search-forward "," nil 'noerror)
  (when (not (or (py:in-brackets-p)
                 (py:at-string|comment-p)))
    (setq param-list (append (list (buffer-substring
                                    pstart (save-excursion
                                             (forward-char -1)
                                             (point)))) param-list))
    ;; for next
    (skip-chars-forward " \t")
    (setq pstart (point))
    ))


(setq tes nil)
nil
(setq tes (append (list "world") tes))
("world" "hello" "hello" "hello" "hello")

("hello" "hello" "hello" "hello")

("hello" "hello" "hello")

("hello" "hello")

("hello")

("hello")

(104 101 108 108 111)



(setq param (buffer-substring start end))
(setq start (goto-char (point-min))
      end (goto-char (point-max)))

param
#("host=host, ip=ip, user=user,
                                    listen_port=listen_port, mac=mac,
                                    kagi=kagi, kagiMD5=kagiMD5,
                                    crypted_disk=crypted_disk,
                                    decrypted_disk_name=decrypted_disk_name,
                                    verbose=self._verbose" 0 226 (fontified t) 226 347 (fontified t) 347 351 (fontified t face font-lock-keyword-face) 351 360 (fontified t))


(setq tes (py:list-parameter 39743 40216))
tes
(#("
                                    verbose=self._verbo" 0 45 (fontified t) 45 49 (fontified t face font-lock-keyword-face) 49 56 (fontified t)) #("
                                    decrypted_disk_name=decrypted_disk_name" 0 1 (fontified t) 1 76 (fontified t)) #("
                                    crypted_disk=crypted_disk" 0 62 (fontified t)) #("kagiMD5=kagiMD5" 0 15 (fontified t)) #("
                                    kagi=kagi" 0 46 (fontified t)) #("mac=mac" 0 7 (fontified t)) #("
                                    listen_port=listen_port" 0 60 (fontified t)) #("user=user" 0 9 (fontified t)) #("ip=ip" 0 5 (fontified t)) #("host=host" 0 9 (fontified t)))
(list tes)
((#("
                                    verbose=self._verbo" 0 45 (fontified t) 45 49 (fontified t face font-lock-keyword-face) 49 56 (fontified t)) #("
                                    decrypted_disk_name=decrypted_disk_name" 0 1 (fontified t) 1 76 (fontified t)) #("
                                    crypted_disk=crypted_disk" 0 62 (fontified t)) #("kagiMD5=kagiMD5" 0 15 (fontified t)) #("
                                    kagi=kagi" 0 46 (fontified t)) #("mac=mac" 0 7 (fontified t)) #("
                                    listen_port=listen_port" 0 60 (fontified t)) #("user=user" 0 9 (fontified t)) #("ip=ip" 0 5 (fontified t)) #("host=host" 0 9 (fontified t))))


tes
(#("verbose=self._verbo" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 19 (fontified t)) #("decrypted_disk_name=decrypted_disk_name" 0 39 (fontified t)) #("crypted_disk=crypted_disk" 0 25 (fontified t)) #("kagiMD5=kagiMD5" 0 15 (fontified t)) #("kagi=kagi" 0 9 (fontified t)) #("mac=mac" 0 7 (fontified t)) #("listen_port=listen_port" 0 23 (fontified t)) #("user=user" 0 9 (fontified t)) #("ip=ip" 0 5 (fontified t)) #("host=host" 0 9 (fontified t)))
(car tes)
#("verbose=self._verbo" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 19 (fontified t))
(insert (car tes))
host=hostnil

verbose=self._verbonil
(insert (mapconcat 'identity tes ", "))
host=host, ip=ip, user=user, listen_port=listen_port, mac=mac, kagi=kagi, kagiMD5=kagiMD5, crypted_disk=crypted_disk, decrypted_disk_name=decrypted_disk_name, verbose=self._verbose, hello = "world", yahoo = googlenil

host=host, ip=ip, user=user, listen_port=listen_port, mac=mac, kagi=kagi, kagiMD5=kagiMD5, crypted_disk=crypted_disk, decrypted_disk_name=decrypted_disk_name, verbose=self._verbonil



verbose=self._verbo, decrypted_disk_name=decrypted_disk_name, crypted_disk=crypted_disk, kagiMD5=kagiMD5, kagi=kagi, mac=mac, listen_port=listen_port, user=user, ip=ip, host=hostnil

#("verbose=self._verbo, decrypted_disk_name=decrypted_disk_name, crypted_disk=crypted_disk, kagiMD5=kagiMD5, kagi=kagi, mac=mac, listen_port=listen_port, user=user, ip=ip, host=host" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 19 (fontified t) 21 60 (fontified t) 62 87 (fontified t) 89 104 (fontified t) 106 115 (fontified t) 117 124 (fontified t) 126 149 (fontified t) 151 160 (fontified t) 162 167 (fontified t) 169 178 (fontified t))


tes
(#("host=host" 0 9 (fontified t)) #("ip=ip" 0 5 (fontified t)) #("user=user" 0 9 (fontified t)) #("listen_port=listen_port" 0 23 (fontified t)) #("mac=mac" 0 7 (fontified t)) #("kagi=kagi" 0 9 (fontified t)) #("kagiMD5=kagiMD5" 0 15 (fontified t)) #("crypted_disk=crypted_disk" 0 25 (fontified t)) #("decrypted_disk_name=decrypted_disk_name" 0 39 (fontified t)) #("verbose=self._verbose" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello = \"world\"" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t syntax-table (15) face font-lock-string-face) 9 14 (fontified t face font-lock-string-face) 14 15 (fontified t syntax-table (15) face font-lock-string-face)) #("yahoo = google" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 14 (fontified t)))

(insert (mapconcat 'identity tes ", "))
host=host, ip=ip, user=user, listen_port=listen_port, mac=mac, kagi=kagi, kagiMD5=kagiMD5, crypted_disk=crypted_disk, decrypted_disk_name=decrypted_disk_name, verbose=self._verbose, hello = "world", yahoo = google()nil
(identity "hello")
"hello"
(defun test (arg)
  "ARG"
  (if (string= arg "kagi=kagi")
      arg nil))
(insert (mapconcat 'test tes ", "))
(mapcar 'test tes)
(nil nil nil nil nil #("kagi=kagi" 0 9 (fontified t)) nil nil nil nil nil nil)
(string-match "=kagi" "kagi=kagi")
(re-in-string substring)
4
(lambda (x) (replace-regexp-in-string "[[:blank:]]*=[[:blank:]]*" "=" x))

(mapcar (lambda (x) (replace-regexp-in-string "[[:blank:]]*=[[:blank:]]*" "=" x)) tes)

tes
(#("host=host" 0 9 (fontified t)) #("ip=ip" 0 5 (fontified t)) #("user=user" 0 9 (fontified t)) #("listen_port=listen_port" 0 23 (fontified t)) #("mac=\"mac\"" 0 4 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 9 (fontified t)) #("kagiMD5=kagiMD5" 0 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 13 (fontified t) 13 14 (syntax-table (15) fontified t face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (syntax-table (15) fontified t face font-lock-string-face)) #("decrypted_disk_name=decrypted_disk_name" 0 39 (fontified t)) #("verbose=self._verbose" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello = \"world\"" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (syntax-table (15) fontified t face font-lock-string-face) 9 14 (fontified t face font-lock-string-face) 14 15 (syntax-table (15) fontified t face font-lock-string-face)) #("yahoo = google()" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 14 (fontified t) 14 16 (fontified t)))

(get-text-property 5 'font-lock-keyword-face (car (cdr (cdr (cdr (cdr tes))))))
nil
(plist-get (car (cdr (cdr (cdr tes)))) :font-lock-keyword-face)
nil
(list :backend 'obby                            
      :host "foo"                               
      :port 6522                                
      :username "username"                      
      :color "blue"                             
      :global-password ""                       
      :user-password ""                         )
(:backend obby :host "foo" :port 6522 :username "username" :color "blue" :global-password "" ...)
(text-property-any 0 2 'face (car tes))
(plist-get (car tes) 'face)
nil

nil


      
nil

nil



nil
()
(car (car tes))



(#("host=host" 0 4 (fontified t) 5 9 (fontified t)) #("ip=ip" 0 2 (fontified t) 3 5 (fontified t)) #("user=user" 0 4 (fontified t) 5 9 (fontified t)) #("listen_port=listen_port" 0 11 (fontified t) 12 23 (fontified t)) #("mac=mac" 0 3 (fontified t) 4 7 (fontified t)) #("kagi=kagi" 0 4 (fontified t) 5 9 (fontified t)) #("kagiMD5=kagiMD5" 0 7 (fontified t) 8 15 (fontified t)) #("crypted_disk=crypted_disk" 0 12 (fontified t) 13 25 (fontified t)) #("decrypted_disk_name=decrypted_disk_name" 0 19 (fontified t) 20 39 (fontified t)) #("verbose=self._verbose" 0 7 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello=\"world\"" 0 5 (fontified t) 6 7 (fontified t syntax-table (15) face font-lock-string-face) 7 12 (fontified t face font-lock-string-face) 12 13 (fontified t syntax-table (15) face font-lock-string-face)) #("yahoo=google()" 0 5 (fontified t) 6 12 (fontified t) 12 14 (fontified t)))

(setq mac (car (cdr (cdr (cdr (cdr tes))))))
#("mac=\"mac\"" 0 4 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face))

#("mac=\"mac\"" 0 4 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face))

#("listen_port=listen_port" 0 23 (fontified t))

#("user=user" 0 9 (fontified t))

"kagi"

"kagi=kagi"

0

, , , , , kagi=kagi, , , , , , nil

, , , , , kagi=kagi, , , , , , nil
(buffer-substring )

(text-properties)
(face font-lock-string-face fontified t)

(fontified t)

(defun py:refact-param-text-= (text)
  "X"
  (lexical-let ((regexp "[[:blank:]]*=[[:blank:]]*")
        (replace "=")
        matched-num)
    (setq matched-num (string-match regexp text))
    (when (and matched-num
              (eq (get-text-property (+ matched-num 1) text) 'font-lock-string)))
    (replace-regexp-in-string regexp replace text)))

(setq regexp-tes "[[:blank:]]*=[[:blank:]]*")
(setq replace-tes "=")
(defun py:refact-param-text-=2 (text)
  "X"
  (let (matched-num)
    (setq matched-num (string-match regexp-tes text))
    (when (and matched-num
               (eq (get-text-property (+ matched-num 1) text) 'font-lock-string)))
    (replace-regexp-in-string regexp-tes replace-tes text)))
(byte-compile 'refact-param-text-=)
(byte-compile 'py:refact-param-text-=2)
#[(text) "\304\305	
\"\211\203 \306T
\"\210\307	
#)\207" [matched-num regexp-tes text replace-tes nil string-match get-text-property replace-regexp-in-string] 5 "X"]

#[(text) "\304\305\306\307
\"\211\203 \310T\"\210\311
	#+\207" [matched-num replace regexp text "[[:blank:]]*=[[:blank:]]*" "=" nil string-match get-text-property replace-regexp-in-string] 5 "X"]
(benchmark-run 100 (mapcar 'refact-param-text-= tes))
(0.021885665000000002 0 0.0)
(0.021968394000000002 0 0.0)
(0.021403059 0 0.0)
(0.258698853 1 0.23599961499999722)
(0.022132325999999997 0 0.0)
(0.260981189 1 0.23701168099999848)
(0.028959565 0 0.0)
(0.003014612 0 0.0)
(0.000413111 0 0.0)
(benchmark-run 100 (mapcar 'py:refact-param-text-=2 tes))
(0.021500039 0 0.0)
(0.257247184 1 0.23420852699999983)
(0.023641513 0 0.0)
(0.021828196 0 0.0)
(0.021305484 0 0.0)
(0.028842126000000003 0 0.0)
(0.003010295 0 0.0)
(0.000367391 0 0.0)



(mapconcat 'identity (mapcar 'refact-param-text-= tes) ", ")
#("host=host, ip=ip, user=user, listen_port=listen_port, mac=\"mac\", kagi=kagi, kagiMD5=kagiMD5, crypted_disk='crypted_disk', decrypted_disk_name=decrypted_disk_name, verbose=self._verbose, hello=\"world\", yahoo=google()" 0 4 (fontified t) 5 9 (fontified t) 11 13 (fontified t) 14 16 (fontified t) 18 22 (fontified t) 23 27 (fontified t) 29 40 (fontified t) 41 52 (fontified t) 54 57 (fontified t) 58 59 (face font-lock-string-face syntax-table (15) fontified t) 59 62 (face font-lock-string-face fontified t) 62 63 (face font-lock-string-face syntax-table (15) fontified t) 65 69 (fontified t) 70 74 (fontified t) 76 83 (fontified t) 84 91 (fontified t) 93 105 (fontified t) 106 107 (face font-lock-string-face fontified t syntax-table (15)) 107 119 (face font-lock-string-face fontified t) 119 120 (face font-lock-string-face fontified t syntax-table (15)) 122 141 (fontified t) 142 161 (fontified t) 163 170 (fontified t) 171 175 (face font-lock-keyword-face fontified t) 175 184 (fontified t) 186 191 (fontified t) 192 193 (face font-lock-string-face fontified t syntax-table (15)) 193 198 (face font-lock-string-face fontified t) 198 199 (face font-lock-string-face fontified t syntax-table (15)) 201 206 (fontified t) 207 213 (fontified t) 213 215 (fontified t))


(#("host=host" 0 4 (fontified t) 5 9 (fontified t)) #("ip=ip" 0 2 (fontified t) 3 5 (fontified t)) #("user=user" 0 4 (fontified t) 5 9 (fontified t)) #("listen_port=listen_port" 0 11 (fontified t) 12 23 (fontified t)) #("mac=\"mac\"" 0 3 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 4 (fontified t) 5 9 (fontified t)) #("kagiMD5=kagiMD5" 0 7 (fontified t) 8 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 12 (fontified t) 13 14 (syntax-table (15) fontified t face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (syntax-table (15) fontified t face font-lock-string-face)) #("decrypted_disk_name=decrypted_disk_name" 0 19 (fontified t) 20 39 (fontified t)) #("verbose=self._verbose" 0 7 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello=\"world\"" 0 5 (fontified t) 6 7 (syntax-table (15) fontified t face font-lock-string-face) 7 12 (fontified t face font-lock-string-face) 12 13 (syntax-table (15) fontified t face font-lock-string-face)) #("yahoo=google()" 0 5 (fontified t) 6 12 (fontified t) 12 14 (fontified t)))


(prop-list hello)
#("hello=\"world\"" 0 5 (fontified t) 6 7 (syntax-table (15) fontified t face font-lock-string-face) 7 12 (fontified t face font-lock-string-face) 12 13 (syntax-table (15) fontified t face font-lock-string-face))

(setq mac (car (cdr (cdr (cdr (cdr tes))))))
(setq hello (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr tes))))))))))))
#("hello = \"world\"" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (syntax-table (15) fontified t face font-lock-string-face) 9 14 (fontified t face font-lock-string-face) 14 15 (syntax-table (15) fontified t face font-lock-string-face))

#("hello = \"world\"" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (syntax-table (15) fontified t face font-lock-string-face) 9 14 (fontified t face font-lock-string-face) 14 15 (syntax-table (15) fontified t face font-lock-string-face))

#("verbose=self._verbose" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t))

#("decrypted_disk_name=decrypted_disk_name" 0 39 (fontified t))

#("crypted_disk='crypted_disk'" 0 13 (fontified t) 13 14 (syntax-table (15) fontified t face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (syntax-table (15) fontified t face font-lock-string-face))

#("kagiMD5=kagiMD5" 0 15 (fontified t))

#("kagi=kagi" 0 9 (fontified t))

#("mac=\"mac\"" 0 4 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face))

#("mac=\"mac\"" 0 3 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face))

;; (mapcar (lambda (x) (replace-regexp-in-string regexp replace x)) tes)
;; (text-properties-at 5 mac)        
(string-match "[[:blank:]]*=[[:blank:]]*" mac)
3

(text-property-any 3 9 'face 'font-lock-string mac)
nil
(setq tes (py:list-parameter 39743 40345))
(get-text-property 10 'face mac)
tes
(#("yahoo" 0 5 (fontified t)) #("host=host" 0 9 (fontified t)) #("ip=ip" 0 5 (fontified t)) #("user=user" 0 9 (fontified t)) #("listen_port=listen_port" 0 23 (fontified t)) #("mac=\"mac\"" 0 4 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 9 (fontified t)) #("kagiMD5=kagiMD5" 0 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 13 (fontified t) 13 14 (fontified t syntax-table (15) face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (fontified t syntax-table (15) face font-lock-string-face)) #("ll" 0 2 (fontified t)) #("decrypted_disk_name=decrypted_disk_name" 0 39 (fontified t)) #("verbose=self._verbose" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello = \"world\"" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (syntax-table (15) fontified t face font-lock-string-face) 9 14 (fontified t face font-lock-string-face) 14 15 (syntax-table (15) fontified t face font-lock-string-face)) #("yahoo = google()" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 14 (fontified t) 14 16 (fontified t)) #("**args" 0 6 (fontified t)))

nil



font-lock-string-face
(length mac)
9

nil

font-lock-string-face

nil

4



(face font-lock-string-face fontified t)
        

(string-match "hello" "world")
nil
(nconc nil '("world"))
("world")

("hello" "world")
(setq tes (py:list-parameter 39744 40216))
tes
(#("host=host" 0 9 (fontified t)) #("ip=ip" 0 5 (fontified t)) #("user=user" 0 9 (fontified t)) #("listen_port=listen_port" 0 23 (fontified t)) #("mac=\"mac\"" 0 4 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 9 (fontified t)) #("kagiMD5=kagiMD5" 0 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 13 (fontified t) 13 14 (syntax-table (15) fontified t face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (syntax-table (15) fontified t face font-lock-string-face)) #("decrypted_disk_name=decrypted_disk_name" 0 39 (fontified t)) #("verbose=self._verbose" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello = \"world\"" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (syntax-table (15) fontified t face font-lock-string-face) 9 14 (fontified t face font-lock-string-face) 14 15 (syntax-table (15) fontified t face font-lock-string-face)) #("yahoo = google()" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 14 (fontified t) 14 16 (fontified t)))


(macroexpand-all '(append (list "") (list "hello")))
(append (list "") (list "hello"))

("" "hello")

(let ((regexp )))

(defun py:refact-param-sort (list)
  "LIST"
  (let (first second third fourth
              match-num)
    (dolist (txt list)
      (cond ((and (setq match-num (string-match "[[:blank:]]*=[[:blank:]]*" txt))
                  (not (eq (get-text-property (1+ match-num) txt)
                           'font-lock-string)))
             (setq second (nconc second (list txt))))
            ((string-match "^\\*\\*" txt)
             (setq fourth (nconc fourth (list txt))))
            ((string-match "^\\*" txt)
             (setq third (nconc third (list txt))))
            (t
             (setq first (nconc first (list txt))))))
    (nconc first second third fourth)))

(setq lll (nconc nil '("hello") nil '("world")))
("hello" "world")

("hello" "world")

(py:join-param-list lll)
#("yahoo, ll, host=host, ip=ip, user=user, listen_port=listen_port, mac=\"mac\", kagi=kagi, kagiMD5=kagiMD5, crypted_disk='crypted_disk', decrypted_disk_name=decrypted_disk_name, verbose=self._verbose, hello=\"world\", yahoo=google(), **args" 0 5 (fontified t) 7 9 (fontified t) 11 15 (fontified t) 16 20 (fontified t) 22 24 (fontified t) 25 27 (fontified t) 29 33 (fontified t) 34 38 (fontified t) 40 51 (fontified t) 52 63 (fontified t) 65 68 (fontified t) 69 70 (face font-lock-string-face syntax-table (15) fontified t) 70 73 (face font-lock-string-face fontified t) 73 74 (face font-lock-string-face syntax-table (15) fontified t) 76 80 (fontified t) 81 85 (fontified t) 87 94 (fontified t) 95 102 (fontified t) 104 116 (fontified t) 117 118 (face font-lock-string-face syntax-table (15) fontified t) 118 130 (face font-lock-string-face fontified t) 130 131 (face font-lock-string-face syntax-table (15) fontified t) 133 152 (fontified t) 153 172 (fontified t) 174 181 (fontified t) 182 186 (face font-lock-keyword-face fontified t) 186 195 (fontified t) 197 202 (fontified t) 203 204 (face font-lock-string-face fontified t syntax-table (15)) 204 209 (face font-lock-string-face fontified t) 209 210 (face font-lock-string-face fontified t syntax-table (15)) 212 217 (fontified t) 218 224 (fontified t) 224 226 (fontified t) 228 234 (fontified t))

#("host=host, ip=ip, user=user, listen_port=listen_port, mac=\"mac\", kagi=kagi, kagiMD5=kagiMD5, crypted_disk='crypted_disk', decrypted_disk_name=decrypted_disk_name, verbose=self._verbose, hello=\"world\", yahoo=google()" 0 4 (fontified t) 5 9 (fontified t) 11 13 (fontified t) 14 16 (fontified t) 18 22 (fontified t) 23 27 (fontified t) 29 40 (fontified t) 41 52 (fontified t) 54 57 (fontified t) 58 59 (face font-lock-string-face syntax-table (15) fontified t) 59 62 (face font-lock-string-face fontified t) 62 63 (face font-lock-string-face syntax-table (15) fontified t) 65 69 (fontified t) 70 74 (fontified t) 76 83 (fontified t) 84 91 (fontified t) 93 105 (fontified t) 106 107 (face font-lock-string-face fontified t syntax-table (15)) 107 119 (face font-lock-string-face fontified t) 119 120 (face font-lock-string-face fontified t syntax-table (15)) 122 141 (fontified t) 142 161 (fontified t) 163 170 (fontified t) 171 175 (face font-lock-keyword-face fontified t) 175 184 (fontified t) 186 191 (fontified t) 192 193 (face font-lock-string-face fontified t syntax-table (15)) 193 198 (face font-lock-string-face fontified t) 198 199 (face font-lock-string-face fontified t syntax-table (15)) 201 206 (fontified t) 207 213 (fontified t) 213 215 (fontified t))



(setq lll (py:refact-param-sort (mapcar 'refact-param-text-= tes)))
(#("yahoo" 0 5 (fontified t)) #("ll" 0 2 (fontified t)) #("host=host" 0 4 (fontified t) 5 9 (fontified t)) #("ip=ip" 0 2 (fontified t) 3 5 (fontified t)) #("user=user" 0 4 (fontified t) 5 9 (fontified t)) #("listen_port=listen_port" 0 11 (fontified t) 12 23 (fontified t)) #("mac=\"mac\"" 0 3 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 4 (fontified t) 5 9 (fontified t)) #("kagiMD5=kagiMD5" 0 7 (fontified t) 8 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 12 (fontified t) 13 14 (fontified t syntax-table (15) face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (fontified t syntax-table (15) face font-lock-string-face)) #("decrypted_disk_name=decrypted_disk_name" 0 19 (fontified t) 20 39 (fontified t)) #("verbose=self._verbose" 0 7 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello=\"world\"" 0 5 (fontified t) 6 7 (syntax-table (15) fontified t face font-lock-string-face) 7 12 (fontified t face font-lock-string-face) 12 13 (syntax-table (15) fontified t face font-lock-string-face)) #("yahoo=google()" 0 5 (fontified t) 6 12 (fontified t) 12 14 (fontified t)) #("**args" 0 6 (fontified t)))




(#("host=host" 0 4 (fontified t) 5 9 (fontified t)) #("ip=ip" 0 2 (fontified t) 3 5 (fontified t)) #("user=user" 0 4 (fontified t) 5 9 (fontified t)) #("listen_port=listen_port" 0 11 (fontified t) 12 23 (fontified t)) #("mac=\"mac\"" 0 3 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 4 (fontified t) 5 9 (fontified t)) #("kagiMD5=kagiMD5" 0 7 (fontified t) 8 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 12 (fontified t) 13 14 (syntax-table (15) fontified t face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (syntax-table (15) fontified t face font-lock-string-face)) #("decrypted_disk_name=decrypted_disk_name" 0 19 (fontified t) 20 39 (fontified t)) #("verbose=self._verbose" 0 7 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello=\"world\"" 0 5 (fontified t) 6 7 (syntax-table (15) fontified t face font-lock-string-face) 7 12 (fontified t face font-lock-string-face) 12 13 (syntax-table (15) fontified t face font-lock-string-face)) #("yahoo=google()" 0 5 (fontified t) 6 12 (fontified t) 12 14 (fontified t)))
lll
(#("host=host" 0 4 (fontified t) 5 9 (fontified t)) #("ip=ip" 0 2 (fontified t) 3 5 (fontified t)) #("user=user" 0 4 (fontified t) 5 9 (fontified t)) #("listen_port=listen_port" 0 11 (fontified t) 12 23 (fontified t)) #("mac=\"mac\"" 0 3 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 4 (fontified t) 5 9 (fontified t)) #("kagiMD5=kagiMD5" 0 7 (fontified t) 8 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 12 (fontified t) 13 14 (syntax-table (15) fontified t face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (syntax-table (15) fontified t face font-lock-string-face)) #("decrypted_disk_name=decrypted_disk_name" 0 19 (fontified t) 20 39 (fontified t)) #("verbose=self._verbose" 0 7 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello=\"world\"" 0 5 (fontified t) 6 7 (syntax-table (15) fontified t face font-lock-string-face) 7 12 (fontified t face font-lock-string-face) 12 13 (syntax-table (15) fontified t face font-lock-string-face)) #("yahoo=google()" 0 5 (fontified t) 6 12 (fontified t) 12 14 (fontified t)))

(#("host=host" 0 4 (fontified t) 5 9 (fontified t)) #("ip=ip" 0 2 (fontified t) 3 5 (fontified t)) #("user=user" 0 4 (fontified t) 5 9 (fontified t)) #("listen_port=listen_port" 0 11 (fontified t) 12 23 (fontified t)) #("mac=\"mac\"" 0 3 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 4 (fontified t) 5 9 (fontified t)) #("kagiMD5=kagiMD5" 0 7 (fontified t) 8 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 12 (fontified t) 13 14 (syntax-table (15) fontified t face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (syntax-table (15) fontified t face font-lock-string-face)) #("decrypted_disk_name=decrypted_disk_name" 0 19 (fontified t) 20 39 (fontified t)) #("verbose=self._verbose" 0 7 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello=\"world\"" 0 5 (fontified t) 6 7 (syntax-table (15) fontified t face font-lock-string-face) 7 12 (fontified t face font-lock-string-face) 12 13 (syntax-table (15) fontified t face font-lock-string-face)) #("yahoo=google()" 0 5 (fontified t) 6 12 (fontified t) 12 14 (fontified t)))
(setq p (point))27847

27848

(setq pp (1- p))
27847
(goto-char pp)

27847
(py:refact-param)
(string- )
(py:refact-param)
(string-match "^\\*\\*" "**args")
0
(py:refact-param (list "name" "yahoo"))
nil
(py:list-parameter)
(py:refact-param)
0diretcory:

0

0

0

0
(py:join '("hello" "world") ", ")
"hello, world"


(defun test ()
  ""
  (defun hello ()
    ""
    (message "hello"))
  (hello)
  )
(test)
"hello"
tes
(#("yahoo" 0 5 (fontified t)) #("host=host" 0 9 (fontified t)) #("ip=ip" 0 5 (fontified t)) #("user=user" 0 9 (fontified t)) #("listen_port=listen_port" 0 23 (fontified t)) #("mac=\"mac\"" 0 4 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 9 (fontified t)) #("kagiMD5=kagiMD5" 0 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 13 (fontified t) 13 14 (fontified t syntax-table (15) face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (fontified t syntax-table (15) face font-lock-string-face)) #("ll" 0 2 (fontified t)) #("decrypted_disk_name=decrypted_disk_name" 0 39 (fontified t)) #("verbose=self._verbose" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello = \"world\"" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (syntax-table (15) fontified t face font-lock-string-face) 9 14 (fontified t face font-lock-string-face) 14 15 (syntax-table (15) fontified t face font-lock-string-face)) #("yahoo = google()" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 14 (fontified t) 14 16 (fontified t)) #("**args" 0 6 (fontified t)))


(py:refact-param--= tes)
(#("yahoo" 0 5 (fontified t)) #("host=host" 0 4 (fontified t) 5 9 (fontified t)) #("ip=ip" 0 2 (fontified t) 3 5 (fontified t)) #("user=user" 0 4 (fontified t) 5 9 (fontified t)) #("listen_port=listen_port" 0 11 (fontified t) 12 23 (fontified t)) #("mac=\"mac\"" 0 3 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 4 (fontified t) 5 9 (fontified t)) #("kagiMD5=kagiMD5" 0 7 (fontified t) 8 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 12 (fontified t) 13 14 (fontified t syntax-table (15) face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (fontified t syntax-table (15) face font-lock-string-face)) #("ll" 0 2 (fontified t)) #("decrypted_disk_name=decrypted_disk_name" 0 19 (fontified t) 20 39 (fontified t)) #("verbose=self._verbose" 0 7 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello=\"world\"" 0 5 (fontified t) 6 7 (syntax-table (15) fontified t face font-lock-string-face) 7 12 (fontified t face font-lock-string-face) 12 13 (syntax-table (15) fontified t face font-lock-string-face)) #("yahoo=google()" 0 5 (fontified t) 6 12 (fontified t) 12 14 (fontified t)) #("**args" 0 6 (fontified t)))

(#("yahoo" 0 5 (fontified t)) #("host=host" 0 9 (fontified t)) #("ip=ip" 0 5 (fontified t)) #("user=user" 0 9 (fontified t)) #("listen_port=listen_port" 0 23 (fontified t)) #("mac=\"mac\"" 0 4 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 9 (fontified t)) #("kagiMD5=kagiMD5" 0 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 13 (fontified t) 13 14 (fontified t syntax-table (15) face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (fontified t syntax-table (15) face font-lock-string-face)) #("ll" 0 2 (fontified t)) #("decrypted_disk_name=decrypted_disk_name" 0 39 (fontified t)) #("verbose=self._verbose" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello = \"world\"" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (syntax-table (15) fontified t face font-lock-string-face) 9 14 (fontified t face font-lock-string-face) 14 15 (syntax-table (15) fontified t face font-lock-string-face)) #("yahoo = google()" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 14 (fontified t) 14 16 (fontified t)) #("**args" 0 6 (fontified t)))

(#("yahoo" 0 5 (fontified t)) #("host=host" 0 9 (fontified t)) #("ip=ip" 0 5 (fontified t)) #("user=user" 0 9 (fontified t)) #("listen_port=listen_port" 0 23 (fontified t)) #("mac=\"mac\"" 0 4 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 9 (fontified t)) #("kagiMD5=kagiMD5" 0 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 13 (fontified t) 13 14 (fontified t syntax-table (15) face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (fontified t syntax-table (15) face font-lock-string-face)) #("ll" 0 2 (fontified t)) #("decrypted_disk_name=decrypted_disk_name" 0 39 (fontified t)) #("verbose=self._verbose" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello = \"world\"" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (syntax-table (15) fontified t face font-lock-string-face) 9 14 (fontified t face font-lock-string-face) 14 15 (syntax-table (15) fontified t face font-lock-string-face)) #("yahoo = google()" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 14 (fontified t) 14 16 (fontified t)) #("**args" 0 6 (fontified t)))

(#("yahoo" 0 5 (fontified t)) #("host=host" 0 9 (fontified t)) #("ip=ip" 0 5 (fontified t)) #("user=user" 0 9 (fontified t)) #("listen_port=listen_port" 0 23 (fontified t)) #("mac=\"mac\"" 0 4 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 9 (fontified t)) #("kagiMD5=kagiMD5" 0 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 13 (fontified t) 13 14 (fontified t syntax-table (15) face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (fontified t syntax-table (15) face font-lock-string-face)) #("ll" 0 2 (fontified t)) #("decrypted_disk_name=decrypted_disk_name" 0 39 (fontified t)) #("verbose=self._verbose" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello = \"world\"" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (syntax-table (15) fontified t face font-lock-string-face) 9 14 (fontified t face font-lock-string-face) 14 15 (syntax-table (15) fontified t face font-lock-string-face)) #("yahoo = google()" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 14 (fontified t) 14 16 (fontified t)) #("**args" 0 6 (fontified t)))

(#("yahoo" 0 5 (fontified t)) #("host=host" 0 9 (fontified t)) #("ip=ip" 0 5 (fontified t)) #("user=user" 0 9 (fontified t)) #("listen_port=listen_port" 0 23 (fontified t)) #("mac=\"mac\"" 0 4 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 9 (fontified t)) #("kagiMD5=kagiMD5" 0 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 13 (fontified t) 13 14 (fontified t syntax-table (15) face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (fontified t syntax-table (15) face font-lock-string-face)) #("ll" 0 2 (fontified t)) #("decrypted_disk_name=decrypted_disk_name" 0 39 (fontified t)) #("verbose=self._verbose" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) #("hello = \"world\"" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (syntax-table (15) fontified t face font-lock-string-face) 9 14 (fontified t face font-lock-string-face) 14 15 (syntax-table (15) fontified t face font-lock-string-face)) #("yahoo = google()" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 14 (fontified t) 14 16 (fontified t)) #("**args" 0 6 (fontified t)))
(setq helllo "hello")
(replace-regexp-in-string "hello" "world" helllo)
"world"
helllo
"hello"

(setq tess (let ((region (py:region-def-parameter)))
  (py:list-parameter (car region) (cdr region))
  ))

(py:region-parameter )

tes
(#("yahoo" 0 5 (fontified t)) #("host=host" 0 9 (fontified t)) #("ip=ip" 0 5 (fontified t)) #("user=user" 0 9 (fontified t)) #("listen_port=listen_port" 0 23 (fontified t)) #("mac=\"mac\"" 0 4 (fontified t) 4 5 (fontified t syntax-table (15) face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 9 (fontified t syntax-table (15) face font-lock-string-face)) #("kagi=kagi" 0 9 (fontified t)) #("kagiMD5=kagiMD5" 0 15 (fontified t)) #("crypted_disk='crypted_disk'" 0 13 (fontified t) 13 14 (fontified t syntax-table (15) face font-lock-string-face) 14 26 (fontified t face font-lock-string-face) 26 27 (fontified t syntax-table (15) face font-lock-string-face)) #("ll" 0 2 (fontified t)) #("decrypted_disk_name=decrypted_disk_name" 0 39 (fontified t)) #("verbose=self._verbose" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 21 (fontified t)) ...)
tess
(#("self" 0 4 (fontified t face font-lock-keyword-face)) #("force=False" 0 6 (fontified t) 6 11 (fontified t face font-lock-constant-face)))


(looking-back "\\_<[[:word:]]+\\_>[[:space:]]*(")
(re-search-forward "\\_<[[:word:]]+\\_>[[:space:]]*(" nil 'noerror)
"\\(?:\\_<[[:word:]]+\\_>\\|\\!import\\)[[:space:]]*("
























(define-usage-memo rope-show-doc "python" 0 "*rope-pydoc*" (lambda (arg) (goto-char (point-min))
                                                             (let ((text (buffer-substring (point) (save-excursion (end-of-line) (point)))))
                                                               (replace-in-string text " " "_"))))
jedi:show-doc
(lambda (arg) (goto-char (point-min))
  (let ((text (buffer-substring (point) (save-excursion (end-of-line) (point)))))
    (replace-in-string text " " "_")))

** Wed 16 Oct 2013 11:20:34 AM JST
def magic_dir(object)
    from pprint import pprint
get_ipython().define_magic('dirs', magic_dir)

"\\(+\\|=\\|-\\|*\\|&\\|%\\||\\|\\^\\|>>\\|<<\\|<\\|<=\\|>\\|>=\\|==\\|!=\\)"
(skip-chars-backward "[^(]")
(while (not (and (re-search-backward "\\(?:\\[\\|(\\)" nil 'noerror)
                 (not (py:at-string|comment-p)))))
(skip-re)
(require '__python__ nil 'noerror)
(line-end-position)
392

398
(py:refact-param)



# 元日                       New Year's Day
# 成人の日                   Coming-of-Age Day
# 建国記念の日               National Foundation Day
# 春分の日                   Vernal Equinox Day
# 昭和の日                   Showa Day
# 憲法記念日                 Constitution Memorial Day
# みどりの日                 Green [Greenery] Day
# 子供の日                   Children's Day
# 海の日                     Marine Day
# 敬老の日                   Respect-for-the-Aged Day
# 秋分の日                   Autumnal Equinox Day
# 体育の日                   (Health and) Sports Day
# 文化の日                   Culture Day
# 勤労感謝の日               Labor Thanksgiving Day
# 天皇誕生日                 Emperor's Birthday
# 国民の休日                 National Holiday
# 振替休日                   substitute holiday
# 皇太子明仁親王の結婚の儀   The Rite of Wedding of HIH Crown Prince Akihito
# 昭和天皇の大喪の礼         The Funeral Ceremony of Emperor Showa.
# 即位礼 正殿の儀
# The Ceremony of the Enthronement of His Majesty the Emperor (at the Seiden)
# 皇太子徳仁親王の結婚の儀   The Rite of Wedding of HIH Crown Prince Naruhito

































(e2wm:dp-doc)

(wlf:get-window (e2wm:pst-get-wm) 'main)


(string-match "\*w3m\*" "*w3m*")
0
(setq e2wm:debug t)
t

nil









(defun e2wm:book-code ()
  (interactive)
  (e2wm:pst-change 'book))


(defvar e2wm:book-recipe
  '(| (:left-max-size 20)
      (- (:upper-size-ratio 0.6)
         files history)
      (| (:right-max-size 65) left
         (- (:upper-size-ratio 0.67) right sub))))

(defvar e2wm:book-winfo
  '((:name files     :plugin files :plugin-args)
    (:name history   :plugin history-list :default-hide nil)
    (:name left)
    (:name right     :default-hide nil)
    (:name sub       :buffer "*info*" :default-hide nil))
  )

(e2wm:pst-class-register 
 (make-e2wm:$pst-class
  :name   'book
  :title  "Read books"
  :init   'e2wm:book-init
  :main   'left
  :switch 'e2wm:book-switch
  :popup  'e2wm:book-popup
  :keymap 'e2wm:dp-code-minor-mode-map))

(defun e2wm:book-init ()
  (let* 
      ((book-wm 
        (wlf:no-layout 
         e2wm:book-recipe
         e2wm:book-winfo))
       (buf (or prev-selected-buffer
                (e2wm:history-get-main-buffer))))

    (when (e2wm:history-recordable-p prev-selected-buffer)
      (e2wm:history-add prev-selected-buffer))
    
    (wlf:set-buffer book-wm 'left buf)
    book-wm))


(defun e2wm:book-switch (buf)
  (e2wm:message "#DP CODE switch : %s / %S" buf (e2wm:history-recordable-p buf))
  (let ((buf-name (buffer-name buf))
        (wm (e2wm:pst-get-wm)))
    (if (or (e2wm:history-recordable-p buf) (e2wm:book-buffer-p buf))
        (cond ((eq (selected-window) (wlf:get-window wm 'right))
               (e2wm:pst-buffer-set 'right buf)
               t)
              ((eql (get-buffer buf) (wlf:get-buffer wm 'left))
               (e2wm:pst-update-windows)
               (e2wm:pst-buffer-set 'left buf)
               t)
              (t (e2wm:pst-show-history-main)
                 (e2wm:pst-buffer-set 'left buf))
              )
      nil)))

(defun e2wm:book-popup (buf)
  ;;記録バッファ以外はsubで表示してみる
  (e2wm:message "#DP TWO popup : %s" buf)
  (let ((buf-name (buffer-name buf)))
    (cond
     ((e2wm:book-buffer-p buf)
      (e2wm:pst-buffer-set 'left buf)
      t)
     ((e2wm:history-recordable-p buf)
      (e2wm:pst-buffer-set 'right buf)
      t)
     (t
      (e2wm:dp-two-popup-sub buf)
      t))))

(defun e2wm:book-buffer-p (buf)
  "BUF"
  (string-match "\\(jpg\\|png\\)$" (buffer-name buf)))

(defun e2wm:book-popup-sub (buf)
  (let ((wm (e2wm:pst-get-wm))
        (not-minibufp (= 0 (minibuffer-depth))))
    (e2wm:with-advice
     (e2wm:pst-buffer-set 'sub buf t not-minibufp))))


(string-match "\\(jpg\\|png\\)$" "hello.jpg")
6


(string-match "\\*\\(Help\\|info\\|\.jpg\\|\.png\\)" "hello.jpg")
nil

nil

nil

nil

(setq e2wm:c-doc-recipe
      '(| (:left-max-size 20)
          (- (:upper-size-ratio 0.6)
             files history)
          (| (:right-max-size 65) left
             (- (:upper-size-ratio 0.67) right sub))))












































(setq e2wm:debug nil)
nil




(defun e2wm:dp-code-popup (buf)
  ;;とりあえず全部subで表示してみる
  (let ((cb (current-buffer)))
    (e2wm:message "#DP CODE popup : %s (current %s / backup %s)" 
                  buf cb e2wm:override-window-cfg-backup))
  (let ((buf-name (buffer-name buf))
        (wm (e2wm:pst-get-wm)))
    (cond ((eq (string-match "^\*indirect" buf-name) 0)
           (e2wm:dp-code-popup-upsub buf))
          ((e2wm:history-recordable-p buf)
           (e2wm:pst-show-history-main)
           ;;記録対象なら履歴に残るのでupdateで表示を更新させる
           t)
          ((and e2wm:override-window-cfg-backup
                (eq (selected-window) (wlf:get-window wm 'sub)))
           ;;現在subならmainに表示しようとする
           ;;minibuffer以外の補完バッファは動きが特殊なのでbackupをnilにする
           (setq e2wm:override-window-cfg-backup nil)
           ;;一時的に表示するためにset-window-bufferを使う
           ;;(prefix) C-lなどで元のバッファに戻すため
           (set-window-buffer (wlf:get-window wm 'main) buf)
           t)
          ((and e2wm:c-code-show-main-regexp
                (string-match e2wm:c-code-show-main-regexp buf-name))
           (e2wm:pst-buffer-set 'main buf t)
           t)
          (t
           (e2wm:dp-code-popup-sub buf)
           t))))



(defun e2wm:dp-code-popup-upsub (buf)
  (let ((wm (e2wm:pst-get-wm))
        (not-minibufp (= 0 (minibuffer-depth))))
    (e2wm:with-advice
     (e2wm:pst-buffer-set 'upsub buf t not-minibufp))))

** Wed 16 Oct 2013 06:17:19 PM JST
python

(defun hots:hash-self-insert-key-press ()
  "Replace certain text as it is typed."
  (let* ((char last-command-event)
         (strchar (char-to-string char)))
    (if (or (char-equal char 10)  ;RET key
            (char-equal char 32)) ;SPC key
        (hots:clear-sequence)
      (when (not (eq this-command last-command))
        (hots:clear-sequence))
      (setq hots:sequence--key (hots:stack hots:sequence--key strchar)) ;stack
      (let ((value (gethash hots:sequence--key hots:hash-table))
            start)
        (if value
            (progn (setq start (hots:replace hots:sequence--key value))
                   (when hots:flush-p
                     (hots:do--flush start (point)))
                   (run-hooks hots:after-replace-hook)))))))

k
lkjlkjlkjkjlkjkjkjjjjjj

(minibufferp)
iphton

ipyhton python




ipython








grep-find-template
"find . <X> -type f <F> -exec grep <C> -nH -e <R> {} +"
grep-find-command
("find . -type f -exec grep -nH -e  {} +" . 34)

(setq grep-host-defaults-alist nil)
(setq grep-find-command "find . -type f '!' -wholename '*/.svn/*' -print0 | xargs -0 -e grep -nH -e ")
grep-template
"grep <X> <C> -nH -e <R> <F>"
grep-command
"grep -nH -e "
grep-find-use-xargs
exec-plus
grep-find-ignored-directories
("SCCS" "RCS" "CVS" "MCVS" ".svn" ".git" ".hg" ".bzr" "_MTN" "_darcs" "{arch}" "etc/data")

(directory-files my-bk-autosave-dir)
("#!tmp!junk!2013-09-25-154907.junk.py#" "#!tmp!junk!2013-09-27-182534.junk.py#" "#!tmp!junk!2013-09-28-000502.junk.py#" "#!tmp!junk!2013-09-28-000811.junk.py#" "#!tmp!junk!2013-09-29-170610.junk.py#" "#!tmp!junk!2013-10-02-182215.junk.el#" "#!tmp!junk!2013-10-03-051429.junk.py#" "#!tmp!junk!2013-10-04-225840.junk.py#" "." "..")

("#!root!tmp.py#" "#!tmp!junk!2013-09-25-154907.junk.py#" "#!tmp!junk!2013-09-27-182534.junk.py#" "#!tmp!junk!2013-09-28-000502.junk.py#" "#!tmp!junk!2013-09-28-000811.junk.py#" "#!tmp!junk!2013-09-29-170610.junk.py#" "#!tmp!junk!2013-10-02-182215.junk.el#" "#!tmp!junk!2013-10-03-051429.junk.py#" "#!tmp!junk!2013-10-04-225840.junk.py#" ".
" "..")

(expand-file-name "#!root!tmp.py#" my-bk-autosave-dir)
"/root/.emacs.d/backup_e/auto-save/#!root!tmp.py#"
(when (auto-save-file-name-p "#!root!tmp.py#")
  (message "DEBUG-1-nofile")
  )
"DEBUG-1-nofile"

0


("#!tmp!junk!2013-09-25-154907.junk.py#" "#!tmp!junk!2013-09-27-182534.junk.py#" "#!tmp!junk!2013-09-28-000502.junk.py#" "#!tmp!junk!2013-09-28-000811.junk.py#" "#!tmp!junk!2013-09-29-170610.junk.py#" "#!tmp!junk!2013-10-02-182215.junk.el#" "#!tmp!junk!2013-10-03-051429.junk.py#" "#!tmp!junk!2013-10-04-225840.junk.py#")
(setq tes nil)
"hello"
(setq tes (append tes (list (format "world %s" "ooo"))))
tes
("world ooo" "world ooo" "world ooo" "world ooo" "world ooo" . #2)

(104 101 108 108 111 . "world")

(mapconcat 'identity tes "\n")
"world ooo
world ooo
world ooo"
(py:at-)
(self-insert-command 1)



(define-key python-mode ":" 'py:-:)
(py:end-of-)
(py:end-of-brackets)


(defun py:insert-conma-end-brackets ()
  ""
  (interactive)
  (py:end-of-brackets)
  (insert ",")
  (newline-and-indent)
  )
(add-to-list 'iswitchb-buffer-ignore "\\*w3m\\*")
(add-to-list 'iswitchb-buffer-ignore "^\\*epc")
("^\\*epc" "\\*w3m\\*" "^ ")

iswitchb-buffer-ignore

\(?=

(funcall )


(defun iswitchb-set-matches ()
  "Set `iswitchb-matches' to the list of buffers matching prompt."
  (if iswitchb-rescan
      (setq iswitchb-matches
            (let ((buflist iswitchb-buflist))
              (dolist (text (split-string iswitchb-text))
                (setq buflist (iswitchb-get-matched-buffers text iswitchb-regexp
                                                            buflist)))
              buflist)
            iswitchb-virtual-buffers nil)))

(defadvice iswitchb-set-matches
  (around space-filter-iswitch-set-match activate)
  (if iswitchb-rescan
      (setq iswitchb-matches
            (let ((buflist iswitchb-buflist))
              (dolist (text (split-string iswitchb-text))
                (setq buflist (iswitchb-get-matched-buffers text iswitchb-regexp
                                                            buflist)))
              buflist)
            iswitchb-virtual-buffers nil)))
;; (progn (ad-disable-advice 'iswitchb-set-matches 'around 'space-filter-iswitch-set-match) (ad-update 'iswitch-set-match))
)


(split-string "test world" " ")
("test" "world")



(defadvice e2wm:dp-code-switch
  (CLASS NAME FLAGS)
  
  )
;; (progn (ad-disable-advice 'e2wm:dp-code-switch 'CLASS 'NAME) (ad-update 'e2wm:dp-code-switch))
)

** Wed 16 Oct 2013 07:30:14 PM JST
(defadvice e2wm:def-plugin-imenu-update-which-func
  (around e2wm:def-plugin-imenu-update-which-func activate)
  (e2wm:with-advice
   (let* ((main-buf (e2wm:history-get-main-buffer))
          (win (selected-window))
          (imenu-buf (get-buffer " *WM:Imenu*"))
          (imenu-win (and imenu-buf (get-buffer-window imenu-buf))))
     (cond
      ((null imenu-buf)
       (e2wm:def-plugin-imenu-stop-timer))
      ((eql win (get-buffer-window main-buf))
       (let ((name (e2wm:def-plugin-imenu-which-func)))
         (when (and name (window-live-p imenu-win))
           (with-current-buffer imenu-buf
             (goto-char (point-min))
             (let ((ps (re-search-forward (concat "^" (rx-form name) "$"))))
               (when ps
                 (beginning-of-line)
                 (set-window-point imenu-win (point))
                 (hl-line-highlight)))))))
      (t
       ;;can not update
       ))))
  )
;; (progn (ad-disable-advice 'e2wm:def-plugin-imenu-update-which-func 'around 'e2wm:def-plugin-imenu-update-which-func) (ad-update 'e2wm:def-plugin-imenu-update-which-func))


(list "%e"
 mode-line-position
 ",P"
 '(:eval (format "%4d" (point)))
 " "
 "%z"   ;mode-line-mule-info
 " "
 mode-line-buffer-identification
 " "
 "%*"   ;mode-line-modified
 "%2@"  ;mode-line-remote
 mode-name
 )
("%e" (:eval (format "%%4l/%d,C%%2c" (count-lines (point-min) (point-max)))) ",P" (:eval (format "%4d" (point))) " " "%z" " " (#("%12b" 0 4 (face (:weight bold :foreground "#f0dfaf")))) " " "%*" "%2@" "Lisp Interaction")

(count-lines (point-min) (point-max))

** Mon 21 Oct 2013 04:06:45 PM JST
(require '__python__ nil 'noerror)
(py:region-doc-def)
(py:go-def-parameter)
(py:refact-doc-from-parameter)
iswitchb-buffer-ignore
("\\`\\*" "^ ")
(let (blist)
(dolist (b (buffer-list))
  (setq blist (buffer-name b))
  ))
*scratch*
(#<buffer *scratch*> #<buffer tmp.py> #<buffer 22_iswitchb_plugin_start.el> #<buffer  *Minibuf-1*> #<buffer __python__.el> #<buffer  *auto-async-byte-compile*> #<buffer 2013-10-21-142733.junk.py> #<buffer *IPython*> #<buffer  *WM:Imenu*> #<buffer *w3m*> #<buffer *anything my edit*> #<buffer Pro_Python_page-0121.png> #<buffer _sleep.yasnippet> #<buffer  *WM:Files-files*> #<buffer *translated*> #<buffer *Messages*> #<buffer  *Minibuf-0*> #<buffer  *code-conversion-work*> #<buffer  *Echo Area 0*> #<buffer  *Echo Area 1*> #<buffer *Compile-Log*> #<buffer  *edit-server*> #<buffer *Pymacs*> #<buffer  *e2wm:blank*> #<buffer  *WM:History*> #<buffer  *code-converting-work*> #<buffer  *translated*google.com> #<buffer  *translated*yahoo.com> #<buffer  *translated*freetranslation.com> #<buffer  *translated*livedoor.com> #<buffer  *translated*fresheye.com> #<buffer  *translated*excite.co.jp> #<buffer  *translated*yahoo.co.jp> #<buffer  *translated*ocn.ne.jp> #<buffer  *w3m cache*> #<buffer *auto-install http://www.emacswiki.org/cgi-bin/emacs?action=index;raw=1 <10/21 14:04:38>*-wget> #<buffer *helm python view*> #<buffer  *Python Internal [8338ad76c57c244c1aa08aa4344212b4]*> #<buffer  *w3m-cookie-parse-temp*> #<buffer  *epc:server:2*> #<buffer *epc con 3*> #<buffer  *anything candidates:Emacs Commands*> #<buffer *anything M-x*> #<buffer  *anything candidates:Find*> #<buffer *anything*>)

** Wed 23 Oct 2013 02:09:26 PM JST
(replace-string)
(at-string|comment-p)
(require 'auto-yasnippet nil 'noerror)

(defun my-auto-yasnippet (args)
  "ARGS"
  (interactive "p")
  (if (or mark-active (eq args 4))
      (create-auto-yasnippet)
    (expand-auto-yasnippet)))
(global-set-key (kbd "s-b") 'my-auto-yasnippet)
(py:at-string|comment-p)
test 1test hello

(py:get-doc-str)

(defun py-indirect-import ()
  "Indirect import region."
  (interactive)
  (save-excursion
    (let* ((region (py:region-imports))
           ;; expand region
           (start (progn (goto-char (car region))
                         (forward-line -1)
                         (point)))
           (end (progn (goto-char (cdr region))
                       (forward-line 5)
                       (point))))
      (indirect-region start end (buffer-name)))))

** Wed 23 Oct 2013 04:45:18 PM JST
(save-excursion
  (let ((re "\\(\\_<.+\\_>\\)[[:blank:]]*\\_<as\\_>"))
    (cond ((re-search-backward re (bol) 'noerror)
           (concat "_" (match-string 1)))
          (t "alias"))))

(progn (forward-symbol)
       (symbol-at-point))
(forward-symbol -1)
()
(re-search-backward py:from|import-re (bol) 'noerror)

py:import-re
"\\_<import\\_>"
(rx symbol-start (or "import" "from") symbol-end (+ blank) (group symbol-start (+ any) symbol-end))
"\\_<\\(?:from\\|import\\)\\_>[[:blank:]]+\\(\\_<.+\\_>\\)"

(rx symbol-start (or "import" "from") symbol-end)
py:from|import-re
(defconst py:from|import-re (rx symbol-start (or "import" "from") symbol-end))

(looking-at py:import-line-re)
(symbol-at-point)
hello_world
hello-world
(re-search-backward py:from|import-re (bol) 'noerror)

(progn 
  (re-search-backward "\\(\\_<.+\\_>\\)[[:blank:]]*\\_<as\\_>" nil 'noerror)
  (match-string 1))
(rx (group symbol-start (+ any) symbol-end) (* blank) symbol-start "as" symbol-end)
"\\(\\_<.+\\_>\\)[[:blank:]]*\\_<as\\_>"

"\\_<.+\\_>[[:blank:]]*\\_<as\\_>"
"\\(\\_<.+\\_>\\)[[:blank:]]*"

(re-search-backward "\\(\\_<.+\\_>\\)[[:blank:]]+" nil 'noerror)
(concat )py:from|import-re
"\\_<\\(?:from\\|import\\)\\_>"
(rx  (+ blank) symbol)
(rx (syntax symbol))
"\\s_"
(backward-char)
(back)

()

(concat "_" (symbol-name yas/before-word))


yas/before-word
** Thu 24 Oct 2013 12:52:59 AM JST
(looking-at (rx line-start (* blank) "import" (+ blank) (+ any) ","))
nil
(rx line-start (* blank) "import" (+ blank) (+ any) ",")
"^[[:blank:]]*import[[:blank:]]+.+,"

(defun py:refact-imports-colon ()
  ""
  (interactive "*")
  (save-restriction
    (when (looking-at (rx line-start (* blank) "import" (+ blank) (+ any) ","))
      (let* ((indent (current-indentation))
             (import (concat "\n" (make-string indent 32) "import ")))
        (save-restriction
          (narrow-to-region (bol) (eol))
          (beginning-of-line)
          (while (re-search-forward ",[[:blank:]]*" nil 'noerror)
            (delete-region (match-beginning 0) (match-end 0))
            (insert import)))))))

(buffer-substring )
(make-string 0 32)
(let* ((start (match-beginning 0))
       (indent (current-indentation))
       (import (concat "\n" (make-string indent 32) "import ")))
  (replace-regexp ",[[:blank:]]*" import nil start (eol)))



(rx line-start (* blank) "import" (+ blank) (+ any) (group ","))
"^[[:blank:]]*import[[:blank:]]+.+\\(,\\)"
(let ((inround (py:in-round-brackets-p))
      (insquare (py:in-square-brackets-p)))
  (cond ((and inround insquare) (DO))
        (t (DO)))
  )

(let ((round 0)
      (square 0)
      (curly 0)
      (bound (save-excursion
               (or (py:forward-block-start 1)
                   (point-max)))))
  (while (and (<= 0 round)
              (<= 0 square)
              (<= 0 curly)))
  )

(min (delq nil (list (py:beginning-of-round-brackets)
                (py:beginning-of-square-brackets)
                (py:beginning-of-curly-brackets))))
(min (point) (save-excursion (beginning-of-line) (point)) nil)
(setq tes (point))
(min (point) tes)
(max '(1 nil))
(delq nil '(nil nil t))
(t)
(rx symbol-end)
(rx symbol-)
(t)
(defun py:what-near-brackets ()
  ""
  )

** Thu 24 Oct 2013 12:55:55 PM JST
(let ((round 0)
      (square 0)
      (curly 0)
      (bound (save-excursion
               (or (py:forward-block-start 1)
                   (point-max)))))
  (while (and (<= 0 round)
              (<= 0 square)
              (<= 0 curly)))
  )

(let (()))
(defun py:what-near-brackets ()
  ""
  (save-excursion
    (let ((p (max (or (py:beginning-of-round-brackets) (point-min))
                  (or (py:beginning-of-square-brackets) (point-min))
                  (or (py:beginning-of-curly-brackets) (point-min)))))
      (when (not (eq p (point-min)))
        (goto-char p)
        (cond ((looking-at "(") (cons 0 p))
              ((looking-at "\\[") (cons 1 p))
              ((looking-at "{") (cons 2 p)))))))
(py:what-near-brackets)
(rx)

(defun py:narrow-near-brackets (&optional contract)
  "CONTRACT"
  (let ((what-in (py:what-near-brackets)))
    (when what-in
      (cond ((eq 0 (car what-in)) (py:narrow-to-round-brackets contract))
            ((eq 1 (car what-in)) (py:narrow-to-square-brackets contract))
            ((eq 2 (car what-in)) (py:narrow-to-curly-brackets contract)))
      t)))
(defun py:refact-list-align-vertical ()
  ""
  (interactive "*")
  (let ((what-in (py:what-near-brackets))
        beg-column indent)
    (when what-in
      (setq beg-column (save-excursion
                         (goto-char (cdr what-in))
                         (forward-char 1)
                         (current-column)))
      (setq indent (concat "\n" (make-string beg-column 32)))
      (save-restriction
        (cond ((eq 0 (car what-in)) (py:narrow-to-round-brackets 'contract))
              ((eq 1 (car what-in)) (py:narrow-to-square-brackets 'contract))
              ((eq 2 (car what-in)) (py:narrow-to-curly-brackets 'contract)))
        (beginning-of-line)
        (while (and (re-search-forward "," nil 'noerror)
                    (not (eobp)))
          (when (and (not (py:at-string|comment-p))
                     (not (py:in-brackets-p)))
            (delete-horizontal-space)
            (insert indent)))
        (delete-horizontal-space)))))
(make-string 3 32)
"   "

(delete-horizontal-space)
(py:next-brackets 1)
(py:narrow-to-round-brackets t)
(py:prev-brackets 1)
(insert (make-string 17 32))
(just-one-space)
before-save-hook
(rope-before-save-actions text-adjust-space-before-save-if-needed check-misspell delete-trailing-blank-lines delete-trailing-whitespace force-backup-of-buffer)
(delete-trailing-blank-lines )
(delete-trailing-whitespace)

(replace-string "[[:blank:]]*\n*[[:blank:]]*" "")
(defun py:delete-horizontal-space-line (&optional space)
  "JUST-ONE-SPACE"
  (let (done)
    (while (not done)
      (cond ((looking-at "[[:blank:]]") (delete-horizontal-space))
            ((looking-at "\n") (delete-char 1))
            (t (setq done t))))
    (when space
      (just-one-space))))
(py:delete-horizontal-space-line)
(py:refact-list-align-flat)
(py:refact-list-align-vertical)
(py:refact-list-align-horizontal)
** Sun 27 Oct 2013 03:15:07 AM JST
(cons nil "hello")
(nil . "hello")
(py:kill--internal nil)
(narrow-to-region (point-min) (point-max))
(py:copy-class)
(py:forward-list -1)
(py:forward-list-in-round 1)
(py:end-of-brackets "(" ")" nil)
(anyhting-timer )


timer-idle-list
([t 0 0 125000 t show-paren-function nil idle 0] [t 0 0 500000 t e2wm:def-plugin-imenu-update-which-func nil idle 0] [t 0 0 500000 t jit-lock-context-fontify nil idle 0] [t 0 0 700000 t #[nil "\205 \301 \207" [eldoc-mode eldoc-print-current-symbol-info] 1] nil idle 0] [t 0 1 0 t ahs-idle-function nil idle 0] [nil 0 30 0 t js-gc nil idle 0])

timer-list
([nil 21099 28211 93356 60 ac-clear-variables-every-minute nil nil 122000] [nil 21099 28434 126336 300 savehist-autosave nil nil 531000] [nil 21099 59136 799244 86400 run-hooks (midnight-hook) nil 449000])
midnight-hook
(clean-backup-files clean-buffer-list)
(py:in-brackets-p)
(global-set-key (kbd "s-b") '(lambda () (interactive) (if (py:in-brackets-p)
                                                          (princ "ok")
                                                        (princ "no"))))
(forward-char)

(macroexpand '(define-many-keys python-mode-map ("\C-ch" 'describe-function)
                ("\C-cl" 'describe-function)))
(progn (define-key python-mode-map "h" (quote describe-function)) (define-key python-mode-map "l" (quote describe-function)))

(progn (define-key python-mode-map "h" (quote describe-function)))

(macroexpand )
describe-function
(defmacro)

(defmacro ave (&rest argvs)
  `(/ (+ ,@argvs) ,(length argvs)))       ;(3)

(macroexpand '(ave a b c d))
(/ (+ a b c d) 4)


(defmacro define-many-keys2 (mode-map &rest body)
  "In KEYMAP, define a lot of key.
MODE-MAP:
BODY:
ex.. (define-many-keys global-map (\"n\" 'next-line) (\"p\" 'previous-line))"
  `(,@(mapcar #'(lambda (arg)
                  `(define-key ,mode-map ,@arg)) body)))
(macroexpand '(define-many-keys2 python-mode-map ("\C-ch" 'describe-function)))
((define-key python-mode-map "h" (quote describe-function)))

(progn (define-key python-mode-map "h" (quote describe-function)))






(defmacro tes-svn--mark-a-lot (regexp)
  "Mark a lot line by regexp.
REGEXP: regular expression."
  `(save-excursion
     `@(save-window-excursion
         (goto-char (point-min))
         (while (re-search-forward ,regexp nil 'noerror)
           (svn-set-mark (line-beginning-position) t)))))
tes-svn--mark-a-lot

tes-svn--mark-a-lot

tes-svn--mark-a-lot

tes-svn--mark-a-lot

(macroexpand '(tes-svn--mark-a-lot "hello"))
(save-excursion (\` @) (save-window-excursion (goto-char (point-min)) (while (re-search-forward "hello" nil ...) (svn-set-mark ... t))))

(save-excursion (\` (save-window-excursion (goto-char ...) (while ... ...))))

(let ((wconfig (current-window-configuration))) (unwind-protect (progn (message "hello")) (set-window-configuration wconfig)))


(save-excursion (save-window-excursion (goto-char (point-min)) (while (re-search-forward "^[ 	].+\\?[ 	]" nil ...) (svn-set-mark ... t))))

(macroexpand '(while nil))
(while nil)

(save-excursion
  (goto-char (point-min))
  (while (re-search-forward "^[ 	].+\\?[ 	]" nil (quote noerror))
    (svn-set-mark (line-beginning-position) t)))

(macroexpand '(svn--mark-a-lot "hello"))
(save-excursion
  (goto-char (point-min))
  (while (re-search-forward "hello" nil (quote noerror))
    (svn-set-mark (line-beginning-position) t)))

(autoload FUNC FILE DOC INTERACTIVE)

(face-spec-set 'term '((t (:foreground "white" :background "black"))))
(kill-beginning-of-line)
(signal 'end-of-buffer nil)
(end-of-buffer)

(user-error "End of list")

** Sun 27 Oct 2013 03:34:54 PM JST
(defsubst emacs22-p ()
  "Return non-nil, if emacs version's 22."
  (equal emacs-major-version 22))

(defmacro mac-p ()
  "Return non-nil, if window system is MAC PC."
  (and (eq window-system 'mac) (or emacs23-p emacs24-p)))

`emacs22-p', `emacs23-p', `emacs24-p', `darwin-p', `ns-p', `carbon-p', `mac-p'
`linux-p', `colinux-p', `cygwin-p', `nt-p', `meadow-p', `windows-p'


loaddefs_init_file
"/root/.emacs.d/elisp/start.d/06_loaddefs_start.el"
(autoload)
(autoload-save-buffers )


common-view-map-list
(("v" . next-line) ("f" . forward-char) ("d" . previous-line) ("s" . backward-char) ("g" . my-forward-seq) ("e" . cua-scroll-down) ("a" . my-backward-seq) ("") ("c") (" " . my-view-map) ("b" . cua-scroll-up) ("y" . sdic-describe-word-at-point) ...)

(macroexpand '(default-view-bind apropos-mode-map))
common-view-map-list
(("v" . next-line) ("f" . forward-char) ("d" . previous-line) ("s" . backward-char) ("g" . my-forward-seq) ("e" . cua-scroll-down) ("a" . my-backward-seq) ("") ("c") (" " . my-view-map) ("b" . cua-scroll-up) ("y" . sdic-describe-word-at-point) ...)
`( ;; Left hand
  ,( "v"             . next-line                   )
  ( "f"             . forward-char                )
  ( "d"             . previous-line               )
  ( "s"             . backward-char               )
  ( "g"             . my-forward-seq              )
  ( "e"             . cua-scroll-down             )
  )



apropos-mode-map





(benchmark-run 1 (message "------- Times -------"))
(0.000669288 0 0.0)

(0.334822439 0 0.0)

(0.00013180400000000001 0 0.0)
(macroexpand '(dolist (keycmd common-view-map-list)
                (define-key apropos-mode-map (car keycmd) (cdr keycmd))))
(cl--block-wrapper (catch (quote --cl-block-nil--) (let ((--dolist-tail-- common-view-map-list) keycmd) (while --dolist-tail-- (setq keycmd (car --dolist-tail--)) (define-key apropos-mode-map (car keycmd) (cdr keycmd)) (setq --dolist-tail-- (cdr --dolist-tail--))))))

(replace-string)
()
(require 'autoload)
autoload
(symbol-file 'autoload)
"/opt/emacs24/share/emacs/24.3.50/lisp/emacs-lisp/"
(scroll-other-window-down )

(end-of-buffer-other-window -100)
(scroll-other-window-down -10)
nil

nil
(intern "plugin/helm/helm-grep")
plugin/helm/helm-grep
(intern (car (last (split-string "plugin/helm/helm-grep" "/"))))
helm-grep

(intern (car (last (split-string library "/"))))
(require 'helm-grep nil 'noerror)
helm-grep
(intern "helm-grep")
helm-grep

(require 'annotation)
annotation

annotation

ee-tags

ee-tags
(custom-autoload )

(benchmark-run 1 (custom-set-variables
                  '(gc-cons-threshold             5242880) ; default 400000
                  '(garbage-collection-messages       nil)
                  '(max-lisp-eval-depth              4096) ; Anti Infinite Loop
                  '(max-specpdl-size                 3000)
                  '(message-log-max                 10000)
                  '(inhibit-startup-message             t)
                  '(initial-scratch-message           nil)
                  '(inhibit-startup-echo-area-message   t)
                  '(process-kill-without-query          t) ; Auto kill process when close emacs
                  '(x-select-enable-clipboard           t)
                  ;; tab
                  '(indent-tabs-mode                  nil) ; disable tab
                  '(tab-width                           4)
                  '(require-final-newline               t) ; file の最後に改行を入れる。
                  '(cua-mode t nil             (cua-base))
                  ;; '(echo-keystrokes 0.3)
                  '(kill-whole-line                     t)
                  '(kill-do-not-save-duplicates         t) ; kill ring purge duplicates
                  '(bookmark-save-flag                  1)
                  '(view-read-only                      t)
                  ;; '(visible-bell                      nil)
                  '(large-file-warning-threshold 10000000) ; default 10000000(10M)
                  '(use-file-dialog                   nil)
                  '(auto-revert-interval                7)
                  '(yank-excluded-properties            t)
                  ;; backup & vc
                  '(auto-save-timeout                  10)
                  '(auto-save-interval                300)
                  '(version-control             'numbered)
                  '(vc-command-messages               nil)
                  '(kept-old-versions                   1)
                  '(kept-new-versions                  20)
                  '(delete-old-versions                 t)
                  '(backup-by-copying                   t)
                  '(backup-by-copying-when-mismatch     t)
                  ;; 改名するとファイルの所有者やグループを変更してしまう場合にコピ ーしてバックアップする。
                  '(vc-directory-exclusion-list
                    (quote ("SCCS" "RCS" "CVS" "MCVS" ".svn" ".git"
                            ".hg" ".bzr" "_MTN" "_darcs" "{arch}" "etc/data")))
                  
                  '(save-place-file (concat my-var-dir "cursor-point-save.el"))
                  '(save-place                          t)
                  ;; 行の最後が改行で改行がfringeにめりこむ
                  '(overflow-newline-into-fringe        t)
                  '(savehist-file         (concat my-var-dir "savehist")) ;save history location
                  '(bookmark-default-file (concat my-data-dir "bookmarks")) ;Bookmark
                  '(server-auth-dir       (expand-file-name "server/" my-var-dir))
                  '(url-configuration-directory (concat my-data-dir "url/"))
                  '(delete-by-moving-to-trash           t)
                  ;; '(trash-directory       (convert-standard-filename (concat temporary-file-directory "Trash")))
                  '(enable-local-variables              t)
                  '(safe-local-variable-values (quote ((no-check-type-miss . t)
                                                       (backup-inhibited . t)
                                                       (version-control quote never))))
                  ;; cua
                  ;; '(cua-remap-control-v               nil)
                  ;; '(cua-remap-control-z nil)
                  ;; non-nil = 改行コードの変換を許さない
                  '(inhibit-eol-conversion            nil)
                  ))
(0.001306756 0 0.0)

(benchmark-run 1 (dolist (s '(upcase-region
                              scroll-left
                              dired-find-alternate-file
                              downcase-region
                              erase-buffer
                              set-goal-column
                              narrow-to-region
                              narrow-to-page))
                   (put s 'disabled nil)))
(5.1299e-05 0 0.0)

(4.9657e-05 0 0.0)

()
(benchmark-run 1000 (put 'upcase-region 'disabled nil))
(0.00033030999999999995 0 0.0)
(benchmark-run 1 (show-paren-mode        1))
(0.001155648 0 0.0)
(benchmark-run 1 (savehist-mode          1))
(0.002877889 0 0.0)
(benchmark-run 1 (winner-mode            1))
(0.016288416 0 0.0)
(benchmark-run (global-auto-revert-mode 1))
(0.001658085 0 0.0)

(0.013165482 0 0.0)
()

k
nil



after-init-timer-hook
((lambda nil (face-spec-set (quote fringe) (quote ...)) (face-spec-set (quote fringe) (quote ...))) global-auto-complete-mode-on auto-highlight-symbol-mode-on)
(cons (cons       "^/etc/" my-bk-etc-dir)
      (list (cons       "" my-backup-dir)))
(("^/etc/" . "/root/.emacs.d/backup_e/etc/") ("" . "/root/.emacs.d/backup_e/"))
(defvar start-base (current-time))
(defun msg-time (identity)
  ""
  (message "####### %s ######" identity)
  (message "### %d" (time-lag start-base)))

** Thu 31 Oct 2013 10:51:36 PM JST
p
** Fri 01 Nov 2013 12:02:27 AM JST
(defun py:= (n)
  "N"
  (interactive "p")
  (if (py:at-string|comment-p)
      (self-insert-command n)
    (delete-horizontal-space)
    (let (orig (point))
      (cond ((or (eq (char-before) ?>)) (DO))
            (t (DO)))
      )
    
      ))
** Sat 02 Nov 2013 05:18:02 PM JST

** Sun 03 Nov 2013 01:53:21 AM JST
2013/11/02

(insert ";[" (format-time-string "%Y/%m/%d") "]")
;[2013/11/02]nil

"2013/11/02"
(defun FUNC (ARGS)
  "ARGS"
  )

(defun)
(font-lock-keyword-face)
(defun hello (ARGS) ;[2013/11/02]
  "ARGS"
  )

(face-spec-set 'rainbow-delimiters-depth-1-face
               '((((background light)) (:foreground "#707183"))
                 (((background dark)) (:foreground "white"))))
(face-spec-set 'rainbow-delimiters-depth-2-face
               '((((background light)) (:foreground "#887070"))
                 (((background dark)) (:foreground "DeepSkyBlue1"))))
(face-spec-set 'rainbow-delimiters-depth-3-face
               '((((background light)) (:foreground "#887070"))
                 (((background dark)) (:foreground "OrangeRed2"))))
(face-spec-set 'rainbow-delimiters-depth-4-face
               '((((background light)) (:foreground "#887070"))
                 (((background dark)) (:foreground "SeaGreen"))))
(face-spec-set 'rainbow-delimiters-depth-5-face
               '((((background light)) (:foreground "#887070"))
                 (((background dark)) (:foreground "DarkGoldenrod"))))
(face-spec-set 'rainbow-delimiters-depth-6-face
               '((((background light)) (:foreground "#887070"))
                 (((background dark)) (:foreground "BlueViolet"))))
(face-spec-set 'rainbow-delimiters-depth-7-face
               '((((background light)) (:foreground "#887070"))
                 (((background dark)) (:foreground "sienna4"))))
(face-spec-set 'rainbow-delimiters-depth-8-face
               '((((background light)) (:foreground "#887070"))
                 (((background dark)) (:foreground "seashell4"))))
(face-spec-set 'rainbow-delimiters-depth-8-face
               '((((background light)) (:foreground "#887070"))
                 (((background dark)) (:foreground "grey34"))))
(((((((((((())))))))))))
(defun hello () ;[2013/11/02]
  ""
  )




flycheck
pymacs
s
(boundp 'ac-sourcesss)
nil
git clone https://github.com/magnars/multiple-cursors.el.git
user-name


(beginning-of-line)
user-full-name
"Atami"
anything-debug
nil
debug-on-error
t

(buffer-list)
(#<buffer *scratch*>
 #<buffer  *Minibuf-1*>
#<buffer *anything auto install*>
#<buffer *w3m*<4>>
#<buffer  *WM:Imenu*>
#<buffer *grep*>
#<buffer start.d>
#<buffer  *auto-async-byte-compile*>
#<buffer plugin>
#<buffer *Ediff Control Panel*>
#<buffer *Apropos*>
#<buffer *Help*>
#<buffer *Anything Log*>
#<buffer allinone.org>
#<buffer log-edit.el.gz>
#<buffer *Backtrace*>
#<buffer *Messages*>
#<buffer *svn*>
#<buffer *w3m*<5>>
#<buffer *terminal<1>*>
#<buffer *Compile-Log*>
#<buffer  *WM:Files-files*>
#<buffer *w3m*>
#<buffer *w3m*<2>>
#<buffer pip_ni.txt>
#<buffer  *WM:History*>
#<buffer font-lock.el.gz>
#<buffer whitespace.el.gz>
#<buffer  *e2wm:blank*>
#<buffer  *Echo Area 1*>
#<buffer  *Echo Area 0*>
#<buffer  *code-conversion-work*>
#<buffer  *Minibuf-0*>
#<buffer  *code-converting-work*>
#<buffer  *edit-server*>
#<buffer *Pymacs*>
#<buffer *helm python view*>
#<buffer  *DOC*>
#<buffer  *w3m cache*>
#<buffer  *w3m-cookie-parse-temp*>
#<buffer  *w3m bookmark*>
#<buffer *anything my edit*>
#<buffer  *server*>
#<buffer  *Python Internal [8338ad76c57c244c1aa08aa4344212b4]*>
#<buffer  *w3m-work*>
#<buffer *w3m*<3>>
#<buffer *log-edit-files*>
#<buffer *ediff-errors*>
#<buffer *ediff-diff*>
#<buffer *Ediff Registry*>
#<buffer *sdic*>
#<buffer  *anything candidates:Emacs Commands*>
#<buffer *anything M-x*>
#<buffer  *anything candidates:Find*>
#<buffer *anything*>)



(buffer-list)

** Sun 03 Nov 2013 05:57:13 AM JST
(auto-install-from-url "https://github.com/flycheck/flycheck/raw/master/flycheck.el")
(auto-install-from-url "https://github.com/rejeep/f.el/raw/master/f.el")
(auto-install-from-url "https://github.com/magnars/s.el/raw/master/s.el")
(auto-install-from-url "https://github.com/syohex/emacs-import-popwin/raw/master/import-popwin.el")
(auto-install-from-url "https://github.com/emacs-jp/init-loader/raw/master/init-loader.el")
(auto-install-from-url "http://homepage1.nifty.com/bmonkey/emacs/elisp/mcomplete.el")
(auto-install-from-url "http://www.meadowy.org/~shirai/elips/sorter.el")
(auto-install-from-url "http://taiyaki.org/elisp/text-adjust/src/text-adjust.el")


(symbol-file 'cl-lib)
** Sun 03 Nov 2013 04:14:36 PM JST

(defun elisp-save-buffer (ARGS) ;[2013/11/03]
  "For `before-save-hook'.
ARGS:"
  (interactive "p")
  (let ((inhibit-read-only t))
    (save-excursion
      (goto-char (point-max))
      (when (and (re-search-backward "" nil 'noerror)
                 (not (looking-back "\n\n\n")))
        (forward-char -1)
        (delete-blank-lines)
        (insert "\n\n"))))
  (save-buffer ARGS))

(defun elisp-save-buffer (ARGS) ;[2013/11/03]
  "ARGS"
  (interactive "p")
  )
(save-buffer)
emacs-lisp-mode-hook

(ert--activate-font-lock-keywords rainbow-delimiters-mode (lambda nil (hs-minor-mode 1)) turn-on-eldoc-mode emacs-lisp-mode-hook-predefine enable-auto-async-byte-compile-mode)
before-save-hook
(rope-before-save-actions delete-trailing-blank-lines delete-trailing-whitespace text-adjust-space-before-save-if-needed check-misspell force-backup-of-buffer)
(local-variable-p before-save-hook)
debug-on-error
t
nil
(just-one-blank-line)

(save-restriction)
(defmacro save-excursion-restriction (&rest body)
  "Macro as `save-excursion' and `save-restriction'."
  `(save-excursion
     (save-restriction
       ,@body)))
(save-excursion-restriction
 (narrow-to-line)
 (forward-line -5)
 (beginning-of-line)
 (point))
** Fri 08 Nov 2013 08:06:27 AM JST
(py:class-name-re)
py:class-name-re
"\\_<class[[:space:]]+\\(\\(?:[[:word:]]\\|_\\)+\\)"

(or (re-search-backward py:class-name-re nil 'noerr)
    (match-string 2)
    "CLASS")

(cond ((re-search-backward py:class-name-re nil 'noerr) (match-string 1))
      (t "CLASS"))

(save-excursion
  (cond ((re-search-backward py:def-name-re nil 'noerr) (match-string 1))
        (t "CLASS")))

(save-excursion
  (py:goto-def-parameter)
  (py:join-param-list (delete "self" (py:list-parameter))))


(delete)
(delete "hello" '("world" "hello"))
("world")

** Tue 12 Nov 2013 07:40:56 AM JST
>>> collections.Counter(['a', 'b', 'c', 'a', 'b', 'b'])
Counter({'b': 3, 'a': 2, 'c': 1})
>>> c.update('abcdaab')
>>> c
Counter({'a': 5, 'b': 5, 'c': 2, 'd': 1})
matrix = [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12],]
100000 loops, best of 3: 1.9 µs per loop
100000 loops, best of 3: 4.97 µs per loop


10000 loops, best of 3: 29.1 µs per loop

10000 loops, best of 3: 29.6 µs per loop
(eq 4 4)
t
(kbd )

(kbd "s-p")
[8388720]

** Sat 23 Nov 2013 04:17:26 PM JST
(when (looking-at "'") (forward-char) (delete-char 1)

      )

(fset 'test
   nil)
(fset 'test
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([M-return 6 102 97 105 108 101 100 13 M-backspace 70 97 105 108 101 100 134217786 40 119 104 101 110 32 40 108 111 111 107 105 110 103 45 97 116 32 34 39 12 12 32 40 100 101 108 101 116 101 45 99 104 97 114 32 49 12 32 40 102 111 114 119 97 114 100 45 99 104 97 114 12 32 40 105 110 115 101 114 116 32 34 39 13 19] 0 "%d")) arg)))
(setq e2wm:py-code-winfo
      '((:name main)
        (:name upsub   :default-hide t)
        (:name files   :plugin dired)
        (:name imenu   :plugin imenu :default-hide nil)
        (:name history :plugin history-list :default-hide t)
        (:name right   :default-hide nil)
        (:name sub     :default-hide nil)))


(get-buffer "*IPython*")
#<buffer *IPython*>

(get-buffer)
nil

#<buffer *w3m*>

(setq e2wm:dp-pycode-minor-mode-map
      (e2wm:define-keymap
       '(("C-u M-I" . e2wm:dp-pycode-imenu-toggle-command)
         ("C-u M-S" . e2wm:dp-pycode-sub-toggle-command)
         ("C-u M-?" . e2wm:dp-pycode-sub-toggle-command)
         ("C-u M-U" . e2wm:dp-pycode-upsub-toggle-command)
         ("C-u M-Y" . e2wm:dp-pycode-files-toggle-command)
         ("C-u M-M" . e2wm:dp-code-main-maximize-toggle-command)
         ("C-x 0" . e2wm-hide-command)
         ("M-M" . e2wm:dp-pycode-navi-main-command)
         ("M-I" . e2wm:dp-pycode-navi-imenu-command)
         ("M-B" . e2wm:dp-pycode-navi-imenu-command)
         ("M-U" . e2wm:dp-pycode-upsub-toggle-command)
         ("M-P" . e2wm:dp-pycode-navi-right-command)
         ("M-?" . e2wm:dp-pycode-navi-sub-command)
         ("M-Y" . e2wm:dp-pycode-navi-files-command)
         ("C-: C-i" . e2wm:dp-pycode-navi-sub-ipython))
       nil))

(setq e2wm:dp-pycode-minor-mode-map
      (e2wm:define-keymap
       '(("C-u M-I" . e2wm:dp-pycode-imenu-toggle-command)
         ("C-u M-S" . e2wm:dp-pycode-sub-toggle-command)
         ("C-u M-?" . e2wm:dp-pycode-sub-toggle-command)
         ("C-u M-U" . e2wm:dp-pycode-upsub-toggle-command)
         ("C-u M-Y" . e2wm:dp-pycode-files-toggle-command)
         ("C-u M-M" . e2wm:dp-code-main-maximize-toggle-command)
         ("C-x 0" . e2wm-hide-command)
         ("M-M" . e2wm:dp-pycode-navi-main-command)
         ("M-I" . e2wm:dp-pycode-navi-imenu-command)
         ("M-B" . e2wm:dp-pycode-navi-imenu-command)
         ("M-U" . e2wm:dp-pycode-upsub-toggle-command)
         ("M-P" . e2wm:dp-pycode-navi-right-command)
         ("M-?" . e2wm:dp-pycode-navi-sub-command)
         ("M-Y" . e2wm:dp-pycode-navi-files-command)
         ("C-: C-i" . e2wm:dp-pycode-navi-sub-ipython)
         ("C-: 1" . e2wm:dp-pycode-navi-sub-term)
         ("C-: 2" . e2wm:dp-pycode-navi-sub-term)
         ("C-: 3" . e2wm:dp-pycode-navi-sub-term)
         ("C-: 0" . e2wm:dp-pycode-navi-sub-term))
       nil))



(defun run-nose (&optional tests debug failed stop)
  "run nosetests"
  (let* ((nose (nose-find-test-runner))
         (where (nose-find-project-root))
         (args (concat (if debug "--pdb" "")
                       " "
                       (if failed "--failed" "")
                       " "
                       (if stop "--stop" "")))
         (tnames (if tests tests "")))
    (if (not where)
        (error
         (format (concat "abort: nosemacs couldn't find a project root, "
                         "looked for any of %S") nose-project-root-files)))
    (funcall (if debug
                 'pdb
               '(lambda (command)
                  (compilation-start command
                                     nil
                                     (lambda (mode) (concat "*nosetests*")))))
             (format
              (concat "%s "
                      (if nose-use-verbose "-v " "")
                      "--with-coverage %s -w %s -c %ssetup.cfg %s")
              (nose-find-test-runner) args where where tnames)))
  )


(eval-when-compile
  (require 't1macro "t1macro"))

;;;###autoload
(defun nose-mode-custom-predefine ()
  "For `eval-after-load' nose customize."
  (message "eval-after-load: \"nose\" customizing..")
  ;; (custom-set-variables
   ;; '())
  )

;;;###autoload
(defun nose-mode-predefine ()
  "For `eval-after-load' nose function."
  (message "eval-after-load: \"nose\" setting..")
  (defvar nose-use-coverage t)
  (defadvice run-nose
    (around run-nose-with-coverage activate)
    (let* ((nose (nose-find-test-runner))
           (where (nose-find-project-root))
           (args (concat (if debug "--pdb" "")
                         " "
                         (if failed "--failed" "")
                         " "
                         (if stop "--stop" "")))
           (tnames (if tests tests ""))
           (coverage-opt (if nose-use-coverage "--with-coverage" "")))
      (if (not where)
          (error
           (format (concat "abort: nosemacs couldn't find a project root, "
                           "looked for any of %S") nose-project-root-files)))
      (funcall (if debug
                   'pdb
                 '(lambda (command)
                    (compilation-start command
                                       nil
                                       (lambda (mode) (concat "*nosetests*")))))
               (format
                (concat "%s "
                        (if nose-use-verbose "-v " "")
                        nose-use-coverage
                        " %s -w %s -c %ssetup.cfg %s")
                (nose-find-test-runner) args where where tnames)))
    )
  ;; (progn (ad-disable-advice 'run-nose 'around 'run-nose-with-coverage) (ad-update 'run-nose))
  )

;;;###autoload
(defun nose-mode-map-predefine ()
  "For nose key bindings."
  (interactive)
  (unless (called-interactively-p 'interactive)
    (message "eval-after-load: \"nose\" keymaping.."))
  ())

;;;###autoload
(defun nose-mode-face-predefine ()
  "For nose face."
  (message "eval-after-load: \"nose\" Setting faces..")
  )

(defvar nose-eval-after-load-hook nil
  "Hook for nose `eval-after-load'.")
(add-hook 'nose-eval-after-load-hook 'nose-mode-custom-predefine)
(add-hook 'nose-eval-after-load-hook 'nose-mode-predefine 'append)
(add-hook 'nose-eval-after-load-hook 'nose-mode-map-predefine 'append)
(add-hook 'nose-eval-after-load-hook 'nose-mode-face-predefine 'append)
(run-hooks-after-load "nose" 'nose-eval-after-load-hook)




(defun run-nose (&optional tests debug failed stop)
  "run nosetests"
  (let* ((nose (nose-find-test-runner))
         (where (nose-find-project-root))
         (args (concat (if debug "--pdb" "")
                       " "
                       (if failed "--failed" "")
                       " "
                       (if stop "--stop" "")))
         (tnames (if tests tests "")))
    (if (not where)
        (error
         (format (concat "abort: nosemacs couldn't find a project root, "
                         "looked for any of %S") nose-project-root-files)))
    (funcall (if debug
                 'pdb
               '(lambda (command)
                  (compilation-start command
                                     nil
                                     (lambda (mode) (concat "*nosetests*")))))
             (format
              (concat "%s "
                      (if nose-use-verbose "-v " "")
                      "%s -w %s -c %ssetup.cfg %s")
              (nose-find-test-runner) args where where tnames)))
  )

(defvar nose-use-coverage t)
(defadvice run-nose
  (around run-nose-with-coverage activate)
  (let* ((nose (nose-find-test-runner))
         (where (nose-find-project-root))
         (args (concat (if debug "--pdb" "")
                       " "
                       (if failed "--failed" "")
                       " "
                       (if stop "--stop" "")))
         (tnames (if tests tests ""))
         (coverage-opt (if nose-use-coverage "--with-coverage" "")))
    (if (not where)
        (error
         (format (concat "abort: nosemacs couldn't find a project root, "
                         "looked for any of %S") nose-project-root-files)))
    (funcall (if debug
                 'pdb
               '(lambda (command)
                  (compilation-start command
                                     nil
                                     (lambda (mode) (concat "*nosetests*")))))
             (format
              (concat "%s "
                      (if nose-use-verbose "-v " "")
                      nose-use-coverage
                      " %s -w %s -c %ssetup.cfg %s")
              (nose-find-test-runner) args where where tnames)))
  )
;; (progn (ad-disable-advice 'run-nose 'around 'run-nose-with-coverage) (ad-update 'run-nose))

** Sun 24 Nov 2013 05:15:42 PM JST
(expand-file-name "~/.pylib")
"/root/.pylib"

"/root/root"

"/root/"
filecache-save-name
"/root/.emacs.d/var_e/filecached_save.el"
(file-cache-add-directory my-start-dir)
(file-cache-add-directory my-plugin-dir)
(file-cache-add-directory (expand-file-name "~/.pylib"))
"Filecache: cached 31 file names."

my-pylib-dir
"\\root\\.emacs.d\\data_e\\pylib"

nil


(file-cache-add-directory (expand-file-name "~/.zsh/scripts"))

(expand-file-name "~/.zsh/scripts")
"/root/.zsh/scripts"

"Filecache: cached 159 file names."

my-elisp-dir
"/root/.emacs.d/elisp/"
(recursive-directory "/root/.emacs.d/elisp/")
("/root/.emacs.d/elisp/plugin/expand-region/features/support/vendor/python-el" "/root/.emacs.d/elisp/plugin/expand-region/features/support/vendor" "/root/.emacs.d/elisp/plugin/multiple-cursors/util/vendor" "/root/.emacs.d/elisp/plugin/multiple-cursors/util/espuds" "/root/.emacs.d/elisp/plugin/multiple-cursors/util/ecukes" "/root/.emacs.d/elisp/plugin/multiple-cursors/features/support" "/root/.emacs.d/elisp/plugin/multiple-cursors/features/step-definitions" "/root/.emacs.d/elisp/plugin/expand-region/util/espuds" "/root/.emacs.d/elisp/plugin/expand-region/util/ecukes" "/root/.emacs.d/elisp/plugin/expand-region/features/support" "/root/.emacs.d/elisp/plugin/expand-region/features/step-definitions" "/root/.emacs.d/elisp/plugin/multiple-cursors/util" "/root/.emacs.d/elisp/plugin/multiple-cursors/features" "/root/.emacs.d/elisp/plugin/helm/doc" "/root/.emacs.d/elisp/plugin/expand-region/util" "/root/.emacs.d/elisp/plugin/expand-region/features" "/root/.emacs.d/elisp/plugin/emacs-w3m/shimbun" "/root/.emacs.d/elisp/plugin/emacs-w3m/patches" "/root/.emacs.d/elisp/plugin/emacs-w3m/icons30" "/root/.emacs.d/elisp/plugin/emacs-w3m/icons" "/root/.emacs.d/elisp/plugin/emacs-w3m/doc" "/root/.emacs.d/elisp/plugin/emacs-w3m/attic" "/root/.emacs.d/elisp/plugin/ee-0.1.0/view" "/root/.emacs.d/elisp/plugin/color-theme-6.6.0/themes" "/root/.emacs.d/elisp/plugin/yasnippet" "/root/.emacs.d/elisp/plugin/sdic" "/root/.emacs.d/elisp/plugin/rainbow-delimiters-1.3.4" "/root/.emacs.d/elisp/plugin/multiple-cursors" "/root/.emacs.d/elisp/plugin/mark-multiple" "/root/.emacs.d/elisp/plugin/helm" "/root/.emacs.d/elisp/plugin/expand-region" "/root/.emacs.d/elisp/plugin/emacs-w3m" "/root/.emacs.d/elisp/plugin/ee-0.1.0" "/root/.emacs.d/elisp/plugin/color-theme-6.6.0" "/root/.emacs.d/elisp/start.d" "/root/.emacs.d/elisp/plugin" "/root/.emacs.d/elisp/mylisp" "/root/.emacs.d/elisp/")
(pdb "nosetests -vv ~/.pylib/holiday_japan/test/test_holiday.py --pdb-failures --with-coverage --with-id --rednose" )
nose-global-name
"nosetests"

custom-group











`(save-excursion
   (let ((re "(defgroup[ \t\n]*\\\\([a-z0-9]*[:-]\\\\)"))
     (cond
      ((or
        (re-search-backward re nil t)
        (re-search-forward  re nil t))
       (match-string 1))
      (t "group-name"))))

(defun testtt (&rest &key hello) ;[2013/11/24]
  ":KEY 
HELLO"
  (if hello
      (message "DEBUG-1-nofile")
    (message "DEBUG-2-nofile")
    )
  )

(testtt :hello "world")

(s-join " " (list "" (concat "world" "yahoo") ""))
(delq "" (list "" (concat "world" "yahoo") "" "google" "hello" "" "yooo"))
("worldyahoo" "google" "hello" "yooo")

("worldyahoo")

" worldyahoo "

" worldyahoo"
(mapconcat 'identity strings separator)
(delq ""
      (list
       (if nosetests-exe "--exe" "")
       (if nosetests-quiet "--quiet" "")
       (if nosetests-stop "--stop" "")
       (if nosetests-no-byte-compile "--no-byte-compile" "")
       (if nosetests-rednose "--rednose" "")
       (if nosetests-no-color "--no-color" "")
       (if nosetests-force-color "--force-color" "")
       (if nosetests-immediate "--immediate" "")
       (if nosetests-nocapture "--nocapture" "")
       (if nosetests-nologcapture "--nologcapture" "")
       (if nosetests-with-coverage "--with-coverage" "")
       (if nosetests-cover-html "--cover-html" "")
       (if nosetests-cover-branches "--cover-branches" "")
       (if nosetests-cover-xml "--cover-xml" "")
       (if nosetests-pdb "--pdb" "")
       (if nosetests-pdb-failures "--pdb-failures" "")
       (if nosetests-with-doctest "--failure-detail" "")
       (if nosetests-failure-detail "--failure-detail" "")
       (if nosetests-with-profile "--with-profile" "")
       (if nosetests-no-skip "--no-skip" "")
       (if nosetests-with-id "--with-id" "")
       (if nosetests-all-modules "--all-modules" "")
       (if nosetests-collect-only "--collect-only" "")))
(list '("--rednose"))


(list (nosetests-make-static-options) (nosetests-make-static-options))
("--rednose" "--rednose")

"--rednose"
(append (nosetests-list-static-options) (nosetests-make-static-options))
("--rednose" "--with-id" "--all-modules" "--collect-only" . "--rednose --with-id --all-modules --collect-only")

(("--rednose" "--with-id" "--all-modules" "--collect-only") "--rednose --with-id --all-modules --collect-only")

("--rednose" "--with-id" "--all-modules" "--collect-only" . "--rednose --with-id --all-modules --collect-only")

(setq nosetests-collect-only nil)
(setq nosetests-all-modules nil)
(setq nosetests-with-id t)

(mapconcat 'identity (append (nosetests-list-static-options)
                             (nosetests-list-static-options)
                             )
           " ")
"--rednose --with-id --all-modules --collect-only --rednose --with-id --all-modules --collect-only"

"--rednose --with-id --all-modules --collect-only"

(mapconcat 'identity (append (nosetests-list-static-options)
                             (nosetests-list-arg-options)) " ")
(list
 (if nosetests-exe "--exe" "")
 (if nosetests-quiet "--quiet" "")
 (if nosetests-stop "--stop" "")
 (if nosetests-no-byte-compile "--no-byte-compile" "")
 (if nosetests-rednose "--rednose" "")
 (if nosetests-no-color "--no-color" "")
 (if nosetests-force-color "--force-color" "")
 (if nosetests-immediate "--immediate" "")
 (if nosetests-nocapture "--nocapture" "")
 (if nosetests-nologcapture "--nologcapture" "")
 (if nosetests-with-coverage "--with-coverage" "")
 (if nosetests-cover-html "--cover-html" "")
 (if nosetests-cover-branches "--cover-branches" "")
 (if nosetests-cover-xml "--cover-xml" "")
 (if nosetests-pdb "--pdb" "")
 (if nosetests-pdb-failures "--pdb-failures" "")
 (if nosetests-with-doctest "--failure-detail" "")
 (if nosetests-failure-detail "--failure-detail" "")
 (if nosetests-with-profile "--with-profile" "")
 (if nosetests-no-skip "--no-skip" "")
 (if nosetests-with-id "--with-id" "")
 (if nosetests-all-modules "--all-modules" "")
 (if nosetests-collect-only "--collect-only" ""))
("" "" "" "" "--rednose" "" "" "" "" "" "" "" ...)
(list
 (if nosetests-config (format "--config=%s" nosetests-config) "")
 (if nosetests-where (format "--where=%s" nosetests-where) "")
 (if nosetests-debug (format "--debug=%s" nosetests-debug) "")
 (if nosetests-debug-log
     (format "--debug-log=%s" nosetests-debug-log) "")
 (if nosetests-logging-config
     (format "--logging-config=%s" nosetests-logging-config) "")
 (if nosetests-ignore-file
     (format "--ignore-files=%s" nosetests-ignore-file) "")
 (if nosetests-attr (format "--attr=%s" nosetests-attr) "")
 (if nosetests-eval-attr
     (format "--eval-attr=%s" nosetests-eval-attr) "")
 (if nosetests-cover-xml-file
     (format "--cover-xml-file=%s" nosetests-cover-xml-file) "")
 (if nosetests-cover-html-dir
     (format "--cover-html-dir=%s" nosetests-cover-html-dir) "")
 (if nosetests-regexp (format "--match=%s" nosetests-regexp) "")
 (if nosetests-exclude
     (format "--exclude=%s" (s-join "," nosetests-exclude)) "")
 (if nosetests-include
     (format "--include=%s" (s-join "," nosetests-include)) "")
 )
(setq nosetests-config nil
      nosetests-where nil
      nosetests-debug nil
      nosetests-debug-log nil
      nosetests-logging-config nil
      nosetests-ignore-file nil
      nosetests-attr nil
      nosetests-eval-attr nil
      nosetests-cover-xml-file nil
      nosetests-cover-html-dir nil
      nosetests-regexp nil
      nosetests-exclude nil
      nosetests-include nil)


"--config="

(nosetests-list-arg-options)
("--verbosity=0")
nosetests-pdb
nosetests-pdb-failures


(compilation-start "ls" nil (lambda (mode) (format "*nosetests%s*" "world")))
#<buffer *nosetestsworld*>
(read-input "nosetests: " )
(read-shell-command "hello " "yahoo" nil "world")
(read-string "hello " nil nil "ooooo")

(save-some-buffers)

(directory-file-name )
(directory)
default-directory
"~/"
(setq nosetests-verbose-level 2)



(turn-off-re)

(defun colorize-compilation-buffer ()                               
  (require 'ansi-color) 
  (read-only-mode -1) 
  (ansi-color-apply-on-region (point-min) (point-max)) 
  (read-only-mode 1)) 
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
(setq nosetests-exe t)

(with-temp-buffer-window )
(with-temp-buffer (message "hello" ))
(window-)
(other-win)


(get-buffer-create "*test*")

()
(pop-to-buffer (get-buffer-create "*pdb dummy*"))
#<buffer *pdb dummy*>

** Mon 25 Nov 2013 12:28:06 PM JST
(defun walk-edit (func dir &optional regexp save kill) ;[2013/11/25]
  "DIR 
REGEXP"
  (let ((co-check-type-miss t))
    (dolist (file (recursive-files dir regexp))
      (with-current-buffer (find-file-noselect file)
        (read-only-mode -1)
        (goto-char (point-min))
        (funcall func)
        (and save (save-buffer))
        (and (not (buffer-modified-p)) kill (kill-this-buffer))))))

(defun refact-python-insert-revision () ;[2013/11/25]
  ""
  (when (not (save-excursion (re-search-forward "LastChangedDate" nil 'noerror)))
    (when (re-search-forward "-\\*-.+-\\*-"
                             (save-excursion (forward-line 2) (point)) 'noerror)
      (forward-line 1))
    (just-one-blank-line)
    (insert "#\n# $Id$\n# $Revision$\n# $Date$ \n# $Author$\n# $LastChangedBy$\n# $LastChangedDate$\n")
    ))

(re-search-forward "-\\*-.+-\\*-" (save-excursion (forward-line 3) (point)) 'noerror)

(walk-edit 'refact-python-insert-revision "/root/.pylib" "\\.py$" "\\(\\.ropeproject\\|\\.svn\\|sendkey\\|ipython_config\\|ipython\\.log\\)")

(defun kill-some-buffers-by-extension (ext) ;[2013/11/25]
  "EXT"
  (interactive "sExtension: ")
  (let ((re (format "\\.%s\\'" ext)))
    (message "kill-buffer by %s" re)
    (dolist (buf (buffer-list))
      (with-current-buffer buf
        (when (string-match re (buffer-name))
          (message "killing %s" (buffer-name))
          (kill-buffer buf))))
    (message "Finished." )))

()

(defun hello (ARGS) ;[2013/11/25]
  "ARGS"
  (interactive "sTesing\\\\%\\\\s"))

hello
(hello)

(format "\\.%s\\'" "el")
"\\.el\\'"


(string-match "\\.py\\'" "hello.py")
5

(save-some-buffers)
nil

(walk-edit-dirs)

(read-only-mode -1)

(string-match "config" "test .py ")
nil

5
"\\(\\.ropeproject\\|\\.svn\\|sendkey\\|ipython_config\\|ipython\\.log\\)"

(walk-edit )



(defun test_b (buffer-name) ;[2013/11/25]
  "FUNC"
  (interactive "b")
  (switch-to-buffer buffer-name))

(defun test_B (buffer-name) ;[2013/11/25]
  "BUFFER-NAME"
  (interactive "B")
  (switch-to-buffer buffer-name))


(defun test_c (char) ;[2013/11/25]
  "CHAR"
  (interactive "c")
  (message (char-to-string char)))

(defun test_C (command) ;[2013/11/25]
  "COMMAND"
  (interactive "Cinput interactive command: ")
  (call-interactively command))

(defun test_d (point) ;[2013/11/25]
  "POINT"
  (interactive "d")
  (insert (number-to-string point)))
2381


(defun test_D (directory_name) ;[2013/11/25]
  "DIRECTORY_NAME"
  (interactive "D")
  (insert directory_name))
~/.emacs.d


(defun test_f (file_name) ;[2013/11/25]
  "FILE_NAME"
  (interactive "f")
  (insert file_name))

(defun test_F (file_name) ;[2013/11/25]
  "FILE_NAME"
  (interactive "F")
  (insert file_name))

(defun test_G (file_name) ;[2013/11/25]
  "FILE_NAME"
  (interactive "G")
  (insert file_name))
~
~/.emacs.d/nonexits.el

(defun test_1 (2) ;[2013/11/25]
  (interactive "3")
  (insert 2))

(defun test_k (key_sequence) ;[2013/11/25]
  (interactive "k")
  (insert key_sequence))
k

(defun test_K (key_sequance) ;[2013/11/25]
  (interactive "K")
  (insert key_sequance))

(load "editable-help")

(defun test_m (last-mark) ;[2013/11/25]
  (interactive "m")
  (insert (number-to-string last-mark)))

(defun test_M (string) ;[2013/11/25]
  "STRING"
  (interactive "Minput string: ")
  (insert string))

(defun test_N (number) ;[2013/11/25]
  "NUMBER"
  (interactive "Ninput number: ")
  (insert (number-to-string number)))

(defun test_P (raw) ;[2013/11/25]
  "RAW"
  (interactive "P")
  (message "%S" raw))


(defun test_s (string) ;[2013/11/25]
  "STRING"
  (interactive "sinput string: ")
  (insert string))

(defun test_S (symbol) ;[2013/11/25]
  "SYMBOL"
  (interactive "Sinput symbol: ")
  (insert (symbol-name symbol)))
this-symbol
(symbol-name )

hello
64

hello
31653166
(loop)

(defun test_U (event) ;[2013/11/25]
  (interactive "U")
  (message "%S" event))


(defun test_v (variable-name) ;[2013/11/25]
  (interactive "vinput variable name: ")
  (insert (symbol-name variable-name)))
helm-dired-mode

(defun test_x (lisp_form) ;[2013/11/25]
  "LISP_FORM"
  (interactive "x")
  (message "%S" lisp_form))

(defun test_X (lisp_form) ;[2013/11/25]
  (interactive "X")
  (message "%S" lisp_form))


(defun test_Z (coding-system) ;[2013/11/25]
  (interactive "Z")
  (insert (symbol-name coding-system)))

(defun test_@ (event) ;[2013/11/25]
  "mouse event"
  (interactive "@")
  
  )

(defun test_i (ignore) ;[2013/11/25]
  "IGNORE"
  (interactive "i")
  (unless ignore
    (message "%S" ignore)))

(defun test_e (event) ;[2013/11/25]
  "EVENT"
  (interactive "e")
  (message "%s" event))
(local-set-key (kbd "<down-mouse-1>") 'test_e)

(define-key  "KEY" 'FUNC)

japanese-cp932
nil
japanese-cp932
(defun test_e (event) ;[2013/11/25]
  "EVENT"
  (interactive "e")
  (insert (format "%s" event)))
(down-mouse-1 (#<window 0xd533f70 on *scratch*> 4748 (449 . 178) 15355890 nil 4748 (56 . 11) nil (377 . 8) (8 . 17)))
** Thu 28 Nov 2013 06:09:11 PM JST
apropos-all-words
all-words-regexp
all-words-fuzzy
apropos-documentation
modules

(require 'python "python" 'noerr)
compilation-filter-hook
nil
(s-join " " '("/usr/bin/python" "-m" "apropos"
                                        ;"--color-normal"
              "hell"))
"/usr/bin/python -m apropos hell"

(open-line)


(progn 
  (beginning-of-line)
  (join-line)
  (insert ", ")
  (save-restriction
    (narrow-to-region (save-excursion (back-to-indentation) (point))
                      (line-end-position))
    (save-excursion
      (beginning-of-line)
      (delete-holizontal-space)
      (while (re-search-forward "[[:blank:]]" nil 'noerror)
        (when (not (py:string|comment-p))))
      )
    
    )
  
  )

(require '__python__ "__python__" 'noerr)


(string-)
asgin
(defun FUNC (ARGS) ;[2013/11/27]
  "ARGS"
  ${4:(${5:interactive${6: "${7:$(yas/choose-value '("*" "^" "@""a""b""B""c""C""d""D""e""f""F""G""i""k""K""m""M""n""N""p""P""r""s""S""U""v""x""X""z""Z"))}}"})}
)

(defun FUNC (ARGS) ;[2013/11/27]
  "ARGS"
  ${4:(${5:interactive${6: "${7:value$(yas/choose-value '("*" "^" "@""a""b""B""c""C""d""D""e""f""F""G""i""k""K""m""M""n""N""p""P""r""s""S""U""v""x""X""z""Z"))}}"})}
)

(defun hello (ARGS) ;[2013/11/27]
  "ARGS"
  (interactive "N")
)

(defun helo (ARGS) ;[2013/11/27]
  "ARGS"
  (interactive*)
  )
(defun hello (world) ;[2013/11/27]
  "WORLD"
  (interactive)
  )

(defun hello (ARGS) ;[2013/11/27]
  "ARGS"
  
  )

(defun hello (ARGS) ;[2013/11/27]
  "ARGS"
  (interactive "*")
  )


(defun hwllo (ARGS) ;[2013/11/27]
  "ARGS"
  (interactive "*")
  )
(thing-at-point)
(setq w3m-user-agent "Emacs-w3m/ w3m/0.5.3+cvs-1.1055")
(setq w3m-use-cookies nil)
(setq w3m-use-favicon nil)
(setq w3m-show-graphic-icons-in-mode-line nil)
(setq w3m-show-graphic-icons-in-header-line nil)
(ipython nil nil t)
w3m-view-this-url-new-session
(setq auto-insert-choose '((?m "module" "module_auto-insert")
(?n "normal" "normal_auto-insert")
(?j "junk" "junk_py_auto-insert")
(?c "client(socket)" "client_socket_auto-insert")
(?s "server(socket)" "server_socket_auto-insert")
(?i "i__init__" "__init__auto-insert")
(?t "test" "test_auto-insert")
(?h "head&tail" "headertail_auto-insert")
(?S "setup" "setup_auto-insert")
(?b "blank" "blank_auto-insert")
))

((setq e2wm:book-recipe
  '(| (:left-max-size 25)
    (- (:lower-max-size 30)
     files history)
     (| (:right-size-ratio 0.6) main
(- (:lower-max-size 20) right sub)))))
(setq e2wm:book-recipe
 '(| (:left-max-size 25)
   (- (:lower-max-size 30)
    files history)
    (| (:left-size-ratio 0.53) main
     (- (:lower-max-size 20) right sub))))

(setq e2wm:book-winfo
 '((:name files     :plugin dired :default-hide t)
   (:name history   :plugin history-list :default-hide t)
   (:name main)
   (:name right     :default-hide nil)
   (:name sub       :buffer "*info*" :default-hide t)))


(setq e2wm:book-recipe
 '(| (:right-size-ratio 0.9)
   (- (:lower-max-size 30)
    files history)      
    (| (:right-size-ratio 0.50) main
     (- (:lower-max-size 20) right sub))))

(setq e2wm:py-code-recipe
 '(| (:left-max-size 28)
   ;; left
   (- (:upper-max-size 18)
    files
    (- (:upper-max-size 20)
     imenu history))
     (| (:left-max-size 84) ;linum +4
      ;; center
      (- (:upper-max-size 20) upsub main)
      ;; right
      (- (:lower-max-size 22) right sub))))


(get-buffer )
** Thu 28 Nov 2013 10:32:27 PM JST
(get-buffer)

(string-match "\*w3m\*" "*w3m*")
(setq-default mode-line-format
 (list "%e"
  '(:eval (concat
           (powerline-rmw            'left   nil  )
           (powerline-buffer-size    'left   nil  )
           (powerline-buffer-id      'left   nil  powerline-color1  )
           (powerline-major-mode     'left        powerline-color1  )
           (powerline-process        'text        powerline-color1  )
           (powerline-minor-modes    'left        powerline-color1  )
           (powerline-narrow         'left        powerline-color1  powerline-color2  )
           (powerline-global         'center                        powerline-color2  )
           (powerline-vc             'center                        powerline-color2  )
           (powerline-make-fill                                     powerline-color2  )
           (powerline-row            'right       powerline-color1  powerline-color2  )
           (powerline-make-text      ":"          powerline-color1  )
           (powerline-column         'right       powerline-color1  )
           (powerline-percent        'right  nil  powerline-color1  )
           (powerline-percent-xpm    'text   nil  powerline-color1  )
(powerline-make-text      "  "    nil  )))))
** Sat 30 Nov 2013 04:34:19 PM JST
(defe2wm-show-command)

(defmacro def-e2wm:show-command (winname)
  "Macro to create e2wm show command."
  `(defun ,(intern (concat "e2wm:show-" (symbol-name winname))) ()
     (interactive)
     (wlf:show (e2wm:pst-get-wm) ',winname)
     (e2wm:pst-update-windows)))

(expand-macro )(def-e2wm:show-command history)

(macroexpand '(def-e2wm:show-command history))
(defalias (quote e2wm:show-history) (function (lambda nil (interactive) (wlf:show (e2wm:pst-get-wm) (quote history)) (e2wm:pst-update-windows))))

e2wm:show-history

(defmacro defe2wm:command (action pstname)
  "Macro to create e2wm show command."
  `(defun ,(intern (concat "e2wm:hide-" (symbol-name pstname) "-command")) ()
     (interactive)
     (wlf:,action (e2wm:pst-get-wm) ',pstname)
     (e2wm:pst-update-windows)))
(defmacro defe2wm:command (action pstname)
  "Macro to create e2wm show command."
  `(defun ,(intern (concat "e2wm:hide-" (symbol-name pstname) "-command")) ()
     (interactive)
     (,(intern (concat "wlf:" (symbol-name action))) (e2wm:pst-get-wm) ',pstname)
     (e2wm:pst-update-windows)))

(intern (concat "wlf:" (symbol-name 'show)))

(macroexpand '(defe2wm:command show history))
(defalias (quote e2wm:show-history-command) (function (lambda nil (interactive) (wlf:show (e2wm:pst-get-wm) (quote history)) (e2wm:pst-update-windows))))

(defalias (quote e2wm:hide-history-command) (function (lambda nil (interactive) (wlf:show (e2wm:pst-get-wm) (quote history)) (e2wm:pst-update-windows))))

(defalias (quote e2wm:hide-hide-command)
 (function (lambda nil (interactive)
 (wlf:show (e2wm:pst-get-wm) (quote hide)) (e2wm:pst-update-windows))))

(defalias (quote e2wm:hide-hide-command) (function (lambda nil (interactive) (wlf: show (e2wm:pst-get-wm) (quote hide)) (e2wm:pst-update-windows))))

e2wm:hide-hide-command

(functionname )
(concatenate 'string '(hello world))
(intern (apply #'concatenate 'string (mapcar #'symbol-name '(hello world))))
helloworld
(intern (concat "wlf:" (symbol-name 'show)))
wlf:show


"helloworld"

(macroexpand '(defe2wm:command hide file))
(defalias (quote e2wm:hide-file-command) (function (lambda nil (interactive) (wlf:hide (e2wm:pst-get-wm) (quote file)) (e2wm:pst-update-windows))))



(defmacro defe2wm:pst-change (dpname)
  "Macro to create e2wm pst-change command."
  `(defun ,(intern (concat "e2wm:dp-" (symbol-name dpname)))
     (interactive)
     (e2wm:pst-change ',dpname)))
(expandmacro '(defe2wm:pst-change pycode))
(defalias (quote e2wm:dp-pycode) (function (lambda (interactive) (e2wm:pst-change (quote pycode)))))


(defmacro defe2wm:navi-simple-command (winname)
  "Macro to create e2wm navigation command."
  `(defun ,(intern (concat "e2wm:navi-" (symbol-name winname) "-command"))
     (interactive)
     (e2wm:pst-window-select ',winname)))

(defmacro defe2wm:navi&show-command (winname)
  "Macro to create e2wm show and navigation command."
  `(defun ,(intern (concat "e2wm:navi-" (symbol-name winname) "-command")) ()
     (interactive)
     (let ((wm (e2wm:pst-get-wm))
           (winfo-name ',winname))
       (wlf:show wm winfo-name)
       (wlf:select wm winfo-names)
       (e2wm:pst-update-windows))))

(expandmacro '(defe2wm:navi&show-command sub))
(defalias (quote e2wm:navi-sub-command) (function (lambda nil (interactive) (let ((wm (e2wm:pst-get-wm)) (winfo-name (quote sub))) (wlf:show wm winfo-name) (wlf:select wm winfo-names) (e2wm:pst-update-windows)))))


(defalias (quote e2wm:navi-sub-command) (function (lambda nil (interactive) (let ((wm (e2wm:pst-get-wm)) (winfo-name sub)) (wlf:show wm winfo-name) (wlf:select wm winfo-names) (e2wm:pst-update-windows)))))

(expandmacro '(defe2wm:navi-simple-command main))
(defalias (quote e2wm:navi-main-command) (function (lambda (interactive) (e2wm:pst-window-select (quote main)))))

e2wm:navi-main-command

e2wm:navimain-command
()
(wlf:window-shown-p 'sub) 
(wlf:window-shown-p (wlf:get-winfo nil (wlf:wset-winfo-list 'sub)))

(defmacro defe2wm:navi&show-command (winname)
  "Macro to create e2wm show and navigation command."
  `(defun ,(intern (concat "e2wm:navi-" (symbol-name winname) "-command")) ()
     (interactive)
     (let ((wm (e2wm:pst-get-wm))
           (winfo-name ',winname))
       (unless (wlf:window-shown-p
                (wlf:get-winfo winfo-name (wlf:wset-winfo-list wm)))
         (wlf:show wm winfo-name))
       (wlf:select wm winfo-name)
       (e2wm:pst-update-windows)
       )))

(wlf:window-shown-p (wlf:get-winfo 'sub (wlf:wset-winfo-list (e2wm:pst-get-wm))))
t
(current-buffer)
[cl-struct-wlf:window sub (:name sub :buffer #<buffer *scratch*>) show #<window 0xc6863b0 on *scratch*> t nil (122 37 210 59)]

c-auto-newline
nil

** Wed 15 Jan 2014 10:36:15 PM JST

** Thu 16 Jan 2014 04:42:08 PM JST
;; borrow from dired-aux.el
(defun py:dired-create-directory (directory) ;[2014/01/16]
  "DIRECTORY"
  (interactive
   (list (read-file-name "Create directory: " (dired-current-directory))))
  (let* ((expanded (directory-file-name (expand-file-name directory)))
         (try expanded) new)
    (if (file-exists-p expanded)
        (error "Cannot create directory %s: file exists" expanded))
    ;; Find the topmost nonexistent parent dir (variable `new')
    (while (and try (not (file-exists-p try)) (not (equal new try)))
      (setq new try
            try (directory-file-name (file-name-directory try))))
    (make-directory expanded t)
    (find-file (expand-file-name "__init__.py" expanded))
    )
  )
(when (not (dired-create-directory "tes"))
  (message "hello" ))

(ignore-errors (dired-create-directory "tes"))

(let ((set-buffer-modified-p t))
  
  )
** Tue 18 Feb 2014 01:48:02 PM JST
Atom(c, num=5, name='BITMAP')
Atom(c, num=5)
Atom(c, name='BITMAP')
Atom(c, 5)    
Atom(c, 'BITMAP')
Atom(c, 5, 'BITMAP')
__add__           __mod__                      decode      partition 
__class__         __mul__                      encode      replace   
__contains__      __ne__                       endswith    rfind     
__delattr__       __new__                      expandtabs  rindex    
__doc__           __reduce__                   find        rjust     
__eq__            __reduce_ex__                format      rpartition
__format__        __repr__                     index       rsplit    
__ge__            __rmod__                     isalnum     rstrip    
__getattribute__  __rmul__                     isalpha     split     
__getitem__       __setattr__                  isdigit     splitlines
__getnewargs__    __sizeof__                   islower     startswith
__getslice__      __str__                      isspace     strip     
__gt__            __subclasshook__             istitle     swapcase  
__hash__          _formatter_field_name_split  isupper     title     
__init__          _formatter_parser            join        translate 
__le__            capitalize                   ljust       upper     
__len__           center                       lower       zfill     
__lt__            count                        lstrip   

__abs__           __hex__      __radd__       __rtruediv__    
__add__           __index__    __rand__       __rxor__        
__and__           __init__     __rdiv__       __setattr__     
__class__         __int__      __rdivmod__    __sizeof__      
__cmp__           __invert__   __reduce__     __str__         
__coerce__        __long__     __reduce_ex__  __sub__         
__delattr__       __lshift__   __repr__       __subclasshook__
__div__           __mod__      __rfloordiv__  __truediv__     
__divmod__        __mul__      __rlshift__    __trunc__       
__doc__           __neg__      __rmod__       __xor__         
__float__         __new__      __rmul__       bit_length      
__floordiv__      __nonzero__  __ror__        conjugate       
__format__        __oct__      __rpow__       denominator     
__getattribute__  __or__       __rrshift__    imag            
__getnewargs__    __pos__      __rshift__     numerator       
__hash__          __pow__      __rsub__       real           

** Wed 19 Feb 2014 02:36:06 PM JST
WindowDesktopType
WindowDockType
WindowToolbarType
WindowMenuType
WindowUtilityType
WindowSplashType
WindowDialogType
WindowDropdownType
WindowPopupType
WindowTooltipType
WindowNotificationType
WindowComboType
WindowDndType
WindowNormalType

** Sat 01 Mar 2014 04:41:52 AM JST
54525998

from xahk.xconnection import Connection as con
c=con()
c.ext.property.get_full_property(54525998, '_NET_WM_CLASS')


generate_id                    
get_file_descriptor            
get_maximum_request_length     
get_setup                      
has_error                      
poll_for_event                 
pref_screen                    
core
prefetch_maximum_request_length
disconnect
wait_for_event                 
flush          
__class__         _dispatcher               net_virtual_roots       
__delattr__       display                   net_wm_allowed_actions  
__dict__          get_full_property         net_wm_desktop          
__doc__           get_property              net_wm_handled_icons    
__format__        get_property_reply        net_wm_icon             
__getattribute__  net_active_window         net_wm_icon_geometry    
__hash__          net_client_list           net_wm_icon_name        
__init__          net_client_list_stacking  net_wm_name             
__module__        net_current_desktop       net_wm_pid              
__new__           net_desktop_geometory     net_wm_state            
__reduce__        net_desktop_layout        net_wm_strut            
__reduce_ex__     net_desktop_name          net_wm_strut_partial    
__repr__          net_desktop_viewport      net_wm_user_time        
__setattr__       net_frame_extents         net_wm_visible_icon_name
__sizeof__        net_number_of_desktops    net_wm_visible_name     
__str__           net_showing_desktop       net_wm_window_type      
__subclasshook__  net_supported             net_workarea            
__weakref__       net_supporting_wm_check

** Sun 27 Apr 2014 12:55:18 PM JST
from xahk.event import eventhandler
ed=eventhandler.EventDispatcher()
from xahk.remap.builder.refresh import focusin
bu=focusin.BuildFocusInKeyPress(ed)







from xahk.event import eventhandler
from xahk.remap.builder.refresh import focusin
from xahk.remap import remap
from sendkeys.code import KeyCode
from xahk.remap import register

ed=eventhandler.EventDispatcher()                         
gmap=remap.GlobalKeyMap()
                                                  
def tes(*args,**kwargs): 
    print('hello')       
                         
gmap.register(KeyCode(9), tes)                         
kr=register.KeyPressRegister(ed)
kr.regist_globalmap(gmap)

** Sun 27 Apr 2014 01:09:40 PM JST
(setq auto-insert-choose '((?m "module" "module_auto-insert")
                           (?M "blankmodule" "blankmodule_auto-insert")
                           (?n "normal" "normal_auto-insert")
                           (?j "junk" "junk_py_auto-insert")
                           (?c "client(socket)" "client_socket_auto-insert")
                           (?s "server(socket)" "server_socket_auto-insert")
                           (?i "i__init__" "__init__auto-insert")
                           (?t "test" "test_auto-insert")
                           (?h "head&tail" "headertail_auto-insert")
                           (?S "setup" "setup_auto-insert")
                           (?b "blank" "blank_auto-insert")))
** Sat 10 May 2014 11:09:07 PM JST
ConnectionAbstract WrapCoreAbstract
(fset 'core
   [?\M-: ?\( ?g ?o ?t ?o ?- ?c ?h ?a ?r ?  ?0 return ?\M-% ?C ?o ?n ?n ?e ?c ?t ?i ?o ?n ?A ?b ?s ?t ?r ?a ?c ?t return ?W ?r ?a ?p ?C ?o ?r ?e ?A ?b ?s ?t ?r ?a ?c ?t return ?! ?\M-: ?\( ?g ?o ?t ?o ?- ?c ?h ?a ?r ?  ?0 return ?\M-% ?s ?e ?l ?f ?. ?c ?o ?n ?n ?e ?c ?t ?i ?o ?n return ?s ?e ?l ?f ?. backspace return ?! ?\M-: ?\( ?g ?o ?t ?o ?- ?c ?h ?a ?r ?  ?0 return ?\M-% ?c ?o ?n ?n ?e ?c ?t ?i ?o ?n return ?c ?o ?r ?e return ?!])
50331670
** Sun 11 May 2014 12:54:30 PM JST
AllocColor 
AllocColorCells 
AllocColorCellsUnchecked 
AllocColorPlanes 
AllocColorPlanesUnchecked 
AllocNamedColor 
AllocNamedColorUnchecked 
AllowEvents 
AllowEventsChecked 
Bell 
BellChecked 
ChangeActivePointerGrab 
ChangeActivePointerGrabChecked 
ChangeGC 
ChangeGCChecked 
ChangeKeyboardControl 
ChangeKeyboardControlChecked 
ChangeKeyboardMapping 
ChangeKeyboardMappingChecked 
ChangePointerControl 
ChangePointerControlChecked 
ChangeProperty 
ChangePropertyChecked 
ChangeSaveSet 
ChangeSaveSetChecked 
ChangeWindowAttributes 
ChangeWindowAttributesChecked 
CirculateWindow 
CirculateWindowChecked 
ClearArea 
ClearAreaChecked 
CloseFont 
CloseFontChecked 
ConfigureWindow 
ConfigureWindowChecked 
ConvertSelection 
ConvertSelectionChecked 
CopyArea 
CopyAreaChecked 
CopyColormapAndFree 
CopyColormapAndFreeChecked 
CopyGC 
CopyGCChecked 
CopyPlane 
CopyPlaneChecked 
CreateColormap 
CreateColormapChecked 
CreateCursor 
CreateCursorChecked 
CreateGC 
CreateGCChecked 
CreateGlyphCursor 
CreateGlyphCursorChecked 
CreatePixmap 
CreatePixmapChecked 
CreateWindow 
CreateWindowChecked 
DeleteProperty 
DeletePropertyChecked 
DestroySubwindows 
DestroySubwindowsChecked 
DestroyWindow 
DestroyWindowChecked 
FillPoly 
FillPolyChecked 
ForceScreenSaver 
ForceScreenSaverChecked 
FreeColormap 
FreeColormapChecked 
FreeColors 
FreeColorsChecked 
FreeCursor 
FreeCursorChecked 
FreeGC 
FreeGCChecked 
FreePixmap 
FreePixmapChecked 
GetFontPath 
GetFontPathUnchecked 
GetGeometry 
GetGeometryUnchecked 
GetImage 
GetImageUnchecked 
GetInputFocus 
GetInputFocusUnchecked 
GetKeyboardControl 
GetKeyboardControlUnchecked 
GetKeyboardMapping 
GetKeyboardMappingUnchecked 
GetModifierMapping 
GetModifierMappingUnchecked 
GetMotionEvents 
GetMotionEventsUnchecked 
GetPointerControl 
GetPointerControlUnchecked 
GetPointerMapping 
GetPointerMappingUnchecked 
GetProperty 
GetPropertyUnchecked 
GetSelectionOwner 
GetSelectionOwnerUnchecked 
GetWindowAttributes 
GetWindowAttributesUnchecked 
GrabButton 
GrabButtonChecked 
GrabKey 
GrabKeyChecked 
GrabKeyboard 
GrabKeyboardUnchecked 
GrabPointer 
GrabPointerUnchecked 
GrabServer 
GrabServerChecked 
ImageText16 
ImageText16Checked 
ImageText8 
ImageText8Checked 
InstallColormap 
InstallColormapChecked 
KillClient 
KillClientChecked 
ListExtensions 
ListExtensionsUnchecked 
ListFonts 
ListFontsUnchecked 
ListFontsWithInfo 
ListFontsWithInfoUnchecked 
ListInstalledColormaps 
ListInstalledColormapsUnchecked 
ListProperties 
ListPropertiesUnchecked 
LookupColor 
LookupColorUnchecked 
MapSubwindows 
MapSubwindowsChecked 
MapWindow 
MapWindowChecked 
NoOperation 
NoOperationChecked 
OpenFont 
OpenFontChecked 
PolyArc 
PolyArcChecked 
PolyFillRectangle 
PolyFillRectangleChecked 
PolyLine 
PolyLineChecked 
PolyPoint 
PolyPointChecked 
PolyRectangle 
PolyRectangleChecked 
PolySegment 
PolySegmentChecked 
PolyText16 
PolyText16Checked 
PolyText8 
PolyText8Checked 
PutImage 
PutImageChecked 
QueryBestSize 
QueryBestSizeUnchecked 
QueryColors 
QueryColorsUnchecked 
QueryExtension 
QueryExtensionUnchecked 
QueryFont 
QueryFontUnchecked 
QueryPointer 
QueryPointerUnchecked 
QueryTextExtents 
QueryTextExtentsUnchecked 
QueryTree 
QueryTreeUnchecked 
RecolorCursor 
RecolorCursorChecked 
ReparentWindow 
ReparentWindowChecked 
RotateProperties 
RotatePropertiesChecked 
SendEvent 
SendEventChecked 
SetAccessControl 
SetAccessControlChecked 
SetClipRectangles 
SetClipRectanglesChecked 
SetCloseDownMode 
SetCloseDownModeChecked 
SetDashes 
SetDashesChecked 
SetFontPath 
SetFontPathChecked 
SetInputFocus 
SetInputFocusChecked 
SetModifierMapping 
SetModifierMappingUnchecked 
SetPointerMapping 
SetPointerMappingUnchecked 
SetSelectionOwner 
SetSelectionOwnerChecked 
StoreColors 
StoreColorsChecked 
StoreNamedColor 
StoreNamedColorChecked 
TranslateCoordinates 
TranslateCoordinatesUnchecked 
UngrabButton 
UngrabButtonChecked 
UngrabKey 
UngrabKeyChecked 
UngrabKeyboard 
UngrabKeyboardChecked 
UngrabPointer 
UngrabPointerChecked 
UngrabServer 
UngrabServerChecked 
UninstallColormap 
UninstallColormapChecked 
UnmapSubwindows 
UnmapSubwindowsChecked 
UnmapWindow 
UnmapWindowChecked 
WarpPointer 
WarpPointerChecked 

** Mon 12 May 2014 06:30:50 PM JST
(defun cleanup-autosave (&optional force)
  "Clean up auto save file.
If auto save file is old, then will delete it."
  (interactive "p")
  (let ((files (directory-files my-bk-autosave-dir))
        (find-file-hook nil)
        f-location
        source-file
        deleted)
    (dolist (f files)
      (setq f-location (expand-file-name f my-bk-autosave-dir))
      (when (auto-save-file-name-p f)
        (setq source-file (file-name-from-auto-save f))
        (when (or (not (file-newer-than-file-p f-location source-file))
                  force)
          (setq deleted (append deleted (list (format "Deleted %s" f))))
          (delete-file f-location))))
    (message "%s" (mapconcat 'identity deleted "\n"))))


open-junk-file-format
"/root/.emacs.d/var_e/junk/%Y-%m-%d-%H%M%S.junk."
open-junk-file-directory
"/root/.emacs.d/var_e/junk/%Y-%m-%d-%H%M%S.junk."
my-var-dir
"/root/.emacs.d/var_e/"

(directory-files )

(directory-files open-junk-file-dir-path)

(string-equal "." ".")
t
delete-directory

("." ".." "2014-05-12-150545.junk.py")

(defun remove-dir-files (dirpath) ;[2014/05/12]
  "DIRPATH"
  (let ((files (directory-files dirpath))
        fpath
        deletedlis
        )
    (dolist (f files)
      (when (not (or (string-equal "." f) (string-equal ".." f)))
        (setq fpath (expand-file-name f dirpath))
        (setq deletedlis (append deletedlis (list (format "Deleted %s" f))))
        ))))


(defun cleanup-open-junk-files () ;[2014/05/12]
  ""
  (interactive)
  (delete-directory open-junk-file-dir-path 'recursive 'trash))
** Tue 20 May 2014 03:05:22 AM JST
'\x00\x00\x00\x00\x16\x00@\x03C\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00'
'\x00\x00\x00\x16\x00@\x03C\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00'
** Tue 20 May 2014 08:43:12 AM JST

(defun replace-ext () ;[2014/05/20]
  ""
  (interactive)
  (view-mode -1)
  (goto-char 0)
  (replace-string "from abc import ABCMeta, abstractmethod
" "")
  (goto-char 0)
  (replace-string "    __metaclass__ = ABCMeta
" "")
  (goto-char 0)
  (replace-string "    @abstractmethod
" "")
  (goto-char 0)
  (re-search-forward "    def request" nil 'noerror)
  (beginning-of-line)
  (kill-line 2)
  (goto-char 0)
  
  (re-search-forward "self.request(" nil 'noerror)
  
  (let* ((start (point))
         (end (save-excursion (py:usable-next 15) (point)))
         (args (buffer-substring start end))
         )
    (insert "self._getbinary(")
    (py:usable-next 15)
    (insert ")")
    (goto-char 0)
    (replace-string "buf.getvalue()" "binary")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (return-on-line)
    (py:newline)
    (insert "def _getbinary(self, " args "):
        return buf.getvalue()")
    )
  (next-line)
  (py-kill-line 1)
  (goto-char 0)
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 15) (point))))
    (delete-region start end))
  (insert "binary")
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 15) (point))))
    (delete-region start end))
  (insert "binary")
  (goto-char 0)
  (re-search-forward "Request(binary" nil 'noerror)
  (py:usable-next 2)
  (py:usable-prev 1)
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    )
  (re-search-forward "Request(binary" nil 'noerror)
  (py:usable-next 2)
  (py:usable-prev 1)
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (next-line 1)
    (insert "    code = " string "
")
    )
  (re-search-forward "_StringIO" nil 'noerror)
  (beginning-of-line)
  )







(progn 
  (goto-char 0)
  (re-search-forward "Request(binary" nil 'noerror)
  (py:usable-next 2)
  (py:usable-prev 1)
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    )
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (next-line 1)
    (insert "    code = " string "
")
    )
)


















;;;;


(progn
  (goto-char 0)
  (replace-string "buf.getvalue()" "binary")
  
)

(progn
  (goto-char 0)
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  )


;;;;;;
(progn
  (goto-char 0)
  (re-search-forward "    def request" nil 'noerror)
  (beginning-of-line)
  (kill-line 2)

  )
** Wed 04 Jun 2014 12:48:21 PM JST
_get_struct_prop
_set_struct_prop
get_user_time
client_list
client_list_stacking
get_desktop_names
get_win_client_list
get_active_window
get_current_desktop
get_desktop_viewport
get_desktop_geometry
get_supporting_wm_check
get_supported
get_workarea
get_workspace_count
get_number_of_desktop
get_desktop_layout
get_showing_desktop
** Fri 06 Jun 2014 03:22:12 PM JST
import xcb2
c=xcb2.connect()

Test Atom.
    @classmethod
    def setUpClass(cls):


(fill-region )

fill-column
80
a parts of xcb2
(define-key python-mode-map (kbd "<f5>") 'fill-region)


(fset 'call
   nil)


(progn
  (view-mode -1)
  (e2wm:navi-right-command)
  (mark-word)
  (region-copy)
  )

** Sat 07 Jun 2014 07:25:53 AM JST
(defun make-call-doc () ;[2014/06/06]
  ""
  (interactive)
  (e2wm:navi-right-command)
  (mark-word)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    (e2wm:navi-files-command)
    (goto-char 0)
    (search-forward (s-lower-camel-case text))
    (dired-my-advertised-find-file)
    (goto-char 0)
    (search-forward "__call__")
    (next-line)
    (beginning-of-line)
    (view-mode -1)
    (insert "        \"\"\"Request " text " X protocol.\"\"\"\n")
    (py:refact-doc)
    )
  )

(defun clean-yas-err () ;[2014/06/06]
  ""
  (interactive)
  (replace-string "        - [yas] elisp error!:
" "")
  )

(defun make-err-doc () ;[2014/06/06]
  ""
  (interactive)
  (goto-char 0)
  (search-forward "__call__")
  (search-forward "@Return:")
  (py:auto-colon-return-on-line)
  (py:newline)
  (insert "@Error:")
  (py:auto-colon-return-on-line)
  (e2wm:navi-right-command)
  (goto-char 0)
  (search-forward "Errors: ")
  (set-mark (point))
  (end-of-line)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    (e2wm:navi-main-command)
    (insert text)
    )
  (end-of-line)
  (while (not (looking-back "^[ ]+"))
    (backward-word)
    (insert "Bad")
    (backward-word)
    )
  )

(cua-paste 1)  

(search-forward (s-lower-camel-case "OpenFont"))

(defun make-temp-pydoc () ;[2014/06/06]
  ""
  (interactive)
  (make-call-doc)
  (clean-yas-err)
  (make-err-doc)
  (make-doc-cookie)
  (e2wm:navi-right-command)
  )

(defun make-doc-cookie () ;[2014/06/06]
  ""
  (interactive)
  (search-backward "@Return:")
  (py:auto-colon-return-on-line)
  (let ((pnt (point)))
    (search-forward "Cookie")
    (backward-word)
    (mark-word)
    (let ((text (read-region-or-string)))
      (deactivate-mark t)
      (goto-char pnt)
      (insert text)
      )
    )
  )

** Sun 08 Jun 2014 08:38:04 AM JST
import xcb2
c=xcb2.connect()
from xcb2.tests import simple_teswindow
import struct
w=c.get_window(simple_teswindow())
above=c.core.atomidentify('_NET_WM_ACTION_ABOVE')
struct.pack('5I', 1, above, 0, 0, 0)


pack
create
configure
clear_area
reparent
get_attributes
change_attributes
create_colormap
free_colormap       
list_installed_colormaps
circulate
change_save_set
convert_selection
translate_coords
get_motion_events
set_input_focus
set_selection_owner
send_event
#
map    
map_subwindows
unmap  
unmap_subwindows
destroy
destroy_subwindows
query_tree
# property
get_property
change_property
list_properties
delete_property
rotate_properties
# grab        
grab_keyboard
ungrab_keyboard
grab_key
ungrab_key
grab_button
ungrab_button
grab_pointer
ungrab_pointer
query_pointer
warp_pointer

** Sun 08 Jun 2014 05:15:12 PM JST
pack
getname
gettype
getformat
getproperty (window, long_offset=, long_length=, delete=)
changeproperty (window, mode=, data_len, data)
deleteproperty (window)
convertseletion (requestor, selection, target, time=)


pack
intern
gettype
getlength
getformat
getproperty Atom.getproperty(window, long_offset=, long_length, delete=)
changeproperty Atom.changeproperty(window, mode=, data_len, data)
deleteproperty Atom.deleteproperty(window)
convertselection Atom.convertselection(requestor, selection, target, time=)

pack
packatom
packname
gettype
get_name_len
getformat
getproperty
changeproperty
deleteproperty
convertselection
__int__
__str__
__len__


translate_coordinates
createwindow(depth, wid, parent, boarder_width, class_, visual, value_mask)
reparentwindow
warppointer(src_window, dst_window, dst_x, dst_y)
createpixmap
cleararea
copyarea
copyplane
putimage
getimage
PolyText8
PolyText16
ImageText8
ImageText16
CreateCursor
configurewindow

** Wed 11 Jun 2014 03:24:45 PM JST
WM_TRANSIENT_FOR
WM_PROTOCOLS
WM_COLORMAP_WINDOWS
WM_CLIENT_MACHINE
WM_NORMAL_HINTS
WM_HINTS
WM_STATE
get_wm_icon_size
_NET_WM_NAME
_NET_WM_STATE
_NET_WM_PID
_NET_WM_ALLOWED_ACTIONS
_NET_SUPPORTED
_NET_WM_ICON
_NET_WM_ICON_GEOMETRY
_NET_WM_USER_TIME
_NET_WM_USER_TIME_WINDOW
_NET_WM_WINDOW_TYPE
_NET_WORKAREA


'_WIN_LAYER',
'_NET_WM_ICON_GEOMETRY',
'_NET_FRAME_EXTENTS',
'_NET_WM_ALLOWED_ACTIONS',
'WM_STATE',
'_NET_WM_DESKTOP',
'_WIN_WORKSPACE',
'_WIN_STATE',
'_NET_WM_STATE',
'WM_HINTS',
'XdndAware',
'_MOTIF_DRAG_RECEIVER_INFO',
'_NET_WM_ICON',
'_NET_WM_SYNC_REQUEST_COUNTER',
'_NET_WM_WINDOW_TYPE',
'_NET_WM_USER_TIME_WINDOW',
'WM_CLIENT_LEADER',
'_NET_WM_PID',
'WM_LOCALE_NAME',
'WM_CLIENT_MACHINE',
'WM_NORMAL_HINTS',
'WM_PROTOCOLS',
'WM_CLASS',
'WM_ICON_NAME',
'_NET_WM_ICON_NAME',
'WM_NAME',
'_NET_WM_NAME',
ng
** Thu 10 Jul 2014 01:12:26 AM JST
holidays.AutumnalEquinoxDay,
holidays.ChildrensDay,
holidays.ComingOfAgeDay,
holidays.ConstitutionMemorialDay,
holidays.CultureDay,
holidays.EmperorsBirthDay,
holidays.GreenDay,
holidays.LaborThanksgivingDay,
holidays.MarineDay,
holidays.NationalFoundationDay,
holidays.NewYearsDay,
holidays.RespectForTheAgedDay,
holidays.ShowaDay,
holidays.SportsDay,
holidays.TheCeremonyOfTheEnthronementOfHisMajestyTheEmperorDay,
holidays.TheFuneralCeremonyOfEmperorShowaDay,
holidays.TheRiteOfWeddingOfHIHCrownPrinceAkihitoDay,
holidays.TheRiteOfWeddingOfHIHCrownPrinceNaruhitoDay,
holidays.VernalEquinoxDay,



from holiday_japan import holidays
c=holidays.ComingOfAgeDay()
c.getdate(2001)


from holiday_japan.generator import HolidayGenerator
h=HolidayGenerator()


ListDotAvoider().getattributes('append', 'extend')



import holidayjapan
h=holidayjapan.HolidayCommander()
from datetime import date
m=date(2000,1,1)
m2=date(2001,1,1)
h.nextholiday(m)

(py-kill-line )
(forward-char)
** Tue 09 Sep 2014 05:23:09 PM JST
(= 1 1)
t
(setq buffers (buffer-list))
(#<buffer *scratch*> #<buffer command.py> #<buffer test_start.el> #<buffer test_command.py> #<buffer *gud*> #<buffer  *Minibuf-1*> #<buffer *IPython*> #<buffer case.py> #<buffer  *WM:Imenu*> #<buffer commandtype.py> #<buffer tests> #<buffer command/__init__.py> ...)

(#<buffer *scratch*> #<buffer command.py> #<buffer test_start.el> #<buffer test_command.py> #<buffer *gud*> #<buffer  *Minibuf-1*> #<buffer *IPython*> #<buffer case.py> #<buffer  *WM:Imenu*> #<buffer commandtype.py> #<buffer tests> #<buffer command/__init__.py> ...)

(car buffers)
#<buffer *scratch*>



(defun kill-some-gud-buffers () ;[2014/09/09]
  ""
  (interactive)
  (let ((re "^\\*gud"))
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (string-match re (buffer-name)))
        (message "killing %s" (buffer-name) )
        (kill-buffer buf)))))
** Thu 11 Sep 2014 06:08:25 AM JST
'POWR',
'ITGD',
'ITVD',
'IAVD',
'IDEG',
'CBSD',
'CCSD',
'CTBD',
'CHUP',
'CHDW',
'INP4',
'AVMD',
'VOLM',
'HPOS',
'VPOS',
'CLCK',
'PHSE',
'WIDE',
'MUTE',
'ACSU',
'ACHA',
'OFTM',

** Thu 11 Sep 2014 06:23:39 AM JST
(mapcar )


(setq a (list "a"))
("a")
a
("a")
(add-to-list 'a "b")
("b")

("b" "a")
(setq a nil)
nil


("a")

nil
(list-matched-buffers "\\.py")


nil

** Wed 15 Oct 2014 04:45:45 PM JST
from sendkey2.keysymdef import maps
n=maps.SymNumMap()


from sendkey2.key import keysymdef
k=keysymdef.Keysymdef()
k.name_to_sym('d')


for sym in keysymdef.Keysymdef.listsyms():
     try:
         print(sym.to_char())
     except ConvertError as _e:
         print(_e)

** Wed 15 Oct 2014 04:47:29 PM JST
'F1': 0xffbe,
'F2': 0xffbf,
'F3': 0xffc0,
'F4': 0xffc1,
'F5': 0xffc2,
'F6': 0xffc3,
'F7': 0xffc4,
'F8': 0xffc5,
'F9': 0xffc6,
'F10': 0xffc7,
'F11': 0xffc8,
'L1': 0xffc8,
'F12': 0xffc9,
'L2': 0xffc9,
'F13': 0xffca,
'L3': 0xffca,
'F14': 0xffcb,
'L4': 0xffcb,
'F15': 0xffcc,
'L5': 0xffcc,
'F16': 0xffcd,
'L6': 0xffcd,
'F17': 0xffce,
'L7': 0xffce,
'F18': 0xffcf,
'L8': 0xffcf,
'F19': 0xffd0,
'L9': 0xffd0,
'F20': 0xffd1,
'L10': 0xffd1,
'F21': 0xffd2,
'R1': 0xffd2,
'F22': 0xffd3,
'R2': 0xffd3,
'F23': 0xffd4,
'R3': 0xffd4,
'F24': 0xffd5,
'R4': 0xffd5,
'F25': 0xffd6,
'R5': 0xffd6,
'F26': 0xffd7,
'R6': 0xffd7,
'F27': 0xffd8,
'R7': 0xffd8,
'F28': 0xffd9,
'R8': 0xffd9,
'F29': 0xffda,
'R9': 0xffda,
'F30': 0xffdb,
'R10': 0xffdb,
'F31': 0xffdc,
'R11': 0xffdc,
'F32': 0xffdd,
'R12': 0xffdd,
'F33': 0xffde,
'R13': 0xffde,
'F34': 0xffdf,
'R14': 0xffdf,
'F35': 0xffe0,
'R15': 0xffe0,

** Wed 26 Nov 2014 04:49:11 PM JST
import cryptdisk
d=cryptdisk.DecryptDisk('/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'data')




import cryptdisk
d=cryptdisk.DecryptDisk('/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'data')
d.decrypt('a')

** Sat 29 Nov 2014 02:06:27 AM JST
from task import TaskHandler
t=TaskHandler()
class Tes(object):
    def execute():
        pass
t.append(Tes())
import cPickle
cPickle.dump(t, open('/tmp/tes3.pickle','wb'))
cPickle.load(open('/tmp/tes3.pickle', 'rb'))
** Fri 12 Dec 2014 10:54:53 PM JST
00:1D:73:1A:C0:9C


kish=ki._ssh.invoke_shell()
kissh=Shell(kish, sendsep='\r\n')
kissh.read()
kissh.write('sudo ls /')
sudo.execute(kissh)



from king import King
from mypc.script.shell import Shell
from mypc.script.scripts.decrypt import Decrypt
from mypc.script.scripts.test import Test
ki=King()               
ki.connect()            
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()            
recv=[]                 
                        
                        
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()    
kissh.write('sudo ls /')

** Wed 17 Dec 2014 10:20:36 AM JST
from xahk2.xobj import Rectangle
r=Rectangle()
flycheck-pylintrc
".pylintrc"
(file-name-as-directory (concat my-data-dir   "pylint"))
"/root/.emacs.d/data_e/pylint/"
(file-name "hello")
(expand-file-name "pylint" my-data-dir)
"/root/.emacs.d/data_e/pylint"
flycheck-pylintrc
"/root/.emacs.d/data_e/pylint"
flycheck-checker
nil
(setq flycheck-checker pylintrc)
python-pylint
flycheck-pylintrc
"/root/.emacs.d/data_e/pylint"
(config-file )


(flycheck-define-checker python-pylint
  "A Python syntax and style checker using Pylint.

This syntax checker requires Pylint 1.0 or newer.

See URL `http://www.pylint.org/'."
  ;; -r n disables the scoring report
  :command ("pylint" "-r" "n" "-d" "E0102"
            "--msg-template" "{path}:{line}:{column}:{C}:{msg_id}:{msg}"
            (config-file "--rcfile" flycheck-pylintrc)
            ;; Need `source-inplace' for relative imports (e.g. `from .foo
            ;; import bar'), see https://github.com/flycheck/flycheck/issues/280
            source-inplace)
  :error-filter
  (lambda (errors)
    (flycheck-sanitize-errors (flycheck-increment-error-columns errors)))
  :error-patterns
  ((error line-start (file-name) ":" line ":" column ":"
          (or "E" "F") ":"
          (id (one-or-more (not (any ":")))) ":"
          (message) line-end)
   (warning line-start (file-name) ":" line ":" column ":"
            (or "W" "R") ":"
            (id (one-or-more (not (any ":")))) ":"
            (message) line-end)
   (info line-start (file-name) ":" line ":" column ":"
         "C:" (id (one-or-more (not (any ":")))) ":"
         (message) line-end))
  :modes python-mode)

** Sat 20 Dec 2014 07:59:32 AM JST
from xahk2.xobj.rectangle import Rectangle
r=Rectangle()
r.set_bounds(1,2,3,4)


from xahk2.xobj import Rectangle
r=Rectangle()
r.set_bounds((1,1,1,1))



(defun tests (package) ;[2014/12/20]
  "PACKAGE"
  (interactive "s")
  (if (string= package "")
      (message "DEBUG-1-nofile")
    (message "DEBUG-2-nofile")
    )
  )

nosetests-cover-package
nil

(if (string= package "")
    (setq package nosetests-last-package)
  (setq nosetests-last-package package))


(setq last-package nil)

(defun nosetests-read-package () ;[2014/12/20]
  ""
  (setq nosettests-cover-package
        (read-string "--cover-package=: "
                     nosettests-cover-package nil nosettests-cover-package))
  )

(or "" "hello")
(if ""
    (message "DEBUG-3-nofile")
  (message "DEBUG-4-nofile")
  )

(setq nosetests-cover-package nil)
** Mon 22 Dec 2014 04:12:04 AM JST
default
(XCoordinate(-432), YCoordinate(1763), Width(5340), Height(0))
x 1932
y -1111

- (-432, 1516, 5340, 0)
+ (XCoordinate(-432), YCoordinate(1763), Width(5340), Height(0))





from xahk2.xobj import Rectangle
r=Rectangle()
r.set_bounds((-3317, 3076, 7268, 0))
r.grow(2377, -1185)



from xahk2.xobj import Rectangle
import wx

>> Rectangle(x=71, y=-150, width=0, height=0)

>> wx.Rect(121, -140, 0, 0)





def grow(x,y,default):
    r=Rectangle(*default)
    rr=wx.Rect(*default)
    r.grow(x, y)
    return r, rr.Inflate(x, y)

grow(-733, -1907, (96, 145, 50, 10))
** Tue 23 Dec 2014 04:05:13 PM JST
(setq nosetests-ignore-file (list "^\\." "^_" "^setup\\.py$" "^flycheck"))
nosetests-ignore-file
("^\\." "^_" "^setup\\.py$" "^flycheck")

(list "^\\." "^_" "^setup\\.py$" "^flycheck")
("^\\." "^_" "^setup\\.py$" "^flycheck")
(s-join "," nosetests-ignore-file)
"^\\.,^_,^setup\\.py$,^flycheck"


(s-join " --ignore-files=" nosetests-ignore-file)
"^\\. --ignore-files=^_ --ignore-files=^setup\\.py$ --ignore-files=^flycheck"

(mapcar (lambda (x) (format "--ignore-files=%s" x)) nosetests-ignore-file)
("--ignore-files=^\\." "--ignore-files=^_" "--ignore-files=^setup\\.py$" "--ignore-files=^flycheck")




(if nosetest
    
    ELSE)


Usage: nosetests [options]

Options:
-h, --help            show this help message and exit
-V, --version         Output nose version and exit
-p, --plugins         Output list of available plugins and exit. Combine with higher
verbosity for greater detail
-v, --verbose         Be more verbose. [NOSE_VERBOSE]
--verbosity=VERBOSITY
Set verbosity; --verbosity=2 is the same as -v
-q, --quiet           Be less verbose
-c FILES, --config=FILES
Load configuration from config file(s). May be specified multiple
times; in that case, all config files will be loaded and combined
-w WHERE, --where=WHERE
Look for tests in this directory. May be specified multiple times.
The first directory passed will be used as the working directory,
in place of the current working directory, which is the default.
Others will be added to the list of tests to execute. [NOSE_WHERE]
--py3where=PY3WHERE   Look for tests in this directory under Python 3.x. Functions the
same as 'where', but only applies if running under Python 3.x or
above.  Note that, if present under 3.x, this option completely
replaces any directories specified with 'where', so the 'where'
option becomes ineffective. [NOSE_PY3WHERE]
-m REGEX, --match=REGEX, --testmatch=REGEX
Files, directories, function names, and class names that match
this regular expression are considered tests.  Default:
(?:^|[\b_\./-])[Tt]est [NOSE_TESTMATCH]
--tests=NAMES         Run these tests (comma-separated list). This argument is useful
mainly from configuration files; on the command line, just pass
the tests to run as additional arguments with no switch.
-l DEBUG, --debug=DEBUG
Activate debug logging for one or more systems. Available debug
loggers: nose, nose.importer, nose.inspector, nose.plugins,
nose.result and nose.selector. Separate multiple names with a
comma.
--debug-log=FILE      Log debug messages to this file (default: sys.stderr)
--logging-config=FILE, --log-config=FILE
Load logging config from this file -- bypasses all other logging
config settings.
-I REGEX, --ignore-files=REGEX
Completely ignore any file that matches this regular expression.
Takes precedence over any other settings or plugins. Specifying
this option will replace the default setting. Specify this option
multiple times to add more regular expressions [NOSE_IGNORE_FILES]
-e REGEX, --exclude=REGEX
Don't run tests that match regular expression [NOSE_EXCLUDE]
-i REGEX, --include=REGEX
This regular expression will be applied to files, directories,
function names, and class names for a chance to include additional
tests that do not match TESTMATCH.  Specify this option multiple
times to add more regular expressions [NOSE_INCLUDE]
-x, --stop            Stop running tests after the first error or failure
-P, --no-path-adjustment
Don't make any changes to sys.path when loading tests
[NOSE_NOPATH]
--exe                 Look for tests in python modules that are executable. Normal
behavior is to exclude executable modules, since they may not be
import-safe [NOSE_INCLUDE_EXE]
--noexe               DO NOT look for tests in python modules that are executable. (The
                                                                                    default on the windows platform is to do so.)
--traverse-namespace  Traverse through all path entries of a namespace package
--first-package-wins, --first-pkg-wins, --1st-pkg-wins
nose's importer will normally evict a package from sys.modules if
it sees a package with the same name in a different location. Set
this option to disable that behavior.
--no-byte-compile     Prevent nose from byte-compiling the source into .pyc files while
nose is scanning for and running tests.
--rednose             enable colour output (alternatively, set $NOSE_REDNOSE=1)
--no-color            disable colour output
--force-color         force colour output when not using a TTY (alternatively, set
                                                                               $NOSE_REDNOSE_COLOR=force)
--immediate           print errors and failures as they happen, as well as at the end
-a ATTR, --attr=ATTR  Run only tests that have attributes specified by ATTR [NOSE_ATTR]
-A EXPR, --eval-attr=EXPR
Run only tests for whose attributes the Python expression EXPR
evaluates to True [NOSE_EVAL_ATTR]
-s, --nocapture       Don't capture stdout (any stdout output will be printed
                                                immediately) [NOSE_NOCAPTURE]
--nologcapture        Disable logging capture plugin. Logging configurtion will be left
intact. [NOSE_NOLOGCAPTURE]
--logging-format=FORMAT
Specify custom format to print statements. Uses the same format as
used by standard logging handlers. [NOSE_LOGFORMAT]
--logging-datefmt=FORMAT
Specify custom date/time format to print statements. Uses the same
format as used by standard logging handlers. [NOSE_LOGDATEFMT]
--logging-filter=FILTER
Specify which statements to filter in/out. By default, everything
is captured. If the output is too verbose, use this option to
filter out needless output. Example: filter=foo will capture
statements issued ONLY to  foo or foo.what.ever.sub but not foobar
or other logger. Specify multiple loggers with comma:
filter=foo,bar,baz. If any logger name is prefixed with a minus,
eg filter=-foo, it will be excluded rather than included. Default:
exclude logging messages from nose itself (-nose).
[NOSE_LOGFILTER]
--logging-clear-handlers
Clear all other logging handlers
--logging-level=LOGCAPTURE_LEVEL
Set the log level to capture
--with-coverage       Enable plugin Coverage:  Activate a coverage report using Ned
Batchelder's coverage module.  [NOSE_WITH_COVERAGE]
--cover-package=PACKAGE
Restrict coverage output to selected packages [NOSE_COVER_PACKAGE]
--cover-erase         Erase previously collected coverage statistics before run
--cover-tests         Include test modules in coverage report [NOSE_COVER_TESTS]
--cover-min-percentage=COVER_MIN_PERCENTAGE
Minimum percentage of coverage for teststo pass
[NOSE_COVER_MIN_PERCENTAGE]
--cover-inclusive     Include all python files under working directory in coverage
report.  Useful for discovering holes in test coverage if not all
files are imported by the test suite. [NOSE_COVER_INCLUSIVE]
--cover-html          Produce HTML coverage information
--cover-html-dir=DIR  Produce HTML coverage information in dir
--cover-branches      Include branch coverage in coverage report [NOSE_COVER_BRANCHES]
--cover-xml           Produce XML coverage information
--cover-xml-file=FILE
Produce XML coverage information in file
--pdb                 Drop into debugger on errors
--pdb-failures        Drop into debugger on failures
--no-deprecated       Disable special handling of DeprecatedTest exceptions.
--with-doctest        Enable plugin Doctest:  Activate doctest plugin to find and run
doctests in non-test modules.  [NOSE_WITH_DOCTEST]
--doctest-tests       Also look for doctests in test modules. Note that classes, methods
and functions should have either doctests or non-doctest tests,
not both. [NOSE_DOCTEST_TESTS]
--doctest-extension=EXT
Also look for doctests in files with this extension
[NOSE_DOCTEST_EXTENSION]
--doctest-result-variable=VAR
Change the variable name set to the result of the last interpreter
command from the default '_'. Can be used to avoid conflicts with
the _() function used for text translation.
[NOSE_DOCTEST_RESULT_VAR]
--doctest-fixtures=SUFFIX
Find fixtures for a doctest file in module with this name appended
to the base name of the doctest file
--doctest-options=OPTIONS
Specify options to pass to doctest. Eg.
'+ELLIPSIS,+NORMALIZE_WHITESPACE'
--with-isolation      Enable plugin IsolationPlugin:  Activate the isolation plugin to
isolate changes to external modules to a single test module or
package. The isolation plugin resets the contents of sys.modules
after each test module or package runs to its state before the
test. PLEASE NOTE that this plugin should not be used with the
coverage plugin, or in any other case where module reloading may
produce undesirable side-effects.  [NOSE_WITH_ISOLATION]
-d, --detailed-errors, --failure-detail
Add detail to error output by attempting to evaluate failed
asserts [NOSE_DETAILED_ERRORS]
--with-profile        Enable plugin Profile:  Use this plugin to run tests using the
hotshot profiler.   [NOSE_WITH_PROFILE]
--profile-sort=SORT   Set sort order for profiler output
--profile-stats-file=FILE
Profiler stats file; default is a new temp file on each run
--profile-restrict=RESTRICT
Restrict profiler output. See help for pstats.Stats for details
--no-skip             Disable special handling of SkipTest exceptions.
--with-id             Enable plugin TestId:  Activate to add a test id (like #1) to each
test name output. Activate with --failed to rerun failing tests
only.  [NOSE_WITH_ID]
--id-file=FILE        Store test ids found in test runs in this file. Default is the
file .noseids in the working directory.
--failed              Run the tests that failed in the last test run.
--processes=NUM       Spread test run among this many processes. Set a number equal to
the number of processors or cores in your machine for best
results. Pass a negative number to have the number of processes
automatically set to the number of cores. Passing 0 means to
disable parallel testing. Default is 0 unless NOSE_PROCESSES is
set. [NOSE_PROCESSES]
--process-timeout=SECONDS
Set timeout for return of results from each test runner process.
Default is 10. [NOSE_PROCESS_TIMEOUT]
--process-restartworker
If set, will restart each worker process once their tests are
done, this helps control memory leaks from killing the system.
[NOSE_PROCESS_RESTARTWORKER]
--with-xunit          Enable plugin Xunit: This plugin provides test results in the
standard XUnit XML format. [NOSE_WITH_XUNIT]
--xunit-file=FILE     Path to xml file to store the xunit report in. Default is
nosetests.xml in the working directory [NOSE_XUNIT_FILE]
--all-modules         Enable plugin AllModules: Collect tests from all python modules.
[NOSE_ALL_MODULES]
--collect-only        Enable collect-only:  Collect and output test names only, don't
run any tests.  [COLLECT_ONLY]

** Tue 06 Jan 2015 04:47:22 PM JST
(defun e2wm:dp-pycode-switch (buf)
  (if (e2wm:history-recordable-p buf)
      (let ((buf-name (buffer-name buf))
            (wm (e2wm:pst-get-wm)))
        (cond ((string-match "\\*w3m\\*" buf-name)
               (e2wm:pst-buffer-set 'right buf)
               t)
              ((eq (selected-window) (wlf:get-window wm 'right))
               (e2wm:pst-buffer-set 'right buf)
               t)
              ((eql (get-buffer buf) (wlf:get-buffer wm 'main))
               (e2wm:pst-update-windows)
               (e2wm:pst-buffer-set 'main buf)
               t)
              (t (e2wm:pst-show-history-main)
                 (e2wm:pst-window-select-main))))))

(dired-noselect "/root" nil)
#<buffer root>
my-pylib-dir
"\\root\\.emacs.d\\data_e\\pylib"
(setq pylib-dired (dired-noselect (expand-file-name "~/.pylib")))

(wlf:set-buffer code-wm 'files pylib-dired)
** Fri 30 Jan 2015 04:55:24 AM JST
from sendkeys2.pieces import XKey
from sendkeys2.expression import *

a=XKey(38)
x=XSendKeyExpression(a)
r=RepeatExpression(x, 3)
ModifierExpression(r, 1).interpret()



from sendkeys2.scanner import Scanner
s=Scanner('a^bc{space 100}{RClick}\0')
from sendkeys2.analyze import Analyze
Analyze(s.get_tokens())


54525974



from xsendkey import XSendkey
x=XSendkey('a+bc')
x.send(54525974)
x.flush()


from sendkeys2.keymap import KeyboardMapping
k=KeyboardMapping()
k.sym_to_code(65)



from sendkeys2.converter import maps
c=maps.CodeToSyms()
maps.CodeToSyms._instances


from sendkeys2.converter import maps
s=maps.SymToCodes()


from sendkeys2.parser.scanner import SubScanner
ss=SubScanner()
ss.scan_line('LButton')


dia=67109080

pnir=77594627




from xsendkey import XSendkey
pnir=77594627
x=XSendkey('{LClick 75 130}')
x.send(pnir)
x.flush()


m=Matcher('hello')
m.match('worldhello')
m.set_method('startswith')
m.match('worldhello')
** Fri 06 Feb 2015 11:23:41 AM JST
import tempfile as tmp
from pathhandler import PathHandler
t=tmp.NamedTemporaryFile(suffix='.ts')
p=PathHandler(t.name)


(wlf:get-buffer (e2wm:pst-get-wm) 'main)


(defun e2wm:def-plugin-files (frame wm winfo)
  (let* ((buf (wlf:get-buffer (e2wm:pst-get-wm) 'main))
         (wname (wlf:window-name winfo))
         (opts (wlf:window-option-get winfo :plugin-args))
         (opt-sort-key (or (plist-get opts ':sort) 'name))
         (opt-hide-hidden (not (plist-get opts ':show-hidden)))
         (dir (with-current-buffer buf 
                (or default-directory ".")))
         (buf-name (format " *WM:Files-%s*" wname))
         (dbuf (get-buffer buf-name)) pos)
    (unless (and dbuf (buffer-live-p dbuf))
      (setq dbuf (get-buffer-create buf-name))
      (with-current-buffer dbuf
        (e2wm:def-plugin-files-mode)
        (set (make-local-variable 'e2wm:def-plugin-files-dir) dir)
        (set (make-local-variable 'e2wm:def-plugin-files-sort-key) opt-sort-key)
        (set (make-local-variable 'e2wm:def-plugin-files-hide-hidden-files) opt-hide-hidden)
        (setq buffer-read-only t)
        (buffer-disable-undo dbuf)
        (setq pos (point-min))
        (hl-line-mode 1)))
    (with-current-buffer dbuf
      (unwind-protect
          (progn
            (setq buffer-read-only nil)
            (setq pos 
                  (if (and e2wm:def-plugin-files-dir
                           (equal e2wm:def-plugin-files-dir dir))
                      (point) (point-min)))
            (setq e2wm:def-plugin-files-dir dir)
            (erase-buffer)
            (e2wm:def-plugin-files-update-buffer dir)
            (goto-char pos))
        (setq buffer-read-only t)))
    (wlf:set-buffer wm wname dbuf)))
** Wed 11 Feb 2015 10:40:26 PM JST
emacs=52428822
xfterm=41943044


from pathhandler import PathHandler
PathHandler('/root/recipe/4/0thu').listdir()


(let ((param (s-join ", " (delete "self" (progn
                                           (save-excursion 
                                           (save-restriction 
                                             (py:goto-def-parameter)
                                             (py:refact-param--=
                                              (py:list-parameter)))))))))
  param
  )

(s-join ", " (delete "self" (progn
                              (save-excursion 
                                (save-restriction 
                                  (py:goto-def-parameter)
                                  (py:refact-param--=
                                   (py:list-parameter)))))))

(save-excursion
  (py:current-defname))

(defun py:current-defname () ;[2015/02/11]
  ""
  (when (py:in-def-p)
    (py:beginning-of-def 1))
  (when (py:at-beginning-of-def-p)
    (re-search-forward py:def-name-re nil 'noerror)
    (match-string-no-properties 1)))


py:def-name-re
"\\_<def[[:space:]]+\\(\\(?:[[:word:]]\\|_\\)+\\)"



${1:return }self._client.${2:$$(save-excursion
                                 (py:current-defname))}(${3:$$(s-join ", " (delete "self" (progn
                                                                                            (save-excursion 
                                                                                              (save-restriction 
                                                                                                (py:goto-def-parameter)
                                                                                                (py:refact-param--=
                                                                                                 (py:list-parameter)))))))})

** Thu 21 May 2015 10:57:47 AM JST
c.core.SendEvent.ButtonPress(0,54525974,1,0,0,482,54525974,0,0,0,75,130,0,1)


56623126




c.core.SendEvent(False, 56623126, xcb.xproto.EventMask.ButtonPress, )
c.core.SendEventChecked(False, window, xcb.xproto.EventMask.ButtonPress, pack('BBH4I5HBx', code, detail, seq, time, root, window, child, rootx, rooty, eventx, eventy, state, 1))

c.core.SendEvent(False, window, xcb.xproto.EventMask.ButtonPress, pack('BBH4I5HBx', 4, 3, 0, 0, 482, window, 0, 0, 0, 100, 100, 0, 1))
** Sat 23 May 2015 05:39:47 AM JST
c.core.QueryPointer()


emacs=56623126
qbit=23068676

c.core.GetProperty(False, 23068676, )

c.core.TranslateCoordinates(23068676, 482, )

NormalState = 1
IconicState = 3


1     33                              code
1     CARD8                           format
2     CARD16                          sequence number
4     WINDOW                          window
4     ATOM                            type
20                                    data

15Status XIconifyWindow(Display *dpy, Window w, int screen)
16{
17    XClientMessageEvent ev;
18    Atom prop;
19
20    prop = XInternAtom(dpy, "WM_CHANGE_STATE", False);
21    if(prop == None)
22	return False;
23
24    ev.type = ClientMessage;
25    ev.window = w;
26    ev.message_type = prop;
27    ev.format = 32;
28    ev.data.l[0] = IconicState;
29    return XSendEvent(dpy, RootWindow(dpy, screen), False,
                             30			SubstructureRedirectMask|SubstructureNotifyMask,
                             31			(XEvent *)&ev);
32}
33

data=pack('5I', 3,0,0,0,0)
data
c.core.InternAtom(False, len("WM_CHANGE_STATE"), "WM_CHANGE_STATE")
c.core.InternAtom(False, len("WM_CHANGE_STATE"), "WM_CHANGE_STATE").reply().atom
mtype=pack('I', 402)
mtype
fmt=pack('B', 32)
fmt
win=pack('I', 23068676)
win
client=pack('B', 33)
client
mask=pack('I',0xffffff)
mask
code
client
client + fmt
seq=pack('H', 0)
seq
client + fmt + seq + win + mtype
client + fmt + seq + win + mtype + data
dat=client + fmt + seq + win + mtype + data
c.core.SendEvent?
mask
c.core.SendEvent(False, 482, 0xffffff, dat)
c.flush()




from _xahk.piece.x11_piece import X11Key
k=X11Key(38)

from _xahk.window_manager import WindowManager
from _xahk.bind_candidate import BindCandidate
from _xahk.input_command import InputDebug, SendKeyCommand
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.windowspec.window_title_spec import WindowTitleSpec
from _xahk.bind_manager import BindManager
from _xahk.eventloop import EventLoop
kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), SendKeyCommand('b'))
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()



from _xahk.window_manager import WindowManager
from _xahk.windowspec.window_title_spec import WindowTitleSpec
wm=WindowManager.get_instance()
w=wm.find_windows(WindowTitleSpec('Comix'))[0]



r=w.get_bounds()
w.set_bounds(r)

** Fri 29 May 2015 06:38:54 PM JST
from _xahk.eventcode import EventCode
c.xtest.FakeInput(xcb.xproto.ButtonPress, 1, 0, 482, 100, 100, 0)
self.xtest = conn(xcb.xtest.key)

self.xtest.FakeInput(event.Event.KeyPressEvent, e.detail, xcb.xproto.Time.CurrentTime, self.root, e.root_x, e.root_y, 0)

emacs=56623126
qbit=73400324

b.press(23068676, 190, 450)

from _xahk.piece.x11_piece import X11Button
b=X11Button(1)
from _xahk.piece.x11_piece import X11Key
k=X11Key(38)

from _xahk.piece.modifier import Modifier
from _xahk.window_manager import WindowManager
from _xahk.bind_candidate import BindCandidate
from _xahk.input_command import InputDebug, SendKeyCommand
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.windowspec.window_title_spec import WindowTitleSpec
from _xahk.bind_manager import BindManager
from _xahk.eventloop import EventLoop
kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), SendKeyCommand('b'))
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()
loop=EventLoop.get_instance()
while 1:
loop.dispatch_event()

"XAHK_WINDOW_OBSERVERS"


c.core.ChangeProperty(xcb.xproto.PropMode.Append, c.core.InternAtom(False, len("XAHK_WINDOW_OBSERVERS"), "XAHK_WINDOW_OBSERVERS").atom, c.core.InternAtom(True, len('INTEGER'), 'INTEGER').atom, 32, )




# tmporary test
from xcb.xproto import CW, EventMask
self._root = display.get_setup().roots[0].root
eventmask = self._display.core.GetWindowAttributes(
                                                   self._root).reply().your_event_mask
self._display.core.ChangeWindowAttributes(
                                          self._root, CW.EventMask, [EventMask.PropertyChange | eventmask
                                                                                              | EventMask.EnterWindow])
from _xahk.window_manager import WindowManager
for win in WindowManager.get_instance().list_windows():
evmsk = self._display.core.GetWindowAttributes(win).reply().your_event_mask
self._display.core.ChangeWindowAttributes(
                                          win, CW.EventMask, [EventMask.EnterWindow | evmsk])

self._display.flush()


from _xahk.window_manager import WindowManager
w=WindowManager.get_instance().list_windows()[-1]
a={}
a[(w, 1, 0)] = 1111
a[(75497473, 1, 0)]


import xcb,xcb.xproto;c=xcb.connect()
from _xahk.piece.modifier import Modifier
from xcb.xproto import EventMask
c.core.GrabButton(False, 482, EventMask.ButtonPress | EventMask.ButtonRelease,
                         1,1,0,0,4, Modifier.Right)
c.core.GrabButton(False, 482, EventMask.ButtonPress | EventMask.ButtonRelease,
                         1,1,0,0,4, Modifier.Right | Modifier.WheelUp)
c.core.GrabButton(False, 482, EventMask.ButtonPress | EventMask.ButtonRelease,
                         1,1,0,0,4, 0)

c.flush() 
while 1:
    print c.wait_for_event()


chrome=75497473

from _xahk.window_manager import WindowManager
[(w.title, w.id) for w in WindowManager.get_instance().list_windows()]


from _wm.window_client import WindowClient
from _xahk.display import get_display
c=get_display()
w=WindowClient(c, 50331865)


from _xahk.display import get_display
from _wm.root_window import RootWindow



from _wm.window_manager import WindowManager
wm=WindowManager.get_instance()
wm.get_name()
** Sat 06 Jun 2015 12:35:51 AM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

EventLoop.get_instance().dispatch_event()




#mask = c.core.GetWindowAttributes(482).reply().your_event_mask
cookie = c.core.ChangeWindowAttributesChecked(
                                              482, CW.EventMask, [EventMask.PropertyChange])
cookie.check()

056564-660592-599431-299563-601525-517926-34972


0x1800004, 0x1800019, 0x1a00003, 0x2200004, 0x2a000d9, 0x2e00016, 0x3600001, 0x4800003
0x1800004, 0x1800019, 0x1a00003, 0x2200004, 0x2a000d9, 0x2e00016, 0x3600001, 0x4800003
** Fri 12 Jun 2015 02:09:39 AM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

# debug
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.key_bind_listener import KeyBindListener
from lab.xahk.input_listener.key_bind_listener_observer import DebugKeyBindListenerObserver

KeyBindListener.get_instance().add_observer(DebugKeyBindListenerObserver())


can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(24), DebugInputCommand())

man=KeyBindManager()
man.entry_candidate(can)
man.start_management()


EventLoop.get_instance().dispatch_event()





(process-name (car (process-list)))
"ipython<1>"

#<process ipython<1>>

(s-starts-with? "ipython" (process-name (car (process-list))))
t

** Fri 19 Jun 2015 06:27:27 AM JST
import xcb,xcb.xproto as xp;c=xcb.connect()
from xcb.xproto import GrabMode as GM
from xcb.xproto import EventMask as EM

mask=EM.ButtonPress|EM.ButtonRelease
em=54525974

c.core.GrabButtonChecked(False, em, mask, GM.Async, GM.Async, 0, 0, 1, 0).check()

while 1:
     event = c.wait_for_event()
     print(event)
     print('{0.event} {0.root_x} {0.root_y} {0.event_x} {0.event_y}'.format(event))




c.core.GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode)

c.core.GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers)

c.core.GrabKeyboard(self, owner_events, grab_window, time, pointer_mode, keyboard_mode)

c.core.GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time)

** Tue 14 Jul 2015 06:05:10 PM JST
348
393
** Sun 02 Aug 2015 04:39:31 PM JST
(yas/expand-link "argparse_add_argument" t)

(skip-chars-forward " ")



http://google.com/search?num=50&hl=en&safe=off&site=&source=hp&q=%s


import imaplib
import quopri
import email
g=imaplib.IMAP4_SSL('imap.gmail.com')
g.login('taka16a23@gmail.com', 'Taka83 a76.')
g.select('inbox')
g.search(None, 'SENTON', "25-May-2015")
typ, data=g.fetch('315', '(BODY[TEXT])')
maildata=data[0][1]
m=email.message_from_string(maildata)
quopri.decodestring(m.get_payload()).decode('utf-8')



abort: command: SEARCH => socket error: EOF
error: command LOGIN illegal in state SELECTED, only allowed in states NONAUTH



xwwrheownfdkbmao

import imaplib
import quopri
import email
g=imaplib.IMAP4_SSL('imap.gmail.com')
g.login('taka16daily@gmail.com', 'xwwrheownfdkbmao')
g.select('inbox')
g.search(None, 'All')

import base64
base64.b64decode()

Thu, 18 Sep 2014 05:03:45 -0700 (PDT)
'Thu, 18 Sep 2014 21:03:42 +0900'

utils.parsedate('Thu, 18 Sep 2014 21:03:42 +0900')
datetime.datetime.fromtimestamp(time.mktime((2014, 9, 18, 21, 3, 42, 0, 1, -1)))


g.search(None, '(ON "18-Sep-2014")')

from email import message_from_string
from email.utils import parsedate

from diary.gmail_database import GmailDiaryDatabase

from datetime import datetime as da
g=GmailDiaryDatabase()
n=g.list_notes()

date=da.fromtimestamp(time.mktime((2014, 9, 18, 21, 3, 42, 0, 1, -1)))
start=da.fromtimestamp(time.mktime((2015, 4, 1, 1, 3, 42, 0, 1, -1)))
end=da.fromtimestamp(time.mktime((2015, 4, 15, 1, 3, 42, 0, 1, -1)))


from diary.database_client import DiaryDatabaseClient
g=DiaryDatabaseClient()


g.list_by_date(year=2014)
g.list_by_date(month=1)
g.list_by_date(day=1)
g.list_by_date(month=5,day=1)
g.list_by_date(year=2014, day=5)
g.list_by_date(year=2014, month=5)
g.list_by_date(2014, 5,1)


(point)

** Tue 11 Aug 2015 04:43:43 AM JST
from holiday.japan._japan import JapanHolidays
j=JapanHolidays()
from holiday._holiday import *
from datetime import date
p=Period(date(1950,1,1), date(2050,12,31))
o=j.between_holidays(p)

oo=get_predefined()
set(oo)-set(o)


j.get_next(date(2015, 9, 21))






for date, name in oo.items():
   if not date in oo:
       print date
   if name != o[date]:
       print date

** Fri 14 Aug 2015 01:01:51 PM JST
生鮮食品
https://shop.nanairo.coop/front/bb/shiga/product/productlist?&cc=0101000000&ps=1000&pn=1&si=0&dt=c&dm=1
牛乳卵
https://shop.nanairo.coop/front/bb/shiga/product/productlist?&cc=0102000000&ps=300&pn=1&si=0&dt=c&dm=1
冷凍
https://shop.nanairo.coop/front/bb/shiga/product/productlist?cc=0103000000&ps=1000&pn=1&si=0&dt=c&dm=1
デイリー
https://shop.nanairo.coop/front/bb/shiga/product/productlist?cc=0104000000&ps=1000&pn=1&si=0&dt=c&dm=1
パン シリアル
https://shop.nanairo.coop/front/bb/shiga/product/productlist?&cc=0105000000&ps=1000&pn=1&si=0&dt=c&dm=1
米 餅
https://shop.nanairo.coop/front/bb/shiga/product/productlist?cc=0106000000&ps=1000&pn=1&si=0&dt=c&dm=1
加工食品 調味料
https://shop.nanairo.coop/front/bb/shiga/product/productlist?&cc=0107000000&ps=1000&pn=1&si=0&dt=c&dm=1



"//*[@class='product-detail']"
"//*[@class='list-arrow2']"
"//*[@class='standard']"

<ul class="list-arrow2">

<a target="_blank" href="http://pub.kinki.coop/OpenGoodsSearch2/GoodsDetail.aspx?CoopCode=2&amp;CatalogID=2015083&amp;GoodsCode=0000046345&amp;DisplayFlag=CWS" onclick="javascript:track_event('ExternalLink', '関連ページ1', '000010:【20P】うまか酢豚');"><!--
-->原材料など商品の詳細情報は…｢商品情報検索｣</a>

<a target="_blank" href="http://www.kondatekun.com/coop-kinki/zairyo2.asp?Category=0103070000" onclick="javascript:track_event('ExternalLink', '関連ページ2', '000010:【20P】うまか酢豚');">


JAN Code
'//*[@id="lblJAN"]'
商品説明 
'//*[@id="lblSyohinSetsumei"]'
Price
'//*[@id="lblHontaiKakaku"]''
Tax Price
'//*[@id="lblKakaku"]'
caroly
'//*[@id="lblCaroly"]'
Maker
'//*[@id="lblMaker"]'

'//*[@id="lblManufacturer"]'

'//*[@id="lblGensankokuKakouchi"]'

http://pub.kinki.coop/OpenGoodsSearch2/GoodsDetail.aspx?CoopCode=2&CatalogID=2015083&GoodsCode=0000046345&DisplayFlag=CWS
http://pub.kinki.coop/OpenGoodsSearch2/GoodsDetail.aspx?CoopCode=2&CatalogID=2015083&GoodsCode=0101132258&DisplayFlag=CWS
http://pub.kinki.coop/OpenGoodsSearch2/GoodsDetail.aspx?CoopCode=2&CatalogID=2015083&GoodsCode=0000065286
http://pub.kinki.coop/OpenGoodsSearch2/GoodsDetail.aspx?CoopCode=2&CatalogID=2015083&GoodsCode=0000058337&DisplayFlag=NEXT

JAN Code	Name	Price	Price with tax	Country of origin	Order No.	Maker	Calorie	Explain	Quantity	Additional Explain


//*[@id="main"]/div[2]/div[1]/div/div[1]/p[2]



book=xlrd.open_workbook('/media/Data/MYTEMP/tes2.xls')
wbook=copy(book)
sh=wbook.get_sheet(2)
wbook.save('/media/Data/MYTEMP/tes2.xls')



HEADING = ['JAN Code', 'Goods Code', 'Order No.', 'Name', 'Price',
                'Total Price', 'Country of Origin', 'Maker', 'Calorie', 'Standard',
                'Explain']


Proc-Type DEK-Info

** Sat 22 Aug 2015 11:30:10 PM JST
py

//*[@id="page13-div"]/p[31]




AFGHANISTANアフガニスタン・イスラム共和国 Afghanistan the Islamic Republic of 
Afghanistan AF AFG 004 #fa; psfas; pusAfghānestān; AfghānistānÅLAND ISLANDSオーランド諸島 ÅlandIslandsAXALA248fi; svfin; sweAhvenanmaa; ÅlandALBANIA アルバニア共和国 Albania the Republic of Albania AL ALB 008 # sq sqi Shqipëria, Shqipëri ALGERIA アルジェリア民主人民共和国 Algeria the People's Democratic 
Republic of Algeria DZ DZA 012 # ar ara Al Jazā'ir




AFGHANISTAN アフガニスタン・イスラム共 Afghanistan the Islamic Republic of None AFG 004 # fa; ps fas; pus Afghānestān; Afghānistān ÅLAND ISLANDS オーランド諸島 Åland Islands None ALA 248 fi; sv fin; swe Ahvenanmaa; Åland
ALBANIA アルバニア共和国 Albania the Republic of Albania None ALB 008 # sq sqi Shqipëria,
Shqipëri ALGERIA アルジェリア民主人民共和国 Algeria the People's Democratic None DZA 012 # ar ara Al
Jazā'ir AMERICAN SAMOA 米領サモア American Samoa None ASM 016  主島：Tutuila。Swain's Island を含む。  en  eng  American Samoa ANDORRA アンドラ公国 Andorra the
Principality of Andorra None AND 020 # ca cat Andorra ANGOLA アンゴラ共和国
Angola the Republic of Angola None AGO 024  Cabinda を含む。 # pt por Angola ANGUILLA アンギラ Anguilla None
AIA 660 en eng Anguilla ANTARCTICA 南極 Antarctica  ATA 010  南緯 60 度以南。 ANTIGUA AND BARBUDA アンティグア・バーブーダ
Antigua and Barbuda None ATG 028  Redonda Island を含む。 # en eng Antigua and Barbuda ARGENTINA アルゼンチン共和国 Argentina  the
Argentine Republic None ARG 032 # es esp Argentina (la) ARMENIA
アルメニア共和国 Armenia the Republic of Armenia None ARM 051 # hy hye Hayastan ARUBA
アルバ Aruba   ABW 533 nl nld Aruba AUSTRALIA オーストラリア連邦 Australia None AUS 036  しばしば，the Commonwealth of Australia と呼ば
れる。Lord Howe Island 及び Macquarie Islands を含む。Ashmore and Cartier Islands 及び Coral # en eng Australia AUSTRIA オーストリア共和国 Austria the Republic of Austria None
AUT 040 # de deu Österreich AZERBAIJAN アゼルバイジャン共和国 Azerbaijan the Republic of Azerbaijan None
AZE 031 # az aze Azərbaycan BAHAMAS バハマ国 Bahamas (The) the Commonwealth of The None
BHS 044 # en eng Bahamas (The) BAHRAIN バーレーン王国 Bahrain the Kingdom of Bahrain
None BHR 048 # ar ara Al Baḩrayn BANGLADESH バングラデシュ人民共和国 Bangladesh
the People's Republic of None BGD 050 # bn ben Bāṅlādesh BARBADOS バルバドス Barbados None
BRB 052 # en eng Barbados BELARUS ベラルーシ共和国 Belarus the Republic of Belarus None
BLR 112 # be; ru bel; rus Bielarus'; Belarus' BELGIUM ベルギー王国 Belgium the Kingdom of Belgium
None BEL 056 # de; fr; nl deu; fra; nld Belgien; Belgique (la); België BELIZE ベリーズ Belize None
BLZ 084 # en eng Belize BENIN ベナン共和国 Benin the Republic of Benin None
BEN 204 # fr fra Bénin (le) BERMUDA バミューダ諸島 Bermuda None BMU 060
en eng Bermuda BHUTAN ブータン王国 Bhutan the Kingdom of Bhutan None BTN 064 #
dz dzo Druk-Yul BOLIVIA,  ボリビア多民族国 Bolivia Plurinational State of the Plurinational State of None BOL 068 #
es esp Bolivia BOSNIA AND HERZEGOVINA  ボスニア・ヘルツェゴビナ Bosnia and Herzegovina None BIH 070 #
bs; hr; sr bos; hry; srp Bosna i Hercegovina; Bosna i   BOTSWANA ボツワナ共和国 Botswana the Republic of Botswana None BWA 072 #
en eng Botswana BOUVET ISLAND ブーベ島 Bouvet Island None BVT 074   
BRAZIL ブラジル連邦共和国 Brazil the Federative Republic of None BRA 076 Fernando de Noronha Island，Martim Vaz Islands # pt por
Brasil (o) BRITISH INDIAN OCEAN   英領インド洋地域 British Indian Ocean None IOT 086  Chagos Archipelago（主島：Diego Garcia）から なる。 en


"[^a-z 0-9\n<>,#$%&()]+$"

大文字英語簡略名,日本語国名,小文字英語簡略名,英語正式名,2文字国名コード,3文字国名コード,注釈,独立国,言語名コード2文字コード,言語名コード3文字コード,広く使われている簡略国名

AFGHANISTAN,アフガニスタン・イスラム共和国,Afghanistan,the Islamic Republic of Afghanistan,AF,AFG,004,,True,fa; ps,fas; pus,Afghānestān; Afghānistān

(mc/mark-next-like-this 11)
** Sun 23 Aug 2015 11:06:23 PM JST
008
010
012
016
020
024
028
031
032
036
040
044
048
050
051
052
056
060
064
070
072
074
076
084
086
090
092
096
100
104
108
112
116
120
124
132
136
140
144
148
152
156
158
162
166
170
174
175
178
180
184
188
191
192
196
203
204
208
212
214
218
222
226
231
232
233
234
238
239
242
246
248
250
254
258
260
262
266
268
270
275
276
288
292
296
300
304
308
312
316
320
324
328
332
334
336
340
344
348
352
356
360
364
368
372
376
380
384
388
392
398
400
404
408
410
414
417
418
422
426
428
430
434
438
440
442
446
450
454
458
462
466
470
474
478
480
484
492
496
498
499
500
504
508
512
516
520
524
528
530
533
540
548
554
558
562
566
570
574
578
580
581
583
584
585
586
591
598
600
604
608
612
616
620
624
626
630
634
638
642
643
646
652
659
660
662
663
666
670
674
678
682
686
688
690
694
702
703
704
705
706
710
716
724
732
736
740
744
748
752
756
760
762
764
768
772
776
780
784
788
792
795
796
798
800
804
807
818
826
831
832
833
834
840
850
854
858
860
862
876
882
887
894

** Mon 24 Aug 2015 10:46:52 AM JST

SELECT coop_goods_detail_code, coop_goods_detail_name, maker_name FROM t_coop_goods_details INNER JOIN t_makers ON t_coop_goods_details.coop_goods_detail_maker_id=t_makers.maker_id;

** Mon 07 Sep 2015 05:55:27 AM JST
android-sdk apache-users apktool arachni arduino armitage bbqsql bundler burpsuite ca-certificates-java casefile cowpatty cups cups-core-drivers cups-daemon davtest deblaze default-jdk default-jre default-jre-headless dex2jar dirbuster dsniff ghost-phisher icedtea-7-jre-jamvm icedtea-netx intltool javasnoop jboss-autopwn joomscan jsql kdelibs5-data kdelibs5-plugins libdigest-md5-file-perl libhttp-dav-perl libio-all-lwp-perl liblwp-protocol-https-perl liblwp-protocol-socks-perl libnet-dbus-perl libwww-mechanize-perl libwww-perl libxml-dom-perl libxml-parser-perl libxml-perl libxml-sax-expat-perl libxml-twig-perl magictree metasploit-framework mitmproxy ohrwurm openjdk-7-jdk openjdk-7-jre openjdk-7-jre-headless openssl openvas openvas-scanner oscanner patator postgresql postgresql-9.4 postgresql-common printer-driver-gutenprint printer-driver-hpcups printer-driver-splix protos-sip python-httplib2 python-requests python-tornado ruby ruby-atomic ruby-childprocess ruby-ethon ruby-ffi ruby-http ruby-http-parser.rb ruby-json ruby-memoizable ruby-oj ruby-oj-mimic-json ruby-selenium-webdriver ruby-thread-safe ruby-twitter ruby-typhoeus ruby-watir-webdriver ruby2.1 rubygems-integration set smali sqlsus ssl-cert stunnel4 task-print-server thc-ssl-dos theharvester tlssled twofi u3-pwn wapiti webscarab wpscan xscreensaver xscreensaver-data 

** Fri 11 Sep 2015 05:19:07 PM JST
24 21 AB Sony Ericsson Mobile Communications
8C 64 22 Sony Ericsson Mobile Communications AB
30 17 C8 Sony Ericsson Mobile Communications AB
00 0A D9 Sony Ericsson Mobile Communications AB
00 0E 07 Sony Ericsson Mobile Communications AB
00 0F DE Sony Ericsson Mobile Communications AB
00 12 EE Sony Ericsson Mobile Communications AB
00 16 20 Sony Ericsson Mobile Communications AB
00 16 B8 Sony Ericsson Mobile Communications
00 18 13 Sony Ericsson Mobile Communications
00 19 63 Sony Ericsson Mobile Communications AB
00 1A 75 Sony Ericsson Mobile Communications
00 1B 59 Sony Ericsson Mobile Communications AB
00 1C A4 Sony Ericsson Mobile Communications
00 1D 28 Sony Ericsson Mobile Communications AB
00 1E 45 Sony Ericsson Mobile Communications AB
00 1F E4 Sony Ericsson Mobile Communications
00 21 9E Sony Ericsson Mobile Communications
00 22 98 Sony Ericsson Mobile Communications
00 23 45 Sony Ericsson Mobile Communications
00 23 F1 Sony Ericsson Mobile Communications
00 24 EF Sony Ericsson Mobile Communications
00 25 E7 Sony Ericsson Mobile Communications
30 39 26 Sony Ericsson Mobile Communications AB
40 2B A1 Sony Ericsson Mobile Communications AB
58 17 0C Sony Ericsson Mobile Communications AB
5C B5 24 Sony Ericsson Mobile Communications AB
6C 0E 0D Sony Ericsson Mobile Communications AB
6C 23 B9 Sony Ericsson Mobile Communications AB
84 00 D2 Sony Ericsson Mobile Communications AB
90 C1 15 Sony Ericsson Mobile Communications AB
B8 F9 34 Sony Ericsson Mobile Communications AB
5C 51 4F Intel Corporate
00 1D 0D Sony Computer Entertainment inc.
00 1D D9 Hon Hai Precision Ind.Co.,Ltd.
24 26 42 SHARP Corporation.              
5C 59 48 Apple                           
C8 6F 1D Apple                           
F0 CB A1 Apple                           
B0 34 95 Apple                           
00 26 4A Apple                           
F4 1B A1 Apple                           
58 A2 B5 LG Electronics
D8 6B F7 Nintendo Co., Ltd.
00 1D BC Nintendo Co., Ltd.
00 16 56 Nintendo Co., Ltd.
00 09 BF Nintendo Co., Ltd.
00 17 AB Nintendo Co., Ltd.
00 1C 83 New Level Telecom Co., Ltd.
00 09 2D HTC Corporation
08 00 28 Texas Instruments
00 26 00 TEAC Australia Pty Ltd.
00 18 82 Huawei Technologies Co., Ltd.
00 1E 10 ShenZhen Huawei Communication Technologies Co.,Ltd.
00 22 A1 Huawei Symantec Technologies Co.,Ltd.
00 25 68 Shenzhen Huawei Communication Technologies Co., Ltd
00 25 9E Huawei Technologies Co., Ltd.
00 46 4B HUAWEI TECHNOLOGIES CO.,LTD
00 66 4B Huawei Technologies Co., Ltd
00 E0 FC HUAWEI TECHNOLOGIES CO., LTD.
04 C0 6F Shenzhen Huawei Communication Technologies Co., Ltd
04 F9 38 HUAWEI TECHNOLOGIES CO.,LTD
08 19 A6 HUAWEI TECHNOLOGIES CO.,LTD
08 63 61 Huawei Technologies Co., Ltd
08 7A 4C Huawei Technologies Co., Ltd
0C 37 DC Huawei Technologies Co., Ltd
0C 96 BF Huawei Technologies Co., Ltd
10 1B 54 HUAWEI TECHNOLOGIES CO.,LTD
10 47 80 HUAWEI TECHNOLOGIES CO.,LTD
10 C6 1F Huawei Technologies Co., Ltd
14 B9 68 Huawei Technologies Co., Ltd
1C 1D 67 Shenzhen Huawei Communication Technologies Co., Ltd
20 08 ED Huawei Technologies Co., Ltd
20 0B C7 HUAWEI TECHNOLOGIES CO.,LTD
20 2B C1 Shenzhen Huawei Communication Technologies Co., Ltd
20 F3 A3 Huawei Technologies Co., Ltd
24 69 A5 Huawei Technologies Co., Ltd
24 DB AC Shenzhen Huawei Communication Technologies Co., Ltd
28 31 52 HUAWEI TECHNOLOGIES CO.,LTD
28 3C E4 Huawei Technologies Co., Ltd
28 5F DB Shenzhen Huawei Communication Technologies Co., Ltd
28 6E D4 HUAWEI TECHNOLOGIES CO.,LTD
30 87 30 Shenzhen Huawei Communication Technologies Co., Ltd
34 6B D3 Huawei Technologies Co., Ltd
34 CD BE Huawei Technologies Co., Ltd
3C DF BD Huawei Technologies Co., Ltd
40 4D 8E Shenzhen Huawei Communication Technologies Co., Ltd
40 CB A8 Huawei Technologies Co., Ltd
48 46 FB HUAWEI TECHNOLOGIES CO.,LTD
48 62 76 HUAWEI TECHNOLOGIES CO.,LTD
4C 1F CC HUAWEI TECHNOLOGIES CO.,LTD
4C 54 99 Shenzhen Huawei Communication Technologies Co., Ltd
4C 8B EF Huawei Technologies Co., Ltd
4C B1 6C HUAWEI TECHNOLOGIES CO.,LTD
50 9F 27 Huawei Technologies Co., Ltd
54 39 DF HUAWEI TECHNOLOGIES CO.,LTD
54 89 98 HUAWEI TECHNOLOGIES CO.,LTD
54 A5 1B Shenzhen Huawei Communication Technologies Co., Ltd
5C 4C A9 Shenzhen Huawei Communication Technologies Co., Ltd
5C 7D 5E Huawei Technologies Co., Ltd
60 DE 44 HUAWEI TECHNOLOGIES CO.,LTD
64 16 F0 Shehzhen Huawei Communication Technologies Co., Ltd.
70 54 F5 HUAWEI TECHNOLOGIES CO.,LTD
70 72 3C Huawei Technologies Co., Ltd
70 7B E8 HUAWEI TECHNOLOGIES CO.,LTD
70 A8 E3 HUAWEI TECHNOLOGIES CO.,LTD
74 88 2A HUAWEI TECHNOLOGIES CO.,LTD
78 1D BA HUAWEI TECHNOLOGIES CO.,LTD
78 6A 89 Huawei Technologies Co., Ltd
78 D7 52 HUAWEI TECHNOLOGIES CO.,LTD
78 F5 FD Huawei Technologies Co., Ltd
7C 60 97 HUAWEI TECHNOLOGIES CO.,LTD
80 B6 86 Huawei Technologies Co., Ltd
80 FB 06 HUAWEI TECHNOLOGIES CO.,LTD
84 A8 E4 Shenzhen Huawei Communication Technologies Co., Ltd
88 53 D4 Huawei Technologies Co., Ltd
88 86 03 HUAWEI TECHNOLOGIES CO.,LTD
88 E3 AB Huawei Technologies Co., Ltd
90 4E 2B Huawei Technologies Co., Ltd
9C 28 EF HUAWEI TECHNOLOGIES CO.,LTD
A4 99 47 Huawei Technologies Co., Ltd
AC 4E 91 HUAWEI TECHNOLOGIES CO.,LTD
AC 85 3D HUAWEI TECHNOLOGIES CO.,LTD
AC E2 15 Huawei Technologies Co., Ltd
AC E8 7B Huawei Technologies Co., Ltd
B4 15 13 HUAWEI TECHNOLOGIES CO.,LTD
BC 76 70 Shenzhen Huawei Communication Technologies Co., Ltd
C4 05 28 Huawei Technologies Co., Ltd
C8 D1 5E Huawei Technologies Co., Ltd
CC 53 B5 HUAWEI TECHNOLOGIES CO.,LTD
CC 96 A0 Shenzhen Huawei Communication Technologies Co., Ltd
CC CC 81 HUAWEI TECHNOLOGIES CO.,LTD
D0 2D B3 Huawei Technologies Co., Ltd
D0 7A B5 Huawei Technologies Co., Ltd
D4 6A A8 HUAWEI TECHNOLOGIES CO.,LTD
D4 6E 5C Huawei Technologies Co., Ltd
D4 B1 10 HUAWEI TECHNOLOGIES CO.,LTD
D8 49 0B HUAWEI TECHNOLOGIES CO.,LTD
DC D2 FC HUAWEI TECHNOLOGIES CO.,LTD
E0 24 7F HUAWEI TECHNOLOGIES CO.,LTD
E4 68 A3 HUAWEI TECHNOLOGIES CO.,LTD
E8 08 8B Huawei Technologies Co., Ltd
E8 CD 2D Huawei Technologies Co., Ltd
EC 23 3D Huawei Technologies Co., Ltd
F4 55 9C Huawei Technologies Co., Ltd
F4 C7 14 Shenzhen Huawei Communication Technologies Co., Ltd
F4 DC F9 Huawei Technologies Co., Ltd
F8 01 13 Huawei Technologies Co., Ltd
F8 3D FF Huawei Technologies Co., Ltd
F8 4A BF HUAWEI TECHNOLOGIES CO.,LTD
FC 48 EF HUAWEI TECHNOLOGIES CO.,LTD
00 00 F0 SAMSUNG ELECTRONICS CO., LTD.
00 02 78 Samsung Electro-Mechanics Co., Ltd.
00 07 AB Samsung Electronics Co.,Ltd
00 09 18 SAMSUNG TECHWIN CO.,LTD
00 0D AE SAMSUNG HEAVY INDUSTRIES CO., LTD.
00 0D E5 Samsung Thales
00 12 47 Samsung Electronics Co., Ltd.
00 12 FB Samsung Electronics
00 13 77 Samsung Electronics CO., LTD
00 15 99 Samsung Electronics Co., LTD
00 15 B9 Samsung Electronics Co., Ltd.
00 16 32 SAMSUNG ELECTRONICS CO., LTD.
00 16 6B Samsung Electronics
00 16 6C Samsung Electonics Digital Video System Division
00 16 DB Samsung Electronics Co., Ltd.
00 17 C9 Samsung Electronics Co., Ltd.
00 17 D5 Samsung Electronics Co., Ltd.
00 18 AF Samsung Electronics Co., Ltd.
00 1A 8A Samsung Electronics Co., Ltd.
00 1B 98 Samsung Electronics Co., Ltd.
00 1C 43 Samsung Electronics Co.,Ltd
00 1D 25 Samsung Electronics Co.,Ltd
00 1D F6 Samsung Electronics Co.,Ltd
00 1E 7D Samsung Electronics Co.,Ltd
00 1E E1 Samsung Electronics Co.,Ltd
00 1E E2 Samsung Electronics Co.,Ltd
00 1F CC Samsung Electronics Co.,Ltd
00 1F CD Samsung Electronics
00 21 19 Samsung Electro-Mechanics
00 21 4C SAMSUNG ELECTRONICS CO., LTD.
00 21 D1 Samsung Electronics Co.,Ltd
00 21 D2 Samsung Electronics Co.,Ltd
00 23 39 Samsung Electronics
00 23 3A Samsung Electronics Co.,Ltd
00 23 99 VD Division, Samsung Electronics Co.
00 23 C2 SAMSUNG Electronics. Co. LTD
00 23 D6 Samsung Electronics Co.,LTD
00 23 D7 Samsung Electronics
00 24 54 Samsung Electronics CO., LTD
00 24 90 Samsung Electronics Co.,LTD
00 24 91 Samsung Electronics
00 24 E9 Samsung Electronics Co., Ltd., Storage System Division
00 25 38 Samsung Electronics Co., Ltd., Memory Division
00 25 66 Samsung Electronics Co.,Ltd
00 25 67 Samsung Electronics
00 26 37 Samsung Electro-Mechanics
00 26 5D Samsung Electronics
00 26 5F Samsung Electronics Co.,Ltd
00 73 E0 Samsung Electronics Co.,Ltd
00 E0 64 SAMSUNG ELECTRONICS
00 E3 B2 Samsung Electronics Co.,Ltd
04 18 0F Samsung Electronics Co.,Ltd
04 1B BA Samsung Electronics Co.,Ltd
04 FE 31 Samsung Electronics Co.,Ltd
08 08 C2 Samsung Electronics
08 37 3D Samsung Electronics Co.,Ltd
08 D4 2B Samsung Electronics
08 FC 88 Samsung Electronics Co.,Ltd
08 FD 0E Samsung Electronics Co.,Ltd
0C 14 20 Samsung Electronics Co.,Ltd
0C 71 5D Samsung Electronics Co.,Ltd
0C 89 10 Samsung Electronics Co.,LTD
0C DF A4 Samsung Electronics Co.,Ltd
10 1D C0 Samsung Electronics Co.,Ltd
10 3B 59 Samsung Electronics Co.,Ltd
10 77 B1 Samsung Electronics Co.,LTD
10 D5 42 Samsung Electronics Co.,Ltd
14 49 E0 Samsung Electro Mechanics co.,LTD.
14 89 FD Samsung Electronics
14 F4 2A Samsung Electronics
18 1E B0 Samsung Electronics Co.,Ltd
18 26 66 Samsung Electronics Co.,Ltd
18 3F 47 Samsung Electronics Co.,Ltd
18 46 17 Samsung Electronics
18 67 B0 Samsung Electronics Co.,LTD
18 83 31 Samsung Electronics Co.,Ltd
18 E2 C2 Samsung Electronics
1C 5A 3E Samsung Eletronics Co., Ltd (Visual Display Divison)
1C 62 B8 Samsung Electronics Co.,Ltd
1C 66 AA Samsung Electronics
1C AF 05 Samsung Electronics Co.,Ltd
20 13 E0 Samsung Electronics Co.,Ltd
20 64 32 SAMSUNG ELECTRO MECHANICS CO.,LTD.
20 D3 90 Samsung Electronics Co.,Ltd
20 D5 BF Samsung Eletronics Co., Ltd
24 C6 96 Samsung Electronics Co.,Ltd
24 DB ED Samsung Electronics Co.,Ltd
24 F5 AA Samsung Electronics Co.,LTD
28 98 7B Samsung Electronics Co.,Ltd
28 BA B5 Samsung Electronics Co.,Ltd
28 CC 01 Samsung Electronics Co.,Ltd
2C 44 01 Samsung Electronics Co.,Ltd
30 19 66 Samsung Electronics Co.,Ltd
30 CD A7 Samsung Electronics ITS, Printer division
30 D6 C9 Samsung Electronics Co.,Ltd
34 23 BA Samsung Electro Mechanics co.,LTD.
34 31 11 Samsung Electronics Co.,Ltd
34 AA 8B Samsung Electronics Co.,Ltd
34 BE 00 Samsung Electronics Co.,Ltd
34 C3 AC Samsung Electronics
38 01 97 Toshiba Samsung Storage Technolgoy Korea Corporation
38 0A 94 Samsung Electronics Co.,Ltd
38 0B 40 Samsung Electronics Co.,Ltd
38 16 D1 Samsung Electronics Co.,Ltd
38 AA 3C SAMSUNG ELECTRO-MECHANICS
38 EC E4 Samsung Electronics
3C 5A 37 Samsung Electronics
3C 62 00 Samsung electronics CO., LTD
3C 8B FE Samsung Electronics
40 0E 85 Samsung Electro Mechanics co.,LTD.
44 4E 1A Samsung Electronics Co.,Ltd
44 F4 59 Samsung Electronics
48 44 F7 Samsung Electronics Co., LTD
4C 3C 16 Samsung Electronics Co.,Ltd
4C A5 6D Samsung Electronics Co.,Ltd
4C BC A5 Samsung Electronics Co.,Ltd
50 01 BB Samsung Electronics
50 32 75 Samsung Electronics Co.,Ltd
50 56 BF Samsung Electronics Co.,LTD
50 85 69 Samsung Electronics Co.,LTD
50 A4 C8 Samsung Electronics Co.,Ltd
50 B7 C3 Samsung Electronics CO., LTD
50 CC F8 Samsung Electro Mechanics
50 F5 20 Samsung Electronics Co.,Ltd
50 FC 9F Samsung Electronics Co.,Ltd
54 88 0E Samsung Electro Mechanics co., LTD.
54 92 BE Samsung Electronics Co.,Ltd
54 9B 12 Samsung Electronics
58 C3 8B Samsung Electronics
5C 0A 5B SAMSUNG ELECTRO-MECHANICS CO., LTD.
5C 3C 27 Samsung Electronics Co.,Ltd
5C A3 9D SAMSUNG ELECTRO-MECHANICS CO., LTD.
5C E8 EB Samsung Electronics
5C F6 DC Samsung Electronics Co.,LTD
60 6B BD Samsung Electronics Co., LTD
60 A1 0A Samsung Electronics Co.,Ltd
60 D0 A9 Samsung Electronics Co.,Ltd
64 77 91 Samsung Electronics Co.,Ltd
64 B3 10 Samsung Electronics Co.,Ltd
68 48 98 Samsung Electronics Co.,Ltd
68 EB AE Samsung Electronics Co.,Ltd
6C 83 36 Samsung Electronics Co.,Ltd
6C B7 F4 Samsung Electronics Co.,Ltd
6C F3 73 Samsung Electronics Co.,Ltd
70 F9 27 Samsung Electronics
74 45 8A Samsung Electronics Co.,Ltd
74 5F 00 Samsung Semiconductor Inc.
78 1F DB Samsung Electronics Co.,Ltd
78 25 AD SAMSUNG ELECTRONICS CO., LTD.
78 47 1D Samsung Electronics Co.,Ltd
78 52 1A Samsung Electronics Co.,Ltd
78 59 5E Samsung Electronics Co.,Ltd
78 9E D0 Samsung Electronics
78 A8 73 Samsung Electronics Co.,Ltd
78 AB BB Samsung Electronics Co.,LTD
78 D6 F0 Samsung Electro Mechanics
78 F7 BE Samsung Electronics Co.,Ltd
80 18 A7 Samsung Eletronics Co., Ltd
80 57 19 Samsung Electronics Co.,Ltd
84 0B 2D SAMSUNG ELECTRO-MECHANICS CO., LTD
84 25 DB Samsung Electronics Co.,Ltd
84 51 81 Samsung Electronics Co.,Ltd
88 32 9B Samsung Electro Mechanics co.,LTD.
88 9B 39 Samsung Electronics Co.,Ltd
8C 71 F8 Samsung Electronics Co.,Ltd
8C 77 12 Samsung Electronics Co.,Ltd
8C C8 CD Samsung Electronics Co., LTD
90 18 7C Samsung Electro Mechanics co., LTD.
90 F1 AA Samsung Electronics Co.,LTD
94 01 C2 Samsung Electronics Co.,Ltd
94 35 0A Samsung Electronics Co.,Ltd
94 51 03 Samsung Electronics
94 63 D1 Samsung Electronics Co.,Ltd
94 D7 71 Samsung Electronics Co.,Ltd
98 0C 82 Samsung Electro Mechanics
98 52 B1 Samsung Electronics
9C 02 98 Samsung Electronics Co.,Ltd
9C 3A AF Samsung Electronics Co.,Ltd
9C 65 B0 Samsung Electronics Co.,Ltd
9C E6 E7 Samsung Electronics Co.,Ltd
A0 07 98 Samsung Electronics
A0 0B BA SAMSUNG ELECTRO-MECHANICS
A0 21 95 Samsung Electronics Digital Imaging
A0 75 91 Samsung Electronics Co.,Ltd
A0 82 1F Samsung Electronics Co.,Ltd
A4 9A 58 Samsung Electronics Co.,Ltd
A4 EB D3 Samsung Electronics Co.,Ltd
A8 06 00 Samsung Electronics Co.,Ltd
A8 F2 74 Samsung Electronics
AC 36 13 Samsung Electronics Co.,Ltd
B0 C4 E7 Samsung Electronics
B0 D0 9C Samsung Electronics Co.,Ltd
B0 DF 3A Samsung Electronics Co.,Ltd
B0 EC 71 Samsung Electronics Co.,Ltd
B4 07 F9 SAMSUNG ELECTRO-MECHANICS
B4 3A 28 Samsung Electronics Co.,Ltd
B4 62 93 Samsung Electronics Co.,Ltd
B8 5E 7B Samsung Electronics Co.,Ltd
B8 6C E8 Samsung Electronics Co.,Ltd
B8 C6 8E Samsung Electronics Co.,Ltd
B8 D9 CE Samsung Electronics
BC 20 A4 Samsung Electronics
BC 44 86 Samsung Electronics Co.,Ltd
BC 47 60 Samsung Electronics Co.,Ltd
BC 72 B1 Samsung Electronics Co.,Ltd
BC 79 AD Samsung Electronics Co.,Ltd
BC 85 1F Samsung Electronics
BC 8C CD Samsung Electro Mechanics co.,LTD.
BC B1 F3 Samsung Electronics
C0 65 99 Samsung Electronics Co.,Ltd
C4 50 06 Samsung Electronics Co.,Ltd
C4 62 EA Samsung Electronics Co.,Ltd
C4 73 1E Samsung Eletronics Co., Ltd
C4 88 E5 Samsung Electronics Co.,Ltd
C8 14 79 Samsung Electronics Co.,Ltd
C8 19 F7 Samsung Electronics Co.,Ltd
C8 7E 75 Samsung Electronics Co.,Ltd
CC 05 1B Samsung Electronics Co.,Ltd
CC 07 AB Samsung Electronics Co.,Ltd
CC 3A 61 SAMSUNG ELECTRO MECHANICS CO., LTD.
CC F9 E8 Samsung Electronics Co.,Ltd
CC FE 3C Samsung Electronics
D0 17 6A Samsung Electronics Co.,Ltd
D0 22 BE Samsung Electro Mechanics co.,LTD.
D0 66 7B Samsung Electronics Co., LTD
D0 C1 B1 Samsung Electronics Co.,Ltd
D0 DF C7 Samsung Electronics Co.,Ltd
D4 87 D8 Samsung Electronics
D4 88 90 Samsung Electronics Co.,Ltd
D4 E8 B2 Samsung Electronics
D8 31 CF Samsung Electronics Co.,Ltd
D8 57 EF Samsung Electronics
D8 90 E8 Samsung Electronics Co.,Ltd
DC 71 44 Samsung Electro Mechanics
E4 12 1D Samsung Electronics Co.,Ltd
E4 32 CB Samsung Electronics Co.,Ltd
E4 40 E2 Samsung Electronics Co.,Ltd
E4 7C F9 Samsung Electronics Co., LTD
E4 92 FB Samsung Electronics Co.,Ltd
E4 B0 21 Samsung Electronics Co.,Ltd
E4 E0 C5 Samsung Electronics Co., LTD
E8 03 9A Samsung Electronics CO., LTD
E8 11 32 Samsung Electronics CO., LTD
E8 4E 84 Samsung Electronics Co.,Ltd
E8 E5 D6 Samsung Electronics Co.,Ltd
EC E0 9B Samsung electronics CO., LTD
F0 08 F1 Samsung Electronics Co.,Ltd
F0 25 B7 Samsung Electro Mechanics co., LTD.
F0 5A 09 Samsung Electronics Co.,Ltd
F0 6B CA Samsung Electronics Co.,Ltd
F0 72 8C Samsung Electronics Co.,Ltd
F0 E7 7E Samsung Electronics Co.,Ltd
F4 7B 5E Samsung Eletronics Co., Ltd
F4 9F 54 Samsung Electronics
F4 D9 FB Samsung Electronics CO., LTD
F8 D0 BD Samsung Electronics Co.,Ltd
FC 00 12 Toshiba Samsung Storage Technolgoy Korea Corporation
FC 1F 19 SAMSUNG ELECTRO-MECHANICS CO., LTD.
FC A1 3E Samsung Electronics
FC C7 34 Samsung Electronics Co.,Ltd
00 1C 62 LG Electronics Inc
00 1E 75 LG Electronics
00 1F 6B LG Electronics
00 1F E3 LG Electronics
00 21 FB LG Electronics
00 22 A9 LG Electronics Inc
00 24 83 LG Electronics
00 25 E5 LG Electronics Inc
00 26 E2 LG Electronics
00 AA 70 LG Electronics
00 E0 91 LG ELECTRONICS, INC.
10 68 3F LG Electronics
10 F9 6F LG Electronics
20 21 A5 LG Electronics Inc
30 76 6F LG Electronics
3C BD D8 LG ELECTRONICS INC
3C CD 93 LG ELECTRONICS INC
40 B0 FA LG Electronics
58 A2 B5 LG Electronics
6C D0 32 LG Electronics
6C D6 8A LG Electronics Inc
70 05 14 LG Electronics
74 A7 22 LG Electronics
8C 3A E3 LG Electronics
98 93 CC LG Electronics Inc.
98 D6 F7 LG Electronics
A8 16 B2 LG Electronics
A8 92 2C LG Electronics
BC F5 AC LG Electronics
C0 41 F6 LG Electronics Inc
C4 43 8F LG Electronics
CC 2D 8C LG ELECTRONICS INC
CC FA 00 LG Electronics
E8 5B 5B LG ELECTRONICS INC
E8 92 A4 LG Electronics
F0 1C 13 LG Electronics
F8 0C F3 LG Electronics
F8 A9 D0 LG Electronics
00 17 5C SHARP CORPORATION
00 1C EE SHARP Corporation
00 22 F3 SHARP Corporation
08 00 1F SHARP CORPORATION
24 26 42 SHARP Corporation.
34 F6 2D SHARP Corporation
68 79 ED SHARP Corporation
78 1C 5A SHARP Corporation
9C C7 D1 SHARP Corporation
A0 DD E5 SHARP Corporation
BC B1 81 SHARP CORPORATION
00 02 EE Nokia Danmark A/S
00 0B E1 Nokia NET Product Operations
00 0E ED Nokia Danmark A/S
00 0F BB Nokia Siemens Networks GmbH & Co. KG.
00 10 B3 NOKIA MULTIMEDIA TERMINALS
00 11 9F Nokia Danmark A/S
00 12 62 Nokia Danmark A/S
00 13 70 Nokia Danmark A/S
00 13 FD Nokia Danmark A/S
00 14 A7 Nokia Danmark A/S
00 15 2A Nokia GmbH
00 15 A0 Nokia Danmark A/S
00 15 DE Nokia Danmark A/S
00 16 4E Nokia Danmark A/S
00 16 BC Nokia Danmark A/S
00 17 4B Nokia Danmark A/S
00 17 B0 Nokia Danmark A/S
00 18 0F Nokia Danmark A/S
00 18 42 Nokia Danmark A/S
00 18 8D Nokia Danmark A/S
00 18 C5 Nokia Danmark A/S
00 19 2D Nokia Corporation
00 19 4F Nokia Danmark A/S
00 19 79 Nokia Danmark A/S
00 19 B7 Nokia Danmark A/S
00 1A 16 Nokia Danmark A/S
00 1A 89 Nokia Danmark A/S
00 1A DC Nokia Danmark A/S
00 1B 33 Nokia Danmark A/S
00 1B AF Nokia Danmark A/S
00 1B EE Nokia Danmark A/S
00 1C 35 Nokia Danmark A/S
00 1C 9A Nokia Danmark A/S
00 1C D4 Nokia Danmark A/S
00 1C D6 Nokia Danmark A/S
00 1D 3B Nokia Danmark A/S
00 1D 6E Nokia Danmark A/S
00 1D 98 Nokia Danmark A/S
00 1D E9 Nokia Danmark A/S
00 1D FD Nokia Danmark A/S
00 1E 3A Nokia Danmark A/S
00 1E 3B Nokia Danmark A/S
00 1E A3 Nokia Danmark A/S
00 1E A4 Nokia Danmark A/S
00 1F 00 Nokia Danmark A/S
00 1F 01 Nokia Danmark A/S
00 1F 5C Nokia Danmark A/S
00 1F 5D Nokia Danmark A/S
00 1F DE Nokia Danmark A/S
00 1F DF Nokia Danmark A/S
00 21 08 Nokia Danmark A/S
00 21 09 Nokia Danmark A/S
00 21 AA Nokia Danmark A/S
00 21 AB Nokia Danmark A/S
00 21 FC Nokia Danmark A/S
00 21 FE Nokia Danmark A/S
00 22 65 Nokia Danmark A/S
00 22 66 Nokia Danmark A/S
00 22 FC Nokia Danmark A/S
00 22 FD Nokia Danmark A/S
00 23 B4 Nokia Danmark A/S
00 24 03 Nokia Danmark A/S
00 24 04 Nokia Danmark A/S
00 24 7C Nokia Danmark A/S
00 24 7D Nokia Danmark A/S
00 25 47 Nokia Danmark A/S
00 25 48 Nokia Danmark A/S
00 25 CF Nokia Danmark A/S
00 25 D0 Nokia Danmark A/S
00 26 68 Nokia Danmark A/S
00 26 69 Nokia Danmark A/S
00 26 CC Nokia Danmark A/S
00 40 43 Nokia Siemens Networks GmbH & Co. KG.
00 BD 3A Nokia Corporation
00 E0 03 NOKIA WIRELESS BUSINESS COMMUN
04 5A 95 Nokia Corporation
04 A8 2A Nokia Corporation
0C C6 6A Nokia Corporation
0C DD EF Nokia Corporation
10 F9 EE Nokia Corporation
14 36 05 Nokia Corporation
18 14 56 Nokia Corporation
18 86 AC Nokia Danmark A/S
20 D6 07 Nokia Corporation
28 47 AA Nokia Corporation
28 D1 AF Nokia Corporation
2C 5A 05 Nokia Corporation
2C CC 15 Nokia Corporation
2C D2 E7 Nokia Corporation
30 38 55 Nokia Corporation
34 7E 39 Nokia Danmark A/S
34 C8 03 Nokia Corporation
38 19 2F Nokia Corporation
3C 25 D7 Nokia Corporation
3C 36 3D Nokia Corporation
3C C2 43 Nokia Corporation
3C F7 2A Nokia Corporation
40 7A 80 Nokia Corporation
48 DC FB Nokia Corporation
4C 25 78 Nokia Corporation
4C 7F 62 Nokia Corporation
50 2D 1D Nokia Corporation
54 44 08 Nokia Corporation
54 79 75 Nokia Corporation
5C 57 C8 Nokia Corporation
6C 9B 02 Nokia Corporation
6C A7 80 Nokia Corporation
6C E9 07 Nokia Corporation
70 8D 09 Nokia Corporation
78 2E EF Nokia Corporation
78 92 3E Nokia Corporation
78 CA 04 Nokia Corporation
80 50 1B Nokia Corporation
88 44 F6 Nokia Corporation
90 CF 15 Nokia Corporation
94 00 70 Nokia Corporation
94 20 53 Nokia Corporation
94 3A F0 Nokia Corporation
9C 18 74 Nokia Danmark A/S
9C 4A 7B Nokia Corporation
9C CA D9 Nokia Corporation
A0 4E 04 Nokia Corporation
A0 71 A9 Nokia Corporation
A0 F4 19 Nokia Corporation
A4 77 60 Nokia Corporation
A4 81 EE Nokia Corporation
A4 E7 31 Nokia Corporation
A8 44 81 Nokia Corporation
A8 7B 39 Nokia Corporation
A8 7E 33 Nokia Danmark A/S
A8 E0 18 Nokia Corporation
AC 81 F3 Nokia Corporation
AC 93 2F Nokia Corporation
B0 35 8D Nokia Corporation
B0 5C E5 Nokia Corporation
BC C6 DB Nokia Corporation
C0 38 F9 Nokia Danmark A/S
C0 64 C6 Nokia Corporation
C8 3D 97 Nokia Corporation
C8 97 9F Nokia Corporation
C8 D1 0B Nokia Corporation
C8 DF 7C Nokia Corporation
CC 89 FD Nokia Corporation
D0 DB 32 Nokia Corporation
D4 5D 42 Nokia Corporation
D4 C1 FC Nokia Corporation
D4 CB AF Nokia Corporation
D8 2A 7E Nokia Corporation
D8 75 33 Nokia Corporation
DC 3E F8 Nokia Corporation
DC 9F A4 Nokia Corporation
DC C7 93 Nokia Corporation
E0 A6 70 Nokia Corporation
E4 EC 10 Nokia Corporation
E8 CB A1 Nokia Corporation
EC 9B 5B Nokia Corporation
EC F3 5B Nokia Corporation
F4 8E 09 Nokia Corporation
F4 F5 A5 Nokia corporation
F8 5F 2A Nokia Corporation
FC 92 3B Nokia Corporation
FC E5 57 Nokia Corporation


シャープ
ｿﾆｰﾓﾊﾞｲﾙ
ﾊﾟﾅｿﾆｯｸ
富士通東芝
富士通
東芝
京セラ
NEC
カシオ
Covia
サムスン
LG
HTC
Huawei
ZTE
ASUS
Acer
パンテック
BlackBerry
アップル
DELL
モトローラ
ポラロイド
** Tue 15 Sep 2015 06:50:16 AM JST
(display-monitor-attributes-list)
(((geometry 1280 0 1680 1050) (workarea 1280 0 1680 1050) (mm-size 474 303) (frames #<frame emacs@qu 0x8a82a50>) (source . "Gdk")) ((geometry 0 0 1280 1024) (workarea 0 0 1280 1024) (mm-size 361 295) (frames) (source . "Gdk")))

(frame-monitor-attributes)
((geometry 1280 0 1680 1050) (workarea 1280 0 1680 1050) (mm-size 474 303) (frames #<frame emacs@qu 0x8a82a50>) (source . "Gdk"))



(defun frame-in-main-monitor-p () ;[2015/09/15]
  ""
  (equal (main-frame-monitor-attributes) (frame-monitor-attributes)))


(frame-in-main-monitor-p)
t

nil
(and (<= 24 emacs-major-version) (<= 4 emacs-minor-version))
nil
(emacs-version)
"GNU Emacs 25.0.50.1 (i686-pc-linux-gnu, GTK+ Version 3.14.5)
 of 2015-09-13"

nil

t

nil

emacs-version
"25.0.50.1"
emacs-minor-version
0


(require 'framemove "framemove")

default-frame-alist
(add-to-list )
(add-to-list 'default-frame-alist '(width . 100))
((width . 100) (width . 80))

((width . 80))

(x-display-pixel-width)
2960
(set-frame-position (selected-frame) 100 200)
t
(main-monitor-geometry)
(1280 0 1680 1050)
(nth 0 (main-monitor-geometry))
1280

(1280 0 1680 1050)

(set-frame-parameter nil 'fullscreen nil)
nil
(set-frame-parameter nil 'fullscreen-restore 'maximized)
nil
(set-frame-parameter nil 'fullscreen 'maximized)
nil

nil


(get-other-frame)
frames


nil
(caddar (frame-monitor-attributes))
0
(cadddr (frame-monitor-attributes))
(frames #<frame emacs@qu 0x8a82a50>)
(main-frame-monitor-attributes)
((geometry 1280 0 1680 1050) (workarea 1280 0 1680 1050) (mm-size 474 303) (frames) (source . "Gdk"))

(cdar (main-frame-monitor-attributes))
(1280 0 1680 1050)

(geometry 1280 0 1680 1050)

(frames #<frame emacs@qu 0x8a82a50>)

((frames #<frame emacs@qu 0x8a82a50>) (source . "Gdk"))

((mm-size 474 303) (frames #<frame emacs@qu 0x8a82a50>) (source . "Gdk"))

((geometry 1280 0 1680 1050) (workarea 1280 0 1680 1050) (mm-size 474 303) (frames #<frame emacs@qu 0x8a82a50>) (source . "Gdk"))

(0 1680 1050)

1280


(1280 0 1680 1050)

(workarea 1280 0 1680 1050)

geometry

(geometry 1280 0 1680 1050)

((geometry 1280 0 1680 1050) (workarea 1280 0 1680 1050) (mm-size 474 303) (frames #<frame emacs@qu 0x8a82a50>) (source . "Gdk"))

** Tue 15 Sep 2015 12:55:03 PM JST
(update-file-autoloads)

generated-autoload-file
(setq inhibit-read-only t)

generateted-autoload-file
"/opt/emacs25/share/emacs/25.0.50/lisp/loaddefs.el"


(setq generated-autoload-file "/opt/emacs25/share/emacs/25.0.50/lisp/loaddefs.el")

(update-directory-autoloads "/opt/emacs25/share/emacs/25.0.50/lisp"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/calc"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/calendar"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/cedet"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/emacs-lisp"
                            ;; "/opt/emacs25/share/emacs/25.0.50/lisp/emacs-parallel"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/emulation"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/erc"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/eshell"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/gnus"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/international"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/language"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/leim"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/mail"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/mh-e"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/net"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/nxml"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/obsolete"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/org"
                            ;; "/opt/emacs25/share/emacs/25.0.50/lisp/play"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/progmodes"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/term"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/textmodes"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/url"
                            "/opt/emacs25/share/emacs/25.0.50/lisp/vc")


(setq debug-on-error t)
t



(eieio-make-class-predicate)
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            
                            




                            
                            )
** Wed 16 Sep 2015 11:00:11 PM JST
auto-mode-alist
inhibit-read-only
nil


(define-derived-mode sh-mode prog-mode "Shell-script"
  "Major mode for editing shell scripts.
This mode works for many shells, since they all have roughly the same syntax,
as far as commands, arguments, variables, pipes, comments etc. are concerned.
Unless the file's magic number indicates the shell, your usual shell is
assumed.  Since filenames rarely give a clue, they are not further analyzed.

This mode adapts to the variations between shells (see `sh-set-shell') by
means of an inheritance based feature lookup (see `sh-feature').  This
mechanism applies to all variables (including skeletons) that pertain to
shell-specific features.

The default style of this mode is that of Rosenblatt's Korn shell book.
The syntax of the statements varies with the shell being used.  The
following commands are available, based on the current shell's syntax:
\\<sh-mode-map>
\\[sh-case]	 case statement
\\[sh-for]	 for loop
\\[sh-function]	 function definition
\\[sh-if]	 if statement
\\[sh-indexed-loop]	 indexed loop from 1 to n
\\[sh-while-getopts]	 while getopts loop
\\[sh-repeat]	 repeat loop
\\[sh-select]	 select loop
\\[sh-until]	 until loop
\\[sh-while]	 while loop

For sh and rc shells indentation commands are:
\\[sh-show-indent]	Show the variable controlling this line's indentation.
\\[sh-set-indent]	Set then variable controlling this line's indentation.
\\[sh-learn-line-indent]	Change the indentation variable so this line
would indent to the way it currently is.
\\[sh-learn-buffer-indent]  Set the indentation variables so the
buffer indents as it currently is indented.


\\[backward-delete-char-untabify]	 Delete backward one position, even if it was a tab.
\\[sh-end-of-command]	 Go to end of successive commands.
\\[sh-beginning-of-command]	 Go to beginning of successive commands.
\\[sh-set-shell]	 Set this buffer's shell, and maybe its magic number.
\\[sh-execute-region]	 Have optional header and region be executed in a subshell.

`sh-electric-here-document-mode' controls whether insertion of two
unquoted < insert a here document.

If you generally program a shell different from your login shell you can
set `sh-shell-file' accordingly.  If your shell's file name doesn't correctly
indicate what shell it is use `sh-alias-alist' to translate.

If your shell gives error messages with line numbers, you can use \\[executable-interpret]
with your script for an edit-interpret-debug cycle."
  (make-local-variable 'sh-shell-file)
  (make-local-variable 'sh-shell)
  
  (setq-local skeleton-pair-default-alist
              sh-skeleton-pair-default-alist)
  (setq-local skeleton-end-hook
              (lambda () (or (eolp) (newline) (indent-relative))))
  
  (setq-local paragraph-start (concat page-delimiter "\\|$"))
  (setq-local paragraph-separate (concat paragraph-start "\\|#!/"))
  (setq-local comment-start "# ")
  (setq-local comment-start-skip "#+[\t ]*")
  (setq-local local-abbrev-table sh-mode-abbrev-table)
  (setq-local comint-dynamic-complete-functions
              sh-dynamic-complete-functions)
  (add-hook 'completion-at-point-functions 'comint-completion-at-point nil t)
  ;; we can't look if previous line ended with `\'
  (setq-local comint-prompt-regexp "^[ \t]*")
  (setq-local imenu-case-fold-search nil)
  (setq font-lock-defaults
        `((sh-font-lock-keywords
           sh-font-lock-keywords-1 sh-font-lock-keywords-2)
          nil nil
          ((?/ . "w") (?~ . "w") (?. . "w") (?- . "w") (?_ . "w")) nil
          (font-lock-syntactic-face-function
           . sh-font-lock-syntactic-face-function)))
  (setq-local syntax-propertize-function #'sh-syntax-propertize-function)
  (add-hook 'syntax-propertize-extend-region-functions
            #'syntax-propertize-multiline 'append 'local)
  (sh-electric-here-document-mode 1)
  (setq-local skeleton-pair-alist '((?` _ ?`)))
  (setq-local skeleton-pair-filter-function 'sh-quoted-p)
  (setq-local skeleton-further-elements
              '((< '(- (min sh-indentation (current-column))))))
  (setq-local skeleton-filter-function 'sh-feature)
  (setq-local skeleton-newline-indent-rigidly t)
  (setq-local defun-prompt-regexp
              (concat "^\\(function[ \t]\\|[[:alnum:]]+[ \t]+()[ \t]+\\)"))
  (setq-local add-log-current-defun-function #'sh-current-defun-name)
  (add-hook 'completion-at-point-functions
            #'sh-completion-at-point-function nil t)
  ;; Parse or insert magic number for exec, and set all variables depending
  ;; on the shell thus determined.
  (sh-set-shell
   (cond ((save-excursion
            (goto-char (point-min))
            (looking-at "#![ \t]?\\([^ \t\n]*/bin/env[ \t]\\)?\\([^ \t\n]+\\)"))
          (match-string 2))
         ((not buffer-file-name) sh-shell-file)
         ;; Checks that use `buffer-file-name' follow.
         ((string-match "\\.m?spec\\'" buffer-file-name) "rpm")
         ((string-match "[.]sh\\>"     buffer-file-name) "sh")
         ((string-match "[.]bash\\>"   buffer-file-name) "bash")
         ((string-match "[.]ksh\\>"    buffer-file-name) "ksh")
         ((string-match "[.]t?csh\\(rc\\)?\\>" buffer-file-name) "csh")
         ((equal (file-name-nondirectory buffer-file-name) ".profile") "sh")
         (t sh-shell-file))
   nil nil)
  (add-hook 'hack-local-variables-hook
            #'sh-after-hack-local-variables nil t))

** Thu 17 Sep 2015 10:53:06 AM JST
(require 'systemd "systemd" 'noerr)



(frame-list)
(#<frame emacs@qu 0x8a82650>)
(length (frame-list))
1
(process-id)
(emacs-pid)
1090

(process-name )

(mapcon (lambda (pid) (process-name pid)) (list-system-processes ))

(mapc
 (lambda (pid)
   (process-name pid)
   )
 (list-system-processes))

(find "emacs"
      (mapcar (lambda (pid) (cdr (assoc 'comm (process-attributes pid))))
              (list-system-processes)) :test 'string=)
"emacs"


"emacs"

(-count (lambda (name) (string= name "emacs"))
        (mapcar (lambda (pid) (cdr (assoc 'comm (process-attributes pid))))
                (list-system-processes)))
2

1

1

t


("emacs" "uim-candwin-gtk" "chrome" "cat" "cat" "chrome" "nacl_helper" "chrome" "chrome" "chrome" "chrome" "chrome" "chrome" "chrome" "chrome" "chrome" "chrome" "chrome" "chrome" "zsh" "kworker/u4:1" "kworker/0:4" "emacsclient" "chrome" "chrome" "kworker/0:3" "chrome" "kworker/u4:0" "kworker/0:1" "emacs")

(load "dash")
t
(-count )

nil

("emacs" "uim-candwin-gtk" "chrome" "cat" "cat" "chrome" "nacl_helper" "chrome" "chrome" "chrome" "chrome" "chrome" ...)



nil

("systemd" "kthreadd" "ksoftirqd/0" "kworker/0:0" "kworker/0:0H" "rcu_sched" "rcu_bh" "migration/0" "migration/1" "ksoftirqd/1" "kworker/1:0H" "khelper" "kdevtmpfs" "netns" "perf" "writeback" "khugepaged" "crypto" "kintegrityd" "bioset" "kblockd" "ata_sff" "cfg80211" "kworker/1:1" "kswapd0" "fsnotify_mark" "kthrotld" "acpi_thermal_pm" "scsi_eh_0" "scsi_tmf_0" "scsi_eh_1" "scsi_tmf_1" "zd1211rw" "kworker/1:3" "kpsmoused" "w1_bus_master1" "kworker/0:2" "scsi_eh_2" "scsi_tmf_2" "usb-storage" "deferwq" "kworker/1:1H" "kworker/0:1H" "kworker/u4:4" "kdmflush" "bioset" "kcryptd_io" "kcryptd" "dmcrypt_write" "bioset" "jbd2/dm-0-8" "ext4-rsv-conver" "kauditd" "systemd-journal" "systemd-udevd" "kworker/0:5" "kjournald" "kdmflush" "bioset" "kcryptd_io" "kcryptd" "dmcrypt_write" "bioset" "NetworkManager" "systemd-logind" "dbus-daemon" "mount.ntfs" "rsyslogd" "acpid" "login" "polkitd" "python" "wpa_supplicant" "systemd" "(sd-pam)" "zsh" "ssh-agent" "kdmflush" "bioset" "kcryptd_io" "kcryptd" "dmcrypt_write" "bioset" "jbd2/dm-2-8" "ext4-rsv-conver" "startx" "xinit" "Xorg" "sh" "dbus-launch" "dbus-daemon" "dconf-service" "dbus-launch" "dbus-daemon" "uim-xim" "uim-toolbar" "uim-helper-serv" "xfce4-session" "xfconfd" "gpg-agent" "xfwm4" "at-spi-bus-laun" "dbus-daemon" "at-spi2-registr" "gvfsd" "Thunar" "xfce4-panel" "xfsettingsd" "xfdesktop" "xfce4-terminal" "nm-applet" "panel-17-system" "parcellite" "panel-3-systray" "panel-15-action" "upowerd" "gconfd-2" "xfce4-volumed" "gnome-pty-helpe" "zsh" "gvfs-udisks2-vo" "udisksd" "python" "zsh" "emacs" "uim-candwin-gtk" "chrome" "cat" "cat" "chrome" "nacl_helper" "chrome" "chrome" "chrome" "chrome" "chrome" "chrome" "chrome" "chrome" "chrome" "chrome" "chrome" "chrome" "zsh" "kworker/u4:1" "kworker/0:4" "emacsclient" "chrome" "chrome" "kworker/0:3" "chrome" "kworker/u4:0" "kworker/0:1" "kworker/u4:2")



(process-name "163")

(system-)

(process-list)
(#<process terminal<1>> #<process edit-server> #<process server>)
(process-filter )
(list-system-processes )
(1 2 3 4 5 6 7 8 9 10 11 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 52 53 55 57 58 59 60 61 64 65 66 67 68 69 70 71 111 112 141 163 164 165 166 167 168 190 191 227 233 242 244 271 483 504 505 506 507 508 509 631 632 633 634 635 636 646 650 655 658 661 663 665 710 753 755 757 758 759 760 764 765 769 791 792 801 827 828 831 876 877 899 900 911 922 925 929 930 933 937 940 943 949 951 952 955 956 970 971 977 978 979 993 997 1014 1021 1028 1043 1045 1073 1074 1090 1114 1140 1147 1148 1150 1151 1170 1201 1208 1213 1218 1221 1224 1227 1232 1237 1264 1303 1372 1996)

nil

** Fri 18 Sep 2015 09:23:36 PM JST
rsync -av --delete --force --exclude-from=/root/.zsh/ni_rsync_exclude.list / /media/usb/
** Fri 25 Sep 2015 10:47:51 AM JST
(hotstring-mode)
(hots:)
** Wed 30 Sep 2015 11:02:54 AM JST
magit-toplevel

(setq e2wm:c-magit-recipe
      '(| (:left-size-ratio 0.3)
          (- (:upper-size-ratio 0.6)
             status branches)
          (| (:left-size-ratio 0.2)
             (- (:upper-size-ratio 0.5)
                logs
                (- (:upper-size-ratio 0.5)
                   main sub))
             diff)))

(setq e2wm:c-magit-winfo
      '((:name status   :plugin magit-status)
        (:name branches :plugin magit-branches)
        (:name logs     :plugin magit-logs)
        (:name diff     :buffer "*magit-diff*" :default-hide t)
        (:name main)
        (:name sub      :buffer nil :default-hide t)))

(setf (e2wm:$pst-class-main (e2wm:pst-class-get 'magit)) 'status)

(defadvice e2wm:dp-magit-popup (around ~e2wm:mng-diff activate)
  (if (string= (buffer-name (ad-get-arg 0)) "*magit-diff*")
      (e2wm:with-advice
       (e2wm:pst-buffer-set 'diff (ad-get-arg 0) t t))
    ad-do-it))

(defun e2wm:def-plugin-magit-status (frame wm winfo)
  (e2wm:def-plugin-vcs-with-window
   'magit-toplevel
   (lambda (dir topdir)
     (magit-status (file-name-as-directory dir)))
   (lambda () (e2wm:history-get-main-buffer))))

(defun e2wm:def-plugin-magit-branches (frame wm winfo)
  (e2wm:def-plugin-vcs-with-window
   'magit-toplevel
   (if (fboundp 'magit-branch-manager)
       (lambda (dir topdir) (magit-branch-manager))
     (lambda (dir topdir) (magit-show-branches)))
   (lambda () (e2wm:def-plugin-vcs-na-buffer "Git N/A"))))

(defun e2wm:def-plugin-magit-logs (frame wm winfo)
  (e2wm:def-plugin-vcs-with-window
   'magit-toplevel
   (lambda (dir topdir)
     (magit-log nil))
   (lambda () (e2wm:def-plugin-vcs-na-buffer "Git N/A"))))

(defun e2wm:start-direct-pycode () ;[2015/09/30]
  ""
  (interactive)
  (when (not (and (boundp 'e2wm:pst-minor-mode) e2wm:pst-minor-mode))
    (e2wm:start-management)
    (e2wm:dp-pycode)))
