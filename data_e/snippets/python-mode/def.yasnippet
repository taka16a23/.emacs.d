# -*- mode: snippet; coding: utf-8 -*-
# name: def
# key: def
# 'r' charactor before the first triple-quote for doctest
# don't want escape sequences - e.g '\n'
# condition: (not (py:at-string|comment-p))
# contributor: Orestis Markou
# contributor: Yasser González Fernández <yglez@uh.cu>
# --
def ${1:name$(replace-regexp-in-string \"[[:punct:][:blank:]]\" \"_\" yas-text)}(`(cond ((save-excursion
  (re-search-backward "^[ ]+def[ ]" nil 'noerr)
  (if (py-beginning-of-buffer-p)
      nil
      (previous-line 1)
      (beginning-of-line)
      (looking-at "^[ ]+@\\(classmethod\\|staticmethod\\)")
      )) "cls, ")
      ((py-in-class-block-p) "self, ")
      (t ""))`${1:$(let*
    ((namemap \'((\"__add__\"     . \"other, \")
                (\"__and__\"     . \"other, \")
                (\"__cmp__\"     . \"other, \")
                (\"__coerce__\"     . \"other, \")
                (\"__contains__\"     . \"el, \")
                (\"__delattr__\"     . \"name, \")
                (\"__delete__\"     . \"instance, \")
                (\"__delitem__\"     . \"key, \")
                (\"__divmod__\"     . \"other, \")
                (\"__div__\"     . \"other, \")
                (\"__eq__\"     . \"other, \")
                (\"__exit__\"     . \"type, value, traceback, \")
                (\"__floordiv__\"     . \"other, \")
                (\"__getattribute__\"     . \"name, \")
                (\"__getattr__\" . \"name, \")
                (\"__getitem__\" . \"key, \")
                (\"__get__\"     . \"instance, owner, \")               
                (\"__ge__\"     . \"other, \")
                (\"__gt__\"     . \"other, \")
                (\"__iadd__\"     . \"other, \")
                (\"__iand__\"     . \"other, \")
                (\"__idiv__\"     . \"other, \")
                (\"__ifloordiv__\"     . \"other, \")
                (\"__ilshift__\"     . \"other, \")
                (\"__imod__\"     . \"other, \")
                (\"__imul__\"     . \"other, \")
                (\"__ior__\"     . \"other, \")
                (\"__ipow__\"     . \"other, modulo\")
                (\"__irshift__\"     . \"other, \")
                (\"__isub__\"     . \"other, \")
                (\"__iturediv__\"     . \"other, \")
                (\"__rxor__\"     . \"other, \")
                (\"__le__\"     . \"other, \")
                (\"__lshift__\"     . \"other, \")
                (\"__lt__\"     . \"other, \")
                (\"__mod__\"     . \"other, \")
                (\"__mul__\"     . \"other, \")
                (\"__new__\"     . \"cls, name, bases, dict, \")
                (\"__ne__\"     . \"other, \")
                (\"__or__\"     . \"other, \")
                (\"__pow__\"     . \"other, modulo\")
                (\"__radd__\"     . \"other, \")
                (\"__rand__\"     . \"other, \")
                (\"__rdivmod__\"     . \"other, \")
                (\"__rdiv__\"     . \"other, \")
                (\"__rfloordiv__\"     . \"other, \")
                (\"__rlshift__\"     . \"other, \")
                (\"__rmod__\"     . \"other, \")
                (\"__rmul__\"     . \"other, \")
                (\"__ror__\"     . \"other, \")
                (\"__rpow__\"     . \"other, modulo\")
                (\"__rrshift__\"     . \"other, \")
                (\"__rshift__\"     . \"other, \")
                (\"__rsub__\"     . \"other, \")
                (\"__rtruediv__\"     . \"other, \")
                (\"__rxor__\"     . \"other, \")
                (\"__setattr__\"     . \"name, value, \")
                (\"__setitem__\"     . \"key, value, \")
                (\"__set__\"     . \"instance, value, \")
                (\"__sub__\"     . \"other, \")
                ))
               (keys (maplist (lambda (lis) (caar lis)) namemap))
               (result \"\")
               done)
               (when (member yas-text keys)
                   (while (and namemap (not done))
                         (if (string= yas-text (caar namemap))
                                   (progn (setq done t)
                                          (setq result (cdr (car namemap))))
                           (setq namemap (cdr namemap)))))
                result)}$2):
    r\"\"\"SUMMARY

    $1($2)
    ${2:$
      (let*
        ((indent
            (concat \"\n\" (make-string (current-column) 32)))
           (args
            (mapconcat
             \'(lambda (x)
                (if (not (string= (nth 0 x) \"\"))
                    (concat \"- \" (char-to-string 96) (nth 0 x)
                            (char-to-string 96) \":\")))
             (mapcar
              \'(lambda (x)
                 (mapcar
                  \'(lambda (x)
                     (replace-regexp-in-string \"*\" \"\"
                      (replace-regexp-in-string \"^[[:blank:]]*\" \"\" x)))
                  x))
              (mapcar \'(lambda (x) (split-string x \"=\"))
                      (split-string yas-text \",\")))
             indent)))
      (if (string= args \"\")
          (concat indent \"@Return:\n\" indent \"@Error:\" indent (make-string 3 34))
        (mapconcat
         \'identity
         (list \"\" \"@Arguments:\" args (concat indent \"@Return:\n\" indent \"@Error:\")
         (make-string 3 34))
         indent)))
    }
    ${1:$(let*
    ((namemap \'((\"__abs__\"     . \"return \")
                (\"__add__\"     . \"return \")
                (\"__and__\"     . \"return \")
                (\"__cmp__\"     . \"return \")
                (\"__coerce__\"     . \"return \")
                (\"__complex__\"     . \"return, \")
                (\"__contains__\"     . \"return, \")
                (\"__delete__\"     . \"instance, \")
                (\"__divmod__\"     . \"return \")
                (\"__div__\"     . \"return \")
                (\"__eq__\"     . \"return \")
                (\"__float__\"     . \"return, \")  
                (\"__floordiv__\"     . \"return \")
                (\"__getattribute__\"     . \"return \")
                (\"__getattr__\" . \"return \")
                (\"__getitem__\" . \"return \")
                (\"__ge__\"     . \"return \")
                (\"__gt__\"     . \"return \")
                (\"__hash__\"     . \"return \")
                (\"__hex__\"     . \"return \")
                (\"__iadd__\"     . \"return \")
                (\"__iand__\"     . \"return \")
                (\"__idiv__\"     . \"return \")
                (\"__ifloordiv__\"     . \"return \")
                (\"__ilshift__\"     . \"return \")
                (\"__imod__\"     . \"return \")
                (\"__imul__\"     . \"return \")
                (\"__index__\"     . \"return \")
                (\"__int__\"     . \"return \")
                (\"__invert__\"     . \"return \")
                (\"__ior__\"     . \"return \")
                (\"__ipow__\"     . \"return \")
                (\"__irshift__\"     . \"return \")
                (\"__len__\"     . \"return \")
                (\"__long__\"     . \"return \")   
                (\"__isub__\"     . \"return \")
                (\"__iturediv__\"     . \"return \")
                (\"__rxor__\"     . \"return \")
                (\"__le__\"     . \"return \")
                (\"__lshift__\"     . \"return \")
                (\"__lt__\"     . \"return \")
                (\"__mod__\"     . \"return \")
                (\"__mul__\"     . \"return \")
                (\"__new__\"     . \"cls, name, bases, dict, \")
                (\"__ne__\"     . \"return \")
                (\"__neg__\"     . \"return \")
                (\"__nonzero__\"     . \"return \")
                (\"__oct__\"     . \"return \")
                (\"__pos__\"     . \"return \")
                (\"__or__\"     . \"return \")
                (\"__pow__\"     . \"return \")
                (\"__repr__\"     . \"return \")
                (\"__radd__\"     . \"return \")
                (\"__rand__\"     . \"return \")
                (\"__rdivmod__\"     . \"return \")
                (\"__rdiv__\"     . \"return \")
                (\"__rfloordiv__\"     . \"return \")
                (\"__rlshift__\"     . \"return \")
                (\"__rmod__\"     . \"return \")
                (\"__rmul__\"     . \"return \")
                (\"__ror__\"     . \"return \")
                (\"__rpow__\"     . \"return modulo\")
                (\"__rrshift__\"     . \"return \")
                (\"__rshift__\"     . \"return \")
                (\"__rsub__\"     . \"return \")
                (\"__rtruediv__\"     . \"return \")
                (\"__rxor__\"     . \"return \")
                (\"__sub__\"     . \"return \")
                (\"__str__\"     . \"return \")
                (\"__unicode__\"     . \"return \")
                ))
               (keys (maplist (lambda (lis) (caar lis)) namemap))
               (result \"\")
               done)
               (when (member yas-text keys)
                   (while (and namemap (not done))
                         (if (string= yas-text (caar namemap))
                                   (progn (setq done t)
                                          (setq result (cdr (car namemap))))
                           (setq namemap (cdr namemap)))))
                result)}${1:$(cond ((not (eq (string-match \"^get\" yas-text) nil)) \"return \")
      (t \"\"))}$0
